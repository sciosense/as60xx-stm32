
AS60xx_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800c000  0800c000  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c834  0800c834  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c834  0800c834  0000d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c83c  0800c83c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c83c  0800c83c  0000d83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c844  0800c844  0000d844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c84c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001d4  0800ca20  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800ca20  0000e8ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1aa  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8e  00000000  00000000  000293b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4c  00000000  00000000  0002d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b37  00000000  00000000  0002deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142e4  00000000  00000000  000609eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001380d7  00000000  00000000  00074ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000594c  00000000  00000000  001acdec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001b2738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bfe4 	.word	0x0800bfe4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800bfe4 	.word	0x0800bfe4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <_ZL40As60xx_CalculateDelayWindowRegisterValuef>:
    }
    return as60xx->CR[idx];
}

static inline uint32_t As60xx_CalculateDelayWindowRegisterValue(float delayWindowNs)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]

    if ( delayWindowNs < 0 )
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	d502      	bpl.n	8001096 <_ZL40As60xx_CalculateDelayWindowRegisterValuef+0x1e>
    {
      delayWindowNs = 0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
    }
    
    return (((uint32_t)( delayWindowNs / AS60XX_DELAY_WINDOW_LSB_TO_NS )) & AS60XX_D1_USM_RLS_DLY_U_Msk);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fa5a 	bl	8000550 <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_ZL40As60xx_CalculateDelayWindowRegisterValuef+0x48>)
 80010a2:	f7ff fbd7 	bl	8000854 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd7f 	bl	8000bb0 <__aeabi_d2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	401f4000 	.word	0x401f4000
 80010c4:	00000000 	.word	0x00000000

080010c8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef>:

static inline uint32_t As60xx_CalculateFirstHitLevelRegisterValue(float thresholdMv)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
    if ( thresholdMv > AS60XX_MAX_ZERO_CROSS_DETECTION_VALUE_MV )
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001130 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x68>
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd01      	ble.n	80010e8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x20>
    {
      thresholdMv = AS60XX_MAX_ZERO_CROSS_DETECTION_VALUE_MV;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x6c>)
 80010e6:	607b      	str	r3, [r7, #4]
    }

    if ( thresholdMv < 0 )
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d502      	bpl.n	80010fc <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x34>
    {
      thresholdMv = 0;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
    }
    
    return(uint32_t)( thresholdMv / AS60XX_ZERO_CROSS_DETECTION_LSB_TO_MV );
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fa27 	bl	8000550 <__aeabi_f2d>
 8001102:	a309      	add	r3, pc, #36	@ (adr r3, 8001128 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x60>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fba4 	bl	8000854 <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd4c 	bl	8000bb0 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	c28f5c29 	.word	0xc28f5c29
 800112c:	3fec28f5 	.word	0x3fec28f5
 8001130:	43480000 	.word	0x43480000
 8001134:	43480000 	.word	0x43480000

08001138 <AS60xx_Example_Setup>:

static Result SerialPrint(const char str[]);
void SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(AS60xx* as60xx);

extern "C" void AS60xx_Example_Setup(UART_HandleTypeDef *uart, SPI_HandleTypeDef *spi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    huart = *uart;
 8001142:	4a3b      	ldr	r2, [pc, #236]	@ (8001230 <AS60xx_Example_Setup+0xf8>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	2394      	movs	r3, #148	@ 0x94
 800114c:	461a      	mov	r2, r3
 800114e:	f007 fca4 	bl	8008a9a <memcpy>
    /* Wait to allow terminal software to capture the output */
    HAL_Delay(2000);
 8001152:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001156:	f002 ff3f 	bl	8003fd8 <HAL_Delay>

    SerialPrint("Starting AS60xx 01_AS60xx_Example_Basic_Ultrasound demo on STM32...\n");
 800115a:	4836      	ldr	r0, [pc, #216]	@ (8001234 <AS60xx_Example_Setup+0xfc>)
 800115c:	f000 fb84 	bl	8001868 <_ZL11SerialPrintPKc>

    HAL_Delay(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 8001160:	205e      	movs	r0, #94	@ 0x5e
 8001162:	f002 ff39 	bl	8003fd8 <HAL_Delay>

    as60xx.begin(spi, SSN_Pin, SSN_GPIO_Port);
 8001166:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <AS60xx_Example_Setup+0x100>)
 8001168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116c:	6839      	ldr	r1, [r7, #0]
 800116e:	4833      	ldr	r0, [pc, #204]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001170:	f002 f8ee 	bl	8003350 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>

    if( as60xx.init() )
 8001174:	4831      	ldr	r0, [pc, #196]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001176:	f002 f96c 	bl	8003452 <_ZN6AS60xx4initEv>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <AS60xx_Example_Setup+0x50>
    {
        SerialPrint("AS60xx initialized properly\n");
 8001180:	482f      	ldr	r0, [pc, #188]	@ (8001240 <AS60xx_Example_Setup+0x108>)
 8001182:	f000 fb71 	bl	8001868 <_ZL11SerialPrintPKc>
 8001186:	e002      	b.n	800118e <AS60xx_Example_Setup+0x56>
    }
    else
    {
        SerialPrint("AS60xx initialization failed\n");
 8001188:	482e      	ldr	r0, [pc, #184]	@ (8001244 <AS60xx_Example_Setup+0x10c>)
 800118a:	f000 fb6d 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    
    sprintf(messageBuffer, "High Speed Clock Frequency: %0.3f MHz\n", as60xx.getHighSpeedClockFrequencyHz() / 1000000.0);
 800118e:	482b      	ldr	r0, [pc, #172]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001190:	f002 f93e 	bl	8003410 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>
 8001194:	ee10 3a10 	vmov	r3, s0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d9 	bl	8000550 <__aeabi_f2d>
 800119e:	a322      	add	r3, pc, #136	@ (adr r3, 8001228 <AS60xx_Example_Setup+0xf0>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fb56 	bl	8000854 <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4926      	ldr	r1, [pc, #152]	@ (8001248 <AS60xx_Example_Setup+0x110>)
 80011ae:	4827      	ldr	r0, [pc, #156]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011b0:	f007 fb70 	bl	8008894 <siprintf>
    SerialPrint(messageBuffer);
 80011b4:	4825      	ldr	r0, [pc, #148]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011b6:	f000 fb57 	bl	8001868 <_ZL11SerialPrintPKc>

    sprintf(messageBuffer, "Supply Voltage: %ld mV\n", as60xx.getSupplyVoltageMv() );
 80011ba:	4820      	ldr	r0, [pc, #128]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011bc:	f002 f91a 	bl	80033f4 <_ZN6AS60xx18getSupplyVoltageMvEv>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4922      	ldr	r1, [pc, #136]	@ (8001250 <AS60xx_Example_Setup+0x118>)
 80011c6:	4821      	ldr	r0, [pc, #132]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011c8:	f007 fb64 	bl	8008894 <siprintf>
    SerialPrint(messageBuffer);
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011ce:	f000 fb4b 	bl	8001868 <_ZL11SerialPrintPKc>

    SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(&as60xx);
 80011d2:	481a      	ldr	r0, [pc, #104]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011d4:	f000 f8fe 	bl	80013d4 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx>

    if( as60xx.writeConfig() == RESULT_OK )
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011da:	f002 f8ef 	bl	80033bc <_ZN6AS60xx11writeConfigEv>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <AS60xx_Example_Setup+0xbe>
    {
        SerialPrint("Configuration properly written\n");
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <AS60xx_Example_Setup+0x11c>)
 80011f0:	f000 fb3a 	bl	8001868 <_ZL11SerialPrintPKc>
 80011f4:	e002      	b.n	80011fc <AS60xx_Example_Setup+0xc4>
    }
    else
    {
        SerialPrint("Error! Configuration read doesn't match the values written\n");
 80011f6:	4818      	ldr	r0, [pc, #96]	@ (8001258 <AS60xx_Example_Setup+0x120>)
 80011f8:	f000 fb36 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    
    if( as60xx.startMeasurement() == RESULT_OK )
 80011fc:	480f      	ldr	r0, [pc, #60]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011fe:	f002 f8eb 	bl	80033d8 <_ZN6AS60xx16startMeasurementEv>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <AS60xx_Example_Setup+0xe2>
    {
        SerialPrint("Measurements started\n");
 8001212:	4812      	ldr	r0, [pc, #72]	@ (800125c <AS60xx_Example_Setup+0x124>)
 8001214:	f000 fb28 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    else
    {
        SerialPrint("Error! Measurements didn't start properly\n");
    }
}
 8001218:	e002      	b.n	8001220 <AS60xx_Example_Setup+0xe8>
        SerialPrint("Error! Measurements didn't start properly\n");
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <AS60xx_Example_Setup+0x128>)
 800121c:	f000 fb24 	bl	8001868 <_ZL11SerialPrintPKc>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	00000000 	.word	0x00000000
 800122c:	412e8480 	.word	0x412e8480
 8001230:	20000270 	.word	0x20000270
 8001234:	0800c000 	.word	0x0800c000
 8001238:	42020800 	.word	0x42020800
 800123c:	20000304 	.word	0x20000304
 8001240:	0800c048 	.word	0x0800c048
 8001244:	0800c068 	.word	0x0800c068
 8001248:	0800c088 	.word	0x0800c088
 800124c:	200001f0 	.word	0x200001f0
 8001250:	0800c0b0 	.word	0x0800c0b0
 8001254:	0800c0c8 	.word	0x0800c0c8
 8001258:	0800c0e8 	.word	0x0800c0e8
 800125c:	0800c124 	.word	0x0800c124
 8001260:	0800c13c 	.word	0x0800c13c

08001264 <AS60xx_Example_Loop>:

extern "C" void AS60xx_Example_Loop()
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
    while( 1 )
    {
        if( !HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) )
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	4850      	ldr	r0, [pc, #320]	@ (80013b0 <AS60xx_Example_Loop+0x14c>)
 800126e:	f003 f98f 	bl	8004590 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8091 	beq.w	80013a6 <AS60xx_Example_Loop+0x142>
        {
            as60xx.update();
 8001284:	484b      	ldr	r0, [pc, #300]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001286:	f002 f90b 	bl	80034a0 <_ZN6AS60xx6updateEv>
            
            // Print the timestamp
            As60xx_Timestamp timestamp = as60xx.getTimestamp();
 800128a:	463b      	mov	r3, r7
 800128c:	4949      	ldr	r1, [pc, #292]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 800128e:	4618      	mov	r0, r3
 8001290:	f002 f8ce 	bl	8003430 <_ZN6AS60xx12getTimestampEv>
            sprintf(messageBuffer, "Timestamp[hh:mm:ss]:%ld:%02d:%02d\t", timestamp.hours, timestamp.minutes, timestamp.seconds);
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	793b      	ldrb	r3, [r7, #4]
 8001298:	4619      	mov	r1, r3
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	460b      	mov	r3, r1
 80012a0:	4945      	ldr	r1, [pc, #276]	@ (80013b8 <AS60xx_Example_Loop+0x154>)
 80012a2:	4846      	ldr	r0, [pc, #280]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 80012a4:	f007 faf6 	bl	8008894 <siprintf>
            SerialPrint(messageBuffer);
 80012a8:	4844      	ldr	r0, [pc, #272]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 80012aa:	f000 fadd 	bl	8001868 <_ZL11SerialPrintPKc>
            
            // Print the ToF sum upstream and downstream
            uint32_t avgTofUp = as60xx.getSumTofUp() / as60xx.getAmountHitsForSumToF();
 80012ae:	4841      	ldr	r0, [pc, #260]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012b0:	f002 f904 	bl	80034bc <_ZN6AS60xx11getSumTofUpEv>
 80012b4:	4604      	mov	r4, r0
 80012b6:	483f      	ldr	r0, [pc, #252]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012b8:	f002 f91c 	bl	80034f4 <_ZN6AS60xx22getAmountHitsForSumToFEv>
 80012bc:	4603      	mov	r3, r0
 80012be:	fbb4 f3f3 	udiv	r3, r4, r3
 80012c2:	617b      	str	r3, [r7, #20]
            uint32_t avgTofDn = as60xx.getSumTofDown() / as60xx.getAmountHitsForSumToF();
 80012c4:	483b      	ldr	r0, [pc, #236]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012c6:	f002 f907 	bl	80034d8 <_ZN6AS60xx13getSumTofDownEv>
 80012ca:	4604      	mov	r4, r0
 80012cc:	4839      	ldr	r0, [pc, #228]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012ce:	f002 f911 	bl	80034f4 <_ZN6AS60xx22getAmountHitsForSumToFEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80012d8:	613b      	str	r3, [r7, #16]
            float avgTofUp_ns = as60xx.calculateTimeNs(avgTofUp);
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	4835      	ldr	r0, [pc, #212]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012de:	f002 f917 	bl	8003510 <_ZN6AS60xx15calculateTimeNsEm>
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
            float avgTofDn_ns = as60xx.calculateTimeNs(avgTofDn);
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	4832      	ldr	r0, [pc, #200]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012ea:	f002 f911 	bl	8003510 <_ZN6AS60xx15calculateTimeNsEm>
 80012ee:	ed87 0a02 	vstr	s0, [r7, #8]

            sprintf(messageBuffer, "AvgTofSumUp[ns]:%0.2f\tAvgTofSumDn[ns]:%0.2f\t", avgTofUp_ns, avgTofDn_ns);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff f92c 	bl	8000550 <__aeabi_f2d>
 80012f8:	4604      	mov	r4, r0
 80012fa:	460d      	mov	r5, r1
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff f927 	bl	8000550 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9cd 2300 	strd	r2, r3, [sp]
 800130a:	4622      	mov	r2, r4
 800130c:	462b      	mov	r3, r5
 800130e:	492c      	ldr	r1, [pc, #176]	@ (80013c0 <AS60xx_Example_Loop+0x15c>)
 8001310:	482a      	ldr	r0, [pc, #168]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001312:	f007 fabf 	bl	8008894 <siprintf>
            SerialPrint(messageBuffer);
 8001316:	4829      	ldr	r0, [pc, #164]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001318:	f000 faa6 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the ToF difference
            sprintf(messageBuffer, "TofDiff[ns]:%0.2f\t", avgTofUp_ns - avgTofDn_ns );
 800131c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001320:	edd7 7a02 	vldr	s15, [r7, #8]
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f910 	bl	8000550 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4923      	ldr	r1, [pc, #140]	@ (80013c4 <AS60xx_Example_Loop+0x160>)
 8001336:	4821      	ldr	r0, [pc, #132]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001338:	f007 faac 	bl	8008894 <siprintf>
            SerialPrint(messageBuffer);
 800133c:	481f      	ldr	r0, [pc, #124]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800133e:	f000 fa93 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the amplitude from the pulse measured upstream and downstream
            sprintf(messageBuffer, "AmpUp[mV]:%ld\tAmpDn[mV]:%ld\t", as60xx.getAmplitudeUp(), as60xx.getAmplitudeDown());
 8001342:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001344:	f002 f90c 	bl	8003560 <_ZN6AS60xx14getAmplitudeUpEv>
 8001348:	4604      	mov	r4, r0
 800134a:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 800134c:	f002 f916 	bl	800357c <_ZN6AS60xx16getAmplitudeDownEv>
 8001350:	4603      	mov	r3, r0
 8001352:	4622      	mov	r2, r4
 8001354:	491c      	ldr	r1, [pc, #112]	@ (80013c8 <AS60xx_Example_Loop+0x164>)
 8001356:	4819      	ldr	r0, [pc, #100]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001358:	f007 fa9c 	bl	8008894 <siprintf>
            SerialPrint(messageBuffer);
 800135c:	4817      	ldr	r0, [pc, #92]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800135e:	f000 fa83 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the Pulse Width Ratio measured upstream and downstream
            sprintf(messageBuffer, "PWRUp[]:%0.3f\tPWRDn[]:%0.3f\t", as60xx.getPulseWidthRatioUp(), as60xx.getPulseWidthRatioDown());
 8001362:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001364:	f002 f918 	bl	8003598 <_ZN6AS60xx20getPulseWidthRatioUpEv>
 8001368:	ee10 3a10 	vmov	r3, s0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8ef 	bl	8000550 <__aeabi_f2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	480f      	ldr	r0, [pc, #60]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001378:	f002 f91e 	bl	80035b8 <_ZN6AS60xx22getPulseWidthRatioDownEv>
 800137c:	ee10 3a10 	vmov	r3, s0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8e5 	bl	8000550 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9cd 2300 	strd	r2, r3, [sp]
 800138e:	4622      	mov	r2, r4
 8001390:	462b      	mov	r3, r5
 8001392:	490e      	ldr	r1, [pc, #56]	@ (80013cc <AS60xx_Example_Loop+0x168>)
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001396:	f007 fa7d 	bl	8008894 <siprintf>
            SerialPrint(messageBuffer);
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800139c:	f000 fa64 	bl	8001868 <_ZL11SerialPrintPKc>
            
            SerialPrint("\n");
 80013a0:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <AS60xx_Example_Loop+0x16c>)
 80013a2:	f000 fa61 	bl	8001868 <_ZL11SerialPrintPKc>
        }

        HAL_Delay(20);
 80013a6:	2014      	movs	r0, #20
 80013a8:	f002 fe16 	bl	8003fd8 <HAL_Delay>
    }
 80013ac:	e75d      	b.n	800126a <AS60xx_Example_Loop+0x6>
 80013ae:	bf00      	nop
 80013b0:	42020800 	.word	0x42020800
 80013b4:	20000304 	.word	0x20000304
 80013b8:	0800c168 	.word	0x0800c168
 80013bc:	200001f0 	.word	0x200001f0
 80013c0:	0800c18c 	.word	0x0800c18c
 80013c4:	0800c1bc 	.word	0x0800c1bc
 80013c8:	0800c1d0 	.word	0x0800c1d0
 80013cc:	0800c1f0 	.word	0x0800c1f0
 80013d0:	0800c210 	.word	0x0800c210

080013d4 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx>:
}

void SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(AS60xx* as60xx)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    /* 0x48DBA399 */
    as60xx->Param.CR0.WS_DIS               = AS60XX_C0_WS_DIS;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4aca      	ldr	r2, [pc, #808]	@ (8001708 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x334>)
 80013e0:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248

    /* 0x00800401 */
    as60xx->Param.CR1.PI_TPW               = AS60XX_C1_PI_TPW_0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c
    as60xx->Param.CR1.PI_UPD_MODE          = AS60XX_C1_PI_UPD_MODE_ENABLED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f
    as60xx->Param.CR1.PI_EN                = AS60XX_C1_PI_EN_DISABLE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
    as60xx->Param.CR1.PI_OUT_MODE          = AS60XX_C1_PI_OUT_MODE_ONE_LINE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e
    as60xx->Param.CR1.SPI_INPORT_CFG       = AS60XX_C1_SPI_INPORT_CFG_PULL_DN;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254

    /* 0x00000000 */
    as60xx->Param.CR2.GP0_DIR              = AS60XX_C2_GP0_DIR_OUTPUT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2256 	strb.w	r2, [r3, #598]	@ 0x256
    as60xx->Param.CR2.GP0_SEL              = AS60XX_C2_GP0_SEL_GENERAL_PURPOSE_OUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
    as60xx->Param.CR2.GP1_DIR              = AS60XX_C2_GP1_DIR_OUTPUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    as60xx->Param.CR2.GP1_SEL              = AS60XX_C2_GP1_SEL_GENERAL_PURPOSE_OUT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
    as60xx->Param.CR2.GP2_DIR              = AS60XX_C2_GP2_DIR_OUTPUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
    as60xx->Param.CR2.GP2_SEL              = AS60XX_C2_GP2_SEL_GENERAL_PURPOSE_OUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
    as60xx->Param.CR2.GP3_DIR              = AS60XX_C2_GP3_DIR_OUTPUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    as60xx->Param.CR2.GP3_SEL              = AS60XX_C2_GP3_SEL_GENERAL_PURPOSE_OUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    as60xx->Param.CR2.GP4_DIR              = AS60XX_C2_GP4_DIR_OUTPUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    as60xx->Param.CR2.GP4_SEL              = AS60XX_C2_GP4_SEL_GENERAL_PURPOSE_OUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    as60xx->Param.CR2.GP5_DIR              = AS60XX_C2_GP5_DIR_OUTPUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    as60xx->Param.CR2.GP5_SEL              = AS60XX_C2_GP5_SEL_GENERAL_PURPOSE_OUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    as60xx->Param.CR2.NOT_USED_31_24       = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

    /* 0x00000001 */
    as60xx->Param.CR3.USM_OPT              = AS60XX_C3_USM_OPT_0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264

    /* 0x0011FFFF */
    as60xx->Param.CR4.EF_EN_TDC_TMO        = AS60XX_C4_EF_EN_TDC_TMO;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 226c 	strb.w	r2, [r3, #620]	@ 0x26c
    as60xx->Param.CR4.EF_EN_TOF_TMO        = AS60XX_C4_EF_EN_TOF_TMO;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 226d 	strb.w	r2, [r3, #621]	@ 0x26d
    as60xx->Param.CR4.EF_EN_AM_TMO         = AS60XX_C4_EF_EN_AM_TMO;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
    as60xx->Param.CR4.EF_EN_TM_OC          = AS60XX_C4_EF_EN_TM_OC;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 226f 	strb.w	r2, [r3, #623]	@ 0x26f
    as60xx->Param.CR4.EF_EN_TM_SC          = AS60XX_C4_EF_EN_TM_SC;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
    as60xx->Param.CR4.EF_EN_ZCC_ERR        = AS60XX_C4_EF_EN_ZCC_ERR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
    as60xx->Param.CR4.EF_EN_LBD_ERR        = AS60XX_C4_EF_EN_LBD_ERR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2272 	strb.w	r2, [r3, #626]	@ 0x272
    as60xx->Param.CR4.EF_EN_USM_SQC_TMO    = AS60XX_C4_EF_EN_USM_SQC_TMO;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2273 	strb.w	r2, [r3, #627]	@ 0x273
    as60xx->Param.CR4.EF_EN_TM_SQC_TMO     = AS60XX_C4_EF_EN_TM_SQC_TMO;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2274 	strb.w	r2, [r3, #628]	@ 0x274
    as60xx->Param.CR4.EF_EN_TSQ_TMO        = AS60XX_C4_EF_EN_TSQ_TMO;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2275 	strb.w	r2, [r3, #629]	@ 0x275
    as60xx->Param.CR4.EF_EN_I2C_ACK_ERR    = AS60XX_C4_EF_EN_I2C_ACK_ERR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2276 	strb.w	r2, [r3, #630]	@ 0x276
    as60xx->Param.CR4.EF_EN_CHP_ERR        = AS60XX_C4_EF_EN_CHP_ERR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2277 	strb.w	r2, [r3, #631]	@ 0x277
    as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR   = AS60XX_C4_EF_EN_NVM_FWCU_ERR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
    as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR   = AS60XX_C4_EF_EN_NVM_FWDU_ERR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2279 	strb.w	r2, [r3, #633]	@ 0x279
    as60xx->Param.CR4.EF_EN_NVM_FWA_ERR    = AS60XX_C4_EF_EN_NVM_FWA_ERR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 227a 	strb.w	r2, [r3, #634]	@ 0x27a
    as60xx->Param.CR4.EF_EN_CPU_ERR        = AS60XX_C4_EF_EN_CPU_ERR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 227b 	strb.w	r2, [r3, #635]	@ 0x27b
    as60xx->Param.CR4.IRQ_EN_TSQ_FNS       = AS60XX_C4_IRQ_EN_TSQ_FNS;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
    as60xx->Param.CR4.IRQ_EN_FW_S          = AS60XX_C4_IRQ_EN_FW_S;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    as60xx->Param.CR4.NOT_USED_26_24       = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    as60xx->Param.CR4.TS_GPT_RATE          = AS60XX_C4_TS_GPT_RATE_DISABLED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286

    /* 0x4046EE08 */
    as60xx->Param.CR5.HSC_DIV_MODE         = AS60XX_C5_HSC_DIV_MODE_4MHZ;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
    as60xx->Param.CR5.NOT_USED_1           = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2288 	strb.w	r2, [r3, #648]	@ 0x288
    as60xx->Param.CR5.HSC_CLK_ST           = AS60XX_C5_HSC_CLK_ST_135_USEC;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
    as60xx->Param.CR5.NOT_USED_7_5         = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 228a 	strb.w	r2, [r3, #650]	@ 0x28a
    as60xx->Param.CR5.HSC_DIV              = AS60XX_C5_HSC_DIV_4MHZ;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 228b 	strb.w	r2, [r3, #651]	@ 0x28b
    as60xx->Param.CR5.HSC_RATE             = AS60XX_C5_HSC_RATE_EVERY_100;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2207      	movs	r2, #7
 8001548:	f883 228c 	strb.w	r2, [r3, #652]	@ 0x28c
    as60xx->Param.CR5.HSC_MODE_CPU         = AS60XX_C5_HSC_MODE_CPU_4MHZ;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 228d 	strb.w	r2, [r3, #653]	@ 0x28d
    as60xx->Param.CR5.VM_RATE              = AS60XX_C5_VM_RATE_EVERY_100;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2207      	movs	r2, #7
 8001558:	f883 228e 	strb.w	r2, [r3, #654]	@ 0x28e
    uint16_t lowBatteryDetectionThMv     = 2300;
 800155c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8001560:	83fb      	strh	r3, [r7, #30]
    as60xx->Param.CR5.LBD_TH               = (uint8_t)( ( lowBatteryDetectionThMv - 2150 ) / 25);
 8001562:	8bfb      	ldrh	r3, [r7, #30]
 8001564:	f6a3 0366 	subw	r3, r3, #2150	@ 0x866
 8001568:	4a68      	ldr	r2, [pc, #416]	@ (800170c <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x338>)
 800156a:	fb82 1203 	smull	r1, r2, r2, r3
 800156e:	10d2      	asrs	r2, r2, #3
 8001570:	17db      	asrs	r3, r3, #31
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f883 228f 	strb.w	r2, [r3, #655]	@ 0x28f
    as60xx->Param.CR5.TSV_UPD_MODE         = AS60XX_C5_TSV_UPD_MODE_AUTOMATIC;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
    as60xx->Param.CR5.BF_SEL               = AS60XX_C5_BF_SEL_50_HZ;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    uint16_t chargePumpVoltageMv         = 5600;
 800158c:	f44f 53af 	mov.w	r3, #5600	@ 0x15e0
 8001590:	83bb      	strh	r3, [r7, #28]
    as60xx->Param.CR5.CHP_HV_SEL           = (uint8_t)( ( (chargePumpVoltageMv - 5600) / 900 ) & 0x0F );
 8001592:	8bbb      	ldrh	r3, [r7, #28]
 8001594:	f5a3 53af 	sub.w	r3, r3, #5600	@ 0x15e0
 8001598:	4a5d      	ldr	r2, [pc, #372]	@ (8001710 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x33c>)
 800159a:	fb82 1203 	smull	r1, r2, r2, r3
 800159e:	441a      	add	r2, r3
 80015a0:	1252      	asrs	r2, r2, #9
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f883 2292 	strb.w	r2, [r3, #658]	@ 0x292
    as60xx->Param.CR5.NOT_USED_28          = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2293 	strb.w	r2, [r3, #659]	@ 0x293
    as60xx->Param.CR5.TI_PATH_SEL          = AS60XX_C5_TI_PATH_SEL_350_OHM_BUFFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
    as60xx->Param.CR5.NOT_USED_31          = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

    /* 0x01012100 */
    as60xx->Param.CR6.MR_CT                = AS60XX_C6_MR_CT_8;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
    as60xx->Param.CR6.TS_MCM               = AS60XX_C6_TS_PP_F_EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    as60xx->Param.CR6.TS_PP_MODE           = AS60XX_C6_TS_PP_MODE_ON_MEASUREMENT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 229f 	strb.w	r2, [r3, #671]	@ 0x29f
    as60xx->Param.CR6.TS_CST_RATE          = AS60XX_C6_TS_CST_RATE_DISABLED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    as60xx->Param.CR6.TS_NVR_RATE          = AS60XX_C6_TS_NVR_RATE_DISABLED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
    as60xx->Param.CR6.NOT_USED_25_24       = AS60XX_C6_NOT_USED_25_24;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 22a2 	strb.w	r2, [r3, #674]	@ 0x2a2
    as60xx->Param.CR6.TS_CHP_MODE          = AS60XX_C6_TS_CHP_MODE_DISABLED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 22a3 	strb.w	r2, [r3, #675]	@ 0x2a3
    as60xx->Param.CR6.TS_CHP_WT            = AS60XX_C6_TS_CHP_WT_520_USEC;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
    as60xx->Param.CR6.NOT_USED_30          = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 22a5 	strb.w	r2, [r3, #677]	@ 0x2a5
    as60xx->Param.CR6.TS_CST_MODE          = AS60XX_C6_TS_CST_MODE_ALWAYS;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 22a6 	strb.w	r2, [r3, #678]	@ 0x2a6

    /* 0x00240000 */
    as60xx->Param.CR7.TM_RATE              = AS60XX_C7_TM_RATE_DISABLED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
    as60xx->Param.CR7.TPM_PAUSE            = AS60XX_C7_TPM_PAUSE_DISABLED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
    as60xx->Param.CR7.TM_MODE              = AS60XX_C7_TM_MODE_OFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 22ad 	strb.w	r2, [r3, #685]	@ 0x2ad
    as60xx->Param.CR7.NOT_USED_16          = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
    as60xx->Param.CR7.TPM_PORT_MODE        = AS60XX_C7_TPM_PORT_MODE_UNUSED_TO_GND;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
    as60xx->Param.CR7.TM_PORT_ORDER        = AS60XX_C7_TM_PORT_ORDER_1ST_MEASUREMENT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
    as60xx->Param.CR7.TPM_CLOAD_TRIM       = AS60XX_C7_TPM_CLOAD_TRIM_1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 22b1 	strb.w	r2, [r3, #689]	@ 0x2b1
    as60xx->Param.CR7.TPM_CYCLE_SEL        = AS60XX_C7_TPM_CYCLE_SEL_512_USEC;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22b2 	strb.w	r2, [r3, #690]	@ 0x2b2
    as60xx->Param.CR7.TPM_FAKE_NO          = AS60XX_C7_TPM_FAKE_NO_2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 22b3 	strb.w	r2, [r3, #691]	@ 0x2b3
    as60xx->Param.CR7.NOT_USED_31_24       = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4

    /* 0x046807E4 */
    as60xx->Param.CR8.USM_PAUSE            = AS60XX_C8_USM_PAUSE_2;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
    as60xx->Param.CR8.TI_PGA_AZ_DIS        = AS60XX_C8_TI_PGA_AZ_DIS_ENABLED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
    as60xx->Param.CR8.USM_DIR_MODE         = AS60XX_C8_USM_DIR_MODE_VIA_TOGGLE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 22ba 	strb.w	r2, [r3, #698]	@ 0x2ba
    as60xx->Param.CR8.USM_NOISE_MASK_WIN   = 31;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	221f      	movs	r2, #31
 800168a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    as60xx->Param.CR8.USM_TO               = AS60XX_C8_USM_TO_128_USEC;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22c0 	strb.w	r2, [r3, #704]	@ 0x2c0
    as60xx->Param.CR8.NOT_USED_18          = 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22c1 	strb.w	r2, [r3, #705]	@ 0x2c1
    as60xx->Param.CR8.USM_RLS_MODE         = AS60XX_C8_USM_RLS_MODE_COMBINED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 22c2 	strb.w	r2, [r3, #706]	@ 0x2c2
    as60xx->Param.CR8.ZCC_RATE             = AS60XX_C8_ZCC_RATE_EVERY_50;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2206      	movs	r2, #6
 80016aa:	f883 22c3 	strb.w	r2, [r3, #707]	@ 0x2c3
    as60xx->Param.CR8.NOT_USED_29_23       = 8;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
    as60xx->Param.CR8.TI_PGA_CON_MODE      = AS60XX_C8_TI_PGA_CON_MODE_NO_EXTERNAL;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8a3 22c8 	strh.w	r2, [r3, #712]	@ 0x2c8

    /* 0x60160204 */
    as60xx->Param.CR9.FBG_CLK_DIV          = 4;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2204      	movs	r2, #4
 80016c2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
    as60xx->Param.CR9.FBG_MODE             = AS60XX_C9_FBG_MODE_LOW_PHASE_INSERTION;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
    as60xx->Param.CR9.FBG_PHASE_INS        = AS60XX_C9_FBG_PHASE_INS_1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 22ce 	strb.w	r2, [r3, #718]	@ 0x2ce
    as60xx->Param.CR9.FBG_BURST_PRE        = 22;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2216      	movs	r2, #22
 80016da:	f883 22cf 	strb.w	r2, [r3, #719]	@ 0x2cf
    as60xx->Param.CR9.FBG_BURST_POST       = 0;                              // THIS IS NOT ALLOWED!! Should be 1 to 63!!
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
    as60xx->Param.CR9.NOT_USED_28          = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
    as60xx->Param.CR9.NOT_USED_29          = AS60XX_C9_NOT_USED_29;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2
    as60xx->Param.CR9.TOF_HIT_MODE         = AS60XX_C9_TOF_HIT_MODE_GP30;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22d3 	strb.w	r2, [r3, #723]	@ 0x2d3
    as60xx->Param.CR9.NOT_USED_31          = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 22d4 	strb.w	r2, [r3, #724]	@ 0x2d4
 8001706:	e005      	b.n	8001714 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x340>
 8001708:	48dba399 	.word	0x48dba399
 800170c:	51eb851f 	.word	0x51eb851f
 8001710:	91a2b3c5 	.word	0x91a2b3c5

    /* 0x010FEA10 */
    as60xx->Param.CR10.NOT_USED_0          = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 22d5 	strb.w	r2, [r3, #725]	@ 0x2d5
    as60xx->Param.CR10.TOF_HIT_START       = 8;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2208      	movs	r2, #8
 8001720:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
    as60xx->Param.CR10.TOF_HIT_IGN         = AS60XX_CA_TOF_HIT_IGN_0_HITS;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
    as60xx->Param.CR10.TOF_HIT_SUM_NO      = 10;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	220a      	movs	r2, #10
 8001730:	f883 22d8 	strb.w	r2, [r3, #728]	@ 0x2d8
    as60xx->Param.CR10.TOF_HIT_END         = 127;                            // Because CR9.TOF_HIT_MODE was set to GP30, has to be put to 127
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	227f      	movs	r2, #127	@ 0x7f
 8001738:	f883 22d9 	strb.w	r2, [r3, #729]	@ 0x2d9
    as60xx->Param.CR10.NOT_USED_21_20      = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
    as60xx->Param.CR10.TOF_EDGE_MODE       = AS60XX_CA_TOF_EDGE_MODE_POS_EDGE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 22db 	strb.w	r2, [r3, #731]	@ 0x2db
    as60xx->Param.CR10.TOF_RATE_INIT       = 1;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
    as60xx->Param.CR10.NOT_USED_31_30      = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 22dd 	strb.w	r2, [r3, #733]	@ 0x2dd

    /* 0x23A0DE71 */
    as60xx->Param.CR11.AM_RATE             = AS60XX_CB_AM_RATE_EVERY_1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 22de 	strb.w	r2, [r3, #734]	@ 0x2de
    as60xx->Param.CR11.NOT_USED_3          = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22df 	strb.w	r2, [r3, #735]	@ 0x2df
    as60xx->Param.CR11.AM_PD_END           = 7;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2207      	movs	r2, #7
 8001770:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
    as60xx->Param.CR11.NOT_USED_11_9       = AS60XX_CB_NOT_USED_11_9;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2207      	movs	r2, #7
 8001778:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
    as60xx->Param.CR11.AMC_RATE            = AS60XX_CB_AMC_RATE_EVERY_20;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2205      	movs	r2, #5
 8001780:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
    as60xx->Param.CR11.PWD_EN              = AS60XX_CB_PWD_EN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
    as60xx->Param.CR11.PGA_TRIM            = AS60XX_CB_PGA_TRIM_2_V_PER_V;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
    as60xx->Param.CR11.PGA_EN_MODE         = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
    as60xx->Param.CR11.PGA_MODE            = AS60XX_CB_PGA_MODE_ENABLED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
    as60xx->Param.CR11.NOT_USED_22         = 0;                              // AS6030 says it should be 0, AS6040 says it should be 1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
    as60xx->Param.CR11.AM_PD_START_MODE    = AS60XX_CB_AM_PD_START_MODE_US_RELEASE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
    as60xx->Param.CR11.ZCD_FHL_INIT        = 35;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2223      	movs	r2, #35	@ 0x23
 80017b8:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

    /* 0x94A0C46C */
    as60xx->Param.CR12.TRIM1               = AS60XX_CC_TRIM1_DEFAULT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a25      	ldr	r2, [pc, #148]	@ (8001854 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x480>)
 80017c0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    /* 0x401100C4 */
    as60xx->Param.CR13.TRIM2               = AS60XX_CD_TRIM2_DEFAULT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x484>)
 80017c8:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0

    /* 0x00A7400F */
    as60xx->Param.CR14.TRIM3               = AS60XX_CE_TRIM3_DEFAULT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a23      	ldr	r2, [pc, #140]	@ (800185c <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x488>)
 80017d0:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4

    /* 0x00000001 */
    as60xx->Param.CR15.TOF_RATE            = AS60XX_D0_TOF_RATE_0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
    as60xx->Param.CR15.NOT_USED_31_6       = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc

    /* 0x000015E0 */
    float delayWindowNs = 43750;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x48c>)
 80017e6:	61bb      	str	r3, [r7, #24]
    uint32_t delayWindowRegisterContent = As60xx_CalculateDelayWindowRegisterValue(delayWindowNs);
 80017e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80017ec:	f7ff fc44 	bl	8001078 <_ZL40As60xx_CalculateDelayWindowRegisterValuef>
 80017f0:	6178      	str	r0, [r7, #20]
    as60xx->Param.CR16.USM_RLS_DLY_U       = delayWindowRegisterContent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    as60xx->Param.CR16.NOT_USED_31_19      = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

    /* 0x000015E0 */
    as60xx->Param.CR17.USM_RLS_DLY_D       = delayWindowRegisterContent;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
    as60xx->Param.CR17.NOT_USED_31_19      = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

    /* 0x00000023 */
    float zeroCrossDetectionLevelMv = 31.0;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x490>)
 8001814:	613b      	str	r3, [r7, #16]
    uint32_t zeroCrossDetectionLevelRegisterValue = As60xx_CalculateFirstHitLevelRegisterValue(zeroCrossDetectionLevelMv);
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f7ff fc55 	bl	80010c8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef>
 800181e:	60f8      	str	r0, [r7, #12]
    as60xx->Param.CR18.ZCD_FHL_U           = zeroCrossDetectionLevelRegisterValue;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
    as60xx->Param.CR18.NOT_USED_31_8       = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

    /* 0x00000023 */
    as60xx->Param.CR19.ZCD_FHL_D           = zeroCrossDetectionLevelRegisterValue;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
    as60xx->Param.CR19.NOT_USED_31_8       = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c

    as60xx->updateConfiguration();
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 fec7 	bl	80035d8 <_ZN6AS60xx19updateConfigurationEv>
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	94a0c46c 	.word	0x94a0c46c
 8001858:	401100c4 	.word	0x401100c4
 800185c:	00a7400f 	.word	0x00a7400f
 8001860:	472ae600 	.word	0x472ae600
 8001864:	41f80000 	.word	0x41f80000

08001868 <_ZL11SerialPrintPKc>:

static Result SerialPrint(const char str[])
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint8_t result = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  uint16_t i = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	81bb      	strh	r3, [r7, #12]
  while(str[i] != 0)
 8001878:	e002      	b.n	8001880 <_ZL11SerialPrintPKc+0x18>
  {
    i++;
 800187a:	89bb      	ldrh	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	81bb      	strh	r3, [r7, #12]
  while(str[i] != 0)
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f6      	bne.n	800187a <_ZL11SerialPrintPKc+0x12>
  }
  HAL_StatusTypeDef stmResult = HAL_UART_Transmit(&huart, (uint8_t*)str, i, 10);
 800188c:	89ba      	ldrh	r2, [r7, #12]
 800188e:	230a      	movs	r3, #10
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <_ZL11SerialPrintPKc+0x78>)
 8001894:	f005 faf0 	bl	8006e78 <HAL_UART_Transmit>
 8001898:	4603      	mov	r3, r0
 800189a:	72fb      	strb	r3, [r7, #11]
               
  switch( stmResult)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d816      	bhi.n	80018d0 <_ZL11SerialPrintPKc+0x68>
 80018a2:	a201      	add	r2, pc, #4	@ (adr r2, 80018a8 <_ZL11SerialPrintPKc+0x40>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bf 	.word	0x080018bf
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018cb 	.word	0x080018cb
  {
    case HAL_OK:
      result = RESULT_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e00a      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_ERROR:
      result = RESULT_IO_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;
 80018c2:	e007      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_BUSY:
      result = RESULT_IO_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
      break;
 80018c8:	e004      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_TIMEOUT:
      result = RESULT_TIMEOUT;
 80018ca:	2305      	movs	r3, #5
 80018cc:	73fb      	strb	r3, [r7, #15]
      break;
 80018ce:	e001      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    default:
      result = RESULT_INVALID;
 80018d0:	2302      	movs	r3, #2
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000270 	.word	0x20000270

080018e4 <_Z41__static_initialization_and_destruction_0v>:
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80018ea:	f001 fd1d 	bl	8003328 <_ZN6AS60xxC1Ev>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000304 	.word	0x20000304

080018f8 <_Z41__static_initialization_and_destruction_1v>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80018fe:	f001 fcf1 	bl	80032e4 <_ZN6AS60xxD1Ev>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000304 	.word	0x20000304

0800190c <_GLOBAL__sub_I_AS60xx_Example_Setup>:
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
 8001910:	f7ff ffe8 	bl	80018e4 <_Z41__static_initialization_and_destruction_0v>
 8001914:	bd80      	pop	{r7, pc}

08001916 <_GLOBAL__sub_D_AS60xx_Example_Setup>:
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
 800191a:	f7ff ffed 	bl	80018f8 <_Z41__static_initialization_and_destruction_1v>
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZL41As60xx_Get_Amount_Configuration_Registersv>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    return AS60XX_AMOUNT_CONFIGURATION_REGISTERS;
 8001924:	2314      	movs	r3, #20
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>:
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b13      	cmp	r3, #19
 8001940:	d901      	bls.n	8001946 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x16>
        return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e004      	b.n	8001950 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x20>
    return as60xx->Addresses[idx];
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3230      	adds	r2, #48	@ 0x30
 800194c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	2b13      	cmp	r3, #19
 800196c:	d901      	bls.n	8001972 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x16>
        return 0;
 800196e:	2300      	movs	r3, #0
 8001970:	e004      	b.n	800197c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x20>
    return as60xx->CR[idx];
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3204      	adds	r2, #4
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>:

static inline Result As60xx_Write_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
    uint8_t valuesToWrite[1];
    valuesToWrite[0] = opcode;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	733b      	strb	r3, [r7, #12]

    return (Result)write(&valuesToWrite, 1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68d0      	ldr	r0, [r2, #12]
 80019a0:	f107 010c 	add.w	r1, r7, #12
 80019a4:	2201      	movs	r2, #1
 80019a6:	4798      	blx	r3
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>:

static inline Result As60xx_Write_Extended_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t extendedOpcode)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	4613      	mov	r3, r2
 80019c0:	70bb      	strb	r3, [r7, #2]
    uint8_t valuesToWrite[2];
    valuesToWrite[0] = opcode;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	733b      	strb	r3, [r7, #12]
    valuesToWrite[1] = extendedOpcode;
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	737b      	strb	r3, [r7, #13]

    return (Result)write(valuesToWrite, 2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68d0      	ldr	r0, [r2, #12]
 80019d2:	f107 010c 	add.w	r1, r7, #12
 80019d6:	2202      	movs	r2, #2
 80019d8:	4798      	blx	r3
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>:

static inline Result As60xx_Write_8_Bit_Address_Register(ScioSense_As60xx* as60xx, uint8_t address, uint32_t dataToWrite)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	460b      	mov	r3, r1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	72fb      	strb	r3, [r7, #11]
    uint8_t opcode = RC_RAA_WR;
 80019f2:	235a      	movs	r3, #90	@ 0x5a
 80019f4:	75fb      	strb	r3, [r7, #23]
    uint8_t valuesToWrite[6];
    valuesToWrite[0] = opcode;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	743b      	strb	r3, [r7, #16]
    valuesToWrite[1] = address;
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	747b      	strb	r3, [r7, #17]
    valuesToWrite[2] = (uint8_t)(dataToWrite>>24);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0e1b      	lsrs	r3, r3, #24
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	74bb      	strb	r3, [r7, #18]
    valuesToWrite[3] = (uint8_t)(dataToWrite>>16);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	74fb      	strb	r3, [r7, #19]
    valuesToWrite[4] = (uint8_t)(dataToWrite>>8);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	753b      	strb	r3, [r7, #20]
    valuesToWrite[5] = (uint8_t)(dataToWrite);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	757b      	strb	r3, [r7, #21]

    return (Result)write(valuesToWrite, 6);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	68d0      	ldr	r0, [r2, #12]
 8001a24:	f107 0110 	add.w	r1, r7, #16
 8001a28:	2206      	movs	r2, #6
 8001a2a:	4798      	blx	r3
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>:

    return result;
}

static inline uint8_t As60xx_Read_1_Byte(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af02      	add	r7, sp, #8
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
    uint8_t dataToWrite[1];
    uint8_t dataRead[1];

    dataToWrite[0] = opcode;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	733b      	strb	r3, [r7, #12]

    Result result = (Result)read(dataToWrite, 1, dataRead, 1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68d8      	ldr	r0, [r3, #12]
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	f107 010c 	add.w	r1, r7, #12
 8001a56:	2201      	movs	r2, #1
 8001a58:	9200      	str	r2, [sp, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	47a0      	blx	r4
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73bb      	strb	r3, [r7, #14]

    uint8_t readValue = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]

    if ( result == RESULT_OK )
 8001a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh+0x3c>
    {
        readValue = dataRead[0];
 8001a6e:	7a3b      	ldrb	r3, [r7, #8]
 8001a70:	73fb      	strb	r3, [r7, #15]
    }

    return readValue;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>:

    return readValue;
}

static inline uint32_t As60xx_Read_Register_1_Dword(ScioSense_As60xx* as60xx, uint16_t address)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
    uint8_t dataToWrite[2];
    uint8_t dataRead[4];

    uint8_t opcode = RC_RAA_RD;
 8001a88:	237a      	movs	r3, #122	@ 0x7a
 8001a8a:	75fb      	strb	r3, [r7, #23]
    if( address >= 0x100 )
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d904      	bls.n	8001a9c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x20>
    {
        // The request is to read from the NVRAM
        opcode  = RC_RAA_RD_NVRAM;
 8001a92:	237b      	movs	r3, #123	@ 0x7b
 8001a94:	75fb      	strb	r3, [r7, #23]
        address = address & 0x00FF;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	807b      	strh	r3, [r7, #2]
    }

    dataToWrite[0] = opcode;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	733b      	strb	r3, [r7, #12]
    dataToWrite[1] = (uint8_t)address;
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	737b      	strb	r3, [r7, #13]

    Result result = (Result)read(dataToWrite, 2, dataRead, 4);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681c      	ldr	r4, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68d8      	ldr	r0, [r3, #12]
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	f107 010c 	add.w	r1, r7, #12
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	9200      	str	r2, [sp, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	47a0      	blx	r4
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]

    uint32_t readValue = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]

    if ( result == RESULT_OK )
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x68>
    {
        readValue = (dataRead[0]<<24) + (dataRead[1]<<16) + (dataRead[2]<<8) + (dataRead[3]);
 8001ace:	7a3b      	ldrb	r3, [r7, #8]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	7a7b      	ldrb	r3, [r7, #9]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	441a      	add	r2, r3
 8001ad8:	7abb      	ldrb	r3, [r7, #10]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4413      	add	r3, r2
 8001ade:	7afa      	ldrb	r2, [r7, #11]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
    }

    return readValue;
 8001ae4:	693b      	ldr	r3, [r7, #16]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>:

static inline void As60xx_Read_Register_N_Dword(ScioSense_As60xx* as60xx, uint16_t address, uint32_t* outputData, uint16_t amountRegistersToRead)
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	461a      	mov	r2, r3
 8001afa:	460b      	mov	r3, r1
 8001afc:	817b      	strh	r3, [r7, #10]
 8001afe:	4613      	mov	r3, r2
 8001b00:	813b      	strh	r3, [r7, #8]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001b02:	2300      	movs	r3, #0
 8001b04:	82fb      	strh	r3, [r7, #22]
 8001b06:	e00f      	b.n	8001b28 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x3a>
    {
        outputData[i] = As60xx_Read_Register_1_Dword(as60xx, address+i);
 8001b08:	897a      	ldrh	r2, [r7, #10]
 8001b0a:	8afb      	ldrh	r3, [r7, #22]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b299      	uxth	r1, r3
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	18d4      	adds	r4, r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff ffaf 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6023      	str	r3, [r4, #0]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001b22:	8afb      	ldrh	r3, [r7, #22]
 8001b24:	3301      	adds	r3, #1
 8001b26:	82fb      	strh	r3, [r7, #22]
 8001b28:	8afa      	ldrh	r2, [r7, #22]
 8001b2a:	893b      	ldrh	r3, [r7, #8]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3eb      	bcc.n	8001b08 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x1a>
    }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}

08001b3a <_ZL12As60xx_ResetP16ScioSense_As60xx>:

static inline Result As60xx_Reset(ScioSense_As60xx* as60xx)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 8001b46:	2188      	movs	r1, #136	@ 0x88
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff1d 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2019      	movs	r0, #25
 8001b54:	4798      	blx	r3
    
    As60xx_Write_Opcode(as60xx, RC_SYS_RST);
 8001b56:	2199      	movs	r1, #153	@ 0x99
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff15 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2019      	movs	r0, #25
 8001b64:	4798      	blx	r3

    As60xx_Write_8_Bit_Address_Register(as60xx, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_IF_CLR_CLEAR | AS60XX_DD_EF_CLR_CLEAR );
 8001b66:	2203      	movs	r2, #3
 8001b68:	21dd      	movs	r1, #221	@ 0xdd
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff3a 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    wait(25);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2019      	movs	r0, #25
 8001b76:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001b78:	2187      	movs	r1, #135	@ 0x87
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff04 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	205e      	movs	r0, #94	@ 0x5e
 8001b86:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 8001b88:	218f      	movs	r1, #143	@ 0x8f
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ff53 	bl	8001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001b90:	4603      	mov	r3, r0
 8001b92:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_RST_FLAG_Msk )
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <_ZL12As60xx_ResetP16ScioSense_As60xx+0x70>
    {
        as60xx->State = AS60XX_STATE_RESET;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        result = RESULT_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
    }
    
    return result;
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZL11As60xx_InitP16ScioSense_As60xx>:

static inline Result As60xx_Init(ScioSense_As60xx* as60xx)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    As6xx_Initialize_Configuration(as60xx);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f001 f8c4 	bl	8002d4c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>
    return As60xx_Reset(as60xx);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffb8 	bl	8001b3a <_ZL12As60xx_ResetP16ScioSense_As60xx>
 8001bca:	4603      	mov	r3, r0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZL18As60xx_isConnectedP16ScioSense_As60xx>:

uint8_t As60xx_isConnected(ScioSense_As60xx* as60xx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    return (as60xx->State != AS60XX_STATE_NOT_CONNECTED);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 8001be2:	2bff      	cmp	r3, #255	@ 0xff
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>:

static inline Result As60xx_Write_Config(ScioSense_As60xx* as60xx)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 8001c04:	2188      	movs	r1, #136	@ 0x88
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff febe 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_OFF);
 8001c0c:	218a      	movs	r1, #138	@ 0x8a
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff feba 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001c14:	218d      	movs	r1, #141	@ 0x8d
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff feb6 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    // Write Configuration (0xC0 - 0xCE, 0xD0 - 0xD2, 0xDA - 0xDB)
    uint8_t registersToWrite = As60xx_Get_Amount_Configuration_Registers();
 8001c1c:	f7ff fe80 	bl	8001920 <_ZL41As60xx_Get_Amount_Configuration_Registersv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	72fb      	strb	r3, [r7, #11]
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 8001c24:	2300      	movs	r3, #0
 8001c26:	73bb      	strb	r3, [r7, #14]
 8001c28:	e014      	b.n	8001c54 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x5c>
    {
	As60xx_Write_8_Bit_Address_Register(as60xx, As60xx_Get_Configuration_Register_Address(as60xx, idx), As60xx_Get_Configuration_Register_Setting(as60xx, idx));
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe7e 	bl	8001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b2dc      	uxtb	r4, r3
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe8d 	bl	800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4621      	mov	r1, r4
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fecb 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73bb      	strb	r3, [r7, #14]
 8001c54:	7bba      	ldrb	r2, [r7, #14]
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d3e6      	bcc.n	8001c2a <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x32>
    }

    uint8_t configurationCorrect = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 8001c60:	2301      	movs	r3, #1
 8001c62:	733b      	strb	r3, [r7, #12]
 8001c64:	e01c      	b.n	8001ca0 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xa8>
    {
        configurationCorrect &= ( As60xx_Get_Configuration_Register_Setting(as60xx, idx) == As60xx_Read_Register_1_Dword(as60xx, As60xx_Get_Configuration_Register_Address(as60xx, idx)) );
 8001c66:	7b3b      	ldrb	r3, [r7, #12]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe76 	bl	800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 8001c70:	4604      	mov	r4, r0
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe5a 	bl	8001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fefb 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	4013      	ands	r3, r2
 8001c98:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	733b      	strb	r3, [r7, #12]
 8001ca0:	7b3a      	ldrb	r2, [r7, #12]
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3de      	bcc.n	8001c66 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x6e>
    }

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001ca8:	218d      	movs	r1, #141	@ 0x8d
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe6c 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001cb0:	2187      	movs	r1, #135	@ 0x87
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fe68 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 8001cb8:	219a      	movs	r1, #154	@ 0x9a
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fe64 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	4798      	blx	r3
    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 8001cc8:	2189      	movs	r1, #137	@ 0x89
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe5c 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    if( configurationCorrect )
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xea>
    {
        as60xx->State = AS60XX_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        result = RESULT_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}

08001cee <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>:

static inline Result As60xx_Start_Measurements(ScioSense_As60xx* as60xx)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001cfa:	218d      	movs	r1, #141	@ 0x8d
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fe43 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 8001d02:	219a      	movs	r1, #154	@ 0x9a
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe3f 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2014      	movs	r0, #20
 8001d10:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 8001d12:	2189      	movs	r1, #137	@ 0x89
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fe37 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_ON);
 8001d1a:	218b      	movs	r1, #139	@ 0x8b
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fe33 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    wait(120);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2078      	movs	r0, #120	@ 0x78
 8001d28:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 8001d2a:	218f      	movs	r1, #143	@ 0x8f
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fe82 	bl	8001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_MCT_STATE_Msk )
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx+0x56>
    {
        result = RESULT_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>:
    }
    return result;
}

static inline uint32_t As60xx_GetSupplyVoltageMv(ScioSense_As60xx* as60xx)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_VCC_VOLTAGE_MEASUREMENT);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	21da      	movs	r1, #218	@ 0xda
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe28 	bl	80019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
    wait(110);     // Wait for the measurement to complete
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	206e      	movs	r0, #110	@ 0x6e
 8001d68:	4798      	blx	r3
  
    uint32_t measurement = As60xx_Read_Register_1_Dword(as60xx, AS60XX_SRR_VCC_VAL_ADDRESS);
 8001d6a:	21e5      	movs	r1, #229	@ 0xe5
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fe85 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001d72:	60f8      	str	r0, [r7, #12]
  
    return (2150 + measurement * 25);
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009a      	lsls	r2, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	f603 0366 	addw	r3, r3, #2150	@ 0x866
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>:

static inline float As60xx_GetHsClkFreqHz(ScioSense_As60xx* as60xx)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_HIGH_SPEED_CLOCK_CAL);
 8001d94:	2240      	movs	r2, #64	@ 0x40
 8001d96:	21da      	movs	r1, #218	@ 0xda
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fe0a 	bl	80019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
    wait(110);     // Wait for the measurement to complete
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	206e      	movs	r0, #110	@ 0x6e
 8001da4:	4798      	blx	r3
  
    float highSpeedClockCalibration = (float)As60xx_Read_Register_1_Dword(as60xx, AS60XX_SRR_HCC_VAL_ADDRESS);
 8001da6:	21e4      	movs	r1, #228	@ 0xe4
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fe67 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001dae:	ee07 0a90 	vmov	s15, r0
 8001db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db6:	edc7 7a03 	vstr	s15, [r7, #12]
  
    return (highSpeedClockCalibration / 8.0);
 8001dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbe:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001dc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc6:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>:

static inline As60xx_Timestamp As60xx_GetTimestamp(ScioSense_As60xx* as60xx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    As60xx_Timestamp timestamp;
    timestamp.hours   =           (as60xx->Status[AS60XX_STATUS_SRR_TS_HOUR_INDEX]     & AS60XX_E6_TS_HOUR_Msk)   >> AS60XX_E6_TS_HOUR_Pos;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001de4:	f3c3 0215 	ubfx	r2, r3, #0, #22
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	601a      	str	r2, [r3, #0]
    timestamp.minutes = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_MIN_Msk)    >> AS60XX_E7_TS_MIN_Pos);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	711a      	strb	r2, [r3, #4]
    timestamp.seconds = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_SEC_Msk)    >> AS60XX_E6_TS_HOUR_Pos);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	715a      	strb	r2, [r3, #5]
  
    return timestamp;
 8001e06:	bf00      	nop
}
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_ZL13As60xx_UpdateP16ScioSense_As60xx>:

    return result;
}

AS60xx_Measure_Type As60xx_Update(ScioSense_As60xx* as60xx)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    uint8_t newData = AS60XX_NO_MEASUREMENT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

    As60xx_Read_Register_N_Dword(as60xx, AS60XX_SRR_IRQ_FLAG_ADDRESS, as60xx->Status, AS60XX_AMOUNT_STATUS_REGISTERS);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001e26:	230f      	movs	r3, #15
 8001e28:	21e0      	movs	r1, #224	@ 0xe0
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe5f 	bl	8001aee <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
    
    if( 1 )	// !(as60xx->Status[AS60XX_STATUS_SRR_ERR_FLAG_INDEX])
    {
        if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & AS60XX_E2_TM_UPD_Msk )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x40>
        {
            As60xx_Read_Register_N_Dword(as60xx, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferTemperature, AS60XX_AMOUNT_FDB_REGISTERS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8001e44:	231c      	movs	r3, #28
 8001e46:	2180      	movs	r1, #128	@ 0x80
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fe50 	bl	8001aee <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
            newData = AS60XX_TEMPERATURE_MEASUREMENT;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e010      	b.n	8001e76 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x62>
        }
        else if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & (AS60XX_E2_US_U_UPD_Msk | AS60XX_E2_US_D_UPD_Msk | AS60XX_E2_US_TOF_UPD_Msk) )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8001e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x62>
        {
            As60xx_Read_Register_N_Dword(as60xx, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferUltrasound, AS60XX_AMOUNT_FDB_REGISTERS);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8001e68:	231c      	movs	r3, #28
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fe3e 	bl	8001aee <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
            newData = AS60XX_TOF_MEASUREMENT;
 8001e72:	2302      	movs	r3, #2
 8001e74:	73fb      	strb	r3, [r7, #15]
        }    
    }

    As60xx_Write_8_Bit_Address_Register(as60xx, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_FES_CLR_CLEAR);
 8001e76:	2204      	movs	r2, #4
 8001e78:	21dd      	movs	r1, #221	@ 0xdd
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fdb2 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001e80:	218d      	movs	r1, #141	@ 0x8d
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fd80 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    return newData;
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofUp(ScioSense_As60xx* as60xx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_U_INDEX];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofDown(ScioSense_As60xx* as60xx)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_D_INDEX];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmountHitsForSumTof(ScioSense_As60xx* as60xx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    return ( (as60xx->CR[AS60XX_CR_ARRAY_CR_USM_TOF_INDEX] & AS60XX_CA_TOF_HIT_SUM_NO_Msk) >> AS60XX_CA_TOF_HIT_SUM_NO_Pos );
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 031f 	and.w	r3, r3, #31
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>:

static inline uint32_t As60xx_CalculateTDCTimePs(ScioSense_As60xx* as60xx, uint32_t contentTDCRegister)
{
 8001ee6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    uint8_t frequencyTDC = ( (as60xx->CR[AS60XX_CR_ARRAY_CR_CPM_INDEX] & AS60XX_C5_HSC_DIV_MODE_Msk) >> AS60XX_C5_HSC_DIV_MODE_Pos );
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8001ef6:	b2c9      	uxtb	r1, r1
 8001ef8:	f001 0101 	and.w	r1, r1, #1
 8001efc:	73f9      	strb	r1, [r7, #15]
    uint64_t tPeriodHSO;
    if( frequencyTDC == AS60XX_C5_HSC_DIV_MODE_4MHZ )
 8001efe:	7bf9      	ldrb	r1, [r7, #15]
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d106      	bne.n	8001f12 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x2c>
    {
        tPeriodHSO = 250;
 8001f04:	f04f 00fa 	mov.w	r0, #250	@ 0xfa
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001f10:	e005      	b.n	8001f1e <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x38>
    }
    else
    {
        tPeriodHSO = 125;
 8001f12:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    }
    return (uint32_t)( (((uint64_t)contentTDCRegister) * tPeriodHSO * 1000) / (1<<16) );
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	2000      	movs	r0, #0
 8001f22:	468a      	mov	sl, r1
 8001f24:	4683      	mov	fp, r0
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	fb0b f001 	mul.w	r0, fp, r1
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	fb0a f101 	mul.w	r1, sl, r1
 8001f32:	4401      	add	r1, r0
 8001f34:	6938      	ldr	r0, [r7, #16]
 8001f36:	fba0 230a 	umull	r2, r3, r0, sl
 8001f3a:	4419      	add	r1, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0a00 	mov.w	sl, #0
 8001f46:	f04f 0b00 	mov.w	fp, #0
 8001f4a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f4e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f52:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f56:	4650      	mov	r0, sl
 8001f58:	4659      	mov	r1, fp
 8001f5a:	1a84      	subs	r4, r0, r2
 8001f5c:	eb61 0503 	sbc.w	r5, r1, r3
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	00a9      	lsls	r1, r5, #2
 8001f6a:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 8001f6e:	00a0      	lsls	r0, r4, #2
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	eb14 0802 	adds.w	r8, r4, r2
 8001f78:	eb45 0903 	adc.w	r9, r5, r3
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f90:	4690      	mov	r8, r2
 8001f92:	4699      	mov	r9, r3
 8001f94:	4640      	mov	r0, r8
 8001f96:	4649      	mov	r1, r9
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	0c02      	lsrs	r2, r0, #16
 8001fa2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fa6:	0c0b      	lsrs	r3, r1, #16
 8001fa8:	4613      	mov	r3, r2
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_ZL20As60xx_AmplitudeToMvmmm>:

    return ( (t_MI_M_1 / t_MI_R_1) - 1 ) * 1235 / 3.8;
}

static inline uint32_t As60xx_AmplitudeToMv(uint32_t AM, uint32_t AMCHigh, uint32_t AMCLow)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
    float VCal = 350.0 / 2.0;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <_ZL20As60xx_AmplitudeToMvmmm+0x74>)
 8001fc6:	61fb      	str	r3, [r7, #28]
    float AMCGradient = VCal / (float)(AMCHigh - AMCLow);
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fde:	edc7 7a06 	vstr	s15, [r7, #24]
    float AMCOffset = (float)(2 * AMCLow - AMCHigh) * AMCGradient;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	005a      	lsls	r2, r3, #1
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	edc7 7a05 	vstr	s15, [r7, #20]

    return (uint32_t)(AMCGradient * AM - AMCOffset);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	edd7 7a06 	vldr	s15, [r7, #24]
 800200c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002010:	edd7 7a05 	vldr	s15, [r7, #20]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201c:	ee17 3a90 	vmov	r3, s15
}
 8002020:	4618      	mov	r0, r3
 8002022:	3724      	adds	r7, #36	@ 0x24
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	432f0000 	.word	0x432f0000

08002030 <_ZL21As60xx_GetAmplitudeUpP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmplitudeUp(ScioSense_As60xx* as60xx)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    uint32_t AM_Up = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AM_U_INDEX];
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	617b      	str	r3, [r7, #20]
    uint32_t AMC_High = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VH_INDEX];
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002046:	613b      	str	r3, [r7, #16]
    uint32_t AMC_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VL_INDEX];
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800204e:	60fb      	str	r3, [r7, #12]

    return As60xx_AmplitudeToMv(AM_Up, AMC_High, AMC_Low);
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	6939      	ldr	r1, [r7, #16]
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff ffaf 	bl	8001fb8 <_ZL20As60xx_AmplitudeToMvmmm>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZL23As60xx_GetAmplitudeDownP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmplitudeDown(ScioSense_As60xx* as60xx)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    uint32_t AM_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AM_D_INDEX];
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002072:	617b      	str	r3, [r7, #20]
    uint32_t AMC_High = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VH_INDEX];
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207a:	613b      	str	r3, [r7, #16]
    uint32_t AMC_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VL_INDEX];
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002082:	60fb      	str	r3, [r7, #12]

    return As60xx_AmplitudeToMv(AM_Low, AMC_High, AMC_Low);
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	6939      	ldr	r1, [r7, #16]
 8002088:	6978      	ldr	r0, [r7, #20]
 800208a:	f7ff ff95 	bl	8001fb8 <_ZL20As60xx_AmplitudeToMvmmm>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZL29As60xx_PulseWidthRatioToFloatm>:

static inline float As60xx_PulseWidthRatioToFloat(uint32_t registerContent)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    float contentInteger = (float)((registerContent & AS60XX_FDB_US_PW_DECIMAL_Msk) >> AS60XX_FDB_US_PW_DECIMAL_Pos);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	09db      	lsrs	r3, r3, #7
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b0:	edc7 7a03 	vstr	s15, [r7, #12]
    float contentFractional = (float)(registerContent & AS60XX_FDB_US_PW_FRACTIONAL_Msk) * AS60XX_FDB_US_PW_FRACTIONAL_LSB;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80020e8 <_ZL29As60xx_PulseWidthRatioToFloatm+0x50>
 80020c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ca:	edc7 7a02 	vstr	s15, [r7, #8]
    return (contentInteger + contentFractional);
 80020ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80020d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020d6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80020da:	eeb0 0a67 	vmov.f32	s0, s15
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	3c000000 	.word	0x3c000000

080020ec <_ZL27As60xx_GetPulseWidthRatioUpP16ScioSense_As60xx>:

static inline float As60xx_GetPulseWidthRatioUp(ScioSense_As60xx* as60xx)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    return As60xx_PulseWidthRatioToFloat(as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_PW_U_INDEX]);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffcc 	bl	8002098 <_ZL29As60xx_PulseWidthRatioToFloatm>
 8002100:	eef0 7a40 	vmov.f32	s15, s0
}
 8002104:	eeb0 0a67 	vmov.f32	s0, s15
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZL29As60xx_GetPulseWidthRatioDownP16ScioSense_As60xx>:

static inline float As60xx_GetPulseWidthRatioDown(ScioSense_As60xx* as60xx)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
    return As60xx_PulseWidthRatioToFloat(as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_PW_D_INDEX]);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ffbb 	bl	8002098 <_ZL29As60xx_PulseWidthRatioToFloatm>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
}
 8002126:	eeb0 0a67 	vmov.f32	s0, s15
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>:
    as60xx->Param.CR19.ZCD_FHL_D            = ( (as60xx->CR[19]) & AS60XX_DB_ZCD_FHL_D_Msk )            >> AS60XX_DB_ZCD_FHL_D_Pos;
    as60xx->Param.CR19.NOT_USED_31_8        = ( (as60xx->CR[19]) & AS60XX_DB_NOT_USED_31_8_Msk )        >> AS60XX_DB_NOT_USED_31_8_Pos;
}

static inline void As60xx_Update_Configuration(ScioSense_As60xx* as60xx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    /* Writes all parameters into every configuration register */
    /* Parameter for CR[0] */
    as60xx->CR[0]   = 0;// Clearing the register
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
    as60xx->CR[0]   |= AS60XX_C0_WS_DIS_SET             (as60xx->Param.CR0.WS_DIS);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]
    /* Parameter for CR[1] */
    as60xx->CR[1]   = 0;// Clearing the register
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_TPW_SET             (as60xx->Param.CR1.PI_TPW);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	f892 2248 	ldrb.w	r2, [r2, #584]	@ 0x248
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_EN_SET              (as60xx->Param.CR1.PI_EN);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_OUT_MODE_SET        (as60xx->Param.CR1.PI_OUT_MODE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 324a 	ldrb.w	r3, [r3, #586]	@ 0x24a
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_UPD_MODE_SET        (as60xx->Param.CR1.PI_UPD_MODE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 324b 	ldrb.w	r3, [r3, #587]	@ 0x24b
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_11_SET        (as60xx->Param.CR1.NOT_USED_11);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 80021b0:	02db      	lsls	r3, r3, #11
 80021b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_MODE_SET           (as60xx->Param.CR1.I2C_MODE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 80021c6:	031b      	lsls	r3, r3, #12
 80021c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_ADR_SET            (as60xx->Param.CR1.I2C_ADR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 80021dc:	039b      	lsls	r3, r3, #14
 80021de:	f403 13fe 	and.w	r3, r3, #2080768	@ 0x1fc000
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_21_SET        (as60xx->Param.CR1.NOT_USED_21);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 80021f2:	055b      	lsls	r3, r3, #21
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_SPI_INPORT_CFG_SET     (as60xx->Param.CR1.SPI_INPORT_CFG);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8002208:	059b      	lsls	r3, r3, #22
 800220a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_31_24_SET     (as60xx->Param.CR1.NOT_USED_31_24);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	615a      	str	r2, [r3, #20]
    /* Parameter for CR[2] */
    as60xx->CR[2]   = 0;// Clearing the register
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_DIR_SET            (as60xx->Param.CR2.GP0_DIR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_SEL_SET            (as60xx->Param.CR2.GP0_SEL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_DIR_SET            (as60xx->Param.CR2.GP1_DIR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_SEL_SET            (as60xx->Param.CR2.GP1_SEL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3255 	ldrb.w	r3, [r3, #597]	@ 0x255
 8002276:	019b      	lsls	r3, r3, #6
 8002278:	b2db      	uxtb	r3, r3
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_DIR_SET            (as60xx->Param.CR2.GP2_DIR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3256 	ldrb.w	r3, [r3, #598]	@ 0x256
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_SEL_SET            (as60xx->Param.CR2.GP2_SEL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_DIR_SET            (as60xx->Param.CR2.GP3_DIR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3258 	ldrb.w	r3, [r3, #600]	@ 0x258
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_SEL_SET            (as60xx->Param.CR2.GP3_SEL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 80022cc:	039b      	lsls	r3, r3, #14
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_DIR_SET            (as60xx->Param.CR2.GP4_DIR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 325a 	ldrb.w	r3, [r3, #602]	@ 0x25a
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_SEL_SET            (as60xx->Param.CR2.GP4_SEL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 325b 	ldrb.w	r3, [r3, #603]	@ 0x25b
 80022f6:	049b      	lsls	r3, r3, #18
 80022f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_DIR_SET            (as60xx->Param.CR2.GP5_DIR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_SEL_SET            (as60xx->Param.CR2.GP5_SEL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8002322:	059b      	lsls	r3, r3, #22
 8002324:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_NOT_USED_31_24_SET     (as60xx->Param.CR2.NOT_USED_31_24);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
    /* Parameter for CR[3] */
    as60xx->CR[3]   = 0;// Clearing the register
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_USM_OPT_SET            (as60xx->Param.CR3.USM_OPT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_NOT_USED_31_5_SET      (as60xx->Param.CR3.NOT_USED_31_5);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	61da      	str	r2, [r3, #28]
    /* Parameter for CR[4] */
    as60xx->CR[4]   = 0;// Clearing the register
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TDC_TMO_SET      (as60xx->Param.CR4.EF_EN_TDC_TMO);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3268 	ldrb.w	r3, [r3, #616]	@ 0x268
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TOF_TMO_SET      (as60xx->Param.CR4.EF_EN_TOF_TMO);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3269 	ldrb.w	r3, [r3, #617]	@ 0x269
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_AM_TMO_SET       (as60xx->Param.CR4.EF_EN_AM_TMO);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 326a 	ldrb.w	r3, [r3, #618]	@ 0x26a
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_OC_SET        (as60xx->Param.CR4.EF_EN_TM_OC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 326b 	ldrb.w	r3, [r3, #619]	@ 0x26b
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SC_SET        (as60xx->Param.CR4.EF_EN_TM_SC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 326c 	ldrb.w	r3, [r3, #620]	@ 0x26c
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_ZCC_ERR_SET      (as60xx->Param.CR4.EF_EN_ZCC_ERR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 326d 	ldrb.w	r3, [r3, #621]	@ 0x26d
 80023e8:	015b      	lsls	r3, r3, #5
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_LBD_ERR_SET      (as60xx->Param.CR4.EF_EN_LBD_ERR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 326e 	ldrb.w	r3, [r3, #622]	@ 0x26e
 80023fe:	019b      	lsls	r3, r3, #6
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_USM_SQC_TMO_SET  (as60xx->Param.CR4.EF_EN_USM_SQC_TMO);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 326f 	ldrb.w	r3, [r3, #623]	@ 0x26f
 8002414:	01db      	lsls	r3, r3, #7
 8002416:	b2db      	uxtb	r3, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SQC_TMO_SET   (as60xx->Param.CR4.EF_EN_TM_SQC_TMO);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TSQ_TMO_SET      (as60xx->Param.CR4.EF_EN_TSQ_TMO);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800243e:	025b      	lsls	r3, r3, #9
 8002440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_I2C_ACK_ERR_SET  (as60xx->Param.CR4.EF_EN_I2C_ACK_ERR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002454:	029b      	lsls	r3, r3, #10
 8002456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CHP_ERR_SET      (as60xx->Param.CR4.EF_EN_CHP_ERR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3273 	ldrb.w	r3, [r3, #627]	@ 0x273
 800246a:	02db      	lsls	r3, r3, #11
 800246c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWCU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3274 	ldrb.w	r3, [r3, #628]	@ 0x274
 8002480:	031b      	lsls	r3, r3, #12
 8002482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWDU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3275 	ldrb.w	r3, [r3, #629]	@ 0x275
 8002496:	035b      	lsls	r3, r3, #13
 8002498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWA_ERR_SET  (as60xx->Param.CR4.EF_EN_NVM_FWA_ERR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3276 	ldrb.w	r3, [r3, #630]	@ 0x276
 80024ac:	039b      	lsls	r3, r3, #14
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CPU_ERR_SET      (as60xx->Param.CR4.EF_EN_CPU_ERR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3277 	ldrb.w	r3, [r3, #631]	@ 0x277
 80024c2:	03db      	lsls	r3, r3, #15
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_FNS_SET     (as60xx->Param.CR4.IRQ_EN_TSQ_FNS);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TRANS_FNS_SET   (as60xx->Param.CR4.IRQ_EN_TRANS_FNS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3279 	ldrb.w	r3, [r3, #633]	@ 0x279
 80024ec:	045b      	lsls	r3, r3, #17
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_BLD_FNS_SET     (as60xx->Param.CR4.IRQ_EN_BLD_FNS);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 327a 	ldrb.w	r3, [r3, #634]	@ 0x27a
 8002502:	049b      	lsls	r3, r3, #18
 8002504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_CHKSUM_FNS_SET  (as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 327b 	ldrb.w	r3, [r3, #635]	@ 0x27b
 8002518:	04db      	lsls	r3, r3, #19
 800251a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_FW_S_SET        (as60xx->Param.CR4.IRQ_EN_FW_S);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 327c 	ldrb.w	r3, [r3, #636]	@ 0x27c
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_TO_SET      (as60xx->Param.CR4.IRQ_EN_TSQ_TO);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 327d 	ldrb.w	r3, [r3, #637]	@ 0x27d
 8002544:	055b      	lsls	r3, r3, #21
 8002546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_22_SET        (as60xx->Param.CR4.NOT_USED_22);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 327e 	ldrb.w	r3, [r3, #638]	@ 0x27e
 800255a:	059b      	lsls	r3, r3, #22
 800255c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_ERR_FLAG_SET    (as60xx->Param.CR4.IRQ_EN_ERR_FLAG);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 327f 	ldrb.w	r3, [r3, #639]	@ 0x27f
 8002570:	05db      	lsls	r3, r3, #23
 8002572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_26_24_SET     (as60xx->Param.CR4.NOT_USED_26_24);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3280 	ldrb.w	r3, [r3, #640]	@ 0x280
 8002586:	061b      	lsls	r3, r3, #24
 8002588:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_CPU_REQ_EN_GPH_SET     (as60xx->Param.CR4.CPU_REQ_EN_GPH);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 800259c:	06db      	lsls	r3, r3, #27
 800259e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_TS_GPT_RATE_SET        (as60xx->Param.CR4.TS_GPT_RATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 80025b2:	071b      	lsls	r3, r3, #28
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	621a      	str	r2, [r3, #32]
    /* Parameter for CR[5] */
    as60xx->CR[5]   = 0;// Clearing the register
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_MODE_SET       (as60xx->Param.CR5.HSC_DIV_MODE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3283 	ldrb.w	r3, [r3, #643]	@ 0x283
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_1_SET         (as60xx->Param.CR5.NOT_USED_1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_CLK_ST_SET         (as60xx->Param.CR5.HSC_CLK_ST);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3285 	ldrb.w	r3, [r3, #645]	@ 0x285
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	f003 031c 	and.w	r3, r3, #28
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_7_5_SET       (as60xx->Param.CR5.NOT_USED_7_5);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3286 	ldrb.w	r3, [r3, #646]	@ 0x286
 800260a:	015b      	lsls	r3, r3, #5
 800260c:	b2db      	uxtb	r3, r3
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_SET            (as60xx->Param.CR5.HSC_DIV);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3287 	ldrb.w	r3, [r3, #647]	@ 0x287
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_RATE_SET           (as60xx->Param.CR5.HSC_RATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3288 	ldrb.w	r3, [r3, #648]	@ 0x288
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_MODE_CPU_SET       (as60xx->Param.CR5.HSC_MODE_CPU);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3289 	ldrb.w	r3, [r3, #649]	@ 0x289
 800264a:	031b      	lsls	r3, r3, #12
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_VM_RATE_SET            (as60xx->Param.CR5.VM_RATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 328a 	ldrb.w	r3, [r3, #650]	@ 0x28a
 8002660:	035b      	lsls	r3, r3, #13
 8002662:	b29b      	uxth	r3, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_LBD_TH_SET             (as60xx->Param.CR5.LBD_TH);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 328b 	ldrb.w	r3, [r3, #651]	@ 0x28b
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TSV_UPD_MODE_SET       (as60xx->Param.CR5.TSV_UPD_MODE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 328c 	ldrb.w	r3, [r3, #652]	@ 0x28c
 800268a:	059b      	lsls	r3, r3, #22
 800268c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_BF_SEL_SET             (as60xx->Param.CR5.BF_SEL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 328d 	ldrb.w	r3, [r3, #653]	@ 0x28d
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_CHP_HV_SEL_SET         (as60xx->Param.CR5.CHP_HV_SEL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 328e 	ldrb.w	r3, [r3, #654]	@ 0x28e
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_28_SET        (as60xx->Param.CR5.NOT_USED_28);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 328f 	ldrb.w	r3, [r3, #655]	@ 0x28f
 80026cc:	071b      	lsls	r3, r3, #28
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TI_PATH_SEL_SET        (as60xx->Param.CR5.TI_PATH_SEL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026e2:	075b      	lsls	r3, r3, #29
 80026e4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_31_SET        (as60xx->Param.CR5.NOT_USED_31);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80026f8:	07db      	lsls	r3, r3, #31
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Parameter for CR[6] */
    as60xx->CR[6]   = 0;// Clearing the register
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_MR_CT_SET              (as60xx->Param.CR6.MR_CT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8002710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_MCM_SET             (as60xx->Param.CR6.TS_MCM);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 8002724:	035b      	lsls	r3, r3, #13
 8002726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_T_EN_SET         (as60xx->Param.CR6.TS_PP_T_EN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3299 	ldrb.w	r3, [r3, #665]	@ 0x299
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_F_EN_SET         (as60xx->Param.CR6.TS_PP_F_EN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 329a 	ldrb.w	r3, [r3, #666]	@ 0x29a
 8002750:	03db      	lsls	r3, r3, #15
 8002752:	b29b      	uxth	r3, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_MODE_SET         (as60xx->Param.CR6.TS_PP_MODE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 329b 	ldrb.w	r3, [r3, #667]	@ 0x29b
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_RATE_SET        (as60xx->Param.CR6.TS_CST_RATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800277a:	045b      	lsls	r3, r3, #17
 800277c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_NVR_RATE_SET        (as60xx->Param.CR6.TS_NVR_RATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8002790:	051b      	lsls	r3, r3, #20
 8002792:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_NOT_USED_25_24_SET     (as60xx->Param.CR6.NOT_USED_25_24);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 329e 	ldrb.w	r3, [r3, #670]	@ 0x29e
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_MODE_SET        (as60xx->Param.CR6.TS_CHP_MODE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 329f 	ldrb.w	r3, [r3, #671]	@ 0x29f
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_WT_SET          (as60xx->Param.CR6.TS_CHP_WT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80027d2:	071b      	lsls	r3, r3, #28
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_MODE_SET        (as60xx->Param.CR6.TS_CST_MODE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 80027e4:	07db      	lsls	r3, r3, #31
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Parameter for CR[7] */
    as60xx->CR[7]   = 0;// Clearing the register
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_RATE_SET            (as60xx->Param.CR7.TM_RATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PAUSE_SET          (as60xx->Param.CR7.TPM_PAUSE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_MODE_SET            (as60xx->Param.CR7.TM_MODE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002826:	035b      	lsls	r3, r3, #13
 8002828:	b29b      	uxth	r3, r3
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_16_SET        (as60xx->Param.CR7.NOT_USED_16);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PORT_MODE_SET      (as60xx->Param.CR7.TPM_PORT_MODE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 32ab 	ldrb.w	r3, [r3, #683]	@ 0x2ab
 8002850:	045b      	lsls	r3, r3, #17
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_PORT_ORDER_SET      (as60xx->Param.CR7.TM_PORT_ORDER);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 32ac 	ldrb.w	r3, [r3, #684]	@ 0x2ac
 8002866:	049b      	lsls	r3, r3, #18
 8002868:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CLOAD_TRIM_SET     (as60xx->Param.CR7.TPM_CLOAD_TRIM);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 32ad 	ldrb.w	r3, [r3, #685]	@ 0x2ad
 800287c:	051b      	lsls	r3, r3, #20
 800287e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CYCLE_SEL_SET      (as60xx->Param.CR7.TPM_CYCLE_SEL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 32ae 	ldrb.w	r3, [r3, #686]	@ 0x2ae
 8002892:	059b      	lsls	r3, r3, #22
 8002894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_FAKE_NO_SET        (as60xx->Param.CR7.TPM_FAKE_NO);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 32af 	ldrb.w	r3, [r3, #687]	@ 0x2af
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_31_24_SET     (as60xx->Param.CR7.NOT_USED_31_24);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 32b0 	ldrb.w	r3, [r3, #688]	@ 0x2b0
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Parameter for CR[8] */
    as60xx->CR[8]   = 0;// Clearing the register
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_PAUSE_SET          (as60xx->Param.CR8.USM_PAUSE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_AZ_DIS_SET      (as60xx->Param.CR8.TI_PGA_AZ_DIS);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 32b5 	ldrb.w	r3, [r3, #693]	@ 0x2b5
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_DIR_MODE_SET       (as60xx->Param.CR8.USM_DIR_MODE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_NOISE_MASK_WIN_SET (as60xx->Param.CR8.USM_NOISE_MASK_WIN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8002916:	019b      	lsls	r3, r3, #6
 8002918:	b29b      	uxth	r3, r3
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_TO_SET             (as60xx->Param.CR8.USM_TO);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 32bc 	ldrb.w	r3, [r3, #700]	@ 0x2bc
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_18_SET        (as60xx->Param.CR8.NOT_USED_18);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 32bd 	ldrb.w	r3, [r3, #701]	@ 0x2bd
 8002940:	049b      	lsls	r3, r3, #18
 8002942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_RLS_MODE_SET       (as60xx->Param.CR8.USM_RLS_MODE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 32be 	ldrb.w	r3, [r3, #702]	@ 0x2be
 8002956:	04db      	lsls	r3, r3, #19
 8002958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_ZCC_RATE_SET           (as60xx->Param.CR8.ZCC_RATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 32bf 	ldrb.w	r3, [r3, #703]	@ 0x2bf
 800296c:	051b      	lsls	r3, r3, #20
 800296e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_29_23_SET     (as60xx->Param.CR8.NOT_USED_29_23);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002982:	05db      	lsls	r3, r3, #23
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_CON_MODE_SET    (as60xx->Param.CR8.TI_PGA_CON_MODE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8002994:	079b      	lsls	r3, r3, #30
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Parameter for CR[9] */
    as60xx->CR[9]   = 0;// Clearing the register
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_CLK_DIV_SET        (as60xx->Param.CR9.FBG_CLK_DIV);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80029ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_MODE_SET           (as60xx->Param.CR9.FBG_MODE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 32c9 	ldrb.w	r3, [r3, #713]	@ 0x2c9
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_PHASE_INS_SET      (as60xx->Param.CR9.FBG_PHASE_INS);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 32ca 	ldrb.w	r3, [r3, #714]	@ 0x2ca
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_PRE_SET      (as60xx->Param.CR9.FBG_BURST_PRE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_POST_SET     (as60xx->Param.CR9.FBG_BURST_POST);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80029fe:	059b      	lsls	r3, r3, #22
 8002a00:	f003 637c 	and.w	r3, r3, #264241152	@ 0xfc00000
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_28_SET        (as60xx->Param.CR9.NOT_USED_28);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 32cd 	ldrb.w	r3, [r3, #717]	@ 0x2cd
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_29_SET        (as60xx->Param.CR9.NOT_USED_29);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 32ce 	ldrb.w	r3, [r3, #718]	@ 0x2ce
 8002a2a:	075b      	lsls	r3, r3, #29
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_TOF_HIT_MODE_SET       (as60xx->Param.CR9.TOF_HIT_MODE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 32cf 	ldrb.w	r3, [r3, #719]	@ 0x2cf
 8002a40:	079b      	lsls	r3, r3, #30
 8002a42:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_31_SET        (as60xx->Param.CR9.NOT_USED_31);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
 8002a56:	07db      	lsls	r3, r3, #31
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34
    /* Parameter for CR[10] */
    as60xx->CR[10]  = 0;// Clearing the register
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_0_SET         (as60xx->Param.CR10.NOT_USED_0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 32d1 	ldrb.w	r3, [r3, #721]	@ 0x2d1
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_START_SET      (as60xx->Param.CR10.TOF_HIT_START);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 32d2 	ldrb.w	r3, [r3, #722]	@ 0x2d2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_IGN_SET        (as60xx->Param.CR10.TOF_HIT_IGN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 32d3 	ldrb.w	r3, [r3, #723]	@ 0x2d3
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_SUM_NO_SET     (as60xx->Param.CR10.TOF_HIT_SUM_NO);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 32d4 	ldrb.w	r3, [r3, #724]	@ 0x2d4
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_END_SET        (as60xx->Param.CR10.TOF_HIT_END);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 32d5 	ldrb.w	r3, [r3, #725]	@ 0x2d5
 8002ac2:	035b      	lsls	r3, r3, #13
 8002ac4:	f403 237e 	and.w	r3, r3, #1040384	@ 0xfe000
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_21_20_SET     (as60xx->Param.CR10.NOT_USED_21_20);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 32d6 	ldrb.w	r3, [r3, #726]	@ 0x2d6
 8002ad8:	051b      	lsls	r3, r3, #20
 8002ada:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_EDGE_MODE_SET      (as60xx->Param.CR10.TOF_EDGE_MODE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 32d7 	ldrb.w	r3, [r3, #727]	@ 0x2d7
 8002aee:	059b      	lsls	r3, r3, #22
 8002af0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_RATE_INIT_SET      (as60xx->Param.CR10.TOF_RATE_INIT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 32d8 	ldrb.w	r3, [r3, #728]	@ 0x2d8
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_31_30_SET     (as60xx->Param.CR10.NOT_USED_31_30);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 32d9 	ldrb.w	r3, [r3, #729]	@ 0x2d9
 8002b1a:	079b      	lsls	r3, r3, #30
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameter for CR[11] */
    as60xx->CR[11]  = 0;// Clearing the register
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_RATE_SET            (as60xx->Param.CR11.AM_RATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_3_SET         (as60xx->Param.CR11.NOT_USED_3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 32db 	ldrb.w	r3, [r3, #731]	@ 0x2db
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_END_SET          (as60xx->Param.CR11.AM_PD_END);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_11_9_SET      (as60xx->Param.CR11.NOT_USED_11_9);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 32dd 	ldrb.w	r3, [r3, #733]	@ 0x2dd
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AMC_RATE_SET           (as60xx->Param.CR11.AMC_RATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 32de 	ldrb.w	r3, [r3, #734]	@ 0x2de
 8002b88:	031b      	lsls	r3, r3, #12
 8002b8a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PWD_EN_SET             (as60xx->Param.CR11.PWD_EN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 32df 	ldrb.w	r3, [r3, #735]	@ 0x2df
 8002b9e:	03db      	lsls	r3, r3, #15
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_TRIM_SET           (as60xx->Param.CR11.PGA_TRIM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_EN_MODE_SET        (as60xx->Param.CR11.PGA_EN_MODE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 32e1 	ldrb.w	r3, [r3, #737]	@ 0x2e1
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_MODE_SET           (as60xx->Param.CR11.PGA_MODE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 32e2 	ldrb.w	r3, [r3, #738]	@ 0x2e2
 8002bde:	055b      	lsls	r3, r3, #21
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_22_SET        (as60xx->Param.CR11.NOT_USED_22);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 8002bf4:	059b      	lsls	r3, r3, #22
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_START_MODE_SET   (as60xx->Param.CR11.AM_PD_START_MODE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_ZCD_FHL_INIT_SET       (as60xx->Param.CR11.ZCD_FHL_INIT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Parameter for CR[12] */
    as60xx->CR[12]  = 0;// Clearing the register
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    as60xx->CR[12]  |= AS60XX_CC_TRIM1_SET              (as60xx->Param.CR12.TRIM1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Parameter for CR[13] */
    as60xx->CR[13]  = 0;// Clearing the register
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	@ 0x44
    as60xx->CR[13]  |= AS60XX_CD_TRIM2_SET              (as60xx->Param.CR13.TRIM2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Parameter for CR[14] */
    as60xx->CR[14]  = 0;// Clearing the register
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	649a      	str	r2, [r3, #72]	@ 0x48
    as60xx->CR[14]  |= AS60XX_CE_TRIM3_SET              (as60xx->Param.CR14.TRIM3);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Parameter for CR[15] */
    as60xx->CR[15]  = 0;// Clearing the register
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_TOF_RATE_SET           (as60xx->Param.CR15.TOF_RATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
 8002c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_NOT_USED_31_6_SET      (as60xx->Param.CR15.NOT_USED_31_6);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002c8e:	019b      	lsls	r3, r3, #6
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Parameter for CR[16] */
    as60xx->CR[16]  = 0;// Clearing the register
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_USM_RLS_DLY_U_SET      (as60xx->Param.CR16.USM_RLS_DLY_U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_NOT_USED_31_19_SET     (as60xx->Param.CR16.NOT_USED_31_19);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8002cba:	04db      	lsls	r3, r3, #19
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Parameter for CR[17] */
    as60xx->CR[17]  = 0;// Clearing the register
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_USM_RLS_DLY_D_SET      (as60xx->Param.CR17.USM_RLS_DLY_D);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_NOT_USED_31_19_SET     (as60xx->Param.CR17.NOT_USED_31_19);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8002ce6:	04db      	lsls	r3, r3, #19
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Parameter for CR[18] */
    as60xx->CR[18]  = 0;// Clearing the register
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_ZCD_FHL_U_SET          (as60xx->Param.CR18.ZCD_FHL_U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	f892 230c 	ldrb.w	r2, [r2, #780]	@ 0x30c
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_NOT_USED_31_8_SET      (as60xx->Param.CR18.NOT_USED_31_8);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Parameter for CR[19] */
    as60xx->CR[19]  = 0;// Clearing the register
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_ZCD_FHL_D_SET          (as60xx->Param.CR19.ZCD_FHL_D);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	f892 2314 	ldrb.w	r2, [r2, #788]	@ 0x314
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_NOT_USED_31_8_SET      (as60xx->Param.CR19.NOT_USED_31_8);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 3318 	ldr.w	r3, [r3, #792]	@ 0x318
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>:

static inline void As6xx_Initialize_Configuration(ScioSense_As60xx* as60xx)
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint8_t registersToWrite[] = {
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x20>)
 8002d56:	f107 0408 	add.w	r4, r7, #8
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	6023      	str	r3, [r4, #0]
        0x0C0, 0X0C1, 0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C6, 0x0C7, 0x0C8, 0x0C9, 0x0CA, 0x0CB, 0x0CC, 0x0CD, 0x0CE,
        0x0D0, 0x0D1, 0x0D2,                                                  0x0DA, 0x0DB};
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 8002d64:	2300      	movs	r3, #0
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e010      	b.n	8002d8c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x40>
 8002d6a:	bf00      	nop
 8002d6c:	0800c214 	.word	0x0800c214
  {
    as60xx->Addresses[idx] = registersToWrite[idx];
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	3320      	adds	r3, #32
 8002d74:	443b      	add	r3, r7
 8002d76:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d7a:	7ffa      	ldrb	r2, [r7, #31]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3230      	adds	r2, #48	@ 0x30
 8002d82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 8002d86:	7ffb      	ldrb	r3, [r7, #31]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	2b13      	cmp	r3, #19
 8002d90:	d9ee      	bls.n	8002d70 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x24>
  }

  as60xx->State = AS60XX_STATE_RESET;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

  as60xx->Param.CR0.WS_DIS              = 0xAF0A7435;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4aca      	ldr	r2, [pc, #808]	@ (80030c8 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x37c>)
 8002d9e:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

  as60xx->Param.CR1.PI_TPW              = 0;                            /*!< Pulse Interface, Pulse Width */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
  as60xx->Param.CR1.PI_EN               = 0;                            /*!< Pulse Interface Enable */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
  as60xx->Param.CR1.PI_OUT_MODE         = 0;                            /*!< Pulse Interface Output Mode */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 224a 	strb.w	r2, [r3, #586]	@ 0x24a
  as60xx->Param.CR1.PI_UPD_MODE         = 0;                            /*!< Pulse Interface Update Mode */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 224b 	strb.w	r2, [r3, #587]	@ 0x24b
  as60xx->Param.CR1.NOT_USED_11         = AS60XX_C1_NOT_USED_11;        /*!< Mandatory setting: b0 */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c
  as60xx->Param.CR1.I2C_MODE            = 0;                            /*!< 2-wire master interface mode */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
  as60xx->Param.CR1.I2C_ADR             = 0;                            /*!< 2-wire master interface slave address */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e
  as60xx->Param.CR1.NOT_USED_21         = AS60XX_C1_NOT_USED_21;        /*!< Mandatory setting: b0 */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f
  as60xx->Param.CR1.SPI_INPORT_CFG      = 0;                            /*!< Configuration of SPI input ports */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250
  as60xx->Param.CR1.NOT_USED_31_24      = AS60XX_C1_NOT_USED_31_24;     /*!< Not used */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251

  as60xx->Param.CR2.GP0_DIR             = 0;                            /*!< Direction of General Purpose Port 0 */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
  as60xx->Param.CR2.GP0_SEL             = 0;                            /*!< Output Select of General Purpose Port 0 */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253
  as60xx->Param.CR2.GP1_DIR             = 0;                            /*!< Direction of General Purpose Port 1 */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
  as60xx->Param.CR2.GP1_SEL             = 0;                            /*!< Output Select of General Purpose Port 1 */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  as60xx->Param.CR2.GP2_DIR             = 0;                            /*!< Direction of General Purpose Port 2 */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2256 	strb.w	r2, [r3, #598]	@ 0x256
  as60xx->Param.CR2.GP2_SEL             = 0;                            /*!< Output Select of General Purpose Port 2 */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
  as60xx->Param.CR2.GP3_DIR             = 0;                            /*!< Direction of General Purpose Port 3 */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
  as60xx->Param.CR2.GP3_SEL             = 0;                            /*!< Output Select of General Purpose Port 3 */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
  as60xx->Param.CR2.GP4_DIR             = 0;                            /*!< Direction of General Purpose Port 4 */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
  as60xx->Param.CR2.GP4_SEL             = 0;                            /*!< Output Select of General Purpose Port 4 */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
  as60xx->Param.CR2.GP5_DIR             = 0;                            /*!< Direction of General Purpose Port 5 */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
  as60xx->Param.CR2.GP5_SEL             = 0;                            /*!< Output Select of General Purpose Port 5 */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  as60xx->Param.CR2.NOT_USED_31_24      = AS60XX_C2_NOT_USED_31_24;     /*!< Not used */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e

  as60xx->Param.CR3.USM_OPT             = 0;                            /*!< Mandatory setting: b00001 */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  as60xx->Param.CR3.NOT_USED_31_5       = AS60XX_C3_NOT_USED_31_5;      /*!< Not used */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  
  as60xx->Param.CR4.EF_EN_TDC_TMO       = 0;                            /*!< Error Flag Enable, TDC Timeout */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
  as60xx->Param.CR4.EF_EN_TOF_TMO       = 0;                            /*!< Error Flag Enable, TOF Timeout */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2269 	strb.w	r2, [r3, #617]	@ 0x269
  as60xx->Param.CR4.EF_EN_AM_TMO        = 0;                            /*!< Error Flag Enable, Amplitude Measurement Timeout */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
  as60xx->Param.CR4.EF_EN_TM_OC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Open Circuit */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
  as60xx->Param.CR4.EF_EN_TM_SC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Short Circuit */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 226c 	strb.w	r2, [r3, #620]	@ 0x26c
  as60xx->Param.CR4.EF_EN_ZCC_ERR       = 0;                            /*!< Error Flag Enable, Zero Cross Calibration Error */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 226d 	strb.w	r2, [r3, #621]	@ 0x26d
  as60xx->Param.CR4.EF_EN_LBD_ERR       = 0;                            /*!< Error Flag Enable, Low Battery Detect Error */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
  as60xx->Param.CR4.EF_EN_USM_SQC_TMO   = 0;                            /*!< Error Flag Enable, Ultrasonic Sequence Timeout */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 226f 	strb.w	r2, [r3, #623]	@ 0x26f
  as60xx->Param.CR4.EF_EN_TM_SQC_TMO    = 0;                            /*!< Error Flag Enable, Temperature Sequence Timeout */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
  as60xx->Param.CR4.EF_EN_TSQ_TMO       = 0;                            /*!< Error Flag Enable, Task Sequencer Timeout */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
  as60xx->Param.CR4.EF_EN_I2C_ACK_ERR   = 0;                            /*!< Error Flag Enable, EEPROM Acknowledge Error */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2272 	strb.w	r2, [r3, #626]	@ 0x272
  as60xx->Param.CR4.EF_EN_CHP_ERR       = 0;                            /*!< Mandatory setting: b0 */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2273 	strb.w	r2, [r3, #627]	@ 0x273
  as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWCU Error */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2274 	strb.w	r2, [r3, #628]	@ 0x274
  as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWDU Error */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2275 	strb.w	r2, [r3, #629]	@ 0x275
  as60xx->Param.CR4.EF_EN_NVM_FWA_ERR   = 0;                            /*!< Error Flag Enable, NVM Applied Firmware Error */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2276 	strb.w	r2, [r3, #630]	@ 0x276
  as60xx->Param.CR4.EF_EN_CPU_ERR       = 0;                            /*!< Error Flag Enable, CPU Error */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2277 	strb.w	r2, [r3, #631]	@ 0x277
  as60xx->Param.CR4.IRQ_EN_TSQ_FNS      = 0;                            /*!< Interrupt Request Enable, Task Sequencer finished */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
  as60xx->Param.CR4.IRQ_EN_TRANS_FNS    = 0;                            /*!< Interrupt Request Enable, FW Transaction finished */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2279 	strb.w	r2, [r3, #633]	@ 0x279
  as60xx->Param.CR4.IRQ_EN_BLD_FNS      = 0;                            /*!< Interrupt Request Enable, Bootload finished */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 227a 	strb.w	r2, [r3, #634]	@ 0x27a
  as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS   = 0;                            /*!< Interrupt Request Enable, Checksum generation finished */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 227b 	strb.w	r2, [r3, #635]	@ 0x27b
  as60xx->Param.CR4.IRQ_EN_FW_S         = 0;                            /*!< Interrupt Request Enable, Firmware, synchronized with task sequencer */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
  as60xx->Param.CR4.IRQ_EN_TSQ_TO       = 0;                            /*!< Interrupt Request Enable, Firmware */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
  as60xx->Param.CR4.NOT_USED_22         = AS60XX_C4_NOT_USED_22;        /*!< Error Flag Enable, Charge Pump Error */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 227e 	strb.w	r2, [r3, #638]	@ 0x27e
  as60xx->Param.CR4.IRQ_EN_ERR_FLAG     = 0;                            /*!< Interrupt Request Enable, Error Flag */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 227f 	strb.w	r2, [r3, #639]	@ 0x27f
  as60xx->Param.CR4.NOT_USED_26_24      = AS60XX_C4_NOT_USED_26_24;     /*!< Mandatory setting: b000 */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
  as60xx->Param.CR4.CPU_REQ_EN_GPH      = 0;                            /*!< CPU Request Enable, General Purpose Handling */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
  as60xx->Param.CR4.TS_GPT_RATE         = 0;                            /*!< General Purpose Timer Rate */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282
  
  as60xx->Param.CR5.HSC_DIV_MODE        = 0;                            /*!< High Speed Clock Divider Mode */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2283 	strb.w	r2, [r3, #643]	@ 0x283
  as60xx->Param.CR5.NOT_USED_1          = AS60XX_C5_NOT_USED_1;         /*!< Mandatory setting: b0 */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
  as60xx->Param.CR5.HSC_CLK_ST          = 0;                            /*!< High-Speed Clock Settling Time */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
  as60xx->Param.CR5.NOT_USED_7_5        = AS60XX_C5_NOT_USED_7_5;       /*!< Recommended setting: b001 */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
  as60xx->Param.CR5.HSC_DIV             = 0;                            /*!< High-Speed Clock Divider */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
  as60xx->Param.CR5.HSC_RATE            = 0;                            /*!< High-Speed Clock Calibration Rate */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2288 	strb.w	r2, [r3, #648]	@ 0x288
  as60xx->Param.CR5.HSC_MODE_CPU        = 0;                            /*!< High-Speed Clock Mode CPU */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
  as60xx->Param.CR5.VM_RATE             = 0;                            /*!< VCC Voltage measurement rate */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 228a 	strb.w	r2, [r3, #650]	@ 0x28a
  as60xx->Param.CR5.LBD_TH              = 0;                            /*!< Low battery detection threshold */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 228b 	strb.w	r2, [r3, #651]	@ 0x28b
  as60xx->Param.CR5.TSV_UPD_MODE        = 0;                            /*!< Time stamp update mode */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 228c 	strb.w	r2, [r3, #652]	@ 0x28c
  as60xx->Param.CR5.BF_SEL              = 0;                            /*!< Base Frequency Select */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 228d 	strb.w	r2, [r3, #653]	@ 0x28d
  as60xx->Param.CR5.CHP_HV_SEL          = 1;         			/*!< Selection of charge pump voltage */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 228e 	strb.w	r2, [r3, #654]	@ 0x28e
  as60xx->Param.CR5.NOT_USED_28         = AS60XX_C5_NOT_USED_28;        /*!< Mandatory setting: b0 */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 228f 	strb.w	r2, [r3, #655]	@ 0x28f
  as60xx->Param.CR5.TI_PATH_SEL         = 0;                            /*!< Transducer Fire Buffer Impedance */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  as60xx->Param.CR5.NOT_USED_31         = AS60XX_C5_NOT_USED_31;        /*!< Mandatory setting: b0 */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  as60xx->Param.CR6.MR_CT               = 0;                            /*!< Measure rate cycle time */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  as60xx->Param.CR6.TS_MCM              = 0;                            /*!< Task Sequencer Measure Cycle Mode */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
  as60xx->Param.CR6.TS_PP_T_EN          = 0;                            /*!< Enables final post processing T */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
  as60xx->Param.CR6.TS_PP_F_EN          = 0;                            /*!< Enables post processing F */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
  as60xx->Param.CR6.TS_PP_MODE          = 0;                            /*!< Post processing mode */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
  as60xx->Param.CR6.TS_CST_RATE         = 0;                            /*!< Firmware Check(sum) Timer Rate */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  as60xx->Param.CR6.TS_NVR_RATE         = 0;                            /*!< Recall Timer Rate */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  as60xx->Param.CR6.NOT_USED_25_24      = AS60XX_C6_NOT_USED_25_24;     /*!< Mandatory setting: b01 */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
  as60xx->Param.CR6.NOT_USED_30      	= 0;                            /*!< Mandatory setting: b0 */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
  as60xx->Param.CR6.TS_CST_MODE         = 0;                            /*!< Checksum Handling Mode */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 22a2 	strb.w	r2, [r3, #674]	@ 0x2a2

  as60xx->Param.CR7.TM_RATE             = 0;                            /*!< Temperature Measurement Rate */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  as60xx->Param.CR7.TPM_PAUSE           = 0;                            /*!< Pause time between 2 temperature measurements */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  as60xx->Param.CR7.TM_MODE             = 0;                            /*!< Temperature Measurement Mode */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  as60xx->Param.CR7.NOT_USED_16         = AS60XX_C7_NOT_USED_16;        /*!< Mandatory setting: b0 */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
  as60xx->Param.CR7.TPM_PORT_MODE       = 0;                            /*!< Temperature Measurement Port Mode */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab
  as60xx->Param.CR7.TM_PORT_ORDER       = 0;                            /*!< Temperature Measurement Port Order */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
  as60xx->Param.CR7.TPM_CLOAD_TRIM      = 0;                            /*!< Temperature Measurement Load Trim */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 22ad 	strb.w	r2, [r3, #685]	@ 0x2ad
  as60xx->Param.CR7.TPM_CYCLE_SEL       = 0;                            /*!< Temperature Measurement Cycle Select */
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
  as60xx->Param.CR7.TPM_FAKE_NO         = 0;                            /*!< Number of Fake measurements */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
  as60xx->Param.CR7.NOT_USED_31_24      = AS60XX_C7_NOT_USED_31_24;     /*!< Mandatory setting: h00 */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0

  as60xx->Param.CR8.USM_PAUSE           = 0;                            /*!< Pause time between two ultrasonic measurements */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4
  as60xx->Param.CR8.TI_PGA_AZ_DIS       = AS60XX_C8_TI_PGA_AZ_DIS_ENABLED;             /*!< Mandatory setting: b0 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 22b5 	strb.w	r2, [r3, #693]	@ 0x2b5
  as60xx->Param.CR8.USM_DIR_MODE        = 0;                            /*!< Ultrasonic Measurement Direction Mode */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
  as60xx->Param.CR8.USM_NOISE_MASK_WIN  = 0;                            /*!< Noise Mask Window */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  as60xx->Param.CR8.USM_TO              = 0;                            /*!< Timeout */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 22bc 	strb.w	r2, [r3, #700]	@ 0x2bc
  as60xx->Param.CR8.NOT_USED_18         = AS60XX_C8_NOT_USED_18;        /*!< Mandatory setting: b0 */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 22bd 	strb.w	r2, [r3, #701]	@ 0x2bd
  as60xx->Param.CR8.USM_RLS_MODE        = 0;                            /*!< Select mode for multihit start release */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22be 	strb.w	r2, [r3, #702]	@ 0x2be
  as60xx->Param.CR8.ZCC_RATE            = 0;                            /*!< Zero Cross Calibration Rate */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
  as60xx->Param.CR8.NOT_USED_29_23      = 0;                            /*!< Mandatory setting: b0000000 */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  as60xx->Param.CR8.TI_PGA_CON_MODE     = AS60XX_C8_TI_PGA_CON_MODE_WITH_EXTERNAL;     /*!< Connection of PGA filter */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f8a3 22c4 	strh.w	r2, [r3, #708]	@ 0x2c4

  as60xx->Param.CR9.FBG_CLK_DIV         = 0;                            /*!< Clock divider for fire burst generator */
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
  as60xx->Param.CR9.FBG_MODE            = 0;                            /*!< Fire Burst Generator Mode */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
  as60xx->Param.CR9.FBG_PHASE_INS       = 0;                            /*!< Fire Burst Generator, Phase Insertion */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
  as60xx->Param.CR9.FBG_BURST_PRE       = 0;                            /*!< Fire Burst Generator, pre-burst */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	e001      	b.n	80030cc <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x380>
 80030c8:	af0a7435 	.word	0xaf0a7435
 80030cc:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
  as60xx->Param.CR9.FBG_BURST_POST      = 0;                            /*!< Fire Burst Generator, post-burst */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
  as60xx->Param.CR9.NOT_USED_28         = AS60XX_C9_NOT_USED_28;        /*!< Mandatory setting: b0 */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
  as60xx->Param.CR9.NOT_USED_29         = AS60XX_C9_NOT_USED_29;        /*!< Mandatory setting: b1 */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 22ce 	strb.w	r2, [r3, #718]	@ 0x2ce
  as60xx->Param.CR9.TOF_HIT_MODE        = 0;                            /*!< TOF data in FDB according to Multi-Hit Mode */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 22cf 	strb.w	r2, [r3, #719]	@ 0x2cf
  as60xx->Param.CR9.NOT_USED_31         = AS60XX_C9_NOT_USED_31;        /*!< Mandatory setting: b0 */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

  as60xx->Param.CR10.NOT_USED_0         = AS60XX_CA_NOT_USED_0;         /*!< Mandatory setting: b0 */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
  as60xx->Param.CR10.TOF_HIT_START      = 0;                            /*!< Defines number of detected hits (including first hit) */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2
  as60xx->Param.CR10.TOF_HIT_IGN        = 0;                            /*!< Number of multi hits ignored between two hits taken for TDC measurement */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 22d3 	strb.w	r2, [r3, #723]	@ 0x2d3
  as60xx->Param.CR10.TOF_HIT_SUM_NO     = 0;                            /*!< Number of hits taken for sum value of TOF measurement */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 22d4 	strb.w	r2, [r3, #724]	@ 0x2d4
  as60xx->Param.CR10.TOF_HIT_END        = 0;                            /*!< TOF Hits stored to frontend data buffer */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 22d5 	strb.w	r2, [r3, #725]	@ 0x2d5
  as60xx->Param.CR10.NOT_USED_21_20     = AS60XX_CA_NOT_USED_21_20;     /*!< Mandatory setting: b00 */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
  as60xx->Param.CR10.TOF_EDGE_MODE      = 0;                            /*!< Time of Flight, edge mode */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
  as60xx->Param.CR10.TOF_RATE_INIT      = 0;                            /*!< FWD copy of initial value for TOF rate */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 22d8 	strb.w	r2, [r3, #728]	@ 0x2d8
  as60xx->Param.CR10.NOT_USED_31_30     = AS60XX_CA_NOT_USED_31_30;     /*!< Not Used */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 22d9 	strb.w	r2, [r3, #729]	@ 0x2d9

  as60xx->Param.CR11.AM_RATE            = 0;                            /*!< Amplitude measurement rate */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
  as60xx->Param.CR11.NOT_USED_3         = AS60XX_CB_NOT_USED_3;         /*!< Default setting: b0 */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 22db 	strb.w	r2, [r3, #731]	@ 0x2db
  as60xx->Param.CR11.AM_PD_END          = 0;                            /*!< Amplitude measurement, end of peak detection */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
  as60xx->Param.CR11.NOT_USED_11_9      = AS60XX_CB_NOT_USED_11_9;      /*!< Mandatory setting: b111 */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2207      	movs	r2, #7
 800315c:	f883 22dd 	strb.w	r2, [r3, #733]	@ 0x2dd
  as60xx->Param.CR11.AMC_RATE           = 0;                            /*!< Amplitude measurement calibration rate */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 22de 	strb.w	r2, [r3, #734]	@ 0x2de
  as60xx->Param.CR11.PWD_EN             = 0;                            /*!< Enables pulse width detection */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 22df 	strb.w	r2, [r3, #735]	@ 0x2df
  as60xx->Param.CR11.PGA_TRIM           = 0;                            /*!< DC gain of the PGA */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
  as60xx->Param.CR11.PGA_EN_MODE        = 0;                            /*!< PGA enable mode */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
  as60xx->Param.CR11.PGA_MODE           = 0;                            /*!< Ultrasonic measurement PGA Mode */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
  as60xx->Param.CR11.NOT_USED_22        = AS60XX_CB_NOT_USED_22;        /*!< Mandatory setting: b0 */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
  as60xx->Param.CR11.AM_PD_START_MODE   = 0;                            /*!< Peak Detection Start Mode */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  as60xx->Param.CR11.ZCD_FHL_INIT       = 0;                            /*!< FWD copy of initial value for first hit levels */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  
  as60xx->Param.CR12.TRIM1              = AS60XX_CC_TRIM1_DEFAULT;      /*!< Default setting: 0x95A0C06C */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4cc>)
 80031a4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

  as60xx->Param.CR13.TRIM2              = AS60XX_CD_TRIM2_DEFAULT;      /*!< Default setting: 0x40110000 */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d0>)
 80031ac:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

  as60xx->Param.CR14.TRIM3              = AS60XX_CE_TRIM3_DEFAULT;      /*!< Default setting: 0x4027000F */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d4>)
 80031b4:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0

  as60xx->Param.CR15.TOF_RATE           = 0;                            /*!< TOF Rate */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 22f4 	strb.w	r2, [r3, #756]	@ 0x2f4
  as60xx->Param.CR15.NOT_USED_31_6      = AS60XX_D0_NOT_USED_31_6;      /*!< Not used */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

  as60xx->Param.CR16.USM_RLS_DLY_U      = 0;                            /*!< Delay window in up direction, releasing ultrasonic measurement */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
  as60xx->Param.CR16.NOT_USED_31_19     = AS60XX_D1_NOT_USED_31_19;     /*!< Not used */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  
  as60xx->Param.CR17.USM_RLS_DLY_D      = 0;                            /*!< Delay window in down direction, releasing ultrasonic measurement */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
  as60xx->Param.CR17.NOT_USED_31_19     = AS60XX_D2_NOT_USED_31_19;     /*!< Not used */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

  as60xx->Param.CR18.ZCD_FHL_U          = 0;                            /*!< First Hit Level Up */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c
  as60xx->Param.CR18.NOT_USED_31_8      = AS60XX_DA_NOT_USED_31_8;      /*!< Not used */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310

  as60xx->Param.CR19.ZCD_FHL_D          = 0;                            /*!< First Hit Level Down */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  as60xx->Param.CR19.NOT_USED_31_8      = AS60XX_DB_NOT_USED_31_8;      /*!< Not used */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  As60xx_Update_Configuration(as60xx);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fe ff91 	bl	8002130 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>
}
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	94a0c46c 	.word	0x94a0c46c
 800321c:	401100c4 	.word	0x401100c4
 8003220:	00a7400f 	.word	0x00a7400f

08003224 <_ZL25ScioSense_STM32_Spi_WritePvPht>:
    uint16_t            cs_pin;
    GPIO_TypeDef*       port;
} ScioSense_Stm32_Spi_Config;

static inline int8_t ScioSense_STM32_Spi_Write(void* config, uint8_t* data, const uint16_t size)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	889b      	ldrh	r3, [r3, #4]
 800323c:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	617b      	str	r3, [r7, #20]

    /* 1. Put CN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	2200      	movs	r2, #0
 8003248:	4619      	mov	r1, r3
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f001 f9b8 	bl	80045c0 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, data, size, STM32_SPI_TIMEOUT_MS);
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	230a      	movs	r3, #10
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	69f8      	ldr	r0, [r7, #28]
 8003258:	f002 ffc6 	bl	80061e8 <HAL_SPI_Transmit>
    
    /* 3. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 800325c:	8b7b      	ldrh	r3, [r7, #26]
 800325e:	2201      	movs	r2, #1
 8003260:	4619      	mov	r1, r3
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f001 f9ac 	bl	80045c0 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_ZL24ScioSense_STM32_Spi_ReadPvPhtS0_t>:

static inline int8_t ScioSense_STM32_Spi_Read(void* config, uint8_t* dataToWrite, const uint16_t sizeToWrite, uint8_t* dataToRead, const uint16_t sizeToRead)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	889b      	ldrh	r3, [r3, #4]
 800328c:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	617b      	str	r3, [r7, #20]

    /* 1. Put SSN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 8003294:	8b7b      	ldrh	r3, [r7, #26]
 8003296:	2200      	movs	r2, #0
 8003298:	4619      	mov	r1, r3
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f001 f990 	bl	80045c0 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, dataToWrite, sizeToWrite, STM32_SPI_TIMEOUT_MS);
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	230a      	movs	r3, #10
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	69f8      	ldr	r0, [r7, #28]
 80032a8:	f002 ff9e 	bl	80061e8 <HAL_SPI_Transmit>

    /* 3. Read the data */
    HAL_SPI_Receive(spi, dataToRead, sizeToRead, STM32_SPI_TIMEOUT_MS);
 80032ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80032ae:	230a      	movs	r3, #10
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	69f8      	ldr	r0, [r7, #28]
 80032b4:	f003 f99a 	bl	80065ec <HAL_SPI_Receive>
    
    /* 4. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 80032b8:	8b7b      	ldrh	r3, [r7, #26]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4619      	mov	r1, r3
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f001 f97e 	bl	80045c0 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZL20ScioSense_STM32_Waitm>:

static inline void ScioSense_STM32_Wait(uint32_t ms)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fe7e 	bl	8003fd8 <HAL_Delay>
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_ZN6AS60xxD1Ev>:
    "NVM error in FWDU area",
    "NVM error in any FWA area",
    "CPU error"
};

AS60xx::~AS60xx() { }
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <_ZN6AS60xxD1Ev+0x1c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	0800c3b8 	.word	0x0800c3b8

08003304 <_ZN6AS60xxD0Ev>:
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffe9 	bl	80032e4 <_ZN6AS60xxD1Ev>
 8003312:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f004 fad2 	bl	80078c0 <_ZdlPvj>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_ZN6AS60xxC1Ev>:

AS60xx::AS60xx()
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	4a06      	ldr	r2, [pc, #24]	@ (800334c <_ZN6AS60xxC1Ev+0x24>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]
{
    State   = AS60XX_STATE_NOT_CONNECTED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	22ff      	movs	r2, #255	@ 0xff
 800333a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
}
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	0800c3b8 	.word	0x0800c3b8

08003350 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

void AS60xx::begin(SPI_HandleTypeDef* spi, uint16_t cs_pin, GPIO_TypeDef* port)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
    spiConfig               = { 0 };
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
    spiConfig.spi           = spi;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
    spiConfig.cs_pin        = cs_pin;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	f8a3 2328 	strh.w	r2, [r3, #808]	@ 0x328
    spiConfig.port          = port;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c

    io.read    = ScioSense_STM32_Spi_Read;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x60>)
 800338a:	605a      	str	r2, [r3, #4]
    io.write   = ScioSense_STM32_Spi_Write;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x64>)
 8003390:	609a      	str	r2, [r3, #8]
    io.wait    = ScioSense_STM32_Wait;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x68>)
 8003396:	60da      	str	r2, [r3, #12]
    io.config  = &spiConfig;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	611a      	str	r2, [r3, #16]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	08003273 	.word	0x08003273
 80033b4:	08003225 	.word	0x08003225
 80033b8:	080032cf 	.word	0x080032cf

080033bc <_ZN6AS60xx11writeConfigEv>:
{
    return As60xx_Reset(this);
}

Result AS60xx::writeConfig()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    return As60xx_Write_Config(this);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fc15 	bl	8001bf8 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>
 80033ce:	4603      	mov	r3, r0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZN6AS60xx16startMeasurementEv>:

Result AS60xx::startMeasurement()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    return As60xx_Start_Measurements(this);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fc82 	bl	8001cee <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>
 80033ea:	4603      	mov	r3, r0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZN6AS60xx18getSupplyVoltageMvEv>:

uint32_t AS60xx::getSupplyVoltageMv()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    return As60xx_GetSupplyVoltageMv(this);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fca5 	bl	8001d50 <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>:

float AS60xx::getHighSpeedClockFrequencyHz()
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
    return As60xx_GetHsClkFreqHz(this);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fcb5 	bl	8001d8c <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>
 8003422:	eef0 7a40 	vmov.f32	s15, s0
}
 8003426:	eeb0 0a67 	vmov.f32	s0, s15
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZN6AS60xx12getTimestampEv>:

As60xx_Timestamp AS60xx::getTimestamp()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    return As60xx_GetTimestamp(this);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fcc6 	bl	8001dd4 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>
 8003448:	bf00      	nop
}
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZN6AS60xx4initEv>:
{
    return As60xx_Write_Fw(this, FWC, FWC_Length, FWD, FWD_Length);
}

bool AS60xx::init()
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
    As60xx_Init(this);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fba9 	bl	8001bb6 <_ZL11As60xx_InitP16ScioSense_As60xx>

    return isConnected();
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_ZN6AS60xx11isConnectedEv>:

bool AS60xx::isConnected()
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
    return (bool)As60xx_isConnected(this);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fba4 	bl	8001bd4 <_ZL18As60xx_isConnectedP16ScioSense_As60xx>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZN6AS60xx6updateEv>:

AS60xx_Measure_Type AS60xx::update()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    return As60xx_Update(this);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fcb1 	bl	8001e14 <_ZL13As60xx_UpdateP16ScioSense_As60xx>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN6AS60xx11getSumTofUpEv>:

uint32_t AS60xx::getSumTofUp()
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofUp(this);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fce3 	bl	8001e94 <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>
 80034ce:	4603      	mov	r3, r0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZN6AS60xx13getSumTofDownEv>:

uint32_t AS60xx::getSumTofDown()
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofDown(this);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fce2 	bl	8001eae <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN6AS60xx22getAmountHitsForSumToFEv>:

uint32_t AS60xx::getAmountHitsForSumToF()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmountHitsForSumTof(this);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fce1 	bl	8001ec8 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZN6AS60xx15calculateTimeNsEm>:

float AS60xx::calculateTimeNs(uint32_t contentTDCRegister)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    return ((float)As60xx_CalculateTDCTimePs(this, contentTDCRegister)) / 1000.0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fce0 	bl	8001ee6 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>
 8003526:	ee07 0a90 	vmov	s15, r0
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	ee17 0a90 	vmov	r0, s15
 8003532:	f7fd f80d 	bl	8000550 <__aeabi_f2d>
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	4b08      	ldr	r3, [pc, #32]	@ (800355c <_ZN6AS60xx15calculateTimeNsEm+0x4c>)
 800353c:	f7fd f98a 	bl	8000854 <__aeabi_ddiv>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	f7fd fb52 	bl	8000bf0 <__aeabi_d2f>
 800354c:	4603      	mov	r3, r0
 800354e:	ee07 3a90 	vmov	s15, r3
}
 8003552:	eeb0 0a67 	vmov.f32	s0, s15
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	408f4000 	.word	0x408f4000

08003560 <_ZN6AS60xx14getAmplitudeUpEv>:
{
    return AS60xx_CalculateInternalTemperature(this);
}

uint32_t AS60xx::getAmplitudeUp()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmplitudeUp(this);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fd5f 	bl	8002030 <_ZL21As60xx_GetAmplitudeUpP16ScioSense_As60xx>
 8003572:	4603      	mov	r3, r0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZN6AS60xx16getAmplitudeDownEv>:

uint32_t AS60xx::getAmplitudeDown()
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmplitudeDown(this);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fd6b 	bl	8002064 <_ZL23As60xx_GetAmplitudeDownP16ScioSense_As60xx>
 800358e:	4603      	mov	r3, r0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN6AS60xx20getPulseWidthRatioUpEv>:

float AS60xx::getPulseWidthRatioUp()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    return As60xx_GetPulseWidthRatioUp(this);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fda1 	bl	80020ec <_ZL27As60xx_GetPulseWidthRatioUpP16ScioSense_As60xx>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN6AS60xx22getPulseWidthRatioDownEv>:

float AS60xx::getPulseWidthRatioDown()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    return As60xx_GetPulseWidthRatioDown(this);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fda2 	bl	800210e <_ZL29As60xx_GetPulseWidthRatioDownP16ScioSense_As60xx>
 80035ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80035ce:	eeb0 0a67 	vmov.f32	s0, s15
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZN6AS60xx19updateConfigurationEv>:
{
    return As60xx_GetTofValuesDown(this, tofValues);
}

void AS60xx::updateConfiguration()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    As60xx_Update_Configuration(this);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fda3 	bl	8002130 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f8:	f000 fc30 	bl	8003e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fc:	f000 f814 	bl	8003628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003600:	f000 f92e 	bl	8003860 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003604:	f000 f870 	bl	80036e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003608:	f000 f8de 	bl	80037c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AS60xx_Example_Setup(&huart1, &hspi1);
 800360c:	4904      	ldr	r1, [pc, #16]	@ (8003620 <main+0x2c>)
 800360e:	4805      	ldr	r0, [pc, #20]	@ (8003624 <main+0x30>)
 8003610:	f7fd fd92 	bl	8001138 <AS60xx_Example_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      AS60xx_Example_Loop(&huart1, &hspi1);
 8003614:	4902      	ldr	r1, [pc, #8]	@ (8003620 <main+0x2c>)
 8003616:	4803      	ldr	r0, [pc, #12]	@ (8003624 <main+0x30>)
 8003618:	f7fd fe24 	bl	8001264 <AS60xx_Example_Loop>
 800361c:	e7fa      	b.n	8003614 <main+0x20>
 800361e:	bf00      	nop
 8003620:	20000634 	.word	0x20000634
 8003624:	200006c4 	.word	0x200006c4

08003628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b094      	sub	sp, #80	@ 0x50
 800362c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800362e:	f107 0318 	add.w	r3, r7, #24
 8003632:	2238      	movs	r2, #56	@ 0x38
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f005 f991 	bl	800895e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800363c:	463b      	mov	r3, r7
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 800364c:	2100      	movs	r1, #0
 800364e:	2001      	movs	r0, #1
 8003650:	f002 fc96 	bl	8005f80 <HAL_RCCEx_EpodBoosterClkConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800365a:	f000 f97d 	bl	8003958 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 800365e:	f001 f805 	bl	800466c <HAL_PWREx_EnableEpodBooster>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8003668:	f000 f976 	bl	8003958 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800366c:	2001      	movs	r0, #1
 800366e:	f000 ffbf 	bl	80045f0 <HAL_PWREx_ControlVoltageScaling>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003678:	f000 f96e 	bl	8003958 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <SystemClock_Config+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 030f 	bic.w	r3, r3, #15
 8003684:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <SystemClock_Config+0xbc>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 800368c:	2320      	movs	r3, #32
 800368e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8003690:	2301      	movs	r3, #1
 8003692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8003694:	2300      	movs	r3, #0
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 8003698:	2300      	movs	r3, #0
 800369a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800369c:	f107 0318 	add.w	r3, r7, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 f80f 	bl	80046c4 <HAL_RCC_OscConfig>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80036ac:	f000 f954 	bl	8003958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b0:	231f      	movs	r3, #31
 80036b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036c8:	463b      	mov	r3, r7
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fb4f 	bl	8004d70 <HAL_RCC_ClockConfig>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80036d8:	f000 f93e 	bl	8003958 <Error_Handler>
  }
}
 80036dc:	bf00      	nop
 80036de:	3750      	adds	r7, #80	@ 0x50
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40022000 	.word	0x40022000

080036e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 80036fa:	4a32      	ldr	r2, [pc, #200]	@ (80037c4 <MX_SPI1_Init+0xdc>)
 80036fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003700:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003706:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800370c:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800370e:	2207      	movs	r2, #7
 8003710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003712:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003718:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800371a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800371e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003720:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003722:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003728:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800372a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800372e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003730:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003732:	2200      	movs	r2, #0
 8003734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003738:	2200      	movs	r2, #0
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003744:	2207      	movs	r2, #7
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800374e:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003750:	2200      	movs	r2, #0
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003756:	2200      	movs	r2, #0
 8003758:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800375c:	2200      	movs	r2, #0
 800375e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003762:	2200      	movs	r2, #0
 8003764:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003768:	2200      	movs	r2, #0
 800376a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800376e:	2200      	movs	r2, #0
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003772:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003774:	2200      	movs	r2, #0
 8003776:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 800377a:	2200      	movs	r2, #0
 800377c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003784:	480e      	ldr	r0, [pc, #56]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 8003786:	f002 fc3f 	bl	8006008 <HAL_SPI_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8003790:	f000 f8e2 	bl	8003958 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003798:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4806      	ldr	r0, [pc, #24]	@ (80037c0 <MX_SPI1_Init+0xd8>)
 80037a8:	f003 fad5 	bl	8006d56 <HAL_SPIEx_SetConfigAutonomousMode>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80037b2:	f000 f8d1 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000634 	.word	0x20000634
 80037c4:	40013000 	.word	0x40013000

080037c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037cc:	4b22      	ldr	r3, [pc, #136]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037ce:	4a23      	ldr	r2, [pc, #140]	@ (800385c <MX_USART1_UART_Init+0x94>)
 80037d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80037d2:	4b21      	ldr	r3, [pc, #132]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037d4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80037d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037da:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037ee:	220c      	movs	r2, #12
 80037f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f2:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f8:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037fe:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800380a:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 800380c:	2200      	movs	r2, #0
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003810:	4811      	ldr	r0, [pc, #68]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003812:	f003 fae1 	bl	8006dd8 <HAL_UART_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800381c:	f000 f89c 	bl	8003958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003820:	2100      	movs	r1, #0
 8003822:	480d      	ldr	r0, [pc, #52]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003824:	f003 ff82 	bl	800772c <HAL_UARTEx_SetTxFifoThreshold>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800382e:	f000 f893 	bl	8003958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003832:	2100      	movs	r1, #0
 8003834:	4808      	ldr	r0, [pc, #32]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003836:	f003 ffb7 	bl	80077a8 <HAL_UARTEx_SetRxFifoThreshold>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003840:	f000 f88a 	bl	8003958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003844:	4804      	ldr	r0, [pc, #16]	@ (8003858 <MX_USART1_UART_Init+0x90>)
 8003846:	f003 ff38 	bl	80076ba <HAL_UARTEx_DisableFifoMode>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003850:	f000 f882 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200006c4 	.word	0x200006c4
 800385c:	40013800 	.word	0x40013800

08003860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003876:	4b35      	ldr	r3, [pc, #212]	@ (800394c <MX_GPIO_Init+0xec>)
 8003878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800387c:	4a33      	ldr	r2, [pc, #204]	@ (800394c <MX_GPIO_Init+0xec>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003886:	4b31      	ldr	r3, [pc, #196]	@ (800394c <MX_GPIO_Init+0xec>)
 8003888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <MX_GPIO_Init+0xec>)
 8003896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800389a:	4a2c      	ldr	r2, [pc, #176]	@ (800394c <MX_GPIO_Init+0xec>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038a4:	4b29      	ldr	r3, [pc, #164]	@ (800394c <MX_GPIO_Init+0xec>)
 80038a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <MX_GPIO_Init+0xec>)
 80038b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b8:	4a24      	ldr	r2, [pc, #144]	@ (800394c <MX_GPIO_Init+0xec>)
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <MX_GPIO_Init+0xec>)
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 80038d0:	2200      	movs	r2, #0
 80038d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038d6:	481e      	ldr	r0, [pc, #120]	@ (8003950 <MX_GPIO_Init+0xf0>)
 80038d8:	f000 fe72 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTN_Pin */
  GPIO_InitStruct.Pin = INTN_Pin;
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTN_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	4619      	mov	r1, r3
 80038ee:	4818      	ldr	r0, [pc, #96]	@ (8003950 <MX_GPIO_Init+0xf0>)
 80038f0:	f000 fcc4 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 80038f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4619      	mov	r1, r3
 8003908:	4811      	ldr	r0, [pc, #68]	@ (8003950 <MX_GPIO_Init+0xf0>)
 800390a:	f000 fcb7 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 800390e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4619      	mov	r1, r3
 8003926:	480a      	ldr	r0, [pc, #40]	@ (8003950 <MX_GPIO_Init+0xf0>)
 8003928:	f000 fca8 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO5_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO5_Pin|GPIO4_Pin;
 800392c:	2330      	movs	r3, #48	@ 0x30
 800392e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4619      	mov	r1, r3
 800393e:	4805      	ldr	r0, [pc, #20]	@ (8003954 <MX_GPIO_Init+0xf4>)
 8003940:	f000 fc9c 	bl	800427c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003944:	bf00      	nop
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40030c00 	.word	0x40030c00
 8003950:	42020800 	.word	0x42020800
 8003954:	42020400 	.word	0x42020400

08003958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800395c:	b672      	cpsid	i
}
 800395e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <Error_Handler+0x8>

08003964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_MspInit+0x30>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	4a08      	ldr	r2, [pc, #32]	@ (8003994 <HAL_MspInit+0x30>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_MspInit+0x30>)
 800397c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40030c00 	.word	0x40030c00

08003998 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b0a8      	sub	sp, #160	@ 0xa0
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2278      	movs	r2, #120	@ 0x78
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 ffd0 	bl	800895e <memset>
  if(hspi->Instance==SPI1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a24      	ldr	r2, [pc, #144]	@ (8003a54 <HAL_SPI_MspInit+0xbc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d141      	bne.n	8003a4c <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80039c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80039ce:	2300      	movs	r3, #0
 80039d0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fb8a 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80039e2:	f7ff ffb9 	bl	8003958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 80039e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 80039ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039f2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80039f6:	4b18      	ldr	r3, [pc, #96]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 80039f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 8003a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a0a:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a14:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_SPI_MspInit+0xc0>)
 8003a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003a22:	23e0      	movs	r3, #224	@ 0xe0
 8003a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a40:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003a44:	4619      	mov	r1, r3
 8003a46:	4805      	ldr	r0, [pc, #20]	@ (8003a5c <HAL_SPI_MspInit+0xc4>)
 8003a48:	f000 fc18 	bl	800427c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003a4c:	bf00      	nop
 8003a4e:	37a0      	adds	r7, #160	@ 0xa0
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40013000 	.word	0x40013000
 8003a58:	40030c00 	.word	0x40030c00
 8003a5c:	42020000 	.word	0x42020000

08003a60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b0a8      	sub	sp, #160	@ 0xa0
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a68:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	2278      	movs	r2, #120	@ 0x78
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 ff6c 	bl	800895e <memset>
  if(huart->Instance==USART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a24      	ldr	r2, [pc, #144]	@ (8003b1c <HAL_UART_MspInit+0xbc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d141      	bne.n	8003b14 <HAL_UART_MspInit+0xb4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fb27 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003aa8:	f7ff ff56 	bl	8003958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aac:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003abc:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad0:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_UART_MspInit+0xc0>)
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003ae8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b02:	2307      	movs	r3, #7
 8003b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b08:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <HAL_UART_MspInit+0xc4>)
 8003b10:	f000 fbb4 	bl	800427c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003b14:	bf00      	nop
 8003b16:	37a0      	adds	r7, #160	@ 0xa0
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40030c00 	.word	0x40030c00
 8003b24:	42020000 	.word	0x42020000

08003b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <NMI_Handler+0x4>

08003b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <MemManage_Handler+0x4>

08003b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <BusFault_Handler+0x4>

08003b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <UsageFault_Handler+0x4>

08003b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b7e:	f000 fa0b 	bl	8003f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  return 1;
 8003b8a:	2301      	movs	r3, #1
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_kill>:

int _kill(int pid, int sig)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ba0:	f004 ff40 	bl	8008a24 <__errno>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2216      	movs	r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]
  return -1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_exit>:

void _exit (int status)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffe7 	bl	8003b96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <_exit+0x12>

08003bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00a      	b.n	8003bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bde:	f3af 8000 	nop.w
 8003be2:	4601      	mov	r1, r0
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	b2ca      	uxtb	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf0      	blt.n	8003bde <_read+0x12>
  }

  return len;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e009      	b.n	8003c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	60ba      	str	r2, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbf1      	blt.n	8003c18 <_write+0x12>
  }
  return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_close>:

int _close(int file)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c66:	605a      	str	r2, [r3, #4]
  return 0;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <_isatty>:

int _isatty(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c7e:	2301      	movs	r3, #1
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <_sbrk+0x5c>)
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <_sbrk+0x60>)
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <_sbrk+0x64>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <_sbrk+0x64>)
 8003cc6:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <_sbrk+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <_sbrk+0x64>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d207      	bcs.n	8003ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cd8:	f004 fea4 	bl	8008a24 <__errno>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	220c      	movs	r2, #12
 8003ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e009      	b.n	8003cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cee:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a05      	ldr	r2, [pc, #20]	@ (8003d0c <_sbrk+0x64>)
 8003cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20030000 	.word	0x20030000
 8003d08:	00000400 	.word	0x00000400
 8003d0c:	20000758 	.word	0x20000758
 8003d10:	200008b0 	.word	0x200008b0

08003d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d18:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <SystemInit+0x20>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	4a05      	ldr	r2, [pc, #20]	@ (8003d34 <SystemInit+0x20>)
 8003d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003df0 <SystemCoreClockUpdate+0xb8>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d034      	beq.n	8003db4 <SystemCoreClockUpdate+0x7c>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d836      	bhi.n	8003dbc <SystemCoreClockUpdate+0x84>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <SystemCoreClockUpdate+0x20>
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d02a      	beq.n	8003dac <SystemCoreClockUpdate+0x74>
 8003d56:	e031      	b.n	8003dbc <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8003d58:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <SystemCoreClockUpdate+0xb8>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00f      	beq.n	8003d88 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da03      	bge.n	8003d76 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8003d6e:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003d70:	4a21      	ldr	r2, [pc, #132]	@ (8003df8 <SystemCoreClockUpdate+0xc0>)
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e002      	b.n	8003d7c <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8003d76:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003d78:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <SystemCoreClockUpdate+0xc4>)
 8003d7a:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	0f5b      	lsrs	r3, r3, #29
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e009      	b.n	8003d9c <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003df8 <SystemCoreClockUpdate+0xc0>)
 8003d8c:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8003d8e:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <SystemCoreClockUpdate+0xb8>)
 8003d90:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003d94:	0b1b      	lsrs	r3, r3, #12
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8003d9c:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a13      	ldr	r2, [pc, #76]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003da8:	6013      	str	r3, [r2, #0]
    break;
 8003daa:	e00c      	b.n	8003dc6 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003dae:	4a14      	ldr	r2, [pc, #80]	@ (8003e00 <SystemCoreClockUpdate+0xc8>)
 8003db0:	601a      	str	r2, [r3, #0]
    break;
 8003db2:	e008      	b.n	8003dc6 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003db6:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <SystemCoreClockUpdate+0xc8>)
 8003db8:	601a      	str	r2, [r3, #0]
    break;
 8003dba:	e004      	b.n	8003dc6 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	601a      	str	r2, [r3, #0]
    break;
 8003dc4:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <SystemCoreClockUpdate+0xb8>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a0d      	ldr	r2, [pc, #52]	@ (8003e04 <SystemCoreClockUpdate+0xcc>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003dd4:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <SystemCoreClockUpdate+0xbc>)
 8003de0:	6013      	str	r3, [r2, #0]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40030c00 	.word	0x40030c00
 8003df4:	20000000 	.word	0x20000000
 8003df8:	016e3600 	.word	0x016e3600
 8003dfc:	05b8d800 	.word	0x05b8d800
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	0800c3c8 	.word	0x0800c3c8

08003e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e0c:	f7ff ff82 	bl	8003d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e12:	e003      	b.n	8003e1c <LoopCopyDataInit>

08003e14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003e16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e1a:	3104      	adds	r1, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e1c:	480a      	ldr	r0, [pc, #40]	@ (8003e48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e24:	d3f6      	bcc.n	8003e14 <CopyDataInit>
	ldr	r2, =_sbss
 8003e26:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e28:	e002      	b.n	8003e30 <LoopFillZerobss>

08003e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e2c:	f842 3b04 	str.w	r3, [r2], #4

08003e30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e30:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <LoopForever+0x16>)
	cmp	r2, r3
 8003e32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e34:	d3f9      	bcc.n	8003e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e36:	f004 fdfb 	bl	8008a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e3a:	f7ff fbdb 	bl	80035f4 <main>

08003e3e <LoopForever>:

LoopForever:
    b LoopForever
 8003e3e:	e7fe      	b.n	8003e3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003e40:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003e44:	0800c84c 	.word	0x0800c84c
	ldr	r0, =_sdata
 8003e48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e4c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8003e50:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8003e54:	200008ac 	.word	0x200008ac

08003e58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC1_IRQHandler>
	...

08003e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e60:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <HAL_Init+0x3c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <HAL_Init+0x3c>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e6c:	2003      	movs	r0, #3
 8003e6e:	f000 f966 	bl	800413e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8003e72:	f7ff ff61 	bl	8003d38 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e76:	2004      	movs	r0, #4
 8003e78:	f000 f9a8 	bl	80041cc <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e7c:	200f      	movs	r0, #15
 8003e7e:	f000 f80d 	bl	8003e9c <HAL_InitTick>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e002      	b.n	8003e92 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e8c:	f7ff fd6a 	bl	8003964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40022000 	.word	0x40022000

08003e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <HAL_InitTick+0xe8>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e062      	b.n	8003f7a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003eb4:	4b34      	ldr	r3, [pc, #208]	@ (8003f88 <HAL_InitTick+0xec>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d10c      	bne.n	8003eda <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	@ (8003f8c <HAL_InitTick+0xf0>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f84 <HAL_InitTick+0xe8>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e03d      	b.n	8003f56 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_InitTick+0xf4>)
 8003edc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ee0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ee4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eec:	d025      	beq.n	8003f3a <HAL_InitTick+0x9e>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ef4:	d82e      	bhi.n	8003f54 <HAL_InitTick+0xb8>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_InitTick+0x6a>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f02:	d00d      	beq.n	8003f20 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8003f04:	e026      	b.n	8003f54 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <HAL_InitTick+0xf0>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f84 <HAL_InitTick+0xe8>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
        break;
 8003f1e:	e01a      	b.n	8003f56 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f20:	4b18      	ldr	r3, [pc, #96]	@ (8003f84 <HAL_InitTick+0xe8>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	60fb      	str	r3, [r7, #12]
        break;
 8003f38:	e00d      	b.n	8003f56 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <HAL_InitTick+0xe8>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	60fb      	str	r3, [r7, #12]
        break;
 8003f52:	e000      	b.n	8003f56 <HAL_InitTick+0xba>
        break;
 8003f54:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f916 	bl	8004188 <HAL_SYSTICK_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e009      	b.n	8003f7a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f66:	2200      	movs	r2, #0
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	f000 f8f1 	bl	8004154 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <HAL_InitTick+0xf8>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000008 	.word	0x20000008
 8003f88:	e000e010 	.word	0xe000e010
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	40030c00 	.word	0x40030c00
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_IncTick+0x20>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_IncTick+0x24>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <HAL_IncTick+0x24>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	2000075c 	.word	0x2000075c

08003fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <HAL_GetTick+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000075c 	.word	0x2000075c

08003fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff ffee 	bl	8003fc0 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d005      	beq.n	8003ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_Delay+0x44>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ffe:	bf00      	nop
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f7      	bhi.n	8004000 <HAL_Delay+0x28>
  {
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000008 	.word	0x20000008

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db0a      	blt.n	80040ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	490c      	ldr	r1, [pc, #48]	@ (80040d0 <__NVIC_SetPriority+0x4c>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040ac:	e00a      	b.n	80040c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	@ (80040d4 <__NVIC_SetPriority+0x50>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3b04      	subs	r3, #4
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	761a      	strb	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000e100 	.word	0xe000e100
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	@ 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f1c3 0307 	rsb	r3, r3, #7
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf28      	it	cs
 80040f6:	2304      	movcs	r3, #4
 80040f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d902      	bls.n	8004108 <NVIC_EncodePriority+0x30>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3b03      	subs	r3, #3
 8004106:	e000      	b.n	800410a <NVIC_EncodePriority+0x32>
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004120:	f04f 31ff 	mov.w	r1, #4294967295
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	43d9      	mvns	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	4313      	orrs	r3, r2
         );
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	@ 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff6a 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8004162:	f7ff ff81 	bl	8004068 <__NVIC_GetPriorityGrouping>
 8004166:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f7ff ffb3 	bl	80040d8 <NVIC_EncodePriority>
 8004172:	4602      	mov	r2, r0
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff82 	bl	8004084 <__NVIC_SetPriority>
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004198:	d301      	bcc.n	800419e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800419a:	2301      	movs	r3, #1
 800419c:	e00d      	b.n	80041ba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <HAL_SYSTICK_Config+0x40>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80041a6:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <HAL_SYSTICK_Config+0x40>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_SYSTICK_Config+0x40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a05      	ldr	r2, [pc, #20]	@ (80041c8 <HAL_SYSTICK_Config+0x40>)
 80041b2:	f043 0303 	orr.w	r3, r3, #3
 80041b6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e010 	.word	0xe000e010

080041cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d844      	bhi.n	8004264 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004203 	.word	0x08004203
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004243 	.word	0x08004243
 80041ec:	08004265 	.word	0x08004265
 80041f0:	080041f5 	.word	0x080041f5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80041f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6013      	str	r3, [r2, #0]
      break;
 8004200:	e031      	b.n	8004266 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004202:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800420e:	4b1a      	ldr	r3, [pc, #104]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004210:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004214:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004216:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800421a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800421e:	e022      	b.n	8004266 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004220:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800422e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004232:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004236:	4a10      	ldr	r2, [pc, #64]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800423c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004240:	e011      	b.n	8004266 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004242:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a0b      	ldr	r2, [pc, #44]	@ (8004274 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800424e:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004250:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004254:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004258:	4a07      	ldr	r2, [pc, #28]	@ (8004278 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800425a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800425e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004262:	e000      	b.n	8004266 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004264:	bf00      	nop
  }
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000e010 	.word	0xe000e010
 8004278:	40030c00 	.word	0x40030c00

0800427c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428a:	e162      	b.n	8004552 <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8154 	beq.w	800454c <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x40>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d109      	bne.n	800433e <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004332:	2b03      	cmp	r3, #3
 8004334:	d11b      	bne.n	800436e <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d017      	beq.n	800436e <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d123      	bne.n	80043c2 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	6939      	ldr	r1, [r7, #16]
 80043be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0203 	and.w	r2, r3, #3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a4 	beq.w	800454c <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004404:	4a5a      	ldr	r2, [pc, #360]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3318      	adds	r3, #24
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	220f      	movs	r2, #15
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a52      	ldr	r2, [pc, #328]	@ (8004574 <HAL_GPIO_Init+0x2f8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d025      	beq.n	800447c <HAL_GPIO_Init+0x200>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a51      	ldr	r2, [pc, #324]	@ (8004578 <HAL_GPIO_Init+0x2fc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01f      	beq.n	8004478 <HAL_GPIO_Init+0x1fc>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a50      	ldr	r2, [pc, #320]	@ (800457c <HAL_GPIO_Init+0x300>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d019      	beq.n	8004474 <HAL_GPIO_Init+0x1f8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a4f      	ldr	r2, [pc, #316]	@ (8004580 <HAL_GPIO_Init+0x304>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_GPIO_Init+0x1f4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a4e      	ldr	r2, [pc, #312]	@ (8004584 <HAL_GPIO_Init+0x308>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00d      	beq.n	800446c <HAL_GPIO_Init+0x1f0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a4d      	ldr	r2, [pc, #308]	@ (8004588 <HAL_GPIO_Init+0x30c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <HAL_GPIO_Init+0x1ec>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a4c      	ldr	r2, [pc, #304]	@ (800458c <HAL_GPIO_Init+0x310>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_GPIO_Init+0x1e8>
 8004460:	2307      	movs	r3, #7
 8004462:	e00c      	b.n	800447e <HAL_GPIO_Init+0x202>
 8004464:	2310      	movs	r3, #16
 8004466:	e00a      	b.n	800447e <HAL_GPIO_Init+0x202>
 8004468:	2306      	movs	r3, #6
 800446a:	e008      	b.n	800447e <HAL_GPIO_Init+0x202>
 800446c:	2304      	movs	r3, #4
 800446e:	e006      	b.n	800447e <HAL_GPIO_Init+0x202>
 8004470:	2303      	movs	r3, #3
 8004472:	e004      	b.n	800447e <HAL_GPIO_Init+0x202>
 8004474:	2302      	movs	r3, #2
 8004476:	e002      	b.n	800447e <HAL_GPIO_Init+0x202>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_GPIO_Init+0x202>
 800447c:	2300      	movs	r3, #0
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	f002 0203 	and.w	r2, r2, #3
 8004484:	00d2      	lsls	r2, r2, #3
 8004486:	4093      	lsls	r3, r2
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800448e:	4938      	ldr	r1, [pc, #224]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3318      	adds	r3, #24
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800449c:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80044ca:	4b29      	ldr	r3, [pc, #164]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800451c:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004522:	4b13      	ldr	r3, [pc, #76]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004546:	4a0a      	ldr	r2, [pc, #40]	@ (8004570 <HAL_GPIO_Init+0x2f4>)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	f47f ae95 	bne.w	800428c <HAL_GPIO_Init+0x10>
  }
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40032000 	.word	0x40032000
 8004574:	42020000 	.word	0x42020000
 8004578:	42020400 	.word	0x42020400
 800457c:	42020800 	.word	0x42020800
 8004580:	42020c00 	.word	0x42020c00
 8004584:	42021000 	.word	0x42021000
 8004588:	42021800 	.word	0x42021800
 800458c:	42021c00 	.word	0x42021c00

08004590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e001      	b.n	80045b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	807b      	strh	r3, [r7, #2]
 80045cc:	4613      	mov	r3, r2
 80045ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045dc:	e002      	b.n	80045e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f023 0303 	bic.w	r3, r3, #3
 8004600:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4313      	orrs	r3, r2
 8004608:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8004610:	4b14      	ldr	r3, [pc, #80]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2232      	movs	r2, #50	@ 0x32
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0c9b      	lsrs	r3, r3, #18
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 800462c:	e002      	b.n	8004634 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b01      	subs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d002      	beq.n	8004648 <HAL_PWREx_ControlVoltageScaling+0x58>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f2      	bne.n	800462e <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e000      	b.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8004652:	2300      	movs	r3, #0
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40030800 	.word	0x40030800
 8004664:	20000000 	.word	0x20000000
 8004668:	431bde83 	.word	0x431bde83

0800466c <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8004672:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a12      	ldr	r2, [pc, #72]	@ (80046c0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467c:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800467e:	f7ff fc9f 	bl	8003fc0 <HAL_GetTick>
 8004682:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004684:	e00f      	b.n	80046a6 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8004686:	f7ff fc9b 	bl	8003fc0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d908      	bls.n	80046a6 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a0:	d001      	beq.n	80046a6 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e007      	b.n	80046b6 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_PWREx_EnableEpodBooster+0x54>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b2:	d1e8      	bne.n	8004686 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40030800 	.word	0x40030800

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e340      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d6:	4b98      	ldr	r3, [pc, #608]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80ad 	beq.w	8004848 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 80a5 	bne.w	8004848 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e32a      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04f      	beq.n	80047aa <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x5e>
 8004714:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a87      	ldr	r2, [pc, #540]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800471a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e02f      	b.n	8004782 <HAL_RCC_OscConfig+0xbe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x82>
 800472c:	4b82      	ldr	r3, [pc, #520]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a81      	ldr	r2, [pc, #516]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7e      	ldr	r2, [pc, #504]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e01d      	b.n	8004782 <HAL_RCC_OscConfig+0xbe>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800474e:	d10c      	bne.n	800476a <HAL_RCC_OscConfig+0xa6>
 8004750:	4b79      	ldr	r3, [pc, #484]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a78      	ldr	r2, [pc, #480]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004756:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b76      	ldr	r3, [pc, #472]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a75      	ldr	r2, [pc, #468]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e00b      	b.n	8004782 <HAL_RCC_OscConfig+0xbe>
 800476a:	4b73      	ldr	r3, [pc, #460]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a72      	ldr	r2, [pc, #456]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b70      	ldr	r3, [pc, #448]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6f      	ldr	r2, [pc, #444]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800477c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7ff fc1d 	bl	8003fc0 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478a:	f7ff fc19 	bl	8003fc0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	@ 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e2dd      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479c:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0xc6>
 80047a8:	e04e      	b.n	8004848 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0xfe>
 80047b4:	4b60      	ldr	r3, [pc, #384]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5f      	ldr	r2, [pc, #380]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e02f      	b.n	8004822 <HAL_RCC_OscConfig+0x15e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x122>
 80047cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a59      	ldr	r2, [pc, #356]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b57      	ldr	r3, [pc, #348]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a56      	ldr	r2, [pc, #344]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e01d      	b.n	8004822 <HAL_RCC_OscConfig+0x15e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80047ee:	d10c      	bne.n	800480a <HAL_RCC_OscConfig+0x146>
 80047f0:	4b51      	ldr	r3, [pc, #324]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047f6:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4d      	ldr	r2, [pc, #308]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e00b      	b.n	8004822 <HAL_RCC_OscConfig+0x15e>
 800480a:	4b4b      	ldr	r3, [pc, #300]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	4b48      	ldr	r3, [pc, #288]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a47      	ldr	r2, [pc, #284]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800481c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7ff fbcd 	bl	8003fc0 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482a:	f7ff fbc9 	bl	8003fc0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	@ 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e28d      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483c:	4b3e      	ldr	r3, [pc, #248]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d054      	beq.n	80048fe <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d110      	bne.n	800487c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e278      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b34      	ldr	r3, [pc, #208]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	4930      	ldr	r1, [pc, #192]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]
 800487a:	e040      	b.n	80048fe <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d023      	beq.n	80048cc <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004884:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2b      	ldr	r2, [pc, #172]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 800488a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800488e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7ff fb96 	bl	8003fc0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7ff fb92 	bl	8003fc0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e256      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048aa:	4b23      	ldr	r3, [pc, #140]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	491c      	ldr	r1, [pc, #112]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	610b      	str	r3, [r1, #16]
 80048ca:	e018      	b.n	80048fe <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a19      	ldr	r2, [pc, #100]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7ff fb72 	bl	8003fc0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e0:	f7ff fb6e 	bl	8003fc0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e232      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048f2:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d038      	beq.n	800497c <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01b      	beq.n	800494a <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a08      	ldr	r2, [pc, #32]	@ (8004938 <HAL_RCC_OscConfig+0x274>)
 8004918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800491c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491e:	f7ff fb4f 	bl	8003fc0 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004926:	f7ff fb4b 	bl	8003fc0 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d903      	bls.n	800493c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e20f      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
 8004938:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800493c:	4ba0      	ldr	r3, [pc, #640]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ee      	beq.n	8004926 <HAL_RCC_OscConfig+0x262>
 8004948:	e018      	b.n	800497c <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800494a:	4b9d      	ldr	r3, [pc, #628]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a9c      	ldr	r2, [pc, #624]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004950:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004954:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7ff fb33 	bl	8003fc0 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495e:	f7ff fb2f 	bl	8003fc0 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1f3      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004970:	4b93      	ldr	r3, [pc, #588]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80a7 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800498e:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d110      	bne.n	80049be <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b88      	ldr	r3, [pc, #544]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a2:	4a87      	ldr	r2, [pc, #540]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80049ac:	4b84      	ldr	r3, [pc, #528]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80049be:	4b81      	ldr	r3, [pc, #516]	@ (8004bc4 <HAL_RCC_OscConfig+0x500>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	4a80      	ldr	r2, [pc, #512]	@ (8004bc4 <HAL_RCC_OscConfig+0x500>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d051      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 80049d2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 80049d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80049d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049dc:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 80049e8:	4a75      	ldr	r2, [pc, #468]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7ff fae6 	bl	8003fc0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7ff fae2 	bl	8003fc0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1a4      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a10:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01e      	beq.n	8004a66 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7ff fac9 	bl	8003fc0 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e18b      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a40:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a42:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ed      	beq.n	8004a2a <HAL_RCC_OscConfig+0x366>
 8004a4e:	e038      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7ff fab6 	bl	8003fc0 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e178      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a66:	4b56      	ldr	r3, [pc, #344]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a68:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ed      	bne.n	8004a50 <HAL_RCC_OscConfig+0x38c>
 8004a74:	e025      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8004a76:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a78:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a7c:	4a50      	ldr	r2, [pc, #320]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a7e:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8004a82:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a86:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a88:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004a8e:	f023 0304 	bic.w	r3, r3, #4
 8004a92:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7ff fa93 	bl	8003fc0 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7ff fa8f 	bl	8003fc0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e151      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab4:	4b42      	ldr	r3, [pc, #264]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004ab6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1ed      	bne.n	8004a9e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ac2:	7efb      	ldrb	r3, [r7, #27]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ace:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d078      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8004ae4:	4b36      	ldr	r3, [pc, #216]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004ae6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004aea:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d050      	beq.n	8004b96 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d023      	beq.n	8004b4a <HAL_RCC_OscConfig+0x486>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01e      	beq.n	8004b4a <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8004b14:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7ff fa50 	bl	8003fc0 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7ff fa4c 	bl	8003fc0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b14      	cmp	r3, #20
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e110      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004b36:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004b38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ef      	bne.n	8004b24 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7ff fa47 	bl	8003fd8 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004b64:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7ff fa28 	bl	8003fc0 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b74:	f7ff fa24 	bl	8003fc0 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b14      	cmp	r3, #20
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0e8      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004b86:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004b88:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ef      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4b0>
 8004b94:	e01f      	b.n	8004bd6 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004b9e:	4a08      	ldr	r2, [pc, #32]	@ (8004bc0 <HAL_RCC_OscConfig+0x4fc>)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba6:	f7ff fa0b 	bl	8003fc0 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bae:	f7ff fa07 	bl	8003fc0 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b14      	cmp	r3, #20
 8004bba:	d905      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0cb      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
 8004bc0:	40030c00 	.word	0x40030c00
 8004bc4:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004bc8:	4b65      	ldr	r3, [pc, #404]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004bca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1eb      	bne.n	8004bae <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d068      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0b1      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a59      	ldr	r2, [pc, #356]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e03b      	b.n	8004c7e <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8004c06:	4b56      	ldr	r3, [pc, #344]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0305 	and.w	r3, r3, #5
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0a0      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8004c16:	4b52      	ldr	r3, [pc, #328]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004c1e:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c32:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8004c34:	4a4a      	ldr	r2, [pc, #296]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d116      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c40:	f000 f982 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b46      	ldr	r3, [pc, #280]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4945      	ldr	r1, [pc, #276]	@ (8004d64 <HAL_RCC_OscConfig+0x6a0>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a44      	ldr	r2, [pc, #272]	@ (8004d68 <HAL_RCC_OscConfig+0x6a4>)
 8004c58:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c5a:	4b44      	ldr	r3, [pc, #272]	@ (8004d6c <HAL_RCC_OscConfig+0x6a8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff f91c 	bl	8003e9c <HAL_InitTick>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e074      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3b      	ldr	r2, [pc, #236]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7ff f99f 	bl	8003fc0 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c86:	f7ff f99b 	bl	8003fc0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d908      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004c94:	4b32      	ldr	r3, [pc, #200]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e058      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1e8      	bne.n	8004c86 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d04a      	beq.n	8004d56 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a24      	ldr	r2, [pc, #144]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004cce:	f023 0308 	bic.w	r3, r3, #8
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e022      	b.n	8004d20 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8004cda:	4b21      	ldr	r3, [pc, #132]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0318 	and.w	r3, r3, #24
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e036      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8004cf2:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d08:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8004d0a:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8004d10:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004d16:	f043 0308 	orr.w	r3, r3, #8
 8004d1a:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7ff f94e 	bl	8003fc0 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d26:	e00f      	b.n	8004d48 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d28:	f7ff f94a 	bl	8003fc0 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d908      	bls.n	8004d48 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e007      	b.n	8004d58 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_OscConfig+0x69c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d1e8      	bne.n	8004d28 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40030c00 	.word	0x40030c00
 8004d64:	0800c3c8 	.word	0x0800c3c8
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	20000004 	.word	0x20000004

08004d70 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0d2      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b6b      	ldr	r3, [pc, #428]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b68      	ldr	r3, [pc, #416]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 020f 	bic.w	r2, r3, #15
 8004d9a:	4966      	ldr	r1, [pc, #408]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b64      	ldr	r3, [pc, #400]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0ba      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d040      	beq.n	8004e42 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8004dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0a6      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d108      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e09b      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e094      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e00:	4b4d      	ldr	r3, [pc, #308]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f023 0203 	bic.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	494a      	ldr	r1, [pc, #296]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e12:	f7ff f8d5 	bl	8003fc0 <HAL_GetTick>
 8004e16:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1a:	f7ff f8d1 	bl	8003fc0 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e07c      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8004e30:	4b41      	ldr	r3, [pc, #260]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 020c 	and.w	r2, r3, #12
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d1eb      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8004e42:	4b3d      	ldr	r3, [pc, #244]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 030f 	bic.w	r3, r3, #15
 8004e5e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e80:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ea2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8004eba:	4a1f      	ldr	r2, [pc, #124]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d210      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	4912      	ldr	r1, [pc, #72]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e012      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f04:	f000 f820 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490a      	ldr	r1, [pc, #40]	@ (8004f3c <HAL_RCC_ClockConfig+0x1cc>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <HAL_RCC_ClockConfig+0x1d0>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f1e:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <HAL_RCC_ClockConfig+0x1d4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe ffba 	bl	8003e9c <HAL_InitTick>
 8004f28:	4603      	mov	r3, r0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40030c00 	.word	0x40030c00
 8004f3c:	0800c3c8 	.word	0x0800c3c8
 8004f40:	20000000 	.word	0x20000000
 8004f44:	20000004 	.word	0x20000004

08004f48 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x84>)
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	e029      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x84>)
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	e023      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8004f70:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da02      	bge.n	8004f8c <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8004f86:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	e001      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8004f8c:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004f8e:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0f5b      	lsrs	r3, r3, #29
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004f9e:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004fa2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004fa6:	0b1b      	lsrs	r3, r3, #12
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8004fb8:	683b      	ldr	r3, [r7, #0]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40030c00 	.word	0x40030c00
 8004fcc:	00f42400 	.word	0x00f42400
 8004fd0:	016e3600 	.word	0x016e3600
 8004fd4:	05b8d800 	.word	0x05b8d800

08004fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fdc:	f7ff ffb4 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <HAL_RCC_GetHCLKFreq+0x28>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	4906      	ldr	r1, [pc, #24]	@ (8005004 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fec:	5ccb      	ldrb	r3, [r1, r3]
 8004fee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff2:	4a05      	ldr	r2, [pc, #20]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ff4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ff6:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40030c00 	.word	0x40030c00
 8005004:	0800c3c8 	.word	0x0800c3c8
 8005008:	20000000 	.word	0x20000000

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005010:	f7ff ffe2 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4903      	ldr	r1, [pc, #12]	@ (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40030c00 	.word	0x40030c00
 8005030:	0800c3d8 	.word	0x0800c3d8

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005038:	f7ff ffce 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4903      	ldr	r1, [pc, #12]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40030c00 	.word	0x40030c00
 8005058:	0800c3d8 	.word	0x0800c3d8

0800505c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005060:	f7ff ffba 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	@ (8005080 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40030c00 	.word	0x40030c00
 8005080:	0800c3d8 	.word	0x0800c3d8

08005084 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 800508a:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_RCC_GetMSIKFreq+0x60>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00f      	beq.n	80050ba <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0e9b      	lsrs	r3, r3, #26
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 80050ae:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <HAL_RCC_GetMSIKFreq+0x64>)
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 80050b4:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <HAL_RCC_GetMSIKFreq+0x68>)
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	e008      	b.n	80050cc <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_GetMSIKFreq+0x64>)
 80050bc:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 80050be:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <HAL_RCC_GetMSIKFreq+0x60>)
 80050c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	607b      	str	r3, [r7, #4]

  return tmp;
 80050d6:	687b      	ldr	r3, [r7, #4]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40030c00 	.word	0x40030c00
 80050e8:	016e3600 	.word	0x016e3600
 80050ec:	05b8d800 	.word	0x05b8d800

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005104:	4bad      	ldr	r3, [pc, #692]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005106:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	49aa      	ldr	r1, [pc, #680]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005126:	4ba5      	ldr	r3, [pc, #660]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005128:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800512c:	f023 0204 	bic.w	r2, r3, #4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	49a1      	ldr	r1, [pc, #644]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005148:	4b9c      	ldr	r3, [pc, #624]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800514a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800514e:	f023 0210 	bic.w	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4999      	ldr	r1, [pc, #612]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800516a:	4b94      	ldr	r3, [pc, #592]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800516c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005170:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	4990      	ldr	r1, [pc, #576]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 800518c:	4b8b      	ldr	r3, [pc, #556]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800518e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005192:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4988      	ldr	r1, [pc, #544]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ae:	4b83      	ldr	r3, [pc, #524]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	497f      	ldr	r1, [pc, #508]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051d0:	4b7a      	ldr	r3, [pc, #488]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4977      	ldr	r1, [pc, #476]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 80051f2:	4b72      	ldr	r3, [pc, #456]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051f8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	496e      	ldr	r1, [pc, #440]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8005214:	4b69      	ldr	r3, [pc, #420]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005216:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800521a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	4966      	ldr	r1, [pc, #408]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005236:	4b61      	ldr	r3, [pc, #388]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005238:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800523c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	495d      	ldr	r1, [pc, #372]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8005258:	4b58      	ldr	r3, [pc, #352]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800525a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800525e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	4955      	ldr	r1, [pc, #340]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 800527a:	4b50      	ldr	r3, [pc, #320]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800527c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005280:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005288:	494c      	ldr	r1, [pc, #304]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800529c:	4b47      	ldr	r3, [pc, #284]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800529e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	4944      	ldr	r1, [pc, #272]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 80052be:	4b3f      	ldr	r3, [pc, #252]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	493b      	ldr	r1, [pc, #236]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	4933      	ldr	r1, [pc, #204]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8005302:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005304:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005308:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	492a      	ldr	r1, [pc, #168]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8005324:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005326:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	4922      	ldr	r1, [pc, #136]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005348:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800534c:	f023 0208 	bic.w	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	4919      	ldr	r1, [pc, #100]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005368:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800536a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800536e:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005376:	4911      	ldr	r1, [pc, #68]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800538c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005398:	4908      	ldr	r1, [pc, #32]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 80053ac:	4b03      	ldr	r3, [pc, #12]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80053ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	e002      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053ba:	bf00      	nop
 80053bc:	40030c00 	.word	0x40030c00
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	4980      	ldr	r1, [pc, #512]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 80053ca:	4b7e      	ldr	r3, [pc, #504]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053d0:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	497a      	ldr	r1, [pc, #488]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 80053ec:	4b75      	ldr	r3, [pc, #468]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	4972      	ldr	r1, [pc, #456]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 800540e:	4b6d      	ldr	r3, [pc, #436]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005410:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005414:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541c:	4969      	ldr	r1, [pc, #420]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005430:	4b64      	ldr	r3, [pc, #400]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005432:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543e:	4961      	ldr	r1, [pc, #388]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005452:	4b5c      	ldr	r3, [pc, #368]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005454:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005458:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005460:	4958      	ldr	r1, [pc, #352]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8005474:	4b53      	ldr	r3, [pc, #332]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005476:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800547a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005482:	4950      	ldr	r1, [pc, #320]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005496:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005498:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800549c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a4:	4947      	ldr	r1, [pc, #284]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f280 8082 	bge.w	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 80054b6:	4b43      	ldr	r3, [pc, #268]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80054bc:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054be:	4b41      	ldr	r3, [pc, #260]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80054c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c8:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d072      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d110      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	4b37      	ldr	r3, [pc, #220]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ec:	4a35      	ldr	r2, [pc, #212]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054ee:	f043 0304 	orr.w	r3, r3, #4
 80054f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054f6:	4b33      	ldr	r3, [pc, #204]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005504:	2301      	movs	r3, #1
 8005506:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005508:	4b2f      	ldr	r3, [pc, #188]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800551a:	4b2a      	ldr	r3, [pc, #168]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800551c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005520:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 800552a:	4b26      	ldr	r3, [pc, #152]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800552c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005530:	4a24      	ldr	r2, [pc, #144]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005536:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005540:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005546:	2b00      	cmp	r3, #0
 8005548:	d006      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4313      	orrs	r3, r2
 8005552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005556:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8005558:	4a1a      	ldr	r2, [pc, #104]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01c      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fe fd29 	bl	8003fc0 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005570:	e011      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005572:	f7fe fd25 	bl	8003fc0 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005580:	4293      	cmp	r3, r2
 8005582:	d908      	bls.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005584:	4b0f      	ldr	r3, [pc, #60]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005586:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e012      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005598:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0e6      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80055a4:	7efb      	ldrb	r3, [r7, #27]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b0:	4a04      	ldr	r2, [pc, #16]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80055b2:	f023 0304 	bic.w	r3, r3, #4
 80055b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40030c00 	.word	0x40030c00
 80055c8:	40030800 	.word	0x40030800

080055cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055de:	f000 8469 	beq.w	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e8:	f200 84a0 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055f2:	f000 8420 	beq.w	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055fc:	f200 8496 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005606:	f000 83d3 	beq.w	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005610:	f200 848c 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800561a:	f000 83b8 	beq.w	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005624:	f200 8482 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800562e:	f000 8378 	beq.w	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005638:	f200 8478 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005642:	f000 835d 	beq.w	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800564c:	f200 846e 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005656:	f000 8326 	beq.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005660:	f200 8464 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566a:	f000 82db 	beq.w	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005674:	f200 845a 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800567e:	f000 82b9 	beq.w	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005688:	f200 8450 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005692:	f000 828c 	beq.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800569c:	f200 8446 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a6:	f000 8271 	beq.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b0:	f200 843c 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	f000 8246 	beq.w	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	f200 8432 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ce:	f000 8228 	beq.w	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d8:	f200 8428 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	f000 81ef 	beq.w	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ec:	f200 841e 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f6:	f000 81ce 	beq.w	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005700:	f200 8414 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570a:	f000 8189 	beq.w	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005714:	f200 840a 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571e:	f000 816e 	beq.w	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	f200 8400 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005732:	f000 8121 	beq.w	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573c:	f200 83f6 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	f000 8106 	beq.w	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005750:	f200 83ec 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b80      	cmp	r3, #128	@ 0x80
 8005758:	f000 80ec 	beq.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b80      	cmp	r3, #128	@ 0x80
 8005760:	f200 83e4 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d84c      	bhi.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 83dd 	beq.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3b01      	subs	r3, #1
 8005776:	2b1f      	cmp	r3, #31
 8005778:	f200 83d8 	bhi.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800577c:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	0800580f 	.word	0x0800580f
 8005788:	0800583f 	.word	0x0800583f
 800578c:	08005f2d 	.word	0x08005f2d
 8005790:	0800586f 	.word	0x0800586f
 8005794:	08005f2d 	.word	0x08005f2d
 8005798:	08005f2d 	.word	0x08005f2d
 800579c:	08005f2d 	.word	0x08005f2d
 80057a0:	0800589f 	.word	0x0800589f
 80057a4:	08005f2d 	.word	0x08005f2d
 80057a8:	08005f2d 	.word	0x08005f2d
 80057ac:	08005f2d 	.word	0x08005f2d
 80057b0:	08005f2d 	.word	0x08005f2d
 80057b4:	08005f2d 	.word	0x08005f2d
 80057b8:	08005f2d 	.word	0x08005f2d
 80057bc:	08005f2d 	.word	0x08005f2d
 80057c0:	080058cf 	.word	0x080058cf
 80057c4:	08005f2d 	.word	0x08005f2d
 80057c8:	08005f2d 	.word	0x08005f2d
 80057cc:	08005f2d 	.word	0x08005f2d
 80057d0:	08005f2d 	.word	0x08005f2d
 80057d4:	08005f2d 	.word	0x08005f2d
 80057d8:	08005f2d 	.word	0x08005f2d
 80057dc:	08005f2d 	.word	0x08005f2d
 80057e0:	08005f2d 	.word	0x08005f2d
 80057e4:	08005f2d 	.word	0x08005f2d
 80057e8:	08005f2d 	.word	0x08005f2d
 80057ec:	08005f2d 	.word	0x08005f2d
 80057f0:	08005f2d 	.word	0x08005f2d
 80057f4:	08005f2d 	.word	0x08005f2d
 80057f8:	08005f2d 	.word	0x08005f2d
 80057fc:	08005f2d 	.word	0x08005f2d
 8005800:	080058f1 	.word	0x080058f1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b40      	cmp	r3, #64	@ 0x40
 8005808:	f000 8083 	beq.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 800580c:	e38e      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800580e:	4ba9      	ldr	r3, [pc, #676]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005810:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005820:	f7ff fc08 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 8005824:	60f8      	str	r0, [r7, #12]
      break;
 8005826:	e383      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005828:	4ba2      	ldr	r3, [pc, #648]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005834:	f040 837c 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8005838:	4b9f      	ldr	r3, [pc, #636]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800583a:	60fb      	str	r3, [r7, #12]
      break;
 800583c:	e378      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800583e:	4b9d      	ldr	r3, [pc, #628]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005840:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005850:	f7ff fbdc 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8005854:	60f8      	str	r0, [r7, #12]
      break;
 8005856:	e36d      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005858:	4b96      	ldr	r3, [pc, #600]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005864:	f040 8366 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8005868:	4b93      	ldr	r3, [pc, #588]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800586a:	60fb      	str	r3, [r7, #12]
      break;
 800586c:	e362      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800586e:	4b91      	ldr	r3, [pc, #580]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005870:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005880:	f7ff fbc4 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8005884:	60f8      	str	r0, [r7, #12]
      break;
 8005886:	e357      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005888:	4b8a      	ldr	r3, [pc, #552]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005894:	f040 8350 	bne.w	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8005898:	4b87      	ldr	r3, [pc, #540]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800589a:	60fb      	str	r3, [r7, #12]
      break;
 800589c:	e34c      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800589e:	4b85      	ldr	r3, [pc, #532]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7ff fbac 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80058b4:	60f8      	str	r0, [r7, #12]
      break;
 80058b6:	e341      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c4:	f040 833a 	bne.w	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 80058c8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058ca:	60fb      	str	r3, [r7, #12]
      break;
 80058cc:	e336      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80058ce:	4b79      	ldr	r3, [pc, #484]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7ff fb94 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80058e4:	60f8      	str	r0, [r7, #12]
      break;
 80058e6:	e340      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80058e8:	f7ff fbcc 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 80058ec:	60f8      	str	r0, [r7, #12]
      break;
 80058ee:	e33c      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80058f0:	4b70      	ldr	r3, [pc, #448]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fa:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005902:	f7ff fb83 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8005906:	60f8      	str	r0, [r7, #12]
      break;
 8005908:	e32f      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800590a:	f7ff fbbb 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 800590e:	60f8      	str	r0, [r7, #12]
      break;
 8005910:	e32b      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005912:	4b68      	ldr	r3, [pc, #416]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005914:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800591c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005924:	f7ff fb72 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8005928:	60f8      	str	r0, [r7, #12]
      break;
 800592a:	e31e      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800592c:	f7ff fbaa 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005930:	60f8      	str	r0, [r7, #12]
      break;
 8005932:	e31a      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005934:	4b5f      	ldr	r3, [pc, #380]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005936:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800593a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005946:	f7ff fb75 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 800594a:	60f8      	str	r0, [r7, #12]
      break;
 800594c:	e30d      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800594e:	f7ff fb99 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005952:	60f8      	str	r0, [r7, #12]
      break;
 8005954:	e309      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005956:	4b57      	ldr	r3, [pc, #348]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005958:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800595c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005960:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005968:	f7ff fb50 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 800596c:	60f8      	str	r0, [r7, #12]
      break;
 800596e:	e2fc      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005970:	f7ff fb88 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005974:	60f8      	str	r0, [r7, #12]
      break;
 8005976:	e2f8      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005978:	4b4e      	ldr	r3, [pc, #312]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800597a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800597e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005982:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 800598a:	f7ff fb3f 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 800598e:	60f8      	str	r0, [r7, #12]
      break;
 8005990:	e2d6      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005998:	d116      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800599a:	4b46      	ldr	r3, [pc, #280]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800599c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	f040 82cb 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 80059aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80059ae:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80059b0:	4b40      	ldr	r3, [pc, #256]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	f040 82c0 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
      break;
 80059c6:	e2bb      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059ce:	d10a      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059d0:	4b38      	ldr	r3, [pc, #224]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059dc:	f040 82b0 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 80059e0:	4b35      	ldr	r3, [pc, #212]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80059e2:	60fb      	str	r3, [r7, #12]
      break;
 80059e4:	e2ac      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059e6:	4b33      	ldr	r3, [pc, #204]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	f040 82a5 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059fa:	60fb      	str	r3, [r7, #12]
      break;
 80059fc:	e2a0      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80059fe:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a08:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7ff fb10 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 8005a14:	60f8      	str	r0, [r7, #12]
      break;
 8005a16:	e2a8      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005a18:	f7ff fb34 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005a1c:	60f8      	str	r0, [r7, #12]
      break;
 8005a1e:	e2a4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8005a20:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a26:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005a2a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d105      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8005a32:	f7ff fad1 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005a36:	4603      	mov	r3, r0
 8005a38:	08db      	lsrs	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
      break;
 8005a3c:	e282      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a44:	d10b      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a48:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	f040 8277 	bne.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8005a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a5a:	60fb      	str	r3, [r7, #12]
      break;
 8005a5c:	e272      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a64:	f040 826e 	bne.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f040 8266 	bne.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8005a78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a7c:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	f040 825b 	bne.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	09db      	lsrs	r3, r3, #7
 8005a92:	60fb      	str	r3, [r7, #12]
      break;
 8005a94:	e256      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005a96:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a98:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aa8:	d108      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8005aaa:	f7ff faeb 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005aae:	60f8      	str	r0, [r7, #12]
      break;
 8005ab0:	e25b      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005ab2:	bf00      	nop
 8005ab4:	40030c00 	.word	0x40030c00
 8005ab8:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8005abc:	f7ff fa44 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8005ac0:	60f8      	str	r0, [r7, #12]
      break;
 8005ac2:	e252      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005ac4:	4ba4      	ldr	r3, [pc, #656]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005aca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005ace:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae2:	f040 8231 	bne.w	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8005ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005ae8:	60fb      	str	r3, [r7, #12]
      break;
 8005aea:	e22d      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005af2:	d103      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8005af4:	f7ff fac6 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005af8:	60f8      	str	r0, [r7, #12]
      break;
 8005afa:	e225      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b04:	4b94      	ldr	r3, [pc, #592]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b10:	f040 821a 	bne.w	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8005b14:	4b92      	ldr	r3, [pc, #584]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005b16:	60fb      	str	r3, [r7, #12]
      break;
 8005b18:	e216      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005b1a:	f7ff fa15 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8005b1e:	60f8      	str	r0, [r7, #12]
      break;
 8005b20:	e212      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8005b22:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b26:	f7ff fd51 	bl	80055cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b2a:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8005b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b2e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b3e:	f040 8205 	bne.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
      break;
 8005b48:	e200      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005b4a:	4b83      	ldr	r3, [pc, #524]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8005b5c:	f7ff fa3c 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005b60:	60f8      	str	r0, [r7, #12]
      break;
 8005b62:	e202      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d103      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b6a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b6e:	60fb      	str	r3, [r7, #12]
      break;
 8005b70:	e1fb      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d103      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8005b78:	f7ff fa84 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005b7c:	60f8      	str	r0, [r7, #12]
      break;
 8005b7e:	e1f4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b80:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005b84:	f7ff fd22 	bl	80055cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b88:	60f8      	str	r0, [r7, #12]
      break;
 8005b8a:	e1ee      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005b8c:	4b72      	ldr	r3, [pc, #456]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7ff fa35 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8005ba2:	60f8      	str	r0, [r7, #12]
      break;
 8005ba4:	e1e1      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005ba6:	f7ff fa6d 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005baa:	60f8      	str	r0, [r7, #12]
      break;
 8005bac:	e1dd      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005bae:	4b6a      	ldr	r3, [pc, #424]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005bb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005bb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005bb8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8005bc0:	f7ff fa60 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005bc4:	60f8      	str	r0, [r7, #12]
      break;
 8005bc6:	e1c3      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d103      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005bce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005bd2:	60fb      	str	r3, [r7, #12]
      break;
 8005bd4:	e1bc      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	f040 81b9 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bde:	4b5e      	ldr	r3, [pc, #376]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bea:	f040 81b1 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8005bee:	4b5c      	ldr	r3, [pc, #368]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005bf0:	60fb      	str	r3, [r7, #12]
      break;
 8005bf2:	e1ad      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005bf4:	4b58      	ldr	r3, [pc, #352]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005bf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bfe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005c06:	4b54      	ldr	r3, [pc, #336]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c12:	f040 819f 	bne.w	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8005c16:	4b51      	ldr	r3, [pc, #324]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005c18:	60fb      	str	r3, [r7, #12]
      break;
 8005c1a:	e19b      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8005c1c:	f7ff fa32 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005c20:	60f8      	str	r0, [r7, #12]
      break;
 8005c22:	e197      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005c24:	4b4c      	ldr	r3, [pc, #304]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c26:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005c2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c2e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8005c36:	f7ff f9cf 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	e014      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c46:	4b44      	ldr	r3, [pc, #272]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c52:	d109      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8005c54:	4b42      	ldr	r3, [pc, #264]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c60:	d102      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 8005c62:	f7ff fa0f 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005c66:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8005c68:	4b3b      	ldr	r3, [pc, #236]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005c6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c72:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	e00c      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c86:	d202      	bcs.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	e005      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	0b1a      	lsrs	r2, r3, #12
 8005c92:	4b34      	ldr	r3, [pc, #208]	@ (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	3302      	adds	r3, #2
 8005c98:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	60fb      	str	r3, [r7, #12]
      break;
 8005ca4:	e161      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8005ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ca8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cb0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cb8:	d116      	bne.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005cba:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	f040 8147 	bne.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8005cca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005cce:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005cd0:	4b21      	ldr	r3, [pc, #132]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	f040 813c 	bne.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	60fb      	str	r3, [r7, #12]
      break;
 8005ce6:	e137      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cea:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	f040 8130 	bne.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8005cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cfc:	60fb      	str	r3, [r7, #12]
      break;
 8005cfe:	e12b      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d02:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d0a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 8005d12:	f7ff f919 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8005d16:	60f8      	str	r0, [r7, #12]
      break;
 8005d18:	e127      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d1a:	f7ff f9b3 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005d1e:	60f8      	str	r0, [r7, #12]
      break;
 8005d20:	e123      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d24:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 8005d34:	f7ff f992 	bl	800505c <HAL_RCC_GetPCLK3Freq>
 8005d38:	60f8      	str	r0, [r7, #12]
      break;
 8005d3a:	e10f      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d112      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d42:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d4e:	f040 8105 	bne.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8005d52:	4b03      	ldr	r3, [pc, #12]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005d54:	60fb      	str	r3, [r7, #12]
      break;
 8005d56:	e101      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8005d58:	40030c00 	.word	0x40030c00
 8005d5c:	02dc6c00 	.word	0x02dc6c00
 8005d60:	00f42400 	.word	0x00f42400
 8005d64:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d6e:	4b81      	ldr	r3, [pc, #516]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d70:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f040 80ef 	bne.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8005d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d82:	60fb      	str	r3, [r7, #12]
      break;
 8005d84:	e0ea      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d86:	f7ff f97d 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005d8a:	60f8      	str	r0, [r7, #12]
      break;
 8005d8c:	e0e6      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d8e:	4b79      	ldr	r3, [pc, #484]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8005da0:	f7ff f95c 	bl	800505c <HAL_RCC_GetPCLK3Freq>
 8005da4:	60f8      	str	r0, [r7, #12]
      break;
 8005da6:	e0e0      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005da8:	f7ff f96c 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005dac:	60f8      	str	r0, [r7, #12]
      break;
 8005dae:	e0dc      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005db0:	4b70      	ldr	r3, [pc, #448]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005db2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dba:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8005dc2:	f7ff f95f 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005dc6:	60f8      	str	r0, [r7, #12]
      break;
 8005dc8:	e0ca      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd0:	d116      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dd2:	4b68      	ldr	r3, [pc, #416]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dd4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f040 80bf 	bne.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8005de2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005de6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005de8:	4b62      	ldr	r3, [pc, #392]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	f040 80b4 	bne.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	60fb      	str	r3, [r7, #12]
      break;
 8005dfe:	e0af      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e06:	d10a      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e08:	4b5a      	ldr	r3, [pc, #360]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e14:	f040 80a4 	bne.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8005e18:	4b57      	ldr	r3, [pc, #348]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005e1a:	60fb      	str	r3, [r7, #12]
      break;
 8005e1c:	e0a0      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e1e:	4b55      	ldr	r3, [pc, #340]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e20:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f040 8099 	bne.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	60fb      	str	r3, [r7, #12]
      break;
 8005e34:	e094      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e36:	4b4f      	ldr	r3, [pc, #316]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e38:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e40:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8005e48:	f7ff f91c 	bl	8005084 <HAL_RCC_GetMSIKFreq>
 8005e4c:	60f8      	str	r0, [r7, #12]
      break;
 8005e4e:	e089      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e56:	d114      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e58:	4b46      	ldr	r3, [pc, #280]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d17e      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8005e66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e6a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005e6c:	4b41      	ldr	r3, [pc, #260]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d174      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	09db      	lsrs	r3, r3, #7
 8005e7e:	60fb      	str	r3, [r7, #12]
      break;
 8005e80:	e070      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e88:	d109      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e96:	d165      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8005e98:	4b37      	ldr	r3, [pc, #220]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005e9a:	60fb      	str	r3, [r7, #12]
      break;
 8005e9c:	e062      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e9e:	4b35      	ldr	r3, [pc, #212]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005ea0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d15b      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8005eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb0:	60fb      	str	r3, [r7, #12]
      break;
 8005eb2:	e057      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005eb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec6:	d10a      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005eca:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d148      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8005ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eda:	60fb      	str	r3, [r7, #12]
      break;
 8005edc:	e044      	b.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d114      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ee6:	4b23      	ldr	r3, [pc, #140]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005ee8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d139      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8005ef4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ef8:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005efa:	4b1e      	ldr	r3, [pc, #120]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005efc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d12f      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	60fb      	str	r3, [r7, #12]
      break;
 8005f0e:	e02b      	b.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f16:	d127      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f18:	4b16      	ldr	r3, [pc, #88]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f24:	d120      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 8005f26:	4b15      	ldr	r3, [pc, #84]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8005f28:	60fb      	str	r3, [r7, #12]
      break;
 8005f2a:	e01d      	b.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8005f2c:	bf00      	nop
 8005f2e:	e01c      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f30:	bf00      	nop
 8005f32:	e01a      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f34:	bf00      	nop
 8005f36:	e018      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f38:	bf00      	nop
 8005f3a:	e016      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f3c:	bf00      	nop
 8005f3e:	e014      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f40:	bf00      	nop
 8005f42:	e012      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f44:	bf00      	nop
 8005f46:	e010      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f48:	bf00      	nop
 8005f4a:	e00e      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e00c      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f50:	bf00      	nop
 8005f52:	e00a      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f54:	bf00      	nop
 8005f56:	e008      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f58:	bf00      	nop
 8005f5a:	e006      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f5c:	bf00      	nop
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f68:	bf00      	nop
  }

  return (frequency);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40030c00 	.word	0x40030c00
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	0007a120 	.word	0x0007a120

08005f80 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
 8005fa4:	e027      	b.n	8005ff6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d107      	bne.n	8005fbc <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	e01c      	b.n	8005ff6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e011      	b.n	8005ff6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8005fec:	4a05      	ldr	r2, [pc, #20]	@ (8006004 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40030c00 	.word	0x40030c00

08006008 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0dc      	b.n	80061d4 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6d      	ldr	r2, [pc, #436]	@ (80061dc <HAL_SPI_Init+0x1d4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d105      	bne.n	8006036 <HAL_SPI_Init+0x2e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b0f      	cmp	r3, #15
 8006030:	d901      	bls.n	8006036 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0ce      	b.n	80061d4 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fe72 	bl	8006d20 <SPI_GetPacketSize>
 800603c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a66      	ldr	r2, [pc, #408]	@ (80061dc <HAL_SPI_Init+0x1d4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d102      	bne.n	800604e <HAL_SPI_Init+0x46>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b08      	cmp	r3, #8
 800604c:	d80c      	bhi.n	8006068 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006052:	4a63      	ldr	r2, [pc, #396]	@ (80061e0 <HAL_SPI_Init+0x1d8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a61      	ldr	r2, [pc, #388]	@ (80061e4 <HAL_SPI_Init+0x1dc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d104      	bne.n	800606c <HAL_SPI_Init+0x64>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b10      	cmp	r3, #16
 8006066:	d901      	bls.n	800606c <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0b3      	b.n	80061d4 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fd fc89 	bl	8003998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80060a8:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060b2:	d119      	bne.n	80060e8 <HAL_SPI_Init+0xe0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060bc:	d103      	bne.n	80060c6 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d107      	bne.n	80060e8 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <HAL_SPI_Init+0x10c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b06      	cmp	r3, #6
 80060fa:	d90b      	bls.n	8006114 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	431a      	orrs	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006136:	ea42 0103 	orr.w	r1, r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006190:	ea42 0103 	orr.w	r1, r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40002000 	.word	0x40002000
 80061e0:	40013000 	.word	0x40013000
 80061e4:	40003800 	.word	0x40003800

080061e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3320      	adds	r3, #32
 80061fe:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006200:	f7fd fede 	bl	8003fc0 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d001      	beq.n	8006216 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	e1e5      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Transmit+0x3a>
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e1dd      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_SPI_Transmit+0x4c>
 8006230:	2302      	movs	r3, #2
 8006232:	e1d6      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2203      	movs	r2, #3
 8006240:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800628c:	d108      	bne.n	80062a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e009      	b.n	80062b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80062b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	88f9      	ldrh	r1, [r7, #6]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_SPI_Transmit+0x118>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ee:	d107      	bne.n	8006300 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b0f      	cmp	r3, #15
 8006306:	d951      	bls.n	80063ac <HAL_SPI_Transmit+0x1c4>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a8a      	ldr	r2, [pc, #552]	@ (8006538 <HAL_SPI_Transmit+0x350>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d045      	beq.n	800639e <HAL_SPI_Transmit+0x1b6>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a89      	ldr	r2, [pc, #548]	@ (800653c <HAL_SPI_Transmit+0x354>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d147      	bne.n	80063ac <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800631c:	e03f      	b.n	800639e <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d114      	bne.n	8006356 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633c:	1d1a      	adds	r2, r3, #4
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006354:	e023      	b.n	800639e <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006356:	f7fd fe33 	bl	8003fc0 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d803      	bhi.n	800636e <HAL_SPI_Transmit+0x186>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d102      	bne.n	8006374 <HAL_SPI_Transmit+0x18c>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d114      	bne.n	800639e <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fc05 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006380:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e121      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1b9      	bne.n	800631e <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80063aa:	e0f4      	b.n	8006596 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b07      	cmp	r3, #7
 80063b2:	f240 80e9 	bls.w	8006588 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063b6:	e05d      	b.n	8006474 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d132      	bne.n	800642c <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d918      	bls.n	8006404 <HAL_SPI_Transmit+0x21c>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d014      	beq.n	8006404 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ea:	1d1a      	adds	r2, r3, #4
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b02      	subs	r3, #2
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006402:	e037      	b.n	8006474 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006408:	881a      	ldrh	r2, [r3, #0]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800642a:	e023      	b.n	8006474 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642c:	f7fd fdc8 	bl	8003fc0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d803      	bhi.n	8006444 <HAL_SPI_Transmit+0x25c>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d102      	bne.n	800644a <HAL_SPI_Transmit+0x262>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d114      	bne.n	8006474 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fb9a 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e0b6      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d19b      	bne.n	80063b8 <HAL_SPI_Transmit+0x1d0>
 8006480:	e089      	b.n	8006596 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b02      	cmp	r3, #2
 800648e:	d157      	bne.n	8006540 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d918      	bls.n	80064ce <HAL_SPI_Transmit+0x2e6>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	d914      	bls.n	80064ce <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b4:	1d1a      	adds	r2, r3, #4
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b04      	subs	r3, #4
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064cc:	e05c      	b.n	8006588 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d917      	bls.n	800650a <HAL_SPI_Transmit+0x322>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d013      	beq.n	800650a <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e6:	881a      	ldrh	r2, [r3, #0]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b02      	subs	r3, #2
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006508:	e03e      	b.n	8006588 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3320      	adds	r3, #32
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006534:	e028      	b.n	8006588 <HAL_SPI_Transmit+0x3a0>
 8006536:	bf00      	nop
 8006538:	40013000 	.word	0x40013000
 800653c:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006540:	f7fd fd3e 	bl	8003fc0 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d803      	bhi.n	8006558 <HAL_SPI_Transmit+0x370>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x376>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d114      	bne.n	8006588 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fb10 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800656a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e02c      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	f47f af76 	bne.w	8006482 <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	2108      	movs	r1, #8
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fb8f 	bl	8006cc4 <SPI_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fae1 	bl	8006b84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	b29b      	uxth	r3, r3
 8006604:	3301      	adds	r3, #1
 8006606:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3330      	adds	r3, #48	@ 0x30
 800660e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006610:	f7fd fcd6 	bl	8003fc0 <HAL_GetTick>
 8006614:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	d001      	beq.n	8006626 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006622:	2302      	movs	r3, #2
 8006624:	e2aa      	b.n	8006b7c <HAL_SPI_Receive+0x590>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_SPI_Receive+0x46>
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e2a2      	b.n	8006b7c <HAL_SPI_Receive+0x590>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_SPI_Receive+0x58>
 8006640:	2302      	movs	r3, #2
 8006642:	e29b      	b.n	8006b7c <HAL_SPI_Receive+0x590>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2204      	movs	r2, #4
 8006650:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	88fa      	ldrh	r2, [r7, #6]
 8006666:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800669c:	d108      	bne.n	80066b0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e009      	b.n	80066c4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80066c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	88f9      	ldrh	r1, [r7, #6]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10c      	bne.n	8006710 <HAL_SPI_Receive+0x124>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066fe:	d107      	bne.n	8006710 <HAL_SPI_Receive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800670e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b0f      	cmp	r3, #15
 8006716:	f240 8090 	bls.w	800683a <HAL_SPI_Receive+0x24e>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a8b      	ldr	r2, [pc, #556]	@ (800694c <HAL_SPI_Receive+0x360>)
 8006720:	4293      	cmp	r3, r2
 8006722:	f000 8082 	beq.w	800682a <HAL_SPI_Receive+0x23e>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a89      	ldr	r2, [pc, #548]	@ (8006950 <HAL_SPI_Receive+0x364>)
 800672c:	4293      	cmp	r3, r2
 800672e:	f040 8084 	bne.w	800683a <HAL_SPI_Receive+0x24e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006732:	e07a      	b.n	800682a <HAL_SPI_Receive+0x23e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d114      	bne.n	8006774 <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006752:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006754:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006772:	e05a      	b.n	800682a <HAL_SPI_Receive+0x23e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800677a:	b29b      	uxth	r3, r3
 800677c:	8bfa      	ldrh	r2, [r7, #30]
 800677e:	429a      	cmp	r2, r3
 8006780:	d919      	bls.n	80067b6 <HAL_SPI_Receive+0x1ca>
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d014      	beq.n	80067b6 <HAL_SPI_Receive+0x1ca>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006794:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006796:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80067b4:	e039      	b.n	800682a <HAL_SPI_Receive+0x23e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <HAL_SPI_Receive+0x1f6>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ce:	d12c      	bne.n	800682a <HAL_SPI_Receive+0x23e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067de:	619a      	str	r2, [r3, #24]
 80067e0:	e023      	b.n	800682a <HAL_SPI_Receive+0x23e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e2:	f7fd fbed 	bl	8003fc0 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d803      	bhi.n	80067fa <HAL_SPI_Receive+0x20e>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d102      	bne.n	8006800 <HAL_SPI_Receive+0x214>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d114      	bne.n	800682a <HAL_SPI_Receive+0x23e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f9bf 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e1a8      	b.n	8006b7c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	f47f af7e 	bne.w	8006734 <HAL_SPI_Receive+0x148>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006838:	e18d      	b.n	8006b56 <HAL_SPI_Receive+0x56a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b07      	cmp	r3, #7
 8006840:	f240 8182 	bls.w	8006b48 <HAL_SPI_Receive+0x55c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006844:	e0aa      	b.n	800699c <HAL_SPI_Receive+0x3b0>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d114      	bne.n	8006886 <HAL_SPI_Receive+0x29a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	8812      	ldrh	r2, [r2, #0]
 8006864:	b292      	uxth	r2, r2
 8006866:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800686c:	1c9a      	adds	r2, r3, #2
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006884:	e08a      	b.n	800699c <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800688c:	b29b      	uxth	r3, r3
 800688e:	8bfa      	ldrh	r2, [r7, #30]
 8006890:	429a      	cmp	r2, r3
 8006892:	d924      	bls.n	80068de <HAL_SPI_Receive+0x2f2>
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01f      	beq.n	80068de <HAL_SPI_Receive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	8812      	ldrh	r2, [r2, #0]
 80068a6:	b292      	uxth	r2, r2
 80068a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	8812      	ldrh	r2, [r2, #0]
 80068bc:	b292      	uxth	r2, r2
 80068be:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b02      	subs	r3, #2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80068dc:	e05e      	b.n	800699c <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d119      	bne.n	800691e <HAL_SPI_Receive+0x332>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d014      	beq.n	800691e <HAL_SPI_Receive+0x332>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006904:	1c9a      	adds	r2, r3, #2
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800691c:	e03e      	b.n	800699c <HAL_SPI_Receive+0x3b0>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006924:	2b00      	cmp	r3, #0
 8006926:	d015      	beq.n	8006954 <HAL_SPI_Receive+0x368>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006936:	d131      	bne.n	800699c <HAL_SPI_Receive+0x3b0>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006946:	619a      	str	r2, [r3, #24]
 8006948:	e028      	b.n	800699c <HAL_SPI_Receive+0x3b0>
 800694a:	bf00      	nop
 800694c:	40013000 	.word	0x40013000
 8006950:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006954:	f7fd fb34 	bl	8003fc0 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d803      	bhi.n	800696c <HAL_SPI_Receive+0x380>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d102      	bne.n	8006972 <HAL_SPI_Receive+0x386>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d114      	bne.n	800699c <HAL_SPI_Receive+0x3b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f906 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800697e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e0ef      	b.n	8006b7c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f47f af4e 	bne.w	8006846 <HAL_SPI_Receive+0x25a>
 80069aa:	e0d4      	b.n	8006b56 <HAL_SPI_Receive+0x56a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d117      	bne.n	80069f2 <HAL_SPI_Receive+0x406>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ce:	7812      	ldrb	r2, [r2, #0]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80069f0:	e0aa      	b.n	8006b48 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8bfa      	ldrh	r2, [r7, #30]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d946      	bls.n	8006a8e <HAL_SPI_Receive+0x4a2>
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d041      	beq.n	8006a8e <HAL_SPI_Receive+0x4a2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a6a:	7812      	ldrb	r2, [r2, #0]
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b04      	subs	r3, #4
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006a8c:	e05c      	b.n	8006b48 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d81c      	bhi.n	8006ad4 <HAL_SPI_Receive+0x4e8>
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <HAL_SPI_Receive+0x4e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ab0:	7812      	ldrb	r2, [r2, #0]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006ad2:	e039      	b.n	8006b48 <HAL_SPI_Receive+0x55c>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_SPI_Receive+0x514>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aec:	d12c      	bne.n	8006b48 <HAL_SPI_Receive+0x55c>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006afc:	619a      	str	r2, [r3, #24]
 8006afe:	e023      	b.n	8006b48 <HAL_SPI_Receive+0x55c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b00:	f7fd fa5e 	bl	8003fc0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d803      	bhi.n	8006b18 <HAL_SPI_Receive+0x52c>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Receive+0x532>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d114      	bne.n	8006b48 <HAL_SPI_Receive+0x55c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f830 	bl	8006b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e019      	b.n	8006b7c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f47f af2b 	bne.w	80069ac <HAL_SPI_Receive+0x3c0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f814 	bl	8006b84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_SPI_Receive+0x58e>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <HAL_SPI_Receive+0x590>
  }
  else
  {
    return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0208 	orr.w	r2, r2, #8
 8006ba2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0210 	orr.w	r2, r2, #16
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d014      	beq.n	8006c1e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00f      	beq.n	8006c1e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0220 	orr.w	r2, r2, #32
 8006c1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d014      	beq.n	8006c54 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00f      	beq.n	8006c54 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3a:	f043 0204 	orr.w	r2, r3, #4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00f      	beq.n	8006c7e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00f      	beq.n	8006ca8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c8e:	f043 0208 	orr.w	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ca6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cd4:	e010      	b.n	8006cf8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cd6:	f7fd f973 	bl	8003fc0 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d803      	bhi.n	8006cee <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d102      	bne.n	8006cf4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e00f      	b.n	8006d18 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695a      	ldr	r2, [r3, #20]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4013      	ands	r3, r2
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d0df      	beq.n	8006cd6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d12e      	bne.n	8006dca <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e028      	b.n	8006dcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006da6:	ea42 0103 	orr.w	r1, r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e000      	b.n	8006dcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
  }
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e042      	b.n	8006e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fc fe2f 	bl	8003a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2224      	movs	r2, #36	@ 0x24
 8006e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa2a 	bl	800727c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8b3 	bl	8006f94 <UART_SetConfig>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e01b      	b.n	8006e70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 faa9 	bl	80073c0 <UART_CheckIdleState>
 8006e6e:	4603      	mov	r3, r0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	@ 0x28
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d17b      	bne.n	8006f8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_UART_Transmit+0x26>
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e074      	b.n	8006f8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2221      	movs	r2, #33	@ 0x21
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb2:	f7fd f885 	bl	8003fc0 <HAL_GetTick>
 8006eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed0:	d108      	bne.n	8006ee4 <HAL_UART_Transmit+0x6c>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e003      	b.n	8006eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006eec:	e030      	b.n	8006f50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2180      	movs	r1, #128	@ 0x80
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fb0b 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e03d      	b.n	8006f8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	3302      	adds	r3, #2
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	e007      	b.n	8006f3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1c8      	bne.n	8006eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2200      	movs	r2, #0
 8006f64:	2140      	movs	r1, #64	@ 0x40
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fad4 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e006      	b.n	8006f8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f98:	b08e      	sub	sp, #56	@ 0x38
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b9b      	ldr	r3, [pc, #620]	@ (8007230 <UART_SetConfig+0x29c>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a90      	ldr	r2, [pc, #576]	@ (8007234 <UART_SetConfig+0x2a0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800700a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007014:	430b      	orrs	r3, r1
 8007016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	f023 010f 	bic.w	r1, r3, #15
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a81      	ldr	r2, [pc, #516]	@ (8007238 <UART_SetConfig+0x2a4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d102      	bne.n	800703e <UART_SetConfig+0xaa>
 8007038:	2301      	movs	r3, #1
 800703a:	633b      	str	r3, [r7, #48]	@ 0x30
 800703c:	e022      	b.n	8007084 <UART_SetConfig+0xf0>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7e      	ldr	r2, [pc, #504]	@ (800723c <UART_SetConfig+0x2a8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d102      	bne.n	800704e <UART_SetConfig+0xba>
 8007048:	2302      	movs	r3, #2
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30
 800704c:	e01a      	b.n	8007084 <UART_SetConfig+0xf0>
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a7b      	ldr	r2, [pc, #492]	@ (8007240 <UART_SetConfig+0x2ac>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d102      	bne.n	800705e <UART_SetConfig+0xca>
 8007058:	2304      	movs	r3, #4
 800705a:	633b      	str	r3, [r7, #48]	@ 0x30
 800705c:	e012      	b.n	8007084 <UART_SetConfig+0xf0>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a78      	ldr	r2, [pc, #480]	@ (8007244 <UART_SetConfig+0x2b0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d102      	bne.n	800706e <UART_SetConfig+0xda>
 8007068:	2308      	movs	r3, #8
 800706a:	633b      	str	r3, [r7, #48]	@ 0x30
 800706c:	e00a      	b.n	8007084 <UART_SetConfig+0xf0>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a70      	ldr	r2, [pc, #448]	@ (8007234 <UART_SetConfig+0x2a0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d103      	bne.n	8007080 <UART_SetConfig+0xec>
 8007078:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800707c:	633b      	str	r3, [r7, #48]	@ 0x30
 800707e:	e001      	b.n	8007084 <UART_SetConfig+0xf0>
 8007080:	2300      	movs	r3, #0
 8007082:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a6a      	ldr	r2, [pc, #424]	@ (8007234 <UART_SetConfig+0x2a0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d16c      	bne.n	8007168 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800708e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007090:	f7fe fa9c 	bl	80055cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007094:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8007096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80da 	beq.w	8007252 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	4a69      	ldr	r2, [pc, #420]	@ (8007248 <UART_SetConfig+0x2b4>)
 80070a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b0:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	4413      	add	r3, r2
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d305      	bcc.n	80070ce <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d903      	bls.n	80070d6 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80070d4:	e0bd      	b.n	8007252 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	2200      	movs	r2, #0
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	60fa      	str	r2, [r7, #12]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e2:	4a59      	ldr	r2, [pc, #356]	@ (8007248 <UART_SetConfig+0x2b4>)
 80070e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2200      	movs	r2, #0
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070f8:	f7f9 fdca 	bl	8000c90 <__aeabi_uldivmod>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	020b      	lsls	r3, r1, #8
 800710e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007112:	0202      	lsls	r2, r0, #8
 8007114:	6979      	ldr	r1, [r7, #20]
 8007116:	6849      	ldr	r1, [r1, #4]
 8007118:	0849      	lsrs	r1, r1, #1
 800711a:	2000      	movs	r0, #0
 800711c:	460c      	mov	r4, r1
 800711e:	4605      	mov	r5, r0
 8007120:	eb12 0804 	adds.w	r8, r2, r4
 8007124:	eb43 0905 	adc.w	r9, r3, r5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	469a      	mov	sl, r3
 8007130:	4693      	mov	fp, r2
 8007132:	4652      	mov	r2, sl
 8007134:	465b      	mov	r3, fp
 8007136:	4640      	mov	r0, r8
 8007138:	4649      	mov	r1, r9
 800713a:	f7f9 fda9 	bl	8000c90 <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4613      	mov	r3, r2
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800714c:	d308      	bcc.n	8007160 <UART_SetConfig+0x1cc>
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007154:	d204      	bcs.n	8007160 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e078      	b.n	8007252 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007166:	e074      	b.n	8007252 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007170:	d137      	bne.n	80071e2 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007174:	f7fe fa2a 	bl	80055cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007178:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717c:	2b00      	cmp	r3, #0
 800717e:	d068      	beq.n	8007252 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	4a30      	ldr	r2, [pc, #192]	@ (8007248 <UART_SetConfig+0x2b4>)
 8007186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718a:	461a      	mov	r2, r3
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007192:	005a      	lsls	r2, r3, #1
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	441a      	add	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	2b0f      	cmp	r3, #15
 80071aa:	d916      	bls.n	80071da <UART_SetConfig+0x246>
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b2:	d212      	bcs.n	80071da <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f023 030f 	bic.w	r3, r3, #15
 80071bc:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071cc:	4313      	orrs	r3, r2
 80071ce:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80071d6:	60da      	str	r2, [r3, #12]
 80071d8:	e03b      	b.n	8007252 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80071e0:	e037      	b.n	8007252 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071e4:	f7fe f9f2 	bl	80055cc <HAL_RCCEx_GetPeriphCLKFreq>
 80071e8:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d030      	beq.n	8007252 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	4a14      	ldr	r2, [pc, #80]	@ (8007248 <UART_SetConfig+0x2b4>)
 80071f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	441a      	add	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d918      	bls.n	800724c <UART_SetConfig+0x2b8>
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007220:	d214      	bcs.n	800724c <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	b29a      	uxth	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60da      	str	r2, [r3, #12]
 800722c:	e011      	b.n	8007252 <UART_SetConfig+0x2be>
 800722e:	bf00      	nop
 8007230:	cfff69f3 	.word	0xcfff69f3
 8007234:	40042400 	.word	0x40042400
 8007238:	40013800 	.word	0x40013800
 800723c:	40004800 	.word	0x40004800
 8007240:	40004c00 	.word	0x40004c00
 8007244:	40005000 	.word	0x40005000
 8007248:	0800c3e0 	.word	0x0800c3e0
      }
      else
      {
        ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2201      	movs	r2, #1
 8007256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2201      	movs	r2, #1
 800725e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2200      	movs	r2, #0
 800726c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800726e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007272:	4618      	mov	r0, r3
 8007274:	3738      	adds	r7, #56	@ 0x38
 8007276:	46bd      	mov	sp, r7
 8007278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800727c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01a      	beq.n	8007392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737a:	d10a      	bne.n	8007392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  }
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b098      	sub	sp, #96	@ 0x60
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d0:	f7fc fdf6 	bl	8003fc0 <HAL_GetTick>
 80073d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d12f      	bne.n	8007444 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ec:	2200      	movs	r2, #0
 80073ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f88e 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d022      	beq.n	8007444 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800740c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800741c:	647b      	str	r3, [r7, #68]	@ 0x44
 800741e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800742a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e063      	b.n	800750c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b04      	cmp	r3, #4
 8007450:	d149      	bne.n	80074e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007452:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745a:	2200      	movs	r2, #0
 800745c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f857 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d03c      	beq.n	80074e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
 800748c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	69b9      	ldr	r1, [r7, #24]
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	617b      	str	r3, [r7, #20]
   return(result);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e012      	b.n	800750c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3758      	adds	r7, #88	@ 0x58
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007524:	e04f      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d04b      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752e:	f7fc fd47 	bl	8003fc0 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <UART_WaitOnFlagUntilTimeout+0x30>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e04e      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d037      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b80      	cmp	r3, #128	@ 0x80
 800755a:	d034      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b40      	cmp	r3, #64	@ 0x40
 8007560:	d031      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b08      	cmp	r3, #8
 800756e:	d110      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2208      	movs	r2, #8
 8007576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f838 	bl	80075ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2208      	movs	r2, #8
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e029      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a0:	d111      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f81e 	bl	80075ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e00f      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d0a0      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b095      	sub	sp, #84	@ 0x54
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800760a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007614:	643b      	str	r3, [r7, #64]	@ 0x40
 8007616:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800761a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e6      	bne.n	80075f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	61fb      	str	r3, [r7, #28]
   return(result);
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800764e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e3      	bne.n	8007628 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d118      	bne.n	800769a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	60bb      	str	r3, [r7, #8]
   return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 0310 	bic.w	r3, r3, #16
 800767c:	647b      	str	r3, [r7, #68]	@ 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	613b      	str	r3, [r7, #16]
   return(result);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e6      	bne.n	8007668 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076ae:	bf00      	nop
 80076b0:	3754      	adds	r7, #84	@ 0x54
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e027      	b.n	8007720 <HAL_UARTEx_DisableFifoMode+0x66>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	@ 0x24
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007740:	2302      	movs	r3, #2
 8007742:	e02d      	b.n	80077a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2224      	movs	r2, #36	@ 0x24
 8007750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f84f 	bl	8007824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077bc:	2302      	movs	r3, #2
 80077be:	e02d      	b.n	800781c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	@ 0x24
 80077cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f811 	bl	8007824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007844:	e031      	b.n	80078aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007846:	2308      	movs	r3, #8
 8007848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800784a:	2308      	movs	r3, #8
 800784c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	0e5b      	lsrs	r3, r3, #25
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	0f5b      	lsrs	r3, r3, #29
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	7b3a      	ldrb	r2, [r7, #12]
 8007872:	4911      	ldr	r1, [pc, #68]	@ (80078b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007874:	5c8a      	ldrb	r2, [r1, r2]
 8007876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800787a:	7b3a      	ldrb	r2, [r7, #12]
 800787c:	490f      	ldr	r1, [pc, #60]	@ (80078bc <UARTEx_SetNbDataToProcess+0x98>)
 800787e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007880:	fb93 f3f2 	sdiv	r3, r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	7b7a      	ldrb	r2, [r7, #13]
 8007890:	4909      	ldr	r1, [pc, #36]	@ (80078b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007892:	5c8a      	ldrb	r2, [r1, r2]
 8007894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007898:	7b7a      	ldrb	r2, [r7, #13]
 800789a:	4908      	ldr	r1, [pc, #32]	@ (80078bc <UARTEx_SetNbDataToProcess+0x98>)
 800789c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800789e:	fb93 f3f2 	sdiv	r3, r3, r2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	0800c3f8 	.word	0x0800c3f8
 80078bc:	0800c400 	.word	0x0800c400

080078c0 <_ZdlPvj>:
 80078c0:	f000 b800 	b.w	80078c4 <_ZdlPv>

080078c4 <_ZdlPv>:
 80078c4:	f000 b808 	b.w	80078d8 <free>

080078c8 <malloc>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	@ (80078d4 <malloc+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f000 b82d 	b.w	800792c <_malloc_r>
 80078d2:	bf00      	nop
 80078d4:	20000018 	.word	0x20000018

080078d8 <free>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <free+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f001 bf51 	b.w	8009784 <_free_r>
 80078e2:	bf00      	nop
 80078e4:	20000018 	.word	0x20000018

080078e8 <sbrk_aligned>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007928 <sbrk_aligned+0x40>)
 80078ec:	460c      	mov	r4, r1
 80078ee:	4605      	mov	r5, r0
 80078f0:	6831      	ldr	r1, [r6, #0]
 80078f2:	b911      	cbnz	r1, 80078fa <sbrk_aligned+0x12>
 80078f4:	f001 f874 	bl	80089e0 <_sbrk_r>
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f001 f86f 	bl	80089e0 <_sbrk_r>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d103      	bne.n	800790e <sbrk_aligned+0x26>
 8007906:	f04f 34ff 	mov.w	r4, #4294967295
 800790a:	4620      	mov	r0, r4
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	1cc4      	adds	r4, r0, #3
 8007910:	f024 0403 	bic.w	r4, r4, #3
 8007914:	42a0      	cmp	r0, r4
 8007916:	d0f8      	beq.n	800790a <sbrk_aligned+0x22>
 8007918:	1a21      	subs	r1, r4, r0
 800791a:	4628      	mov	r0, r5
 800791c:	f001 f860 	bl	80089e0 <_sbrk_r>
 8007920:	3001      	adds	r0, #1
 8007922:	d1f2      	bne.n	800790a <sbrk_aligned+0x22>
 8007924:	e7ef      	b.n	8007906 <sbrk_aligned+0x1e>
 8007926:	bf00      	nop
 8007928:	20000760 	.word	0x20000760

0800792c <_malloc_r>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	1ccd      	adds	r5, r1, #3
 8007932:	4606      	mov	r6, r0
 8007934:	f025 0503 	bic.w	r5, r5, #3
 8007938:	3508      	adds	r5, #8
 800793a:	2d0c      	cmp	r5, #12
 800793c:	bf38      	it	cc
 800793e:	250c      	movcc	r5, #12
 8007940:	2d00      	cmp	r5, #0
 8007942:	db01      	blt.n	8007948 <_malloc_r+0x1c>
 8007944:	42a9      	cmp	r1, r5
 8007946:	d904      	bls.n	8007952 <_malloc_r+0x26>
 8007948:	230c      	movs	r3, #12
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	2000      	movs	r0, #0
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a28 <_malloc_r+0xfc>
 8007956:	f000 f869 	bl	8007a2c <__malloc_lock>
 800795a:	f8d8 3000 	ldr.w	r3, [r8]
 800795e:	461c      	mov	r4, r3
 8007960:	bb44      	cbnz	r4, 80079b4 <_malloc_r+0x88>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffbf 	bl	80078e8 <sbrk_aligned>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	4604      	mov	r4, r0
 800796e:	d158      	bne.n	8007a22 <_malloc_r+0xf6>
 8007970:	f8d8 4000 	ldr.w	r4, [r8]
 8007974:	4627      	mov	r7, r4
 8007976:	2f00      	cmp	r7, #0
 8007978:	d143      	bne.n	8007a02 <_malloc_r+0xd6>
 800797a:	2c00      	cmp	r4, #0
 800797c:	d04b      	beq.n	8007a16 <_malloc_r+0xea>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4639      	mov	r1, r7
 8007982:	4630      	mov	r0, r6
 8007984:	eb04 0903 	add.w	r9, r4, r3
 8007988:	f001 f82a 	bl	80089e0 <_sbrk_r>
 800798c:	4581      	cmp	r9, r0
 800798e:	d142      	bne.n	8007a16 <_malloc_r+0xea>
 8007990:	6821      	ldr	r1, [r4, #0]
 8007992:	4630      	mov	r0, r6
 8007994:	1a6d      	subs	r5, r5, r1
 8007996:	4629      	mov	r1, r5
 8007998:	f7ff ffa6 	bl	80078e8 <sbrk_aligned>
 800799c:	3001      	adds	r0, #1
 800799e:	d03a      	beq.n	8007a16 <_malloc_r+0xea>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	442b      	add	r3, r5
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	f8d8 3000 	ldr.w	r3, [r8]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	bb62      	cbnz	r2, 8007a08 <_malloc_r+0xdc>
 80079ae:	f8c8 7000 	str.w	r7, [r8]
 80079b2:	e00f      	b.n	80079d4 <_malloc_r+0xa8>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	1b52      	subs	r2, r2, r5
 80079b8:	d420      	bmi.n	80079fc <_malloc_r+0xd0>
 80079ba:	2a0b      	cmp	r2, #11
 80079bc:	d917      	bls.n	80079ee <_malloc_r+0xc2>
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	bf18      	it	ne
 80079c6:	6059      	strne	r1, [r3, #4]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	bf08      	it	eq
 80079cc:	f8c8 1000 	streq.w	r1, [r8]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f82f 	bl	8007a38 <__malloc_unlock>
 80079da:	f104 000b 	add.w	r0, r4, #11
 80079de:	1d23      	adds	r3, r4, #4
 80079e0:	f020 0007 	bic.w	r0, r0, #7
 80079e4:	1ac2      	subs	r2, r0, r3
 80079e6:	bf1c      	itt	ne
 80079e8:	1a1b      	subne	r3, r3, r0
 80079ea:	50a3      	strne	r3, [r4, r2]
 80079ec:	e7af      	b.n	800794e <_malloc_r+0x22>
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	bf0c      	ite	eq
 80079f4:	f8c8 2000 	streq.w	r2, [r8]
 80079f8:	605a      	strne	r2, [r3, #4]
 80079fa:	e7eb      	b.n	80079d4 <_malloc_r+0xa8>
 80079fc:	4623      	mov	r3, r4
 80079fe:	6864      	ldr	r4, [r4, #4]
 8007a00:	e7ae      	b.n	8007960 <_malloc_r+0x34>
 8007a02:	463c      	mov	r4, r7
 8007a04:	687f      	ldr	r7, [r7, #4]
 8007a06:	e7b6      	b.n	8007976 <_malloc_r+0x4a>
 8007a08:	461a      	mov	r2, r3
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d1fb      	bne.n	8007a08 <_malloc_r+0xdc>
 8007a10:	2300      	movs	r3, #0
 8007a12:	6053      	str	r3, [r2, #4]
 8007a14:	e7de      	b.n	80079d4 <_malloc_r+0xa8>
 8007a16:	230c      	movs	r3, #12
 8007a18:	4630      	mov	r0, r6
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	f000 f80c 	bl	8007a38 <__malloc_unlock>
 8007a20:	e794      	b.n	800794c <_malloc_r+0x20>
 8007a22:	6005      	str	r5, [r0, #0]
 8007a24:	e7d6      	b.n	80079d4 <_malloc_r+0xa8>
 8007a26:	bf00      	nop
 8007a28:	20000764 	.word	0x20000764

08007a2c <__malloc_lock>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__malloc_lock+0x8>)
 8007a2e:	f001 b824 	b.w	8008a7a <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	200008a8 	.word	0x200008a8

08007a38 <__malloc_unlock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__malloc_unlock+0x8>)
 8007a3a:	f001 b81f 	b.w	8008a7c <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	200008a8 	.word	0x200008a8

08007a44 <__cvt>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	ec57 6b10 	vmov	r6, r7, d0
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	4619      	mov	r1, r3
 8007a52:	463b      	mov	r3, r7
 8007a54:	bfb4      	ite	lt
 8007a56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a5a:	2300      	movge	r3, #0
 8007a5c:	4691      	mov	r9, r2
 8007a5e:	bfbf      	itttt	lt
 8007a60:	4632      	movlt	r2, r6
 8007a62:	461f      	movlt	r7, r3
 8007a64:	232d      	movlt	r3, #45	@ 0x2d
 8007a66:	4616      	movlt	r6, r2
 8007a68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a6c:	700b      	strb	r3, [r1, #0]
 8007a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a70:	f023 0820 	bic.w	r8, r3, #32
 8007a74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a78:	d005      	beq.n	8007a86 <__cvt+0x42>
 8007a7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a7e:	d100      	bne.n	8007a82 <__cvt+0x3e>
 8007a80:	3401      	adds	r4, #1
 8007a82:	2102      	movs	r1, #2
 8007a84:	e000      	b.n	8007a88 <__cvt+0x44>
 8007a86:	2103      	movs	r1, #3
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	ab02      	add	r3, sp, #8
 8007a90:	ec47 6b10 	vmov	d0, r6, r7
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4653      	mov	r3, sl
 8007a98:	f001 f8a2 	bl	8008be0 <_dtoa_r>
 8007a9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	d119      	bne.n	8007ad8 <__cvt+0x94>
 8007aa4:	f019 0f01 	tst.w	r9, #1
 8007aa8:	d00e      	beq.n	8007ac8 <__cvt+0x84>
 8007aaa:	eb00 0904 	add.w	r9, r0, r4
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f9 f80b 	bl	8000ad0 <__aeabi_dcmpeq>
 8007aba:	b108      	cbz	r0, 8007ac0 <__cvt+0x7c>
 8007abc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ac0:	2230      	movs	r2, #48	@ 0x30
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	454b      	cmp	r3, r9
 8007ac6:	d31e      	bcc.n	8007b06 <__cvt+0xc2>
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	4628      	mov	r0, r5
 8007acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ace:	1b5b      	subs	r3, r3, r5
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	b004      	add	sp, #16
 8007ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007adc:	eb00 0904 	add.w	r9, r0, r4
 8007ae0:	d1e5      	bne.n	8007aae <__cvt+0x6a>
 8007ae2:	7803      	ldrb	r3, [r0, #0]
 8007ae4:	2b30      	cmp	r3, #48	@ 0x30
 8007ae6:	d10a      	bne.n	8007afe <__cvt+0xba>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2300      	movs	r3, #0
 8007aec:	4630      	mov	r0, r6
 8007aee:	4639      	mov	r1, r7
 8007af0:	f7f8 ffee 	bl	8000ad0 <__aeabi_dcmpeq>
 8007af4:	b918      	cbnz	r0, 8007afe <__cvt+0xba>
 8007af6:	f1c4 0401 	rsb	r4, r4, #1
 8007afa:	f8ca 4000 	str.w	r4, [sl]
 8007afe:	f8da 3000 	ldr.w	r3, [sl]
 8007b02:	4499      	add	r9, r3
 8007b04:	e7d3      	b.n	8007aae <__cvt+0x6a>
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	9103      	str	r1, [sp, #12]
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e7d9      	b.n	8007ac2 <__cvt+0x7e>

08007b0e <__exponent>:
 8007b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b10:	2900      	cmp	r1, #0
 8007b12:	7002      	strb	r2, [r0, #0]
 8007b14:	bfba      	itte	lt
 8007b16:	4249      	neglt	r1, r1
 8007b18:	232d      	movlt	r3, #45	@ 0x2d
 8007b1a:	232b      	movge	r3, #43	@ 0x2b
 8007b1c:	2909      	cmp	r1, #9
 8007b1e:	7043      	strb	r3, [r0, #1]
 8007b20:	dd28      	ble.n	8007b74 <__exponent+0x66>
 8007b22:	f10d 0307 	add.w	r3, sp, #7
 8007b26:	270a      	movs	r7, #10
 8007b28:	461d      	mov	r5, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b32:	fb07 1416 	mls	r4, r7, r6, r1
 8007b36:	3430      	adds	r4, #48	@ 0x30
 8007b38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4631      	mov	r1, r6
 8007b40:	2c63      	cmp	r4, #99	@ 0x63
 8007b42:	dcf2      	bgt.n	8007b2a <__exponent+0x1c>
 8007b44:	3130      	adds	r1, #48	@ 0x30
 8007b46:	1e94      	subs	r4, r2, #2
 8007b48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b4c:	1c41      	adds	r1, r0, #1
 8007b4e:	4623      	mov	r3, r4
 8007b50:	42ab      	cmp	r3, r5
 8007b52:	d30a      	bcc.n	8007b6a <__exponent+0x5c>
 8007b54:	f10d 0309 	add.w	r3, sp, #9
 8007b58:	1a9b      	subs	r3, r3, r2
 8007b5a:	42ac      	cmp	r4, r5
 8007b5c:	bf88      	it	hi
 8007b5e:	2300      	movhi	r3, #0
 8007b60:	3302      	adds	r3, #2
 8007b62:	4403      	add	r3, r0
 8007b64:	1a18      	subs	r0, r3, r0
 8007b66:	b003      	add	sp, #12
 8007b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b72:	e7ed      	b.n	8007b50 <__exponent+0x42>
 8007b74:	2330      	movs	r3, #48	@ 0x30
 8007b76:	3130      	adds	r1, #48	@ 0x30
 8007b78:	7083      	strb	r3, [r0, #2]
 8007b7a:	1d03      	adds	r3, r0, #4
 8007b7c:	70c1      	strb	r1, [r0, #3]
 8007b7e:	e7f1      	b.n	8007b64 <__exponent+0x56>

08007b80 <_printf_float>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	b08d      	sub	sp, #52	@ 0x34
 8007b86:	460c      	mov	r4, r1
 8007b88:	4616      	mov	r6, r2
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b90:	4605      	mov	r5, r0
 8007b92:	f000 feed 	bl	8008970 <_localeconv_r>
 8007b96:	6803      	ldr	r3, [r0, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	f7f8 fb6c 	bl	8000278 <strlen>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9005      	str	r0, [sp, #20]
 8007ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8007baa:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007bae:	3307      	adds	r3, #7
 8007bb0:	f8d4 b000 	ldr.w	fp, [r4]
 8007bb4:	f023 0307 	bic.w	r3, r3, #7
 8007bb8:	f103 0208 	add.w	r2, r3, #8
 8007bbc:	f8c8 2000 	str.w	r2, [r8]
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007bcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	4b9d      	ldr	r3, [pc, #628]	@ (8007e48 <_printf_float+0x2c8>)
 8007bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007bdc:	f7f8 ffaa 	bl	8000b34 <__aeabi_dcmpun>
 8007be0:	bb70      	cbnz	r0, 8007c40 <_printf_float+0xc0>
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	4b98      	ldr	r3, [pc, #608]	@ (8007e48 <_printf_float+0x2c8>)
 8007be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bec:	f7f8 ff84 	bl	8000af8 <__aeabi_dcmple>
 8007bf0:	bb30      	cbnz	r0, 8007c40 <_printf_float+0xc0>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f7f8 ff73 	bl	8000ae4 <__aeabi_dcmplt>
 8007bfe:	b110      	cbz	r0, 8007c06 <_printf_float+0x86>
 8007c00:	232d      	movs	r3, #45	@ 0x2d
 8007c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c06:	4a91      	ldr	r2, [pc, #580]	@ (8007e4c <_printf_float+0x2cc>)
 8007c08:	4b91      	ldr	r3, [pc, #580]	@ (8007e50 <_printf_float+0x2d0>)
 8007c0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c0e:	bf8c      	ite	hi
 8007c10:	4690      	movhi	r8, r2
 8007c12:	4698      	movls	r8, r3
 8007c14:	2303      	movs	r3, #3
 8007c16:	f04f 0900 	mov.w	r9, #0
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	f02b 0304 	bic.w	r3, fp, #4
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	4633      	mov	r3, r6
 8007c24:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	9700      	str	r7, [sp, #0]
 8007c2c:	f000 f9d2 	bl	8007fd4 <_printf_common>
 8007c30:	3001      	adds	r0, #1
 8007c32:	f040 808d 	bne.w	8007d50 <_printf_float+0x1d0>
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	b00d      	add	sp, #52	@ 0x34
 8007c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	4640      	mov	r0, r8
 8007c46:	4649      	mov	r1, r9
 8007c48:	f7f8 ff74 	bl	8000b34 <__aeabi_dcmpun>
 8007c4c:	b140      	cbz	r0, 8007c60 <_printf_float+0xe0>
 8007c4e:	464b      	mov	r3, r9
 8007c50:	4a80      	ldr	r2, [pc, #512]	@ (8007e54 <_printf_float+0x2d4>)
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bfbc      	itt	lt
 8007c56:	232d      	movlt	r3, #45	@ 0x2d
 8007c58:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8007e58 <_printf_float+0x2d8>)
 8007c5e:	e7d4      	b.n	8007c0a <_printf_float+0x8a>
 8007c60:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c64:	6863      	ldr	r3, [r4, #4]
 8007c66:	9206      	str	r2, [sp, #24]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	d13b      	bne.n	8007ce4 <_printf_float+0x164>
 8007c6c:	2306      	movs	r3, #6
 8007c6e:	6063      	str	r3, [r4, #4]
 8007c70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c74:	2300      	movs	r3, #0
 8007c76:	4628      	mov	r0, r5
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	9303      	str	r3, [sp, #12]
 8007c7c:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c7e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c82:	ab09      	add	r3, sp, #36	@ 0x24
 8007c84:	ec49 8b10 	vmov	d0, r8, r9
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c8e:	6861      	ldr	r1, [r4, #4]
 8007c90:	f7ff fed8 	bl	8007a44 <__cvt>
 8007c94:	9b06      	ldr	r3, [sp, #24]
 8007c96:	4680      	mov	r8, r0
 8007c98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c9a:	2b47      	cmp	r3, #71	@ 0x47
 8007c9c:	d129      	bne.n	8007cf2 <_printf_float+0x172>
 8007c9e:	1cc8      	adds	r0, r1, #3
 8007ca0:	db02      	blt.n	8007ca8 <_printf_float+0x128>
 8007ca2:	6863      	ldr	r3, [r4, #4]
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	dd41      	ble.n	8007d2c <_printf_float+0x1ac>
 8007ca8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007cac:	fa5f fa8a 	uxtb.w	sl, sl
 8007cb0:	3901      	subs	r1, #1
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007cb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cba:	f7ff ff28 	bl	8007b0e <__exponent>
 8007cbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	1813      	adds	r3, r2, r0
 8007cc4:	2a01      	cmp	r2, #1
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	dc02      	bgt.n	8007cd0 <_printf_float+0x150>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	07d2      	lsls	r2, r2, #31
 8007cce:	d501      	bpl.n	8007cd4 <_printf_float+0x154>
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	6123      	str	r3, [r4, #16]
 8007cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0a2      	beq.n	8007c22 <_printf_float+0xa2>
 8007cdc:	232d      	movs	r3, #45	@ 0x2d
 8007cde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ce2:	e79e      	b.n	8007c22 <_printf_float+0xa2>
 8007ce4:	9a06      	ldr	r2, [sp, #24]
 8007ce6:	2a47      	cmp	r2, #71	@ 0x47
 8007ce8:	d1c2      	bne.n	8007c70 <_printf_float+0xf0>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1c0      	bne.n	8007c70 <_printf_float+0xf0>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e7bd      	b.n	8007c6e <_printf_float+0xee>
 8007cf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cf6:	d9db      	bls.n	8007cb0 <_printf_float+0x130>
 8007cf8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007cfc:	d118      	bne.n	8007d30 <_printf_float+0x1b0>
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	dd0b      	ble.n	8007d1c <_printf_float+0x19c>
 8007d04:	6121      	str	r1, [r4, #16]
 8007d06:	b913      	cbnz	r3, 8007d0e <_printf_float+0x18e>
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	07d0      	lsls	r0, r2, #31
 8007d0c:	d502      	bpl.n	8007d14 <_printf_float+0x194>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	440b      	add	r3, r1
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	f04f 0900 	mov.w	r9, #0
 8007d18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d1a:	e7db      	b.n	8007cd4 <_printf_float+0x154>
 8007d1c:	b913      	cbnz	r3, 8007d24 <_printf_float+0x1a4>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	07d2      	lsls	r2, r2, #31
 8007d22:	d501      	bpl.n	8007d28 <_printf_float+0x1a8>
 8007d24:	3302      	adds	r3, #2
 8007d26:	e7f4      	b.n	8007d12 <_printf_float+0x192>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e7f2      	b.n	8007d12 <_printf_float+0x192>
 8007d2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d32:	4299      	cmp	r1, r3
 8007d34:	db05      	blt.n	8007d42 <_printf_float+0x1c2>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	6121      	str	r1, [r4, #16]
 8007d3a:	07d8      	lsls	r0, r3, #31
 8007d3c:	d5ea      	bpl.n	8007d14 <_printf_float+0x194>
 8007d3e:	1c4b      	adds	r3, r1, #1
 8007d40:	e7e7      	b.n	8007d12 <_printf_float+0x192>
 8007d42:	2900      	cmp	r1, #0
 8007d44:	bfd4      	ite	le
 8007d46:	f1c1 0202 	rsble	r2, r1, #2
 8007d4a:	2201      	movgt	r2, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	e7e0      	b.n	8007d12 <_printf_float+0x192>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	055a      	lsls	r2, r3, #21
 8007d54:	d407      	bmi.n	8007d66 <_printf_float+0x1e6>
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	4642      	mov	r2, r8
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	d12b      	bne.n	8007dbc <_printf_float+0x23c>
 8007d64:	e767      	b.n	8007c36 <_printf_float+0xb6>
 8007d66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d6a:	f240 80dd 	bls.w	8007f28 <_printf_float+0x3a8>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d76:	f7f8 feab 	bl	8000ad0 <__aeabi_dcmpeq>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d033      	beq.n	8007de6 <_printf_float+0x266>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4a36      	ldr	r2, [pc, #216]	@ (8007e5c <_printf_float+0x2dc>)
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f af54 	beq.w	8007c36 <_printf_float+0xb6>
 8007d8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d92:	4543      	cmp	r3, r8
 8007d94:	db02      	blt.n	8007d9c <_printf_float+0x21c>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	07d8      	lsls	r0, r3, #31
 8007d9a:	d50f      	bpl.n	8007dbc <_printf_float+0x23c>
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da4:	47b8      	blx	r7
 8007da6:	3001      	adds	r0, #1
 8007da8:	f43f af45 	beq.w	8007c36 <_printf_float+0xb6>
 8007dac:	f04f 0900 	mov.w	r9, #0
 8007db0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007db4:	f104 0a1a 	add.w	sl, r4, #26
 8007db8:	45c8      	cmp	r8, r9
 8007dba:	dc09      	bgt.n	8007dd0 <_printf_float+0x250>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	079b      	lsls	r3, r3, #30
 8007dc0:	f100 8103 	bmi.w	8007fca <_printf_float+0x44a>
 8007dc4:	68e0      	ldr	r0, [r4, #12]
 8007dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dc8:	4298      	cmp	r0, r3
 8007dca:	bfb8      	it	lt
 8007dcc:	4618      	movlt	r0, r3
 8007dce:	e734      	b.n	8007c3a <_printf_float+0xba>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	f43f af2b 	beq.w	8007c36 <_printf_float+0xb6>
 8007de0:	f109 0901 	add.w	r9, r9, #1
 8007de4:	e7e8      	b.n	8007db8 <_printf_float+0x238>
 8007de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dc39      	bgt.n	8007e60 <_printf_float+0x2e0>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4a1b      	ldr	r2, [pc, #108]	@ (8007e5c <_printf_float+0x2dc>)
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f af1d 	beq.w	8007c36 <_printf_float+0xb6>
 8007dfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e00:	ea59 0303 	orrs.w	r3, r9, r3
 8007e04:	d102      	bne.n	8007e0c <_printf_float+0x28c>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	07d9      	lsls	r1, r3, #31
 8007e0a:	d5d7      	bpl.n	8007dbc <_printf_float+0x23c>
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	f43f af0d 	beq.w	8007c36 <_printf_float+0xb6>
 8007e1c:	f04f 0a00 	mov.w	sl, #0
 8007e20:	f104 0b1a 	add.w	fp, r4, #26
 8007e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e26:	425b      	negs	r3, r3
 8007e28:	4553      	cmp	r3, sl
 8007e2a:	dc01      	bgt.n	8007e30 <_printf_float+0x2b0>
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	e793      	b.n	8007d58 <_printf_float+0x1d8>
 8007e30:	2301      	movs	r3, #1
 8007e32:	465a      	mov	r2, fp
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f aefb 	beq.w	8007c36 <_printf_float+0xb6>
 8007e40:	f10a 0a01 	add.w	sl, sl, #1
 8007e44:	e7ee      	b.n	8007e24 <_printf_float+0x2a4>
 8007e46:	bf00      	nop
 8007e48:	7fefffff 	.word	0x7fefffff
 8007e4c:	0800c40c 	.word	0x0800c40c
 8007e50:	0800c408 	.word	0x0800c408
 8007e54:	0800c414 	.word	0x0800c414
 8007e58:	0800c410 	.word	0x0800c410
 8007e5c:	0800c418 	.word	0x0800c418
 8007e60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e66:	4553      	cmp	r3, sl
 8007e68:	bfa8      	it	ge
 8007e6a:	4653      	movge	r3, sl
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	4699      	mov	r9, r3
 8007e70:	dc36      	bgt.n	8007ee0 <_printf_float+0x360>
 8007e72:	f04f 0b00 	mov.w	fp, #0
 8007e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e7a:	f104 021a 	add.w	r2, r4, #26
 8007e7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e80:	9306      	str	r3, [sp, #24]
 8007e82:	eba3 0309 	sub.w	r3, r3, r9
 8007e86:	455b      	cmp	r3, fp
 8007e88:	dc31      	bgt.n	8007eee <_printf_float+0x36e>
 8007e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8c:	459a      	cmp	sl, r3
 8007e8e:	dc3a      	bgt.n	8007f06 <_printf_float+0x386>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	07da      	lsls	r2, r3, #31
 8007e94:	d437      	bmi.n	8007f06 <_printf_float+0x386>
 8007e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e98:	ebaa 0903 	sub.w	r9, sl, r3
 8007e9c:	9b06      	ldr	r3, [sp, #24]
 8007e9e:	ebaa 0303 	sub.w	r3, sl, r3
 8007ea2:	4599      	cmp	r9, r3
 8007ea4:	bfa8      	it	ge
 8007ea6:	4699      	movge	r9, r3
 8007ea8:	f1b9 0f00 	cmp.w	r9, #0
 8007eac:	dc33      	bgt.n	8007f16 <_printf_float+0x396>
 8007eae:	f04f 0800 	mov.w	r8, #0
 8007eb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eb6:	f104 0b1a 	add.w	fp, r4, #26
 8007eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec0:	eba3 0309 	sub.w	r3, r3, r9
 8007ec4:	4543      	cmp	r3, r8
 8007ec6:	f77f af79 	ble.w	8007dbc <_printf_float+0x23c>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	465a      	mov	r2, fp
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b8      	blx	r7
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f43f aeae 	beq.w	8007c36 <_printf_float+0xb6>
 8007eda:	f108 0801 	add.w	r8, r8, #1
 8007ede:	e7ec      	b.n	8007eba <_printf_float+0x33a>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d1c2      	bne.n	8007e72 <_printf_float+0x2f2>
 8007eec:	e6a3      	b.n	8007c36 <_printf_float+0xb6>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	9206      	str	r2, [sp, #24]
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f43f ae9c 	beq.w	8007c36 <_printf_float+0xb6>
 8007efe:	f10b 0b01 	add.w	fp, fp, #1
 8007f02:	9a06      	ldr	r2, [sp, #24]
 8007f04:	e7bb      	b.n	8007e7e <_printf_float+0x2fe>
 8007f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	d1c0      	bne.n	8007e96 <_printf_float+0x316>
 8007f14:	e68f      	b.n	8007c36 <_printf_float+0xb6>
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	4442      	add	r2, r8
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	d1c3      	bne.n	8007eae <_printf_float+0x32e>
 8007f26:	e686      	b.n	8007c36 <_printf_float+0xb6>
 8007f28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f2c:	f1ba 0f01 	cmp.w	sl, #1
 8007f30:	dc01      	bgt.n	8007f36 <_printf_float+0x3b6>
 8007f32:	07db      	lsls	r3, r3, #31
 8007f34:	d536      	bpl.n	8007fa4 <_printf_float+0x424>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4642      	mov	r2, r8
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae78 	beq.w	8007c36 <_printf_float+0xb6>
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f ae70 	beq.w	8007c36 <_printf_float+0xb6>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f62:	f7f8 fdb5 	bl	8000ad0 <__aeabi_dcmpeq>
 8007f66:	b9c0      	cbnz	r0, 8007f9a <_printf_float+0x41a>
 8007f68:	4653      	mov	r3, sl
 8007f6a:	f108 0201 	add.w	r2, r8, #1
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	d10c      	bne.n	8007f92 <_printf_float+0x412>
 8007f78:	e65d      	b.n	8007c36 <_printf_float+0xb6>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	465a      	mov	r2, fp
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	f43f ae56 	beq.w	8007c36 <_printf_float+0xb6>
 8007f8a:	f108 0801 	add.w	r8, r8, #1
 8007f8e:	45d0      	cmp	r8, sl
 8007f90:	dbf3      	blt.n	8007f7a <_printf_float+0x3fa>
 8007f92:	464b      	mov	r3, r9
 8007f94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f98:	e6df      	b.n	8007d5a <_printf_float+0x1da>
 8007f9a:	f04f 0800 	mov.w	r8, #0
 8007f9e:	f104 0b1a 	add.w	fp, r4, #26
 8007fa2:	e7f4      	b.n	8007f8e <_printf_float+0x40e>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	e7e1      	b.n	8007f6e <_printf_float+0x3ee>
 8007faa:	2301      	movs	r3, #1
 8007fac:	464a      	mov	r2, r9
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f43f ae3e 	beq.w	8007c36 <_printf_float+0xb6>
 8007fba:	f108 0801 	add.w	r8, r8, #1
 8007fbe:	68e3      	ldr	r3, [r4, #12]
 8007fc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fc2:	1a5b      	subs	r3, r3, r1
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	dcf0      	bgt.n	8007faa <_printf_float+0x42a>
 8007fc8:	e6fc      	b.n	8007dc4 <_printf_float+0x244>
 8007fca:	f04f 0800 	mov.w	r8, #0
 8007fce:	f104 0919 	add.w	r9, r4, #25
 8007fd2:	e7f4      	b.n	8007fbe <_printf_float+0x43e>

08007fd4 <_printf_common>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	4616      	mov	r6, r2
 8007fda:	4698      	mov	r8, r3
 8007fdc:	688a      	ldr	r2, [r1, #8]
 8007fde:	4607      	mov	r7, r0
 8007fe0:	690b      	ldr	r3, [r1, #16]
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	bfb8      	it	lt
 8007fec:	4613      	movlt	r3, r2
 8007fee:	6033      	str	r3, [r6, #0]
 8007ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ff4:	b10a      	cbz	r2, 8007ffa <_printf_common+0x26>
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	0699      	lsls	r1, r3, #26
 8007ffe:	bf42      	ittt	mi
 8008000:	6833      	ldrmi	r3, [r6, #0]
 8008002:	3302      	addmi	r3, #2
 8008004:	6033      	strmi	r3, [r6, #0]
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	f015 0506 	ands.w	r5, r5, #6
 800800c:	d106      	bne.n	800801c <_printf_common+0x48>
 800800e:	f104 0a19 	add.w	sl, r4, #25
 8008012:	68e3      	ldr	r3, [r4, #12]
 8008014:	6832      	ldr	r2, [r6, #0]
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	42ab      	cmp	r3, r5
 800801a:	dc2b      	bgt.n	8008074 <_printf_common+0xa0>
 800801c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	3b00      	subs	r3, #0
 8008024:	bf18      	it	ne
 8008026:	2301      	movne	r3, #1
 8008028:	0692      	lsls	r2, r2, #26
 800802a:	d430      	bmi.n	800808e <_printf_common+0xba>
 800802c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008030:	4641      	mov	r1, r8
 8008032:	4638      	mov	r0, r7
 8008034:	47c8      	blx	r9
 8008036:	3001      	adds	r0, #1
 8008038:	d023      	beq.n	8008082 <_printf_common+0xae>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	341a      	adds	r4, #26
 800803e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008042:	f003 0306 	and.w	r3, r3, #6
 8008046:	2b04      	cmp	r3, #4
 8008048:	bf0a      	itet	eq
 800804a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800804e:	2500      	movne	r5, #0
 8008050:	6833      	ldreq	r3, [r6, #0]
 8008052:	f04f 0600 	mov.w	r6, #0
 8008056:	bf08      	it	eq
 8008058:	1aed      	subeq	r5, r5, r3
 800805a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800805e:	bf08      	it	eq
 8008060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008064:	4293      	cmp	r3, r2
 8008066:	bfc4      	itt	gt
 8008068:	1a9b      	subgt	r3, r3, r2
 800806a:	18ed      	addgt	r5, r5, r3
 800806c:	42b5      	cmp	r5, r6
 800806e:	d11a      	bne.n	80080a6 <_printf_common+0xd2>
 8008070:	2000      	movs	r0, #0
 8008072:	e008      	b.n	8008086 <_printf_common+0xb2>
 8008074:	2301      	movs	r3, #1
 8008076:	4652      	mov	r2, sl
 8008078:	4641      	mov	r1, r8
 800807a:	4638      	mov	r0, r7
 800807c:	47c8      	blx	r9
 800807e:	3001      	adds	r0, #1
 8008080:	d103      	bne.n	800808a <_printf_common+0xb6>
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	3501      	adds	r5, #1
 800808c:	e7c1      	b.n	8008012 <_printf_common+0x3e>
 800808e:	18e1      	adds	r1, r4, r3
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	2030      	movs	r0, #48	@ 0x30
 8008094:	3302      	adds	r3, #2
 8008096:	4422      	add	r2, r4
 8008098:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800809c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080a4:	e7c2      	b.n	800802c <_printf_common+0x58>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4622      	mov	r2, r4
 80080aa:	4641      	mov	r1, r8
 80080ac:	4638      	mov	r0, r7
 80080ae:	47c8      	blx	r9
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0e6      	beq.n	8008082 <_printf_common+0xae>
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7d9      	b.n	800806c <_printf_common+0x98>

080080b8 <_printf_i>:
 80080b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	7e0f      	ldrb	r7, [r1, #24]
 80080be:	4691      	mov	r9, r2
 80080c0:	4680      	mov	r8, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	2f78      	cmp	r7, #120	@ 0x78
 80080c6:	469a      	mov	sl, r3
 80080c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ce:	d807      	bhi.n	80080e0 <_printf_i+0x28>
 80080d0:	2f62      	cmp	r7, #98	@ 0x62
 80080d2:	d80a      	bhi.n	80080ea <_printf_i+0x32>
 80080d4:	2f00      	cmp	r7, #0
 80080d6:	f000 80d1 	beq.w	800827c <_printf_i+0x1c4>
 80080da:	2f58      	cmp	r7, #88	@ 0x58
 80080dc:	f000 80b8 	beq.w	8008250 <_printf_i+0x198>
 80080e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080e8:	e03a      	b.n	8008160 <_printf_i+0xa8>
 80080ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080ee:	2b15      	cmp	r3, #21
 80080f0:	d8f6      	bhi.n	80080e0 <_printf_i+0x28>
 80080f2:	a101      	add	r1, pc, #4	@ (adr r1, 80080f8 <_printf_i+0x40>)
 80080f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080f8:	08008151 	.word	0x08008151
 80080fc:	08008165 	.word	0x08008165
 8008100:	080080e1 	.word	0x080080e1
 8008104:	080080e1 	.word	0x080080e1
 8008108:	080080e1 	.word	0x080080e1
 800810c:	080080e1 	.word	0x080080e1
 8008110:	08008165 	.word	0x08008165
 8008114:	080080e1 	.word	0x080080e1
 8008118:	080080e1 	.word	0x080080e1
 800811c:	080080e1 	.word	0x080080e1
 8008120:	080080e1 	.word	0x080080e1
 8008124:	08008263 	.word	0x08008263
 8008128:	0800818f 	.word	0x0800818f
 800812c:	0800821d 	.word	0x0800821d
 8008130:	080080e1 	.word	0x080080e1
 8008134:	080080e1 	.word	0x080080e1
 8008138:	08008285 	.word	0x08008285
 800813c:	080080e1 	.word	0x080080e1
 8008140:	0800818f 	.word	0x0800818f
 8008144:	080080e1 	.word	0x080080e1
 8008148:	080080e1 	.word	0x080080e1
 800814c:	08008225 	.word	0x08008225
 8008150:	6833      	ldr	r3, [r6, #0]
 8008152:	1d1a      	adds	r2, r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6032      	str	r2, [r6, #0]
 8008158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800815c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008160:	2301      	movs	r3, #1
 8008162:	e09c      	b.n	800829e <_printf_i+0x1e6>
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	6820      	ldr	r0, [r4, #0]
 8008168:	1d19      	adds	r1, r3, #4
 800816a:	6031      	str	r1, [r6, #0]
 800816c:	0606      	lsls	r6, r0, #24
 800816e:	d501      	bpl.n	8008174 <_printf_i+0xbc>
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	e003      	b.n	800817c <_printf_i+0xc4>
 8008174:	0645      	lsls	r5, r0, #25
 8008176:	d5fb      	bpl.n	8008170 <_printf_i+0xb8>
 8008178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800817c:	2d00      	cmp	r5, #0
 800817e:	da03      	bge.n	8008188 <_printf_i+0xd0>
 8008180:	232d      	movs	r3, #45	@ 0x2d
 8008182:	426d      	negs	r5, r5
 8008184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008188:	4858      	ldr	r0, [pc, #352]	@ (80082ec <_printf_i+0x234>)
 800818a:	230a      	movs	r3, #10
 800818c:	e011      	b.n	80081b2 <_printf_i+0xfa>
 800818e:	6821      	ldr	r1, [r4, #0]
 8008190:	6833      	ldr	r3, [r6, #0]
 8008192:	0608      	lsls	r0, r1, #24
 8008194:	f853 5b04 	ldr.w	r5, [r3], #4
 8008198:	d402      	bmi.n	80081a0 <_printf_i+0xe8>
 800819a:	0649      	lsls	r1, r1, #25
 800819c:	bf48      	it	mi
 800819e:	b2ad      	uxthmi	r5, r5
 80081a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081a2:	6033      	str	r3, [r6, #0]
 80081a4:	4851      	ldr	r0, [pc, #324]	@ (80082ec <_printf_i+0x234>)
 80081a6:	bf14      	ite	ne
 80081a8:	230a      	movne	r3, #10
 80081aa:	2308      	moveq	r3, #8
 80081ac:	2100      	movs	r1, #0
 80081ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081b2:	6866      	ldr	r6, [r4, #4]
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	60a6      	str	r6, [r4, #8]
 80081b8:	db05      	blt.n	80081c6 <_printf_i+0x10e>
 80081ba:	6821      	ldr	r1, [r4, #0]
 80081bc:	432e      	orrs	r6, r5
 80081be:	f021 0104 	bic.w	r1, r1, #4
 80081c2:	6021      	str	r1, [r4, #0]
 80081c4:	d04b      	beq.n	800825e <_printf_i+0x1a6>
 80081c6:	4616      	mov	r6, r2
 80081c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081cc:	fb03 5711 	mls	r7, r3, r1, r5
 80081d0:	5dc7      	ldrb	r7, [r0, r7]
 80081d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081d6:	462f      	mov	r7, r5
 80081d8:	460d      	mov	r5, r1
 80081da:	42bb      	cmp	r3, r7
 80081dc:	d9f4      	bls.n	80081c8 <_printf_i+0x110>
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d10b      	bne.n	80081fa <_printf_i+0x142>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	07df      	lsls	r7, r3, #31
 80081e6:	d508      	bpl.n	80081fa <_printf_i+0x142>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	6861      	ldr	r1, [r4, #4]
 80081ec:	4299      	cmp	r1, r3
 80081ee:	bfde      	ittt	le
 80081f0:	2330      	movle	r3, #48	@ 0x30
 80081f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081fa:	1b92      	subs	r2, r2, r6
 80081fc:	6122      	str	r2, [r4, #16]
 80081fe:	464b      	mov	r3, r9
 8008200:	aa03      	add	r2, sp, #12
 8008202:	4621      	mov	r1, r4
 8008204:	4640      	mov	r0, r8
 8008206:	f8cd a000 	str.w	sl, [sp]
 800820a:	f7ff fee3 	bl	8007fd4 <_printf_common>
 800820e:	3001      	adds	r0, #1
 8008210:	d14a      	bne.n	80082a8 <_printf_i+0x1f0>
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	b004      	add	sp, #16
 8008218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	f043 0320 	orr.w	r3, r3, #32
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	2778      	movs	r7, #120	@ 0x78
 8008226:	4832      	ldr	r0, [pc, #200]	@ (80082f0 <_printf_i+0x238>)
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800822e:	061f      	lsls	r7, r3, #24
 8008230:	6831      	ldr	r1, [r6, #0]
 8008232:	f851 5b04 	ldr.w	r5, [r1], #4
 8008236:	d402      	bmi.n	800823e <_printf_i+0x186>
 8008238:	065f      	lsls	r7, r3, #25
 800823a:	bf48      	it	mi
 800823c:	b2ad      	uxthmi	r5, r5
 800823e:	6031      	str	r1, [r6, #0]
 8008240:	07d9      	lsls	r1, r3, #31
 8008242:	bf44      	itt	mi
 8008244:	f043 0320 	orrmi.w	r3, r3, #32
 8008248:	6023      	strmi	r3, [r4, #0]
 800824a:	b11d      	cbz	r5, 8008254 <_printf_i+0x19c>
 800824c:	2310      	movs	r3, #16
 800824e:	e7ad      	b.n	80081ac <_printf_i+0xf4>
 8008250:	4826      	ldr	r0, [pc, #152]	@ (80082ec <_printf_i+0x234>)
 8008252:	e7e9      	b.n	8008228 <_printf_i+0x170>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	f023 0320 	bic.w	r3, r3, #32
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	e7f6      	b.n	800824c <_printf_i+0x194>
 800825e:	4616      	mov	r6, r2
 8008260:	e7bd      	b.n	80081de <_printf_i+0x126>
 8008262:	6833      	ldr	r3, [r6, #0]
 8008264:	6825      	ldr	r5, [r4, #0]
 8008266:	1d18      	adds	r0, r3, #4
 8008268:	6961      	ldr	r1, [r4, #20]
 800826a:	6030      	str	r0, [r6, #0]
 800826c:	062e      	lsls	r6, r5, #24
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	d501      	bpl.n	8008276 <_printf_i+0x1be>
 8008272:	6019      	str	r1, [r3, #0]
 8008274:	e002      	b.n	800827c <_printf_i+0x1c4>
 8008276:	0668      	lsls	r0, r5, #25
 8008278:	d5fb      	bpl.n	8008272 <_printf_i+0x1ba>
 800827a:	8019      	strh	r1, [r3, #0]
 800827c:	2300      	movs	r3, #0
 800827e:	4616      	mov	r6, r2
 8008280:	6123      	str	r3, [r4, #16]
 8008282:	e7bc      	b.n	80081fe <_printf_i+0x146>
 8008284:	6833      	ldr	r3, [r6, #0]
 8008286:	2100      	movs	r1, #0
 8008288:	1d1a      	adds	r2, r3, #4
 800828a:	6032      	str	r2, [r6, #0]
 800828c:	681e      	ldr	r6, [r3, #0]
 800828e:	6862      	ldr	r2, [r4, #4]
 8008290:	4630      	mov	r0, r6
 8008292:	f000 fbf4 	bl	8008a7e <memchr>
 8008296:	b108      	cbz	r0, 800829c <_printf_i+0x1e4>
 8008298:	1b80      	subs	r0, r0, r6
 800829a:	6060      	str	r0, [r4, #4]
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	2300      	movs	r3, #0
 80082a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a6:	e7aa      	b.n	80081fe <_printf_i+0x146>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	4632      	mov	r2, r6
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	47d0      	blx	sl
 80082b2:	3001      	adds	r0, #1
 80082b4:	d0ad      	beq.n	8008212 <_printf_i+0x15a>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	079b      	lsls	r3, r3, #30
 80082ba:	d413      	bmi.n	80082e4 <_printf_i+0x22c>
 80082bc:	68e0      	ldr	r0, [r4, #12]
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	4298      	cmp	r0, r3
 80082c2:	bfb8      	it	lt
 80082c4:	4618      	movlt	r0, r3
 80082c6:	e7a6      	b.n	8008216 <_printf_i+0x15e>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4632      	mov	r2, r6
 80082cc:	4649      	mov	r1, r9
 80082ce:	4640      	mov	r0, r8
 80082d0:	47d0      	blx	sl
 80082d2:	3001      	adds	r0, #1
 80082d4:	d09d      	beq.n	8008212 <_printf_i+0x15a>
 80082d6:	3501      	adds	r5, #1
 80082d8:	68e3      	ldr	r3, [r4, #12]
 80082da:	9903      	ldr	r1, [sp, #12]
 80082dc:	1a5b      	subs	r3, r3, r1
 80082de:	42ab      	cmp	r3, r5
 80082e0:	dcf2      	bgt.n	80082c8 <_printf_i+0x210>
 80082e2:	e7eb      	b.n	80082bc <_printf_i+0x204>
 80082e4:	2500      	movs	r5, #0
 80082e6:	f104 0619 	add.w	r6, r4, #25
 80082ea:	e7f5      	b.n	80082d8 <_printf_i+0x220>
 80082ec:	0800c41a 	.word	0x0800c41a
 80082f0:	0800c42b 	.word	0x0800c42b

080082f4 <_scanf_float>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	b087      	sub	sp, #28
 80082fa:	4691      	mov	r9, r2
 80082fc:	4680      	mov	r8, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	688b      	ldr	r3, [r1, #8]
 8008304:	1e5a      	subs	r2, r3, #1
 8008306:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800830a:	460a      	mov	r2, r1
 800830c:	bf89      	itett	hi
 800830e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008312:	f04f 0b00 	movls.w	fp, #0
 8008316:	eb03 0b05 	addhi.w	fp, r3, r5
 800831a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800831e:	f04f 0500 	mov.w	r5, #0
 8008322:	bf88      	it	hi
 8008324:	608b      	strhi	r3, [r1, #8]
 8008326:	680b      	ldr	r3, [r1, #0]
 8008328:	46aa      	mov	sl, r5
 800832a:	462f      	mov	r7, r5
 800832c:	9502      	str	r5, [sp, #8]
 800832e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008332:	f842 3b1c 	str.w	r3, [r2], #28
 8008336:	4616      	mov	r6, r2
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800833e:	68a2      	ldr	r2, [r4, #8]
 8008340:	b15a      	cbz	r2, 800835a <_scanf_float+0x66>
 8008342:	f8d9 3000 	ldr.w	r3, [r9]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b4e      	cmp	r3, #78	@ 0x4e
 800834a:	d863      	bhi.n	8008414 <_scanf_float+0x120>
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	d83b      	bhi.n	80083c8 <_scanf_float+0xd4>
 8008350:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008354:	b2c8      	uxtb	r0, r1
 8008356:	280e      	cmp	r0, #14
 8008358:	d939      	bls.n	80083ce <_scanf_float+0xda>
 800835a:	b11f      	cbz	r7, 8008364 <_scanf_float+0x70>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008368:	f1ba 0f01 	cmp.w	sl, #1
 800836c:	f200 8115 	bhi.w	800859a <_scanf_float+0x2a6>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	429e      	cmp	r6, r3
 8008374:	f200 8106 	bhi.w	8008584 <_scanf_float+0x290>
 8008378:	2001      	movs	r0, #1
 800837a:	b007      	add	sp, #28
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008384:	2a0d      	cmp	r2, #13
 8008386:	d8e8      	bhi.n	800835a <_scanf_float+0x66>
 8008388:	a101      	add	r1, pc, #4	@ (adr r1, 8008390 <_scanf_float+0x9c>)
 800838a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800838e:	bf00      	nop
 8008390:	080084d9 	.word	0x080084d9
 8008394:	0800835b 	.word	0x0800835b
 8008398:	0800835b 	.word	0x0800835b
 800839c:	0800835b 	.word	0x0800835b
 80083a0:	08008535 	.word	0x08008535
 80083a4:	0800850f 	.word	0x0800850f
 80083a8:	0800835b 	.word	0x0800835b
 80083ac:	0800835b 	.word	0x0800835b
 80083b0:	080084e7 	.word	0x080084e7
 80083b4:	0800835b 	.word	0x0800835b
 80083b8:	0800835b 	.word	0x0800835b
 80083bc:	0800835b 	.word	0x0800835b
 80083c0:	0800835b 	.word	0x0800835b
 80083c4:	080084a3 	.word	0x080084a3
 80083c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80083cc:	e7da      	b.n	8008384 <_scanf_float+0x90>
 80083ce:	290e      	cmp	r1, #14
 80083d0:	d8c3      	bhi.n	800835a <_scanf_float+0x66>
 80083d2:	a001      	add	r0, pc, #4	@ (adr r0, 80083d8 <_scanf_float+0xe4>)
 80083d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083d8:	08008493 	.word	0x08008493
 80083dc:	0800835b 	.word	0x0800835b
 80083e0:	08008493 	.word	0x08008493
 80083e4:	08008523 	.word	0x08008523
 80083e8:	0800835b 	.word	0x0800835b
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008479 	.word	0x08008479
 80083f4:	08008479 	.word	0x08008479
 80083f8:	08008479 	.word	0x08008479
 80083fc:	08008479 	.word	0x08008479
 8008400:	08008479 	.word	0x08008479
 8008404:	08008479 	.word	0x08008479
 8008408:	08008479 	.word	0x08008479
 800840c:	08008479 	.word	0x08008479
 8008410:	08008479 	.word	0x08008479
 8008414:	2b6e      	cmp	r3, #110	@ 0x6e
 8008416:	d809      	bhi.n	800842c <_scanf_float+0x138>
 8008418:	2b60      	cmp	r3, #96	@ 0x60
 800841a:	d8b1      	bhi.n	8008380 <_scanf_float+0x8c>
 800841c:	2b54      	cmp	r3, #84	@ 0x54
 800841e:	d07b      	beq.n	8008518 <_scanf_float+0x224>
 8008420:	2b59      	cmp	r3, #89	@ 0x59
 8008422:	d19a      	bne.n	800835a <_scanf_float+0x66>
 8008424:	2d07      	cmp	r5, #7
 8008426:	d198      	bne.n	800835a <_scanf_float+0x66>
 8008428:	2508      	movs	r5, #8
 800842a:	e02f      	b.n	800848c <_scanf_float+0x198>
 800842c:	2b74      	cmp	r3, #116	@ 0x74
 800842e:	d073      	beq.n	8008518 <_scanf_float+0x224>
 8008430:	2b79      	cmp	r3, #121	@ 0x79
 8008432:	e7f6      	b.n	8008422 <_scanf_float+0x12e>
 8008434:	6821      	ldr	r1, [r4, #0]
 8008436:	05c8      	lsls	r0, r1, #23
 8008438:	d51e      	bpl.n	8008478 <_scanf_float+0x184>
 800843a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800843e:	3701      	adds	r7, #1
 8008440:	6021      	str	r1, [r4, #0]
 8008442:	f1bb 0f00 	cmp.w	fp, #0
 8008446:	d003      	beq.n	8008450 <_scanf_float+0x15c>
 8008448:	3201      	adds	r2, #1
 800844a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800844e:	60a2      	str	r2, [r4, #8]
 8008450:	68a3      	ldr	r3, [r4, #8]
 8008452:	3b01      	subs	r3, #1
 8008454:	60a3      	str	r3, [r4, #8]
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008460:	3b01      	subs	r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	f8c9 3004 	str.w	r3, [r9, #4]
 8008468:	f340 8083 	ble.w	8008572 <_scanf_float+0x27e>
 800846c:	f8d9 3000 	ldr.w	r3, [r9]
 8008470:	3301      	adds	r3, #1
 8008472:	f8c9 3000 	str.w	r3, [r9]
 8008476:	e762      	b.n	800833e <_scanf_float+0x4a>
 8008478:	eb1a 0105 	adds.w	r1, sl, r5
 800847c:	f47f af6d 	bne.w	800835a <_scanf_float+0x66>
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	460d      	mov	r5, r1
 8008484:	468a      	mov	sl, r1
 8008486:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800848a:	6022      	str	r2, [r4, #0]
 800848c:	f806 3b01 	strb.w	r3, [r6], #1
 8008490:	e7de      	b.n	8008450 <_scanf_float+0x15c>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	0610      	lsls	r0, r2, #24
 8008496:	f57f af60 	bpl.w	800835a <_scanf_float+0x66>
 800849a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800849e:	6022      	str	r2, [r4, #0]
 80084a0:	e7f4      	b.n	800848c <_scanf_float+0x198>
 80084a2:	f1ba 0f00 	cmp.w	sl, #0
 80084a6:	d10c      	bne.n	80084c2 <_scanf_float+0x1ce>
 80084a8:	b977      	cbnz	r7, 80084c8 <_scanf_float+0x1d4>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084b4:	d108      	bne.n	80084c8 <_scanf_float+0x1d4>
 80084b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084ba:	f04f 0a01 	mov.w	sl, #1
 80084be:	6022      	str	r2, [r4, #0]
 80084c0:	e7e4      	b.n	800848c <_scanf_float+0x198>
 80084c2:	f1ba 0f02 	cmp.w	sl, #2
 80084c6:	d051      	beq.n	800856c <_scanf_float+0x278>
 80084c8:	2d01      	cmp	r5, #1
 80084ca:	d002      	beq.n	80084d2 <_scanf_float+0x1de>
 80084cc:	2d04      	cmp	r5, #4
 80084ce:	f47f af44 	bne.w	800835a <_scanf_float+0x66>
 80084d2:	3501      	adds	r5, #1
 80084d4:	b2ed      	uxtb	r5, r5
 80084d6:	e7d9      	b.n	800848c <_scanf_float+0x198>
 80084d8:	f1ba 0f01 	cmp.w	sl, #1
 80084dc:	f47f af3d 	bne.w	800835a <_scanf_float+0x66>
 80084e0:	f04f 0a02 	mov.w	sl, #2
 80084e4:	e7d2      	b.n	800848c <_scanf_float+0x198>
 80084e6:	b975      	cbnz	r5, 8008506 <_scanf_float+0x212>
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	f47f af37 	bne.w	800835c <_scanf_float+0x68>
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084f8:	f040 8103 	bne.w	8008702 <_scanf_float+0x40e>
 80084fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008500:	2501      	movs	r5, #1
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	e7c2      	b.n	800848c <_scanf_float+0x198>
 8008506:	2d03      	cmp	r5, #3
 8008508:	d0e3      	beq.n	80084d2 <_scanf_float+0x1de>
 800850a:	2d05      	cmp	r5, #5
 800850c:	e7df      	b.n	80084ce <_scanf_float+0x1da>
 800850e:	2d02      	cmp	r5, #2
 8008510:	f47f af23 	bne.w	800835a <_scanf_float+0x66>
 8008514:	2503      	movs	r5, #3
 8008516:	e7b9      	b.n	800848c <_scanf_float+0x198>
 8008518:	2d06      	cmp	r5, #6
 800851a:	f47f af1e 	bne.w	800835a <_scanf_float+0x66>
 800851e:	2507      	movs	r5, #7
 8008520:	e7b4      	b.n	800848c <_scanf_float+0x198>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	0591      	lsls	r1, r2, #22
 8008526:	f57f af18 	bpl.w	800835a <_scanf_float+0x66>
 800852a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800852e:	9702      	str	r7, [sp, #8]
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	e7ab      	b.n	800848c <_scanf_float+0x198>
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800853a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800853e:	d005      	beq.n	800854c <_scanf_float+0x258>
 8008540:	0550      	lsls	r0, r2, #21
 8008542:	f57f af0a 	bpl.w	800835a <_scanf_float+0x66>
 8008546:	2f00      	cmp	r7, #0
 8008548:	f000 80db 	beq.w	8008702 <_scanf_float+0x40e>
 800854c:	0591      	lsls	r1, r2, #22
 800854e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008552:	bf58      	it	pl
 8008554:	9902      	ldrpl	r1, [sp, #8]
 8008556:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800855a:	bf58      	it	pl
 800855c:	1a79      	subpl	r1, r7, r1
 800855e:	6022      	str	r2, [r4, #0]
 8008560:	f04f 0700 	mov.w	r7, #0
 8008564:	bf58      	it	pl
 8008566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800856a:	e78f      	b.n	800848c <_scanf_float+0x198>
 800856c:	f04f 0a03 	mov.w	sl, #3
 8008570:	e78c      	b.n	800848c <_scanf_float+0x198>
 8008572:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008576:	4649      	mov	r1, r9
 8008578:	4640      	mov	r0, r8
 800857a:	4798      	blx	r3
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f aede 	beq.w	800833e <_scanf_float+0x4a>
 8008582:	e6ea      	b.n	800835a <_scanf_float+0x66>
 8008584:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008588:	464a      	mov	r2, r9
 800858a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800858e:	4640      	mov	r0, r8
 8008590:	4798      	blx	r3
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	3b01      	subs	r3, #1
 8008596:	6123      	str	r3, [r4, #16]
 8008598:	e6ea      	b.n	8008370 <_scanf_float+0x7c>
 800859a:	1e6b      	subs	r3, r5, #1
 800859c:	2b06      	cmp	r3, #6
 800859e:	d824      	bhi.n	80085ea <_scanf_float+0x2f6>
 80085a0:	2d02      	cmp	r5, #2
 80085a2:	d836      	bhi.n	8008612 <_scanf_float+0x31e>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	429e      	cmp	r6, r3
 80085a8:	f67f aee6 	bls.w	8008378 <_scanf_float+0x84>
 80085ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085b0:	464a      	mov	r2, r9
 80085b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085b6:	4640      	mov	r0, r8
 80085b8:	4798      	blx	r3
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	3b01      	subs	r3, #1
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	e7f0      	b.n	80085a4 <_scanf_float+0x2b0>
 80085c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085c6:	464a      	mov	r2, r9
 80085c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80085cc:	4640      	mov	r0, r8
 80085ce:	4798      	blx	r3
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085da:	fa5f fa8a 	uxtb.w	sl, sl
 80085de:	f1ba 0f02 	cmp.w	sl, #2
 80085e2:	d1ee      	bne.n	80085c2 <_scanf_float+0x2ce>
 80085e4:	3d03      	subs	r5, #3
 80085e6:	b2ed      	uxtb	r5, r5
 80085e8:	1b76      	subs	r6, r6, r5
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	05da      	lsls	r2, r3, #23
 80085ee:	d52f      	bpl.n	8008650 <_scanf_float+0x35c>
 80085f0:	055b      	lsls	r3, r3, #21
 80085f2:	d511      	bpl.n	8008618 <_scanf_float+0x324>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	429e      	cmp	r6, r3
 80085f8:	f67f aebe 	bls.w	8008378 <_scanf_float+0x84>
 80085fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008600:	464a      	mov	r2, r9
 8008602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008606:	4640      	mov	r0, r8
 8008608:	4798      	blx	r3
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	3b01      	subs	r3, #1
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	e7f0      	b.n	80085f4 <_scanf_float+0x300>
 8008612:	46aa      	mov	sl, r5
 8008614:	46b3      	mov	fp, r6
 8008616:	e7de      	b.n	80085d6 <_scanf_float+0x2e2>
 8008618:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800861c:	1e75      	subs	r5, r6, #1
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	2965      	cmp	r1, #101	@ 0x65
 8008622:	f103 33ff 	add.w	r3, r3, #4294967295
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	d00c      	beq.n	8008644 <_scanf_float+0x350>
 800862a:	2945      	cmp	r1, #69	@ 0x45
 800862c:	d00a      	beq.n	8008644 <_scanf_float+0x350>
 800862e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008632:	464a      	mov	r2, r9
 8008634:	4640      	mov	r0, r8
 8008636:	1eb5      	subs	r5, r6, #2
 8008638:	4798      	blx	r3
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008640:	3b01      	subs	r3, #1
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	462e      	mov	r6, r5
 8008646:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800864a:	464a      	mov	r2, r9
 800864c:	4640      	mov	r0, r8
 800864e:	4798      	blx	r3
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	f012 0210 	ands.w	r2, r2, #16
 8008656:	d001      	beq.n	800865c <_scanf_float+0x368>
 8008658:	2000      	movs	r0, #0
 800865a:	e68e      	b.n	800837a <_scanf_float+0x86>
 800865c:	7032      	strb	r2, [r6, #0]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008668:	d125      	bne.n	80086b6 <_scanf_float+0x3c2>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	429f      	cmp	r7, r3
 800866e:	d00a      	beq.n	8008686 <_scanf_float+0x392>
 8008670:	1bda      	subs	r2, r3, r7
 8008672:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008676:	4924      	ldr	r1, [pc, #144]	@ (8008708 <_scanf_float+0x414>)
 8008678:	429e      	cmp	r6, r3
 800867a:	bf28      	it	cs
 800867c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f907 	bl	8008894 <siprintf>
 8008686:	2200      	movs	r2, #0
 8008688:	9901      	ldr	r1, [sp, #4]
 800868a:	4640      	mov	r0, r8
 800868c:	f002 fb7c 	bl	800ad88 <_strtod_r>
 8008690:	6821      	ldr	r1, [r4, #0]
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	f011 0f02 	tst.w	r1, #2
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	ec57 6b10 	vmov	r6, r7, d0
 800869e:	f103 0204 	add.w	r2, r3, #4
 80086a2:	d015      	beq.n	80086d0 <_scanf_float+0x3dc>
 80086a4:	9903      	ldr	r1, [sp, #12]
 80086a6:	600a      	str	r2, [r1, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	e9c3 6700 	strd	r6, r7, [r3]
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60e3      	str	r3, [r4, #12]
 80086b4:	e7d0      	b.n	8008658 <_scanf_float+0x364>
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0e4      	beq.n	8008686 <_scanf_float+0x392>
 80086bc:	9905      	ldr	r1, [sp, #20]
 80086be:	230a      	movs	r3, #10
 80086c0:	4640      	mov	r0, r8
 80086c2:	3101      	adds	r1, #1
 80086c4:	f002 fbe0 	bl	800ae88 <_strtol_r>
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	9e05      	ldr	r6, [sp, #20]
 80086cc:	1ac2      	subs	r2, r0, r3
 80086ce:	e7d0      	b.n	8008672 <_scanf_float+0x37e>
 80086d0:	f011 0f04 	tst.w	r1, #4
 80086d4:	9903      	ldr	r1, [sp, #12]
 80086d6:	600a      	str	r2, [r1, #0]
 80086d8:	d1e6      	bne.n	80086a8 <_scanf_float+0x3b4>
 80086da:	681d      	ldr	r5, [r3, #0]
 80086dc:	4632      	mov	r2, r6
 80086de:	463b      	mov	r3, r7
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f8 fa26 	bl	8000b34 <__aeabi_dcmpun>
 80086e8:	b128      	cbz	r0, 80086f6 <_scanf_float+0x402>
 80086ea:	4808      	ldr	r0, [pc, #32]	@ (800870c <_scanf_float+0x418>)
 80086ec:	f000 f9e2 	bl	8008ab4 <nanf>
 80086f0:	ed85 0a00 	vstr	s0, [r5]
 80086f4:	e7db      	b.n	80086ae <_scanf_float+0x3ba>
 80086f6:	4630      	mov	r0, r6
 80086f8:	4639      	mov	r1, r7
 80086fa:	f7f8 fa79 	bl	8000bf0 <__aeabi_d2f>
 80086fe:	6028      	str	r0, [r5, #0]
 8008700:	e7d5      	b.n	80086ae <_scanf_float+0x3ba>
 8008702:	2700      	movs	r7, #0
 8008704:	e62e      	b.n	8008364 <_scanf_float+0x70>
 8008706:	bf00      	nop
 8008708:	0800c43c 	.word	0x0800c43c
 800870c:	0800c57d 	.word	0x0800c57d

08008710 <std>:
 8008710:	2300      	movs	r3, #0
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
 8008716:	6083      	str	r3, [r0, #8]
 8008718:	8181      	strh	r1, [r0, #12]
 800871a:	4619      	mov	r1, r3
 800871c:	6643      	str	r3, [r0, #100]	@ 0x64
 800871e:	81c2      	strh	r2, [r0, #14]
 8008720:	2208      	movs	r2, #8
 8008722:	6183      	str	r3, [r0, #24]
 8008724:	e9c0 3300 	strd	r3, r3, [r0]
 8008728:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872c:	305c      	adds	r0, #92	@ 0x5c
 800872e:	f000 f916 	bl	800895e <memset>
 8008732:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <std+0x58>)
 8008734:	6224      	str	r4, [r4, #32]
 8008736:	6263      	str	r3, [r4, #36]	@ 0x24
 8008738:	4b0c      	ldr	r3, [pc, #48]	@ (800876c <std+0x5c>)
 800873a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800873c:	4b0c      	ldr	r3, [pc, #48]	@ (8008770 <std+0x60>)
 800873e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008740:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <std+0x64>)
 8008742:	6323      	str	r3, [r4, #48]	@ 0x30
 8008744:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <std+0x68>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d006      	beq.n	8008758 <std+0x48>
 800874a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800874e:	4294      	cmp	r4, r2
 8008750:	d002      	beq.n	8008758 <std+0x48>
 8008752:	33d0      	adds	r3, #208	@ 0xd0
 8008754:	429c      	cmp	r4, r3
 8008756:	d105      	bne.n	8008764 <std+0x54>
 8008758:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f000 b98a 	b.w	8008a78 <__retarget_lock_init_recursive>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	080088d9 	.word	0x080088d9
 800876c:	080088fb 	.word	0x080088fb
 8008770:	08008933 	.word	0x08008933
 8008774:	08008957 	.word	0x08008957
 8008778:	20000768 	.word	0x20000768

0800877c <stdio_exit_handler>:
 800877c:	4a02      	ldr	r2, [pc, #8]	@ (8008788 <stdio_exit_handler+0xc>)
 800877e:	4903      	ldr	r1, [pc, #12]	@ (800878c <stdio_exit_handler+0x10>)
 8008780:	4803      	ldr	r0, [pc, #12]	@ (8008790 <stdio_exit_handler+0x14>)
 8008782:	f000 b869 	b.w	8008858 <_fwalk_sglue>
 8008786:	bf00      	nop
 8008788:	2000000c 	.word	0x2000000c
 800878c:	0800b245 	.word	0x0800b245
 8008790:	2000001c 	.word	0x2000001c

08008794 <cleanup_stdio>:
 8008794:	6841      	ldr	r1, [r0, #4]
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <cleanup_stdio+0x34>)
 8008798:	4299      	cmp	r1, r3
 800879a:	b510      	push	{r4, lr}
 800879c:	4604      	mov	r4, r0
 800879e:	d001      	beq.n	80087a4 <cleanup_stdio+0x10>
 80087a0:	f002 fd50 	bl	800b244 <_fflush_r>
 80087a4:	68a1      	ldr	r1, [r4, #8]
 80087a6:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <cleanup_stdio+0x38>)
 80087a8:	4299      	cmp	r1, r3
 80087aa:	d002      	beq.n	80087b2 <cleanup_stdio+0x1e>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f002 fd49 	bl	800b244 <_fflush_r>
 80087b2:	68e1      	ldr	r1, [r4, #12]
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <cleanup_stdio+0x3c>)
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d004      	beq.n	80087c4 <cleanup_stdio+0x30>
 80087ba:	4620      	mov	r0, r4
 80087bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c0:	f002 bd40 	b.w	800b244 <_fflush_r>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	bf00      	nop
 80087c8:	20000768 	.word	0x20000768
 80087cc:	200007d0 	.word	0x200007d0
 80087d0:	20000838 	.word	0x20000838

080087d4 <global_stdio_init.part.0>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <global_stdio_init.part.0+0x30>)
 80087d8:	2104      	movs	r1, #4
 80087da:	4c0b      	ldr	r4, [pc, #44]	@ (8008808 <global_stdio_init.part.0+0x34>)
 80087dc:	4a0b      	ldr	r2, [pc, #44]	@ (800880c <global_stdio_init.part.0+0x38>)
 80087de:	4620      	mov	r0, r4
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f7ff ff94 	bl	8008710 <std>
 80087e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087ec:	2201      	movs	r2, #1
 80087ee:	2109      	movs	r1, #9
 80087f0:	f7ff ff8e 	bl	8008710 <std>
 80087f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087f8:	2202      	movs	r2, #2
 80087fa:	2112      	movs	r1, #18
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	f7ff bf86 	b.w	8008710 <std>
 8008804:	200008a0 	.word	0x200008a0
 8008808:	20000768 	.word	0x20000768
 800880c:	0800877d 	.word	0x0800877d

08008810 <__sfp_lock_acquire>:
 8008810:	4801      	ldr	r0, [pc, #4]	@ (8008818 <__sfp_lock_acquire+0x8>)
 8008812:	f000 b932 	b.w	8008a7a <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	200008a9 	.word	0x200008a9

0800881c <__sfp_lock_release>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__sfp_lock_release+0x8>)
 800881e:	f000 b92d 	b.w	8008a7c <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	200008a9 	.word	0x200008a9

08008828 <__sinit>:
 8008828:	b510      	push	{r4, lr}
 800882a:	4604      	mov	r4, r0
 800882c:	f7ff fff0 	bl	8008810 <__sfp_lock_acquire>
 8008830:	6a23      	ldr	r3, [r4, #32]
 8008832:	b11b      	cbz	r3, 800883c <__sinit+0x14>
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008838:	f7ff bff0 	b.w	800881c <__sfp_lock_release>
 800883c:	4b04      	ldr	r3, [pc, #16]	@ (8008850 <__sinit+0x28>)
 800883e:	6223      	str	r3, [r4, #32]
 8008840:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <__sinit+0x2c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f5      	bne.n	8008834 <__sinit+0xc>
 8008848:	f7ff ffc4 	bl	80087d4 <global_stdio_init.part.0>
 800884c:	e7f2      	b.n	8008834 <__sinit+0xc>
 800884e:	bf00      	nop
 8008850:	08008795 	.word	0x08008795
 8008854:	200008a0 	.word	0x200008a0

08008858 <_fwalk_sglue>:
 8008858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800885c:	4607      	mov	r7, r0
 800885e:	4688      	mov	r8, r1
 8008860:	4614      	mov	r4, r2
 8008862:	2600      	movs	r6, #0
 8008864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008868:	f1b9 0901 	subs.w	r9, r9, #1
 800886c:	d505      	bpl.n	800887a <_fwalk_sglue+0x22>
 800886e:	6824      	ldr	r4, [r4, #0]
 8008870:	2c00      	cmp	r4, #0
 8008872:	d1f7      	bne.n	8008864 <_fwalk_sglue+0xc>
 8008874:	4630      	mov	r0, r6
 8008876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d907      	bls.n	8008890 <_fwalk_sglue+0x38>
 8008880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008884:	3301      	adds	r3, #1
 8008886:	d003      	beq.n	8008890 <_fwalk_sglue+0x38>
 8008888:	4629      	mov	r1, r5
 800888a:	4638      	mov	r0, r7
 800888c:	47c0      	blx	r8
 800888e:	4306      	orrs	r6, r0
 8008890:	3568      	adds	r5, #104	@ 0x68
 8008892:	e7e9      	b.n	8008868 <_fwalk_sglue+0x10>

08008894 <siprintf>:
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b510      	push	{r4, lr}
 8008898:	b09d      	sub	sp, #116	@ 0x74
 800889a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800889e:	2400      	movs	r4, #0
 80088a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80088a2:	9002      	str	r0, [sp, #8]
 80088a4:	9006      	str	r0, [sp, #24]
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	9104      	str	r1, [sp, #16]
 80088aa:	4809      	ldr	r0, [pc, #36]	@ (80088d0 <siprintf+0x3c>)
 80088ac:	4909      	ldr	r1, [pc, #36]	@ (80088d4 <siprintf+0x40>)
 80088ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b2:	9105      	str	r1, [sp, #20]
 80088b4:	a902      	add	r1, sp, #8
 80088b6:	6800      	ldr	r0, [r0, #0]
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80088bc:	f002 fb42 	bl	800af44 <_svfiprintf_r>
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	701c      	strb	r4, [r3, #0]
 80088c4:	b01d      	add	sp, #116	@ 0x74
 80088c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ca:	b003      	add	sp, #12
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000018 	.word	0x20000018
 80088d4:	ffff0208 	.word	0xffff0208

080088d8 <__sread>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	460c      	mov	r4, r1
 80088dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e0:	f000 f86c 	bl	80089bc <_read_r>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	bfab      	itete	ge
 80088e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088ea:	89a3      	ldrhlt	r3, [r4, #12]
 80088ec:	181b      	addge	r3, r3, r0
 80088ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088f2:	bfac      	ite	ge
 80088f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088f6:	81a3      	strhlt	r3, [r4, #12]
 80088f8:	bd10      	pop	{r4, pc}

080088fa <__swrite>:
 80088fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	461f      	mov	r7, r3
 8008900:	898b      	ldrh	r3, [r1, #12]
 8008902:	4605      	mov	r5, r0
 8008904:	460c      	mov	r4, r1
 8008906:	05db      	lsls	r3, r3, #23
 8008908:	4616      	mov	r6, r2
 800890a:	d505      	bpl.n	8008918 <__swrite+0x1e>
 800890c:	2302      	movs	r3, #2
 800890e:	2200      	movs	r2, #0
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	f000 f840 	bl	8008998 <_lseek_r>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	4632      	mov	r2, r6
 800891c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008920:	4628      	mov	r0, r5
 8008922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	463b      	mov	r3, r7
 800892a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800892e:	f000 b867 	b.w	8008a00 <_write_r>

08008932 <__sseek>:
 8008932:	b510      	push	{r4, lr}
 8008934:	460c      	mov	r4, r1
 8008936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893a:	f000 f82d 	bl	8008998 <_lseek_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	bf15      	itete	ne
 8008944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800894a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800894e:	81a3      	strheq	r3, [r4, #12]
 8008950:	bf18      	it	ne
 8008952:	81a3      	strhne	r3, [r4, #12]
 8008954:	bd10      	pop	{r4, pc}

08008956 <__sclose>:
 8008956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895a:	f000 b80d 	b.w	8008978 <_close_r>

0800895e <memset>:
 800895e:	4402      	add	r2, r0
 8008960:	4603      	mov	r3, r0
 8008962:	4293      	cmp	r3, r2
 8008964:	d100      	bne.n	8008968 <memset+0xa>
 8008966:	4770      	bx	lr
 8008968:	f803 1b01 	strb.w	r1, [r3], #1
 800896c:	e7f9      	b.n	8008962 <memset+0x4>
	...

08008970 <_localeconv_r>:
 8008970:	4800      	ldr	r0, [pc, #0]	@ (8008974 <_localeconv_r+0x4>)
 8008972:	4770      	bx	lr
 8008974:	20000158 	.word	0x20000158

08008978 <_close_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	2300      	movs	r3, #0
 800897c:	4d05      	ldr	r5, [pc, #20]	@ (8008994 <_close_r+0x1c>)
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7fb f95b 	bl	8003c3e <_close>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_close_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_close_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200008a4 	.word	0x200008a4

08008998 <_lseek_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	4d06      	ldr	r5, [pc, #24]	@ (80089b8 <_lseek_r+0x20>)
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7fb f970 	bl	8003c8c <_lseek>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_lseek_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_lseek_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200008a4 	.word	0x200008a4

080089bc <_read_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	4d06      	ldr	r5, [pc, #24]	@ (80089dc <_read_r+0x20>)
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7fb f8fe 	bl	8003bcc <_read>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_read_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_read_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200008a4 	.word	0x200008a4

080089e0 <_sbrk_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	2300      	movs	r3, #0
 80089e4:	4d05      	ldr	r5, [pc, #20]	@ (80089fc <_sbrk_r+0x1c>)
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7fb f95c 	bl	8003ca8 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_sbrk_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_sbrk_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	200008a4 	.word	0x200008a4

08008a00 <_write_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4604      	mov	r4, r0
 8008a04:	4d06      	ldr	r5, [pc, #24]	@ (8008a20 <_write_r+0x20>)
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	602a      	str	r2, [r5, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f7fb f8f9 	bl	8003c06 <_write>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_write_r+0x1e>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_write_r+0x1e>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	200008a4 	.word	0x200008a4

08008a24 <__errno>:
 8008a24:	4b01      	ldr	r3, [pc, #4]	@ (8008a2c <__errno+0x8>)
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000018 	.word	0x20000018

08008a30 <__libc_init_array>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	4d0d      	ldr	r5, [pc, #52]	@ (8008a68 <__libc_init_array+0x38>)
 8008a34:	2600      	movs	r6, #0
 8008a36:	4c0d      	ldr	r4, [pc, #52]	@ (8008a6c <__libc_init_array+0x3c>)
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	d109      	bne.n	8008a54 <__libc_init_array+0x24>
 8008a40:	4d0b      	ldr	r5, [pc, #44]	@ (8008a70 <__libc_init_array+0x40>)
 8008a42:	2600      	movs	r6, #0
 8008a44:	4c0b      	ldr	r4, [pc, #44]	@ (8008a74 <__libc_init_array+0x44>)
 8008a46:	f003 facd 	bl	800bfe4 <_init>
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	42a6      	cmp	r6, r4
 8008a50:	d105      	bne.n	8008a5e <__libc_init_array+0x2e>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a58:	3601      	adds	r6, #1
 8008a5a:	4798      	blx	r3
 8008a5c:	e7ee      	b.n	8008a3c <__libc_init_array+0xc>
 8008a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a62:	3601      	adds	r6, #1
 8008a64:	4798      	blx	r3
 8008a66:	e7f2      	b.n	8008a4e <__libc_init_array+0x1e>
 8008a68:	0800c83c 	.word	0x0800c83c
 8008a6c:	0800c83c 	.word	0x0800c83c
 8008a70:	0800c83c 	.word	0x0800c83c
 8008a74:	0800c844 	.word	0x0800c844

08008a78 <__retarget_lock_init_recursive>:
 8008a78:	4770      	bx	lr

08008a7a <__retarget_lock_acquire_recursive>:
 8008a7a:	4770      	bx	lr

08008a7c <__retarget_lock_release_recursive>:
 8008a7c:	4770      	bx	lr

08008a7e <memchr>:
 8008a7e:	b2c9      	uxtb	r1, r1
 8008a80:	4603      	mov	r3, r0
 8008a82:	4402      	add	r2, r0
 8008a84:	b510      	push	{r4, lr}
 8008a86:	4293      	cmp	r3, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	d101      	bne.n	8008a90 <memchr+0x12>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e003      	b.n	8008a98 <memchr+0x1a>
 8008a90:	7804      	ldrb	r4, [r0, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	428c      	cmp	r4, r1
 8008a96:	d1f6      	bne.n	8008a86 <memchr+0x8>
 8008a98:	bd10      	pop	{r4, pc}

08008a9a <memcpy>:
 8008a9a:	440a      	add	r2, r1
 8008a9c:	1e43      	subs	r3, r0, #1
 8008a9e:	4291      	cmp	r1, r2
 8008aa0:	d100      	bne.n	8008aa4 <memcpy+0xa>
 8008aa2:	4770      	bx	lr
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab0:	d1f9      	bne.n	8008aa6 <memcpy+0xc>
 8008ab2:	bd10      	pop	{r4, pc}

08008ab4 <nanf>:
 8008ab4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008abc <nanf+0x8>
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	7fc00000 	.word	0x7fc00000

08008ac0 <quorem>:
 8008ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	6903      	ldr	r3, [r0, #16]
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	690c      	ldr	r4, [r1, #16]
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	f2c0 8083 	blt.w	8008bd6 <quorem+0x116>
 8008ad0:	3c01      	subs	r4, #1
 8008ad2:	f100 0514 	add.w	r5, r0, #20
 8008ad6:	f101 0814 	add.w	r8, r1, #20
 8008ada:	00a3      	lsls	r3, r4, #2
 8008adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af0:	3301      	adds	r3, #1
 8008af2:	429a      	cmp	r2, r3
 8008af4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008af8:	d331      	bcc.n	8008b5e <quorem+0x9e>
 8008afa:	f04f 0a00 	mov.w	sl, #0
 8008afe:	46c4      	mov	ip, r8
 8008b00:	46ae      	mov	lr, r5
 8008b02:	46d3      	mov	fp, sl
 8008b04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b08:	b298      	uxth	r0, r3
 8008b0a:	45e1      	cmp	r9, ip
 8008b0c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008b10:	fb06 a000 	mla	r0, r6, r0, sl
 8008b14:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008b18:	b280      	uxth	r0, r0
 8008b1a:	fb06 2303 	mla	r3, r6, r3, r2
 8008b1e:	f8de 2000 	ldr.w	r2, [lr]
 8008b22:	b292      	uxth	r2, r2
 8008b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b28:	eba2 0200 	sub.w	r2, r2, r0
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f8de 0000 	ldr.w	r0, [lr]
 8008b32:	445a      	add	r2, fp
 8008b34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b38:	b292      	uxth	r2, r2
 8008b3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b46:	f84e 2b04 	str.w	r2, [lr], #4
 8008b4a:	d2db      	bcs.n	8008b04 <quorem+0x44>
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	58eb      	ldr	r3, [r5, r3]
 8008b50:	b92b      	cbnz	r3, 8008b5e <quorem+0x9e>
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	3b04      	subs	r3, #4
 8008b56:	429d      	cmp	r5, r3
 8008b58:	461a      	mov	r2, r3
 8008b5a:	d330      	bcc.n	8008bbe <quorem+0xfe>
 8008b5c:	613c      	str	r4, [r7, #16]
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f001 f91a 	bl	8009d98 <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	db26      	blt.n	8008bb6 <quorem+0xf6>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b70:	f8d1 c000 	ldr.w	ip, [r1]
 8008b74:	fa1f fe82 	uxth.w	lr, r2
 8008b78:	45c1      	cmp	r9, r8
 8008b7a:	fa1f f38c 	uxth.w	r3, ip
 8008b7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008b82:	eba3 030e 	sub.w	r3, r3, lr
 8008b86:	4403      	add	r3, r0
 8008b88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b9a:	f841 3b04 	str.w	r3, [r1], #4
 8008b9e:	d2e5      	bcs.n	8008b6c <quorem+0xac>
 8008ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ba8:	b922      	cbnz	r2, 8008bb4 <quorem+0xf4>
 8008baa:	3b04      	subs	r3, #4
 8008bac:	429d      	cmp	r5, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	d30b      	bcc.n	8008bca <quorem+0x10a>
 8008bb2:	613c      	str	r4, [r7, #16]
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	b003      	add	sp, #12
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	d1ca      	bne.n	8008b5c <quorem+0x9c>
 8008bc6:	3c01      	subs	r4, #1
 8008bc8:	e7c5      	b.n	8008b56 <quorem+0x96>
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d1ef      	bne.n	8008bb2 <quorem+0xf2>
 8008bd2:	3c01      	subs	r4, #1
 8008bd4:	e7ea      	b.n	8008bac <quorem+0xec>
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e7ee      	b.n	8008bb8 <quorem+0xf8>
 8008bda:	0000      	movs	r0, r0
 8008bdc:	0000      	movs	r0, r0
	...

08008be0 <_dtoa_r>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	69c7      	ldr	r7, [r0, #28]
 8008be6:	b097      	sub	sp, #92	@ 0x5c
 8008be8:	4681      	mov	r9, r0
 8008bea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008bec:	9107      	str	r1, [sp, #28]
 8008bee:	920c      	str	r2, [sp, #48]	@ 0x30
 8008bf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008bf2:	ec55 4b10 	vmov	r4, r5, d0
 8008bf6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008bfa:	b97f      	cbnz	r7, 8008c1c <_dtoa_r+0x3c>
 8008bfc:	2010      	movs	r0, #16
 8008bfe:	f7fe fe63 	bl	80078c8 <malloc>
 8008c02:	4602      	mov	r2, r0
 8008c04:	f8c9 001c 	str.w	r0, [r9, #28]
 8008c08:	b920      	cbnz	r0, 8008c14 <_dtoa_r+0x34>
 8008c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8008eb0 <_dtoa_r+0x2d0>)
 8008c0c:	21ef      	movs	r1, #239	@ 0xef
 8008c0e:	48a9      	ldr	r0, [pc, #676]	@ (8008eb4 <_dtoa_r+0x2d4>)
 8008c10:	f002 fb76 	bl	800b300 <__assert_func>
 8008c14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c18:	6007      	str	r7, [r0, #0]
 8008c1a:	60c7      	str	r7, [r0, #12]
 8008c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	b159      	cbz	r1, 8008c3c <_dtoa_r+0x5c>
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	2301      	movs	r3, #1
 8008c28:	4648      	mov	r0, r9
 8008c2a:	4093      	lsls	r3, r2
 8008c2c:	604a      	str	r2, [r1, #4]
 8008c2e:	608b      	str	r3, [r1, #8]
 8008c30:	f000 fe32 	bl	8009898 <_Bfree>
 8008c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	1e2b      	subs	r3, r5, #0
 8008c3e:	bfb7      	itett	lt
 8008c40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c44:	2300      	movge	r3, #0
 8008c46:	2201      	movlt	r2, #1
 8008c48:	9305      	strlt	r3, [sp, #20]
 8008c4a:	bfa8      	it	ge
 8008c4c:	6033      	strge	r3, [r6, #0]
 8008c4e:	9f05      	ldr	r7, [sp, #20]
 8008c50:	4b99      	ldr	r3, [pc, #612]	@ (8008eb8 <_dtoa_r+0x2d8>)
 8008c52:	bfb8      	it	lt
 8008c54:	6032      	strlt	r2, [r6, #0]
 8008c56:	43bb      	bics	r3, r7
 8008c58:	d112      	bne.n	8008c80 <_dtoa_r+0xa0>
 8008c5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c66:	4323      	orrs	r3, r4
 8008c68:	f000 855a 	beq.w	8009720 <_dtoa_r+0xb40>
 8008c6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c6e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008ecc <_dtoa_r+0x2ec>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 855c 	beq.w	8009730 <_dtoa_r+0xb50>
 8008c78:	f10a 0303 	add.w	r3, sl, #3
 8008c7c:	f000 bd56 	b.w	800972c <_dtoa_r+0xb4c>
 8008c80:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	ec51 0b17 	vmov	r0, r1, d7
 8008c8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008c90:	f7f7 ff1e 	bl	8000ad0 <__aeabi_dcmpeq>
 8008c94:	4680      	mov	r8, r0
 8008c96:	b158      	cbz	r0, 8008cb0 <_dtoa_r+0xd0>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ca0:	b113      	cbz	r3, 8008ca8 <_dtoa_r+0xc8>
 8008ca2:	4b86      	ldr	r3, [pc, #536]	@ (8008ebc <_dtoa_r+0x2dc>)
 8008ca4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008ed0 <_dtoa_r+0x2f0>
 8008cac:	f000 bd40 	b.w	8009730 <_dtoa_r+0xb50>
 8008cb0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008cb4:	aa14      	add	r2, sp, #80	@ 0x50
 8008cb6:	a915      	add	r1, sp, #84	@ 0x54
 8008cb8:	4648      	mov	r0, r9
 8008cba:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008cbe:	f001 f993 	bl	8009fe8 <__d2b>
 8008cc2:	9002      	str	r0, [sp, #8]
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	d076      	beq.n	8008db6 <_dtoa_r+0x1d6>
 8008cc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008cce:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cd6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008cda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cde:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4b76      	ldr	r3, [pc, #472]	@ (8008ec0 <_dtoa_r+0x2e0>)
 8008ce8:	f7f7 fad2 	bl	8000290 <__aeabi_dsub>
 8008cec:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e98 <_dtoa_r+0x2b8>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fc85 	bl	8000600 <__aeabi_dmul>
 8008cf6:	a36a      	add	r3, pc, #424	@ (adr r3, 8008ea0 <_dtoa_r+0x2c0>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 faca 	bl	8000294 <__adddf3>
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7f7 fc11 	bl	800052c <__aeabi_i2d>
 8008d0a:	a367      	add	r3, pc, #412	@ (adr r3, 8008ea8 <_dtoa_r+0x2c8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fc76 	bl	8000600 <__aeabi_dmul>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7f7 faba 	bl	8000294 <__adddf3>
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	f7f7 ff1c 	bl	8000b60 <__aeabi_d2iz>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 fed7 	bl	8000ae4 <__aeabi_dcmplt>
 8008d36:	b140      	cbz	r0, 8008d4a <_dtoa_r+0x16a>
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7f7 fbf7 	bl	800052c <__aeabi_i2d>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	462b      	mov	r3, r5
 8008d42:	f7f7 fec5 	bl	8000ad0 <__aeabi_dcmpeq>
 8008d46:	b900      	cbnz	r0, 8008d4a <_dtoa_r+0x16a>
 8008d48:	3f01      	subs	r7, #1
 8008d4a:	2f16      	cmp	r7, #22
 8008d4c:	d852      	bhi.n	8008df4 <_dtoa_r+0x214>
 8008d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8008ec4 <_dtoa_r+0x2e4>)
 8008d50:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f7f7 fec2 	bl	8000ae4 <__aeabi_dcmplt>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d049      	beq.n	8008df8 <_dtoa_r+0x218>
 8008d64:	3f01      	subs	r7, #1
 8008d66:	2300      	movs	r3, #0
 8008d68:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	1e5a      	subs	r2, r3, #1
 8008d70:	bf4c      	ite	mi
 8008d72:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d76:	2300      	movpl	r3, #0
 8008d78:	9206      	str	r2, [sp, #24]
 8008d7a:	bf45      	ittet	mi
 8008d7c:	9300      	strmi	r3, [sp, #0]
 8008d7e:	2300      	movmi	r3, #0
 8008d80:	9300      	strpl	r3, [sp, #0]
 8008d82:	9306      	strmi	r3, [sp, #24]
 8008d84:	2f00      	cmp	r7, #0
 8008d86:	db39      	blt.n	8008dfc <_dtoa_r+0x21c>
 8008d88:	9b06      	ldr	r3, [sp, #24]
 8008d8a:	970d      	str	r7, [sp, #52]	@ 0x34
 8008d8c:	443b      	add	r3, r7
 8008d8e:	9306      	str	r3, [sp, #24]
 8008d90:	2300      	movs	r3, #0
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	9b07      	ldr	r3, [sp, #28]
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d863      	bhi.n	8008e62 <_dtoa_r+0x282>
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	bfc5      	ittet	gt
 8008d9e:	3b04      	subgt	r3, #4
 8008da0:	2400      	movgt	r4, #0
 8008da2:	2401      	movle	r4, #1
 8008da4:	9307      	strgt	r3, [sp, #28]
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	3b02      	subs	r3, #2
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d865      	bhi.n	8008e7a <_dtoa_r+0x29a>
 8008dae:	e8df f003 	tbb	[pc, r3]
 8008db2:	5654      	.short	0x5654
 8008db4:	2d39      	.short	0x2d39
 8008db6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008dba:	441e      	add	r6, r3
 8008dbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	bfc9      	itett	gt
 8008dc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008dc8:	f1c3 0320 	rsble	r3, r3, #32
 8008dcc:	409f      	lslgt	r7, r3
 8008dce:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008dd2:	bfd8      	it	le
 8008dd4:	fa04 f003 	lslle.w	r0, r4, r3
 8008dd8:	f106 36ff 	add.w	r6, r6, #4294967295
 8008ddc:	bfc4      	itt	gt
 8008dde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008de2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008de6:	f7f7 fb91 	bl	800050c <__aeabi_ui2d>
 8008dea:	2201      	movs	r2, #1
 8008dec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008df0:	9212      	str	r2, [sp, #72]	@ 0x48
 8008df2:	e776      	b.n	8008ce2 <_dtoa_r+0x102>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e7b7      	b.n	8008d68 <_dtoa_r+0x188>
 8008df8:	9010      	str	r0, [sp, #64]	@ 0x40
 8008dfa:	e7b6      	b.n	8008d6a <_dtoa_r+0x18a>
 8008dfc:	9b00      	ldr	r3, [sp, #0]
 8008dfe:	1bdb      	subs	r3, r3, r7
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	427b      	negs	r3, r7
 8008e04:	9308      	str	r3, [sp, #32]
 8008e06:	2300      	movs	r3, #0
 8008e08:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e0a:	e7c3      	b.n	8008d94 <_dtoa_r+0x1b4>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e12:	eb07 0b03 	add.w	fp, r7, r3
 8008e16:	f10b 0301 	add.w	r3, fp, #1
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	9303      	str	r3, [sp, #12]
 8008e1e:	bfb8      	it	lt
 8008e20:	2301      	movlt	r3, #1
 8008e22:	e006      	b.n	8008e32 <_dtoa_r+0x252>
 8008e24:	2301      	movs	r3, #1
 8008e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd28      	ble.n	8008e80 <_dtoa_r+0x2a0>
 8008e2e:	469b      	mov	fp, r3
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008e36:	2100      	movs	r1, #0
 8008e38:	2204      	movs	r2, #4
 8008e3a:	f102 0514 	add.w	r5, r2, #20
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	d926      	bls.n	8008e90 <_dtoa_r+0x2b0>
 8008e42:	6041      	str	r1, [r0, #4]
 8008e44:	4648      	mov	r0, r9
 8008e46:	f000 fce7 	bl	8009818 <_Balloc>
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d141      	bne.n	8008ed4 <_dtoa_r+0x2f4>
 8008e50:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec8 <_dtoa_r+0x2e8>)
 8008e52:	4602      	mov	r2, r0
 8008e54:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e58:	e6d9      	b.n	8008c0e <_dtoa_r+0x2e>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e7e3      	b.n	8008e26 <_dtoa_r+0x246>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e7d5      	b.n	8008e0e <_dtoa_r+0x22e>
 8008e62:	2401      	movs	r4, #1
 8008e64:	2300      	movs	r3, #0
 8008e66:	9409      	str	r4, [sp, #36]	@ 0x24
 8008e68:	9307      	str	r3, [sp, #28]
 8008e6a:	f04f 3bff 	mov.w	fp, #4294967295
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2312      	movs	r3, #18
 8008e72:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e78:	e7db      	b.n	8008e32 <_dtoa_r+0x252>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e7e:	e7f4      	b.n	8008e6a <_dtoa_r+0x28a>
 8008e80:	f04f 0b01 	mov.w	fp, #1
 8008e84:	465b      	mov	r3, fp
 8008e86:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e8a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008e8e:	e7d0      	b.n	8008e32 <_dtoa_r+0x252>
 8008e90:	3101      	adds	r1, #1
 8008e92:	0052      	lsls	r2, r2, #1
 8008e94:	e7d1      	b.n	8008e3a <_dtoa_r+0x25a>
 8008e96:	bf00      	nop
 8008e98:	636f4361 	.word	0x636f4361
 8008e9c:	3fd287a7 	.word	0x3fd287a7
 8008ea0:	8b60c8b3 	.word	0x8b60c8b3
 8008ea4:	3fc68a28 	.word	0x3fc68a28
 8008ea8:	509f79fb 	.word	0x509f79fb
 8008eac:	3fd34413 	.word	0x3fd34413
 8008eb0:	0800c44e 	.word	0x0800c44e
 8008eb4:	0800c465 	.word	0x0800c465
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	0800c419 	.word	0x0800c419
 8008ec0:	3ff80000 	.word	0x3ff80000
 8008ec4:	0800c618 	.word	0x0800c618
 8008ec8:	0800c4bd 	.word	0x0800c4bd
 8008ecc:	0800c44a 	.word	0x0800c44a
 8008ed0:	0800c418 	.word	0x0800c418
 8008ed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ed8:	6018      	str	r0, [r3, #0]
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	2b0e      	cmp	r3, #14
 8008ede:	f200 80a1 	bhi.w	8009024 <_dtoa_r+0x444>
 8008ee2:	2c00      	cmp	r4, #0
 8008ee4:	f000 809e 	beq.w	8009024 <_dtoa_r+0x444>
 8008ee8:	2f00      	cmp	r7, #0
 8008eea:	dd33      	ble.n	8008f54 <_dtoa_r+0x374>
 8008eec:	f007 020f 	and.w	r2, r7, #15
 8008ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8009160 <_dtoa_r+0x580>)
 8008ef2:	05f8      	lsls	r0, r7, #23
 8008ef4:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008efc:	ed93 7b00 	vldr	d7, [r3]
 8008f00:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008f04:	d516      	bpl.n	8008f34 <_dtoa_r+0x354>
 8008f06:	4b97      	ldr	r3, [pc, #604]	@ (8009164 <_dtoa_r+0x584>)
 8008f08:	f004 040f 	and.w	r4, r4, #15
 8008f0c:	2603      	movs	r6, #3
 8008f0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f16:	f7f7 fc9d 	bl	8000854 <__aeabi_ddiv>
 8008f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1e:	4d91      	ldr	r5, [pc, #580]	@ (8009164 <_dtoa_r+0x584>)
 8008f20:	b954      	cbnz	r4, 8008f38 <_dtoa_r+0x358>
 8008f22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f2a:	f7f7 fc93 	bl	8000854 <__aeabi_ddiv>
 8008f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f32:	e028      	b.n	8008f86 <_dtoa_r+0x3a6>
 8008f34:	2602      	movs	r6, #2
 8008f36:	e7f2      	b.n	8008f1e <_dtoa_r+0x33e>
 8008f38:	07e1      	lsls	r1, r4, #31
 8008f3a:	d508      	bpl.n	8008f4e <_dtoa_r+0x36e>
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f46:	f7f7 fb5b 	bl	8000600 <__aeabi_dmul>
 8008f4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f4e:	1064      	asrs	r4, r4, #1
 8008f50:	3508      	adds	r5, #8
 8008f52:	e7e5      	b.n	8008f20 <_dtoa_r+0x340>
 8008f54:	f000 80af 	beq.w	80090b6 <_dtoa_r+0x4d6>
 8008f58:	427c      	negs	r4, r7
 8008f5a:	4b81      	ldr	r3, [pc, #516]	@ (8009160 <_dtoa_r+0x580>)
 8008f5c:	4d81      	ldr	r5, [pc, #516]	@ (8009164 <_dtoa_r+0x584>)
 8008f5e:	2602      	movs	r6, #2
 8008f60:	f004 020f 	and.w	r2, r4, #15
 8008f64:	1124      	asrs	r4, r4, #4
 8008f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 fb45 	bl	8000600 <__aeabi_dmul>
 8008f76:	2300      	movs	r3, #0
 8008f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	f040 808f 	bne.w	80090a0 <_dtoa_r+0x4c0>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1d3      	bne.n	8008f2e <_dtoa_r+0x34e>
 8008f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8094 	beq.w	80090ba <_dtoa_r+0x4da>
 8008f92:	2200      	movs	r2, #0
 8008f94:	4b74      	ldr	r3, [pc, #464]	@ (8009168 <_dtoa_r+0x588>)
 8008f96:	4620      	mov	r0, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7f7 fda3 	bl	8000ae4 <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f000 808b 	beq.w	80090ba <_dtoa_r+0x4da>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8087 	beq.w	80090ba <_dtoa_r+0x4da>
 8008fac:	f1bb 0f00 	cmp.w	fp, #0
 8008fb0:	dd34      	ble.n	800901c <_dtoa_r+0x43c>
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f107 38ff 	add.w	r8, r7, #4294967295
 8008fb8:	3601      	adds	r6, #1
 8008fba:	465c      	mov	r4, fp
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800916c <_dtoa_r+0x58c>)
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7f7 fb1d 	bl	8000600 <__aeabi_dmul>
 8008fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7f7 faae 	bl	800052c <__aeabi_i2d>
 8008fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd4:	f7f7 fb14 	bl	8000600 <__aeabi_dmul>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4b65      	ldr	r3, [pc, #404]	@ (8009170 <_dtoa_r+0x590>)
 8008fdc:	f7f7 f95a 	bl	8000294 <__adddf3>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d16a      	bne.n	80090c0 <_dtoa_r+0x4e0>
 8008fea:	2200      	movs	r2, #0
 8008fec:	4b61      	ldr	r3, [pc, #388]	@ (8009174 <_dtoa_r+0x594>)
 8008fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ff2:	f7f7 f94d 	bl	8000290 <__aeabi_dsub>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ffe:	462a      	mov	r2, r5
 8009000:	4633      	mov	r3, r6
 8009002:	f7f7 fd8d 	bl	8000b20 <__aeabi_dcmpgt>
 8009006:	2800      	cmp	r0, #0
 8009008:	f040 8298 	bne.w	800953c <_dtoa_r+0x95c>
 800900c:	462a      	mov	r2, r5
 800900e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009016:	f7f7 fd65 	bl	8000ae4 <__aeabi_dcmplt>
 800901a:	bb38      	cbnz	r0, 800906c <_dtoa_r+0x48c>
 800901c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009020:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009024:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009026:	2b00      	cmp	r3, #0
 8009028:	f2c0 8157 	blt.w	80092da <_dtoa_r+0x6fa>
 800902c:	2f0e      	cmp	r7, #14
 800902e:	f300 8154 	bgt.w	80092da <_dtoa_r+0x6fa>
 8009032:	4b4b      	ldr	r3, [pc, #300]	@ (8009160 <_dtoa_r+0x580>)
 8009034:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009038:	ed93 7b00 	vldr	d7, [r3]
 800903c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800903e:	2b00      	cmp	r3, #0
 8009040:	ed8d 7b00 	vstr	d7, [sp]
 8009044:	f280 80e5 	bge.w	8009212 <_dtoa_r+0x632>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f300 80e1 	bgt.w	8009212 <_dtoa_r+0x632>
 8009050:	d10c      	bne.n	800906c <_dtoa_r+0x48c>
 8009052:	2200      	movs	r2, #0
 8009054:	4b47      	ldr	r3, [pc, #284]	@ (8009174 <_dtoa_r+0x594>)
 8009056:	ec51 0b17 	vmov	r0, r1, d7
 800905a:	f7f7 fad1 	bl	8000600 <__aeabi_dmul>
 800905e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009062:	f7f7 fd53 	bl	8000b0c <__aeabi_dcmpge>
 8009066:	2800      	cmp	r0, #0
 8009068:	f000 8266 	beq.w	8009538 <_dtoa_r+0x958>
 800906c:	2400      	movs	r4, #0
 800906e:	4625      	mov	r5, r4
 8009070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009072:	4656      	mov	r6, sl
 8009074:	ea6f 0803 	mvn.w	r8, r3
 8009078:	2700      	movs	r7, #0
 800907a:	4621      	mov	r1, r4
 800907c:	4648      	mov	r0, r9
 800907e:	f000 fc0b 	bl	8009898 <_Bfree>
 8009082:	2d00      	cmp	r5, #0
 8009084:	f000 80bd 	beq.w	8009202 <_dtoa_r+0x622>
 8009088:	b12f      	cbz	r7, 8009096 <_dtoa_r+0x4b6>
 800908a:	42af      	cmp	r7, r5
 800908c:	d003      	beq.n	8009096 <_dtoa_r+0x4b6>
 800908e:	4639      	mov	r1, r7
 8009090:	4648      	mov	r0, r9
 8009092:	f000 fc01 	bl	8009898 <_Bfree>
 8009096:	4629      	mov	r1, r5
 8009098:	4648      	mov	r0, r9
 800909a:	f000 fbfd 	bl	8009898 <_Bfree>
 800909e:	e0b0      	b.n	8009202 <_dtoa_r+0x622>
 80090a0:	07e2      	lsls	r2, r4, #31
 80090a2:	d505      	bpl.n	80090b0 <_dtoa_r+0x4d0>
 80090a4:	3601      	adds	r6, #1
 80090a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090aa:	f7f7 faa9 	bl	8000600 <__aeabi_dmul>
 80090ae:	2301      	movs	r3, #1
 80090b0:	1064      	asrs	r4, r4, #1
 80090b2:	3508      	adds	r5, #8
 80090b4:	e762      	b.n	8008f7c <_dtoa_r+0x39c>
 80090b6:	2602      	movs	r6, #2
 80090b8:	e765      	b.n	8008f86 <_dtoa_r+0x3a6>
 80090ba:	46b8      	mov	r8, r7
 80090bc:	9c03      	ldr	r4, [sp, #12]
 80090be:	e784      	b.n	8008fca <_dtoa_r+0x3ea>
 80090c0:	4b27      	ldr	r3, [pc, #156]	@ (8009160 <_dtoa_r+0x580>)
 80090c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090c8:	4454      	add	r4, sl
 80090ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d054      	beq.n	800917c <_dtoa_r+0x59c>
 80090d2:	2000      	movs	r0, #0
 80090d4:	4928      	ldr	r1, [pc, #160]	@ (8009178 <_dtoa_r+0x598>)
 80090d6:	f7f7 fbbd 	bl	8000854 <__aeabi_ddiv>
 80090da:	4633      	mov	r3, r6
 80090dc:	4656      	mov	r6, sl
 80090de:	462a      	mov	r2, r5
 80090e0:	f7f7 f8d6 	bl	8000290 <__aeabi_dsub>
 80090e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ec:	f7f7 fd38 	bl	8000b60 <__aeabi_d2iz>
 80090f0:	4605      	mov	r5, r0
 80090f2:	f7f7 fa1b 	bl	800052c <__aeabi_i2d>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	3530      	adds	r5, #48	@ 0x30
 80090fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009100:	f7f7 f8c6 	bl	8000290 <__aeabi_dsub>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	f806 5b01 	strb.w	r5, [r6], #1
 800910c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009114:	f7f7 fce6 	bl	8000ae4 <__aeabi_dcmplt>
 8009118:	2800      	cmp	r0, #0
 800911a:	d172      	bne.n	8009202 <_dtoa_r+0x622>
 800911c:	2000      	movs	r0, #0
 800911e:	4912      	ldr	r1, [pc, #72]	@ (8009168 <_dtoa_r+0x588>)
 8009120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009124:	f7f7 f8b4 	bl	8000290 <__aeabi_dsub>
 8009128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800912c:	f7f7 fcda 	bl	8000ae4 <__aeabi_dcmplt>
 8009130:	2800      	cmp	r0, #0
 8009132:	f040 80b4 	bne.w	800929e <_dtoa_r+0x6be>
 8009136:	42a6      	cmp	r6, r4
 8009138:	f43f af70 	beq.w	800901c <_dtoa_r+0x43c>
 800913c:	2200      	movs	r2, #0
 800913e:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <_dtoa_r+0x58c>)
 8009140:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009144:	f7f7 fa5c 	bl	8000600 <__aeabi_dmul>
 8009148:	2200      	movs	r2, #0
 800914a:	4b08      	ldr	r3, [pc, #32]	@ (800916c <_dtoa_r+0x58c>)
 800914c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009154:	f7f7 fa54 	bl	8000600 <__aeabi_dmul>
 8009158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800915c:	e7c4      	b.n	80090e8 <_dtoa_r+0x508>
 800915e:	bf00      	nop
 8009160:	0800c618 	.word	0x0800c618
 8009164:	0800c5f0 	.word	0x0800c5f0
 8009168:	3ff00000 	.word	0x3ff00000
 800916c:	40240000 	.word	0x40240000
 8009170:	401c0000 	.word	0x401c0000
 8009174:	40140000 	.word	0x40140000
 8009178:	3fe00000 	.word	0x3fe00000
 800917c:	4631      	mov	r1, r6
 800917e:	4656      	mov	r6, sl
 8009180:	4628      	mov	r0, r5
 8009182:	f7f7 fa3d 	bl	8000600 <__aeabi_dmul>
 8009186:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009188:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800918c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009190:	f7f7 fce6 	bl	8000b60 <__aeabi_d2iz>
 8009194:	4605      	mov	r5, r0
 8009196:	f7f7 f9c9 	bl	800052c <__aeabi_i2d>
 800919a:	4602      	mov	r2, r0
 800919c:	3530      	adds	r5, #48	@ 0x30
 800919e:	460b      	mov	r3, r1
 80091a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a4:	f7f7 f874 	bl	8000290 <__aeabi_dsub>
 80091a8:	f806 5b01 	strb.w	r5, [r6], #1
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	42a6      	cmp	r6, r4
 80091b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	d124      	bne.n	8009206 <_dtoa_r+0x626>
 80091bc:	4baf      	ldr	r3, [pc, #700]	@ (800947c <_dtoa_r+0x89c>)
 80091be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80091c2:	f7f7 f867 	bl	8000294 <__adddf3>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ce:	f7f7 fca7 	bl	8000b20 <__aeabi_dcmpgt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d163      	bne.n	800929e <_dtoa_r+0x6be>
 80091d6:	2000      	movs	r0, #0
 80091d8:	49a8      	ldr	r1, [pc, #672]	@ (800947c <_dtoa_r+0x89c>)
 80091da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091de:	f7f7 f857 	bl	8000290 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ea:	f7f7 fc7b 	bl	8000ae4 <__aeabi_dcmplt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f af14 	beq.w	800901c <_dtoa_r+0x43c>
 80091f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80091f6:	1e73      	subs	r3, r6, #1
 80091f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091fe:	2b30      	cmp	r3, #48	@ 0x30
 8009200:	d0f8      	beq.n	80091f4 <_dtoa_r+0x614>
 8009202:	4647      	mov	r7, r8
 8009204:	e03b      	b.n	800927e <_dtoa_r+0x69e>
 8009206:	4b9e      	ldr	r3, [pc, #632]	@ (8009480 <_dtoa_r+0x8a0>)
 8009208:	f7f7 f9fa 	bl	8000600 <__aeabi_dmul>
 800920c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009210:	e7bc      	b.n	800918c <_dtoa_r+0x5ac>
 8009212:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009216:	4656      	mov	r6, sl
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009220:	f7f7 fb18 	bl	8000854 <__aeabi_ddiv>
 8009224:	f7f7 fc9c 	bl	8000b60 <__aeabi_d2iz>
 8009228:	4680      	mov	r8, r0
 800922a:	f7f7 f97f 	bl	800052c <__aeabi_i2d>
 800922e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009232:	f7f7 f9e5 	bl	8000600 <__aeabi_dmul>
 8009236:	4602      	mov	r2, r0
 8009238:	4620      	mov	r0, r4
 800923a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800923e:	460b      	mov	r3, r1
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f825 	bl	8000290 <__aeabi_dsub>
 8009246:	9d03      	ldr	r5, [sp, #12]
 8009248:	f806 4b01 	strb.w	r4, [r6], #1
 800924c:	eba6 040a 	sub.w	r4, r6, sl
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	42a5      	cmp	r5, r4
 8009256:	d133      	bne.n	80092c0 <_dtoa_r+0x6e0>
 8009258:	f7f7 f81c 	bl	8000294 <__adddf3>
 800925c:	4604      	mov	r4, r0
 800925e:	460d      	mov	r5, r1
 8009260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009264:	f7f7 fc5c 	bl	8000b20 <__aeabi_dcmpgt>
 8009268:	b9c0      	cbnz	r0, 800929c <_dtoa_r+0x6bc>
 800926a:	4620      	mov	r0, r4
 800926c:	4629      	mov	r1, r5
 800926e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009272:	f7f7 fc2d 	bl	8000ad0 <__aeabi_dcmpeq>
 8009276:	b110      	cbz	r0, 800927e <_dtoa_r+0x69e>
 8009278:	f018 0f01 	tst.w	r8, #1
 800927c:	d10e      	bne.n	800929c <_dtoa_r+0x6bc>
 800927e:	9902      	ldr	r1, [sp, #8]
 8009280:	4648      	mov	r0, r9
 8009282:	f000 fb09 	bl	8009898 <_Bfree>
 8009286:	2300      	movs	r3, #0
 8009288:	3701      	adds	r7, #1
 800928a:	7033      	strb	r3, [r6, #0]
 800928c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800928e:	601f      	str	r7, [r3, #0]
 8009290:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 824c 	beq.w	8009730 <_dtoa_r+0xb50>
 8009298:	601e      	str	r6, [r3, #0]
 800929a:	e249      	b.n	8009730 <_dtoa_r+0xb50>
 800929c:	46b8      	mov	r8, r7
 800929e:	4633      	mov	r3, r6
 80092a0:	461e      	mov	r6, r3
 80092a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092a6:	2a39      	cmp	r2, #57	@ 0x39
 80092a8:	d106      	bne.n	80092b8 <_dtoa_r+0x6d8>
 80092aa:	459a      	cmp	sl, r3
 80092ac:	d1f8      	bne.n	80092a0 <_dtoa_r+0x6c0>
 80092ae:	2230      	movs	r2, #48	@ 0x30
 80092b0:	f108 0801 	add.w	r8, r8, #1
 80092b4:	f88a 2000 	strb.w	r2, [sl]
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	3201      	adds	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	e7a0      	b.n	8009202 <_dtoa_r+0x622>
 80092c0:	2200      	movs	r2, #0
 80092c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009480 <_dtoa_r+0x8a0>)
 80092c4:	f7f7 f99c 	bl	8000600 <__aeabi_dmul>
 80092c8:	2200      	movs	r2, #0
 80092ca:	2300      	movs	r3, #0
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	f7f7 fbfe 	bl	8000ad0 <__aeabi_dcmpeq>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d09f      	beq.n	8009218 <_dtoa_r+0x638>
 80092d8:	e7d1      	b.n	800927e <_dtoa_r+0x69e>
 80092da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092dc:	2a00      	cmp	r2, #0
 80092de:	f000 80ea 	beq.w	80094b6 <_dtoa_r+0x8d6>
 80092e2:	9a07      	ldr	r2, [sp, #28]
 80092e4:	2a01      	cmp	r2, #1
 80092e6:	f300 80cd 	bgt.w	8009484 <_dtoa_r+0x8a4>
 80092ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092ec:	2a00      	cmp	r2, #0
 80092ee:	f000 80c1 	beq.w	8009474 <_dtoa_r+0x894>
 80092f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80092f6:	9c08      	ldr	r4, [sp, #32]
 80092f8:	9e00      	ldr	r6, [sp, #0]
 80092fa:	9a00      	ldr	r2, [sp, #0]
 80092fc:	2101      	movs	r1, #1
 80092fe:	4648      	mov	r0, r9
 8009300:	441a      	add	r2, r3
 8009302:	9200      	str	r2, [sp, #0]
 8009304:	9a06      	ldr	r2, [sp, #24]
 8009306:	441a      	add	r2, r3
 8009308:	9206      	str	r2, [sp, #24]
 800930a:	f000 fbc5 	bl	8009a98 <__i2b>
 800930e:	4605      	mov	r5, r0
 8009310:	b166      	cbz	r6, 800932c <_dtoa_r+0x74c>
 8009312:	9b06      	ldr	r3, [sp, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd09      	ble.n	800932c <_dtoa_r+0x74c>
 8009318:	42b3      	cmp	r3, r6
 800931a:	9a00      	ldr	r2, [sp, #0]
 800931c:	bfa8      	it	ge
 800931e:	4633      	movge	r3, r6
 8009320:	1ad2      	subs	r2, r2, r3
 8009322:	1af6      	subs	r6, r6, r3
 8009324:	9200      	str	r2, [sp, #0]
 8009326:	9a06      	ldr	r2, [sp, #24]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	9306      	str	r3, [sp, #24]
 800932c:	9b08      	ldr	r3, [sp, #32]
 800932e:	b30b      	cbz	r3, 8009374 <_dtoa_r+0x794>
 8009330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80c6 	beq.w	80094c4 <_dtoa_r+0x8e4>
 8009338:	2c00      	cmp	r4, #0
 800933a:	f000 80c0 	beq.w	80094be <_dtoa_r+0x8de>
 800933e:	4629      	mov	r1, r5
 8009340:	4622      	mov	r2, r4
 8009342:	4648      	mov	r0, r9
 8009344:	f000 fc62 	bl	8009c0c <__pow5mult>
 8009348:	9a02      	ldr	r2, [sp, #8]
 800934a:	4601      	mov	r1, r0
 800934c:	4605      	mov	r5, r0
 800934e:	4648      	mov	r0, r9
 8009350:	f000 fbb8 	bl	8009ac4 <__multiply>
 8009354:	9902      	ldr	r1, [sp, #8]
 8009356:	4680      	mov	r8, r0
 8009358:	4648      	mov	r0, r9
 800935a:	f000 fa9d 	bl	8009898 <_Bfree>
 800935e:	9b08      	ldr	r3, [sp, #32]
 8009360:	1b1b      	subs	r3, r3, r4
 8009362:	9308      	str	r3, [sp, #32]
 8009364:	f000 80b1 	beq.w	80094ca <_dtoa_r+0x8ea>
 8009368:	9a08      	ldr	r2, [sp, #32]
 800936a:	4641      	mov	r1, r8
 800936c:	4648      	mov	r0, r9
 800936e:	f000 fc4d 	bl	8009c0c <__pow5mult>
 8009372:	9002      	str	r0, [sp, #8]
 8009374:	2101      	movs	r1, #1
 8009376:	4648      	mov	r0, r9
 8009378:	f000 fb8e 	bl	8009a98 <__i2b>
 800937c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800937e:	4604      	mov	r4, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 81d9 	beq.w	8009738 <_dtoa_r+0xb58>
 8009386:	461a      	mov	r2, r3
 8009388:	4601      	mov	r1, r0
 800938a:	4648      	mov	r0, r9
 800938c:	f000 fc3e 	bl	8009c0c <__pow5mult>
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	4604      	mov	r4, r0
 8009394:	2b01      	cmp	r3, #1
 8009396:	f300 809f 	bgt.w	80094d8 <_dtoa_r+0x8f8>
 800939a:	9b04      	ldr	r3, [sp, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8097 	bne.w	80094d0 <_dtoa_r+0x8f0>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f040 8093 	bne.w	80094d4 <_dtoa_r+0x8f4>
 80093ae:	9b05      	ldr	r3, [sp, #20]
 80093b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093b4:	0d1b      	lsrs	r3, r3, #20
 80093b6:	051b      	lsls	r3, r3, #20
 80093b8:	b133      	cbz	r3, 80093c8 <_dtoa_r+0x7e8>
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	3301      	adds	r3, #1
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	3301      	adds	r3, #1
 80093c4:	9306      	str	r3, [sp, #24]
 80093c6:	2301      	movs	r3, #1
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 81b9 	beq.w	8009744 <_dtoa_r+0xb64>
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093d8:	6918      	ldr	r0, [r3, #16]
 80093da:	f000 fb11 	bl	8009a00 <__hi0bits>
 80093de:	f1c0 0020 	rsb	r0, r0, #32
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	4418      	add	r0, r3
 80093e6:	f010 001f 	ands.w	r0, r0, #31
 80093ea:	f000 8082 	beq.w	80094f2 <_dtoa_r+0x912>
 80093ee:	f1c0 0320 	rsb	r3, r0, #32
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	dd73      	ble.n	80094de <_dtoa_r+0x8fe>
 80093f6:	f1c0 001c 	rsb	r0, r0, #28
 80093fa:	9b00      	ldr	r3, [sp, #0]
 80093fc:	4403      	add	r3, r0
 80093fe:	4406      	add	r6, r0
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	4403      	add	r3, r0
 8009406:	9306      	str	r3, [sp, #24]
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd05      	ble.n	800941a <_dtoa_r+0x83a>
 800940e:	461a      	mov	r2, r3
 8009410:	9902      	ldr	r1, [sp, #8]
 8009412:	4648      	mov	r0, r9
 8009414:	f000 fc54 	bl	8009cc0 <__lshift>
 8009418:	9002      	str	r0, [sp, #8]
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd05      	ble.n	800942c <_dtoa_r+0x84c>
 8009420:	4621      	mov	r1, r4
 8009422:	461a      	mov	r2, r3
 8009424:	4648      	mov	r0, r9
 8009426:	f000 fc4b 	bl	8009cc0 <__lshift>
 800942a:	4604      	mov	r4, r0
 800942c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d061      	beq.n	80094f6 <_dtoa_r+0x916>
 8009432:	4621      	mov	r1, r4
 8009434:	9802      	ldr	r0, [sp, #8]
 8009436:	f000 fcaf 	bl	8009d98 <__mcmp>
 800943a:	2800      	cmp	r0, #0
 800943c:	da5b      	bge.n	80094f6 <_dtoa_r+0x916>
 800943e:	2300      	movs	r3, #0
 8009440:	220a      	movs	r2, #10
 8009442:	9902      	ldr	r1, [sp, #8]
 8009444:	4648      	mov	r0, r9
 8009446:	f000 fa49 	bl	80098dc <__multadd>
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009450:	9002      	str	r0, [sp, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8178 	beq.w	8009748 <_dtoa_r+0xb68>
 8009458:	4629      	mov	r1, r5
 800945a:	2300      	movs	r3, #0
 800945c:	220a      	movs	r2, #10
 800945e:	4648      	mov	r0, r9
 8009460:	f000 fa3c 	bl	80098dc <__multadd>
 8009464:	f1bb 0f00 	cmp.w	fp, #0
 8009468:	4605      	mov	r5, r0
 800946a:	dc6f      	bgt.n	800954c <_dtoa_r+0x96c>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc49      	bgt.n	8009506 <_dtoa_r+0x926>
 8009472:	e06b      	b.n	800954c <_dtoa_r+0x96c>
 8009474:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800947a:	e73c      	b.n	80092f6 <_dtoa_r+0x716>
 800947c:	3fe00000 	.word	0x3fe00000
 8009480:	40240000 	.word	0x40240000
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1e5c      	subs	r4, r3, #1
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	42a3      	cmp	r3, r4
 800948c:	db09      	blt.n	80094a2 <_dtoa_r+0x8c2>
 800948e:	1b1c      	subs	r4, r3, r4
 8009490:	9b03      	ldr	r3, [sp, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f6bf af30 	bge.w	80092f8 <_dtoa_r+0x718>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	9a03      	ldr	r2, [sp, #12]
 800949c:	1a9e      	subs	r6, r3, r2
 800949e:	2300      	movs	r3, #0
 80094a0:	e72b      	b.n	80092fa <_dtoa_r+0x71a>
 80094a2:	9b08      	ldr	r3, [sp, #32]
 80094a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094a6:	1ae3      	subs	r3, r4, r3
 80094a8:	9408      	str	r4, [sp, #32]
 80094aa:	9e00      	ldr	r6, [sp, #0]
 80094ac:	2400      	movs	r4, #0
 80094ae:	441a      	add	r2, r3
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	920d      	str	r2, [sp, #52]	@ 0x34
 80094b4:	e721      	b.n	80092fa <_dtoa_r+0x71a>
 80094b6:	9c08      	ldr	r4, [sp, #32]
 80094b8:	9e00      	ldr	r6, [sp, #0]
 80094ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80094bc:	e728      	b.n	8009310 <_dtoa_r+0x730>
 80094be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80094c2:	e751      	b.n	8009368 <_dtoa_r+0x788>
 80094c4:	9a08      	ldr	r2, [sp, #32]
 80094c6:	9902      	ldr	r1, [sp, #8]
 80094c8:	e750      	b.n	800936c <_dtoa_r+0x78c>
 80094ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80094ce:	e751      	b.n	8009374 <_dtoa_r+0x794>
 80094d0:	2300      	movs	r3, #0
 80094d2:	e779      	b.n	80093c8 <_dtoa_r+0x7e8>
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	e777      	b.n	80093c8 <_dtoa_r+0x7e8>
 80094d8:	2300      	movs	r3, #0
 80094da:	9308      	str	r3, [sp, #32]
 80094dc:	e779      	b.n	80093d2 <_dtoa_r+0x7f2>
 80094de:	d093      	beq.n	8009408 <_dtoa_r+0x828>
 80094e0:	331c      	adds	r3, #28
 80094e2:	9a00      	ldr	r2, [sp, #0]
 80094e4:	441a      	add	r2, r3
 80094e6:	441e      	add	r6, r3
 80094e8:	9200      	str	r2, [sp, #0]
 80094ea:	9a06      	ldr	r2, [sp, #24]
 80094ec:	441a      	add	r2, r3
 80094ee:	9206      	str	r2, [sp, #24]
 80094f0:	e78a      	b.n	8009408 <_dtoa_r+0x828>
 80094f2:	4603      	mov	r3, r0
 80094f4:	e7f4      	b.n	80094e0 <_dtoa_r+0x900>
 80094f6:	9b03      	ldr	r3, [sp, #12]
 80094f8:	46b8      	mov	r8, r7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dc20      	bgt.n	8009540 <_dtoa_r+0x960>
 80094fe:	469b      	mov	fp, r3
 8009500:	9b07      	ldr	r3, [sp, #28]
 8009502:	2b02      	cmp	r3, #2
 8009504:	dd1e      	ble.n	8009544 <_dtoa_r+0x964>
 8009506:	f1bb 0f00 	cmp.w	fp, #0
 800950a:	f47f adb1 	bne.w	8009070 <_dtoa_r+0x490>
 800950e:	4621      	mov	r1, r4
 8009510:	465b      	mov	r3, fp
 8009512:	2205      	movs	r2, #5
 8009514:	4648      	mov	r0, r9
 8009516:	f000 f9e1 	bl	80098dc <__multadd>
 800951a:	4601      	mov	r1, r0
 800951c:	4604      	mov	r4, r0
 800951e:	9802      	ldr	r0, [sp, #8]
 8009520:	f000 fc3a 	bl	8009d98 <__mcmp>
 8009524:	2800      	cmp	r0, #0
 8009526:	f77f ada3 	ble.w	8009070 <_dtoa_r+0x490>
 800952a:	4656      	mov	r6, sl
 800952c:	2331      	movs	r3, #49	@ 0x31
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	f806 3b01 	strb.w	r3, [r6], #1
 8009536:	e59f      	b.n	8009078 <_dtoa_r+0x498>
 8009538:	46b8      	mov	r8, r7
 800953a:	9c03      	ldr	r4, [sp, #12]
 800953c:	4625      	mov	r5, r4
 800953e:	e7f4      	b.n	800952a <_dtoa_r+0x94a>
 8009540:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8102 	beq.w	8009750 <_dtoa_r+0xb70>
 800954c:	2e00      	cmp	r6, #0
 800954e:	dd05      	ble.n	800955c <_dtoa_r+0x97c>
 8009550:	4629      	mov	r1, r5
 8009552:	4632      	mov	r2, r6
 8009554:	4648      	mov	r0, r9
 8009556:	f000 fbb3 	bl	8009cc0 <__lshift>
 800955a:	4605      	mov	r5, r0
 800955c:	9b08      	ldr	r3, [sp, #32]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d05c      	beq.n	800961c <_dtoa_r+0xa3c>
 8009562:	6869      	ldr	r1, [r5, #4]
 8009564:	4648      	mov	r0, r9
 8009566:	f000 f957 	bl	8009818 <_Balloc>
 800956a:	4606      	mov	r6, r0
 800956c:	b928      	cbnz	r0, 800957a <_dtoa_r+0x99a>
 800956e:	4b83      	ldr	r3, [pc, #524]	@ (800977c <_dtoa_r+0xb9c>)
 8009570:	4602      	mov	r2, r0
 8009572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009576:	f7ff bb4a 	b.w	8008c0e <_dtoa_r+0x2e>
 800957a:	692a      	ldr	r2, [r5, #16]
 800957c:	f105 010c 	add.w	r1, r5, #12
 8009580:	300c      	adds	r0, #12
 8009582:	3202      	adds	r2, #2
 8009584:	0092      	lsls	r2, r2, #2
 8009586:	f7ff fa88 	bl	8008a9a <memcpy>
 800958a:	2201      	movs	r2, #1
 800958c:	4631      	mov	r1, r6
 800958e:	4648      	mov	r0, r9
 8009590:	f000 fb96 	bl	8009cc0 <__lshift>
 8009594:	f10a 0301 	add.w	r3, sl, #1
 8009598:	462f      	mov	r7, r5
 800959a:	4605      	mov	r5, r0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	eb0a 030b 	add.w	r3, sl, fp
 80095a2:	9308      	str	r3, [sp, #32]
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	9306      	str	r3, [sp, #24]
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	4621      	mov	r1, r4
 80095b0:	9802      	ldr	r0, [sp, #8]
 80095b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80095b6:	f7ff fa83 	bl	8008ac0 <quorem>
 80095ba:	4603      	mov	r3, r0
 80095bc:	4639      	mov	r1, r7
 80095be:	9003      	str	r0, [sp, #12]
 80095c0:	3330      	adds	r3, #48	@ 0x30
 80095c2:	9802      	ldr	r0, [sp, #8]
 80095c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c6:	f000 fbe7 	bl	8009d98 <__mcmp>
 80095ca:	462a      	mov	r2, r5
 80095cc:	9004      	str	r0, [sp, #16]
 80095ce:	4621      	mov	r1, r4
 80095d0:	4648      	mov	r0, r9
 80095d2:	f000 fbfd 	bl	8009dd0 <__mdiff>
 80095d6:	68c2      	ldr	r2, [r0, #12]
 80095d8:	4606      	mov	r6, r0
 80095da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095dc:	bb02      	cbnz	r2, 8009620 <_dtoa_r+0xa40>
 80095de:	4601      	mov	r1, r0
 80095e0:	9802      	ldr	r0, [sp, #8]
 80095e2:	f000 fbd9 	bl	8009d98 <__mcmp>
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	4602      	mov	r2, r0
 80095ea:	4631      	mov	r1, r6
 80095ec:	4648      	mov	r0, r9
 80095ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80095f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f2:	f000 f951 	bl	8009898 <_Bfree>
 80095f6:	9b07      	ldr	r3, [sp, #28]
 80095f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095fa:	9e00      	ldr	r6, [sp, #0]
 80095fc:	ea42 0103 	orr.w	r1, r2, r3
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	4319      	orrs	r1, r3
 8009604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009606:	d10d      	bne.n	8009624 <_dtoa_r+0xa44>
 8009608:	2b39      	cmp	r3, #57	@ 0x39
 800960a:	d027      	beq.n	800965c <_dtoa_r+0xa7c>
 800960c:	9a04      	ldr	r2, [sp, #16]
 800960e:	2a00      	cmp	r2, #0
 8009610:	dd01      	ble.n	8009616 <_dtoa_r+0xa36>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	3331      	adds	r3, #49	@ 0x31
 8009616:	f88b 3000 	strb.w	r3, [fp]
 800961a:	e52e      	b.n	800907a <_dtoa_r+0x49a>
 800961c:	4628      	mov	r0, r5
 800961e:	e7b9      	b.n	8009594 <_dtoa_r+0x9b4>
 8009620:	2201      	movs	r2, #1
 8009622:	e7e2      	b.n	80095ea <_dtoa_r+0xa0a>
 8009624:	9904      	ldr	r1, [sp, #16]
 8009626:	2900      	cmp	r1, #0
 8009628:	db04      	blt.n	8009634 <_dtoa_r+0xa54>
 800962a:	9807      	ldr	r0, [sp, #28]
 800962c:	4301      	orrs	r1, r0
 800962e:	9806      	ldr	r0, [sp, #24]
 8009630:	4301      	orrs	r1, r0
 8009632:	d120      	bne.n	8009676 <_dtoa_r+0xa96>
 8009634:	2a00      	cmp	r2, #0
 8009636:	ddee      	ble.n	8009616 <_dtoa_r+0xa36>
 8009638:	2201      	movs	r2, #1
 800963a:	9902      	ldr	r1, [sp, #8]
 800963c:	4648      	mov	r0, r9
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	f000 fb3e 	bl	8009cc0 <__lshift>
 8009644:	4621      	mov	r1, r4
 8009646:	9002      	str	r0, [sp, #8]
 8009648:	f000 fba6 	bl	8009d98 <__mcmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	dc02      	bgt.n	8009658 <_dtoa_r+0xa78>
 8009652:	d1e0      	bne.n	8009616 <_dtoa_r+0xa36>
 8009654:	07da      	lsls	r2, r3, #31
 8009656:	d5de      	bpl.n	8009616 <_dtoa_r+0xa36>
 8009658:	2b39      	cmp	r3, #57	@ 0x39
 800965a:	d1da      	bne.n	8009612 <_dtoa_r+0xa32>
 800965c:	2339      	movs	r3, #57	@ 0x39
 800965e:	f88b 3000 	strb.w	r3, [fp]
 8009662:	4633      	mov	r3, r6
 8009664:	461e      	mov	r6, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800966c:	2a39      	cmp	r2, #57	@ 0x39
 800966e:	d04f      	beq.n	8009710 <_dtoa_r+0xb30>
 8009670:	3201      	adds	r2, #1
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e501      	b.n	800907a <_dtoa_r+0x49a>
 8009676:	2a00      	cmp	r2, #0
 8009678:	dd03      	ble.n	8009682 <_dtoa_r+0xaa2>
 800967a:	2b39      	cmp	r3, #57	@ 0x39
 800967c:	d0ee      	beq.n	800965c <_dtoa_r+0xa7c>
 800967e:	3301      	adds	r3, #1
 8009680:	e7c9      	b.n	8009616 <_dtoa_r+0xa36>
 8009682:	9a00      	ldr	r2, [sp, #0]
 8009684:	9908      	ldr	r1, [sp, #32]
 8009686:	f802 3c01 	strb.w	r3, [r2, #-1]
 800968a:	428a      	cmp	r2, r1
 800968c:	d029      	beq.n	80096e2 <_dtoa_r+0xb02>
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	9902      	ldr	r1, [sp, #8]
 8009694:	4648      	mov	r0, r9
 8009696:	f000 f921 	bl	80098dc <__multadd>
 800969a:	42af      	cmp	r7, r5
 800969c:	9002      	str	r0, [sp, #8]
 800969e:	f04f 0300 	mov.w	r3, #0
 80096a2:	f04f 020a 	mov.w	r2, #10
 80096a6:	4639      	mov	r1, r7
 80096a8:	4648      	mov	r0, r9
 80096aa:	d107      	bne.n	80096bc <_dtoa_r+0xadc>
 80096ac:	f000 f916 	bl	80098dc <__multadd>
 80096b0:	4607      	mov	r7, r0
 80096b2:	4605      	mov	r5, r0
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	e777      	b.n	80095ac <_dtoa_r+0x9cc>
 80096bc:	f000 f90e 	bl	80098dc <__multadd>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4607      	mov	r7, r0
 80096c4:	2300      	movs	r3, #0
 80096c6:	220a      	movs	r2, #10
 80096c8:	4648      	mov	r0, r9
 80096ca:	f000 f907 	bl	80098dc <__multadd>
 80096ce:	4605      	mov	r5, r0
 80096d0:	e7f0      	b.n	80096b4 <_dtoa_r+0xad4>
 80096d2:	f1bb 0f00 	cmp.w	fp, #0
 80096d6:	f04f 0700 	mov.w	r7, #0
 80096da:	bfcc      	ite	gt
 80096dc:	465e      	movgt	r6, fp
 80096de:	2601      	movle	r6, #1
 80096e0:	4456      	add	r6, sl
 80096e2:	2201      	movs	r2, #1
 80096e4:	9902      	ldr	r1, [sp, #8]
 80096e6:	4648      	mov	r0, r9
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	f000 fae9 	bl	8009cc0 <__lshift>
 80096ee:	4621      	mov	r1, r4
 80096f0:	9002      	str	r0, [sp, #8]
 80096f2:	f000 fb51 	bl	8009d98 <__mcmp>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	dcb3      	bgt.n	8009662 <_dtoa_r+0xa82>
 80096fa:	d102      	bne.n	8009702 <_dtoa_r+0xb22>
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	07db      	lsls	r3, r3, #31
 8009700:	d4af      	bmi.n	8009662 <_dtoa_r+0xa82>
 8009702:	4633      	mov	r3, r6
 8009704:	461e      	mov	r6, r3
 8009706:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970a:	2a30      	cmp	r2, #48	@ 0x30
 800970c:	d0fa      	beq.n	8009704 <_dtoa_r+0xb24>
 800970e:	e4b4      	b.n	800907a <_dtoa_r+0x49a>
 8009710:	459a      	cmp	sl, r3
 8009712:	d1a7      	bne.n	8009664 <_dtoa_r+0xa84>
 8009714:	2331      	movs	r3, #49	@ 0x31
 8009716:	f108 0801 	add.w	r8, r8, #1
 800971a:	f88a 3000 	strb.w	r3, [sl]
 800971e:	e4ac      	b.n	800907a <_dtoa_r+0x49a>
 8009720:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009722:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009780 <_dtoa_r+0xba0>
 8009726:	b11b      	cbz	r3, 8009730 <_dtoa_r+0xb50>
 8009728:	f10a 0308 	add.w	r3, sl, #8
 800972c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	4650      	mov	r0, sl
 8009732:	b017      	add	sp, #92	@ 0x5c
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	9b07      	ldr	r3, [sp, #28]
 800973a:	2b01      	cmp	r3, #1
 800973c:	f77f ae2d 	ble.w	800939a <_dtoa_r+0x7ba>
 8009740:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	2001      	movs	r0, #1
 8009746:	e64c      	b.n	80093e2 <_dtoa_r+0x802>
 8009748:	f1bb 0f00 	cmp.w	fp, #0
 800974c:	f77f aed8 	ble.w	8009500 <_dtoa_r+0x920>
 8009750:	4656      	mov	r6, sl
 8009752:	4621      	mov	r1, r4
 8009754:	9802      	ldr	r0, [sp, #8]
 8009756:	f7ff f9b3 	bl	8008ac0 <quorem>
 800975a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800975e:	f806 3b01 	strb.w	r3, [r6], #1
 8009762:	eba6 020a 	sub.w	r2, r6, sl
 8009766:	4593      	cmp	fp, r2
 8009768:	ddb3      	ble.n	80096d2 <_dtoa_r+0xaf2>
 800976a:	2300      	movs	r3, #0
 800976c:	220a      	movs	r2, #10
 800976e:	9902      	ldr	r1, [sp, #8]
 8009770:	4648      	mov	r0, r9
 8009772:	f000 f8b3 	bl	80098dc <__multadd>
 8009776:	9002      	str	r0, [sp, #8]
 8009778:	e7eb      	b.n	8009752 <_dtoa_r+0xb72>
 800977a:	bf00      	nop
 800977c:	0800c4bd 	.word	0x0800c4bd
 8009780:	0800c441 	.word	0x0800c441

08009784 <_free_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4605      	mov	r5, r0
 8009788:	2900      	cmp	r1, #0
 800978a:	d041      	beq.n	8009810 <_free_r+0x8c>
 800978c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009790:	1f0c      	subs	r4, r1, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	bfb8      	it	lt
 8009796:	18e4      	addlt	r4, r4, r3
 8009798:	f7fe f948 	bl	8007a2c <__malloc_lock>
 800979c:	4a1d      	ldr	r2, [pc, #116]	@ (8009814 <_free_r+0x90>)
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	b933      	cbnz	r3, 80097b0 <_free_r+0x2c>
 80097a2:	6063      	str	r3, [r4, #4]
 80097a4:	6014      	str	r4, [r2, #0]
 80097a6:	4628      	mov	r0, r5
 80097a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ac:	f7fe b944 	b.w	8007a38 <__malloc_unlock>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d908      	bls.n	80097c6 <_free_r+0x42>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	1821      	adds	r1, r4, r0
 80097b8:	428b      	cmp	r3, r1
 80097ba:	bf01      	itttt	eq
 80097bc:	6819      	ldreq	r1, [r3, #0]
 80097be:	685b      	ldreq	r3, [r3, #4]
 80097c0:	1809      	addeq	r1, r1, r0
 80097c2:	6021      	streq	r1, [r4, #0]
 80097c4:	e7ed      	b.n	80097a2 <_free_r+0x1e>
 80097c6:	461a      	mov	r2, r3
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	b10b      	cbz	r3, 80097d0 <_free_r+0x4c>
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	d9fa      	bls.n	80097c6 <_free_r+0x42>
 80097d0:	6811      	ldr	r1, [r2, #0]
 80097d2:	1850      	adds	r0, r2, r1
 80097d4:	42a0      	cmp	r0, r4
 80097d6:	d10b      	bne.n	80097f0 <_free_r+0x6c>
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	4401      	add	r1, r0
 80097dc:	1850      	adds	r0, r2, r1
 80097de:	6011      	str	r1, [r2, #0]
 80097e0:	4283      	cmp	r3, r0
 80097e2:	d1e0      	bne.n	80097a6 <_free_r+0x22>
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	4408      	add	r0, r1
 80097ea:	6053      	str	r3, [r2, #4]
 80097ec:	6010      	str	r0, [r2, #0]
 80097ee:	e7da      	b.n	80097a6 <_free_r+0x22>
 80097f0:	d902      	bls.n	80097f8 <_free_r+0x74>
 80097f2:	230c      	movs	r3, #12
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	e7d6      	b.n	80097a6 <_free_r+0x22>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	1821      	adds	r1, r4, r0
 80097fc:	428b      	cmp	r3, r1
 80097fe:	bf02      	ittt	eq
 8009800:	6819      	ldreq	r1, [r3, #0]
 8009802:	685b      	ldreq	r3, [r3, #4]
 8009804:	1809      	addeq	r1, r1, r0
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	bf08      	it	eq
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	6054      	str	r4, [r2, #4]
 800980e:	e7ca      	b.n	80097a6 <_free_r+0x22>
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20000764 	.word	0x20000764

08009818 <_Balloc>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	69c6      	ldr	r6, [r0, #28]
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	b976      	cbnz	r6, 8009840 <_Balloc+0x28>
 8009822:	2010      	movs	r0, #16
 8009824:	f7fe f850 	bl	80078c8 <malloc>
 8009828:	4602      	mov	r2, r0
 800982a:	61e0      	str	r0, [r4, #28]
 800982c:	b920      	cbnz	r0, 8009838 <_Balloc+0x20>
 800982e:	4b18      	ldr	r3, [pc, #96]	@ (8009890 <_Balloc+0x78>)
 8009830:	216b      	movs	r1, #107	@ 0x6b
 8009832:	4818      	ldr	r0, [pc, #96]	@ (8009894 <_Balloc+0x7c>)
 8009834:	f001 fd64 	bl	800b300 <__assert_func>
 8009838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800983c:	6006      	str	r6, [r0, #0]
 800983e:	60c6      	str	r6, [r0, #12]
 8009840:	69e6      	ldr	r6, [r4, #28]
 8009842:	68f3      	ldr	r3, [r6, #12]
 8009844:	b183      	cbz	r3, 8009868 <_Balloc+0x50>
 8009846:	69e3      	ldr	r3, [r4, #28]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800984e:	b9b8      	cbnz	r0, 8009880 <_Balloc+0x68>
 8009850:	2101      	movs	r1, #1
 8009852:	4620      	mov	r0, r4
 8009854:	fa01 f605 	lsl.w	r6, r1, r5
 8009858:	1d72      	adds	r2, r6, #5
 800985a:	0092      	lsls	r2, r2, #2
 800985c:	f001 fd6e 	bl	800b33c <_calloc_r>
 8009860:	b160      	cbz	r0, 800987c <_Balloc+0x64>
 8009862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009866:	e00e      	b.n	8009886 <_Balloc+0x6e>
 8009868:	2221      	movs	r2, #33	@ 0x21
 800986a:	2104      	movs	r1, #4
 800986c:	4620      	mov	r0, r4
 800986e:	f001 fd65 	bl	800b33c <_calloc_r>
 8009872:	69e3      	ldr	r3, [r4, #28]
 8009874:	60f0      	str	r0, [r6, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e4      	bne.n	8009846 <_Balloc+0x2e>
 800987c:	2000      	movs	r0, #0
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	6802      	ldr	r2, [r0, #0]
 8009882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009886:	2300      	movs	r3, #0
 8009888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800988c:	e7f7      	b.n	800987e <_Balloc+0x66>
 800988e:	bf00      	nop
 8009890:	0800c44e 	.word	0x0800c44e
 8009894:	0800c4ce 	.word	0x0800c4ce

08009898 <_Bfree>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	69c6      	ldr	r6, [r0, #28]
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b976      	cbnz	r6, 80098c0 <_Bfree+0x28>
 80098a2:	2010      	movs	r0, #16
 80098a4:	f7fe f810 	bl	80078c8 <malloc>
 80098a8:	4602      	mov	r2, r0
 80098aa:	61e8      	str	r0, [r5, #28]
 80098ac:	b920      	cbnz	r0, 80098b8 <_Bfree+0x20>
 80098ae:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <_Bfree+0x3c>)
 80098b0:	218f      	movs	r1, #143	@ 0x8f
 80098b2:	4809      	ldr	r0, [pc, #36]	@ (80098d8 <_Bfree+0x40>)
 80098b4:	f001 fd24 	bl	800b300 <__assert_func>
 80098b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098bc:	6006      	str	r6, [r0, #0]
 80098be:	60c6      	str	r6, [r0, #12]
 80098c0:	b13c      	cbz	r4, 80098d2 <_Bfree+0x3a>
 80098c2:	69eb      	ldr	r3, [r5, #28]
 80098c4:	6862      	ldr	r2, [r4, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098cc:	6021      	str	r1, [r4, #0]
 80098ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098d2:	bd70      	pop	{r4, r5, r6, pc}
 80098d4:	0800c44e 	.word	0x0800c44e
 80098d8:	0800c4ce 	.word	0x0800c4ce

080098dc <__multadd>:
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	f101 0c14 	add.w	ip, r1, #20
 80098e4:	4607      	mov	r7, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	461e      	mov	r6, r3
 80098ea:	690d      	ldr	r5, [r1, #16]
 80098ec:	2000      	movs	r0, #0
 80098ee:	f8dc 3000 	ldr.w	r3, [ip]
 80098f2:	3001      	adds	r0, #1
 80098f4:	b299      	uxth	r1, r3
 80098f6:	4285      	cmp	r5, r0
 80098f8:	fb02 6101 	mla	r1, r2, r1, r6
 80098fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009900:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009904:	b289      	uxth	r1, r1
 8009906:	fb02 3306 	mla	r3, r2, r6, r3
 800990a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800990e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009912:	f84c 1b04 	str.w	r1, [ip], #4
 8009916:	dcea      	bgt.n	80098ee <__multadd+0x12>
 8009918:	b30e      	cbz	r6, 800995e <__multadd+0x82>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc19      	bgt.n	8009954 <__multadd+0x78>
 8009920:	6861      	ldr	r1, [r4, #4]
 8009922:	4638      	mov	r0, r7
 8009924:	3101      	adds	r1, #1
 8009926:	f7ff ff77 	bl	8009818 <_Balloc>
 800992a:	4680      	mov	r8, r0
 800992c:	b928      	cbnz	r0, 800993a <__multadd+0x5e>
 800992e:	4602      	mov	r2, r0
 8009930:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <__multadd+0x88>)
 8009932:	21ba      	movs	r1, #186	@ 0xba
 8009934:	480c      	ldr	r0, [pc, #48]	@ (8009968 <__multadd+0x8c>)
 8009936:	f001 fce3 	bl	800b300 <__assert_func>
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	f104 010c 	add.w	r1, r4, #12
 8009940:	300c      	adds	r0, #12
 8009942:	3202      	adds	r2, #2
 8009944:	0092      	lsls	r2, r2, #2
 8009946:	f7ff f8a8 	bl	8008a9a <memcpy>
 800994a:	4621      	mov	r1, r4
 800994c:	4644      	mov	r4, r8
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff ffa2 	bl	8009898 <_Bfree>
 8009954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009958:	3501      	adds	r5, #1
 800995a:	615e      	str	r6, [r3, #20]
 800995c:	6125      	str	r5, [r4, #16]
 800995e:	4620      	mov	r0, r4
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	0800c4bd 	.word	0x0800c4bd
 8009968:	0800c4ce 	.word	0x0800c4ce

0800996c <__s2b>:
 800996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009970:	4615      	mov	r5, r2
 8009972:	461f      	mov	r7, r3
 8009974:	2209      	movs	r2, #9
 8009976:	3308      	adds	r3, #8
 8009978:	460c      	mov	r4, r1
 800997a:	4606      	mov	r6, r0
 800997c:	2100      	movs	r1, #0
 800997e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009982:	2201      	movs	r2, #1
 8009984:	429a      	cmp	r2, r3
 8009986:	db09      	blt.n	800999c <__s2b+0x30>
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff ff45 	bl	8009818 <_Balloc>
 800998e:	b940      	cbnz	r0, 80099a2 <__s2b+0x36>
 8009990:	4602      	mov	r2, r0
 8009992:	4b19      	ldr	r3, [pc, #100]	@ (80099f8 <__s2b+0x8c>)
 8009994:	21d3      	movs	r1, #211	@ 0xd3
 8009996:	4819      	ldr	r0, [pc, #100]	@ (80099fc <__s2b+0x90>)
 8009998:	f001 fcb2 	bl	800b300 <__assert_func>
 800999c:	0052      	lsls	r2, r2, #1
 800999e:	3101      	adds	r1, #1
 80099a0:	e7f0      	b.n	8009984 <__s2b+0x18>
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	2d09      	cmp	r5, #9
 80099a6:	6143      	str	r3, [r0, #20]
 80099a8:	f04f 0301 	mov.w	r3, #1
 80099ac:	6103      	str	r3, [r0, #16]
 80099ae:	dd16      	ble.n	80099de <__s2b+0x72>
 80099b0:	f104 0909 	add.w	r9, r4, #9
 80099b4:	442c      	add	r4, r5
 80099b6:	46c8      	mov	r8, r9
 80099b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099bc:	4601      	mov	r1, r0
 80099be:	220a      	movs	r2, #10
 80099c0:	4630      	mov	r0, r6
 80099c2:	3b30      	subs	r3, #48	@ 0x30
 80099c4:	f7ff ff8a 	bl	80098dc <__multadd>
 80099c8:	45a0      	cmp	r8, r4
 80099ca:	d1f5      	bne.n	80099b8 <__s2b+0x4c>
 80099cc:	f1a5 0408 	sub.w	r4, r5, #8
 80099d0:	444c      	add	r4, r9
 80099d2:	1b2d      	subs	r5, r5, r4
 80099d4:	1963      	adds	r3, r4, r5
 80099d6:	42bb      	cmp	r3, r7
 80099d8:	db04      	blt.n	80099e4 <__s2b+0x78>
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	340a      	adds	r4, #10
 80099e0:	2509      	movs	r5, #9
 80099e2:	e7f6      	b.n	80099d2 <__s2b+0x66>
 80099e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099e8:	4601      	mov	r1, r0
 80099ea:	220a      	movs	r2, #10
 80099ec:	4630      	mov	r0, r6
 80099ee:	3b30      	subs	r3, #48	@ 0x30
 80099f0:	f7ff ff74 	bl	80098dc <__multadd>
 80099f4:	e7ee      	b.n	80099d4 <__s2b+0x68>
 80099f6:	bf00      	nop
 80099f8:	0800c4bd 	.word	0x0800c4bd
 80099fc:	0800c4ce 	.word	0x0800c4ce

08009a00 <__hi0bits>:
 8009a00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a04:	4603      	mov	r3, r0
 8009a06:	bf36      	itet	cc
 8009a08:	0403      	lslcc	r3, r0, #16
 8009a0a:	2000      	movcs	r0, #0
 8009a0c:	2010      	movcc	r0, #16
 8009a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a12:	bf3c      	itt	cc
 8009a14:	021b      	lslcc	r3, r3, #8
 8009a16:	3008      	addcc	r0, #8
 8009a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1c:	bf3c      	itt	cc
 8009a1e:	011b      	lslcc	r3, r3, #4
 8009a20:	3004      	addcc	r0, #4
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a26:	bf3c      	itt	cc
 8009a28:	009b      	lslcc	r3, r3, #2
 8009a2a:	3002      	addcc	r0, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db05      	blt.n	8009a3c <__hi0bits+0x3c>
 8009a30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a34:	f100 0001 	add.w	r0, r0, #1
 8009a38:	bf08      	it	eq
 8009a3a:	2020      	moveq	r0, #32
 8009a3c:	4770      	bx	lr

08009a3e <__lo0bits>:
 8009a3e:	6803      	ldr	r3, [r0, #0]
 8009a40:	4602      	mov	r2, r0
 8009a42:	f013 0007 	ands.w	r0, r3, #7
 8009a46:	d00b      	beq.n	8009a60 <__lo0bits+0x22>
 8009a48:	07d9      	lsls	r1, r3, #31
 8009a4a:	d421      	bmi.n	8009a90 <__lo0bits+0x52>
 8009a4c:	0798      	lsls	r0, r3, #30
 8009a4e:	bf47      	ittee	mi
 8009a50:	085b      	lsrmi	r3, r3, #1
 8009a52:	2001      	movmi	r0, #1
 8009a54:	089b      	lsrpl	r3, r3, #2
 8009a56:	2002      	movpl	r0, #2
 8009a58:	bf4c      	ite	mi
 8009a5a:	6013      	strmi	r3, [r2, #0]
 8009a5c:	6013      	strpl	r3, [r2, #0]
 8009a5e:	4770      	bx	lr
 8009a60:	b299      	uxth	r1, r3
 8009a62:	b909      	cbnz	r1, 8009a68 <__lo0bits+0x2a>
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	2010      	movs	r0, #16
 8009a68:	b2d9      	uxtb	r1, r3
 8009a6a:	b909      	cbnz	r1, 8009a70 <__lo0bits+0x32>
 8009a6c:	3008      	adds	r0, #8
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	0719      	lsls	r1, r3, #28
 8009a72:	bf04      	itt	eq
 8009a74:	091b      	lsreq	r3, r3, #4
 8009a76:	3004      	addeq	r0, #4
 8009a78:	0799      	lsls	r1, r3, #30
 8009a7a:	bf04      	itt	eq
 8009a7c:	089b      	lsreq	r3, r3, #2
 8009a7e:	3002      	addeq	r0, #2
 8009a80:	07d9      	lsls	r1, r3, #31
 8009a82:	d403      	bmi.n	8009a8c <__lo0bits+0x4e>
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	f100 0001 	add.w	r0, r0, #1
 8009a8a:	d003      	beq.n	8009a94 <__lo0bits+0x56>
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4770      	bx	lr
 8009a90:	2000      	movs	r0, #0
 8009a92:	4770      	bx	lr
 8009a94:	2020      	movs	r0, #32
 8009a96:	4770      	bx	lr

08009a98 <__i2b>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f7ff febb 	bl	8009818 <_Balloc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <__i2b+0x1a>
 8009aa6:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <__i2b+0x24>)
 8009aa8:	f240 1145 	movw	r1, #325	@ 0x145
 8009aac:	4804      	ldr	r0, [pc, #16]	@ (8009ac0 <__i2b+0x28>)
 8009aae:	f001 fc27 	bl	800b300 <__assert_func>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6144      	str	r4, [r0, #20]
 8009ab6:	6103      	str	r3, [r0, #16]
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	0800c4bd 	.word	0x0800c4bd
 8009ac0:	0800c4ce 	.word	0x0800c4ce

08009ac4 <__multiply>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4617      	mov	r7, r2
 8009aca:	690a      	ldr	r2, [r1, #16]
 8009acc:	4689      	mov	r9, r1
 8009ace:	b085      	sub	sp, #20
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	bfa2      	ittt	ge
 8009ad6:	463b      	movge	r3, r7
 8009ad8:	460f      	movge	r7, r1
 8009ada:	4699      	movge	r9, r3
 8009adc:	693d      	ldr	r5, [r7, #16]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	eb05 060a 	add.w	r6, r5, sl
 8009aea:	42b3      	cmp	r3, r6
 8009aec:	bfb8      	it	lt
 8009aee:	3101      	addlt	r1, #1
 8009af0:	f7ff fe92 	bl	8009818 <_Balloc>
 8009af4:	b930      	cbnz	r0, 8009b04 <__multiply+0x40>
 8009af6:	4602      	mov	r2, r0
 8009af8:	4b42      	ldr	r3, [pc, #264]	@ (8009c04 <__multiply+0x140>)
 8009afa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009afe:	4842      	ldr	r0, [pc, #264]	@ (8009c08 <__multiply+0x144>)
 8009b00:	f001 fbfe 	bl	800b300 <__assert_func>
 8009b04:	f100 0414 	add.w	r4, r0, #20
 8009b08:	2200      	movs	r2, #0
 8009b0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b0e:	4623      	mov	r3, r4
 8009b10:	4573      	cmp	r3, lr
 8009b12:	d320      	bcc.n	8009b56 <__multiply+0x92>
 8009b14:	f107 0814 	add.w	r8, r7, #20
 8009b18:	f109 0114 	add.w	r1, r9, #20
 8009b1c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b20:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b24:	9302      	str	r3, [sp, #8]
 8009b26:	1beb      	subs	r3, r5, r7
 8009b28:	3715      	adds	r7, #21
 8009b2a:	3b15      	subs	r3, #21
 8009b2c:	f023 0303 	bic.w	r3, r3, #3
 8009b30:	3304      	adds	r3, #4
 8009b32:	42bd      	cmp	r5, r7
 8009b34:	bf38      	it	cc
 8009b36:	2304      	movcc	r3, #4
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	9103      	str	r1, [sp, #12]
 8009b3e:	428b      	cmp	r3, r1
 8009b40:	d80c      	bhi.n	8009b5c <__multiply+0x98>
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	dd03      	ble.n	8009b4e <__multiply+0x8a>
 8009b46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d057      	beq.n	8009bfe <__multiply+0x13a>
 8009b4e:	6106      	str	r6, [r0, #16]
 8009b50:	b005      	add	sp, #20
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	f843 2b04 	str.w	r2, [r3], #4
 8009b5a:	e7d9      	b.n	8009b10 <__multiply+0x4c>
 8009b5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b60:	f1ba 0f00 	cmp.w	sl, #0
 8009b64:	d021      	beq.n	8009baa <__multiply+0xe6>
 8009b66:	46c4      	mov	ip, r8
 8009b68:	46a1      	mov	r9, r4
 8009b6a:	2700      	movs	r7, #0
 8009b6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b70:	f8d9 3000 	ldr.w	r3, [r9]
 8009b74:	fa1f fb82 	uxth.w	fp, r2
 8009b78:	4565      	cmp	r5, ip
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009b80:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b84:	443b      	add	r3, r7
 8009b86:	f8d9 7000 	ldr.w	r7, [r9]
 8009b8a:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8009b8e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ba0:	f849 3b04 	str.w	r3, [r9], #4
 8009ba4:	d8e2      	bhi.n	8009b6c <__multiply+0xa8>
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	50e7      	str	r7, [r4, r3]
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	3104      	adds	r1, #4
 8009bae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bb2:	f1b9 0f00 	cmp.w	r9, #0
 8009bb6:	d020      	beq.n	8009bfa <__multiply+0x136>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	4647      	mov	r7, r8
 8009bbc:	46a4      	mov	ip, r4
 8009bbe:	f04f 0a00 	mov.w	sl, #0
 8009bc2:	f8b7 b000 	ldrh.w	fp, [r7]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009bcc:	fb09 220b 	mla	r2, r9, fp, r2
 8009bd0:	4452      	add	r2, sl
 8009bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd6:	f84c 3b04 	str.w	r3, [ip], #4
 8009bda:	f857 3b04 	ldr.w	r3, [r7], #4
 8009bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009be2:	f8bc 3000 	ldrh.w	r3, [ip]
 8009be6:	42bd      	cmp	r5, r7
 8009be8:	fb09 330a 	mla	r3, r9, sl, r3
 8009bec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bf4:	d8e5      	bhi.n	8009bc2 <__multiply+0xfe>
 8009bf6:	9a01      	ldr	r2, [sp, #4]
 8009bf8:	50a3      	str	r3, [r4, r2]
 8009bfa:	3404      	adds	r4, #4
 8009bfc:	e79d      	b.n	8009b3a <__multiply+0x76>
 8009bfe:	3e01      	subs	r6, #1
 8009c00:	e79f      	b.n	8009b42 <__multiply+0x7e>
 8009c02:	bf00      	nop
 8009c04:	0800c4bd 	.word	0x0800c4bd
 8009c08:	0800c4ce 	.word	0x0800c4ce

08009c0c <__pow5mult>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	4615      	mov	r5, r2
 8009c12:	f012 0203 	ands.w	r2, r2, #3
 8009c16:	4607      	mov	r7, r0
 8009c18:	460e      	mov	r6, r1
 8009c1a:	d007      	beq.n	8009c2c <__pow5mult+0x20>
 8009c1c:	3a01      	subs	r2, #1
 8009c1e:	4c25      	ldr	r4, [pc, #148]	@ (8009cb4 <__pow5mult+0xa8>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c26:	f7ff fe59 	bl	80098dc <__multadd>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	10ad      	asrs	r5, r5, #2
 8009c2e:	d03d      	beq.n	8009cac <__pow5mult+0xa0>
 8009c30:	69fc      	ldr	r4, [r7, #28]
 8009c32:	b97c      	cbnz	r4, 8009c54 <__pow5mult+0x48>
 8009c34:	2010      	movs	r0, #16
 8009c36:	f7fd fe47 	bl	80078c8 <malloc>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	61f8      	str	r0, [r7, #28]
 8009c3e:	b928      	cbnz	r0, 8009c4c <__pow5mult+0x40>
 8009c40:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb8 <__pow5mult+0xac>)
 8009c42:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c46:	481d      	ldr	r0, [pc, #116]	@ (8009cbc <__pow5mult+0xb0>)
 8009c48:	f001 fb5a 	bl	800b300 <__assert_func>
 8009c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c50:	6004      	str	r4, [r0, #0]
 8009c52:	60c4      	str	r4, [r0, #12]
 8009c54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c5c:	b94c      	cbnz	r4, 8009c72 <__pow5mult+0x66>
 8009c5e:	f240 2171 	movw	r1, #625	@ 0x271
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7ff ff18 	bl	8009a98 <__i2b>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	f04f 0900 	mov.w	r9, #0
 8009c76:	07eb      	lsls	r3, r5, #31
 8009c78:	d50a      	bpl.n	8009c90 <__pow5mult+0x84>
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff ff20 	bl	8009ac4 <__multiply>
 8009c84:	4680      	mov	r8, r0
 8009c86:	4631      	mov	r1, r6
 8009c88:	4638      	mov	r0, r7
 8009c8a:	4646      	mov	r6, r8
 8009c8c:	f7ff fe04 	bl	8009898 <_Bfree>
 8009c90:	106d      	asrs	r5, r5, #1
 8009c92:	d00b      	beq.n	8009cac <__pow5mult+0xa0>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	b938      	cbnz	r0, 8009ca8 <__pow5mult+0x9c>
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ff11 	bl	8009ac4 <__multiply>
 8009ca2:	6020      	str	r0, [r4, #0]
 8009ca4:	f8c0 9000 	str.w	r9, [r0]
 8009ca8:	4604      	mov	r4, r0
 8009caa:	e7e4      	b.n	8009c76 <__pow5mult+0x6a>
 8009cac:	4630      	mov	r0, r6
 8009cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800c5e0 	.word	0x0800c5e0
 8009cb8:	0800c44e 	.word	0x0800c44e
 8009cbc:	0800c4ce 	.word	0x0800c4ce

08009cc0 <__lshift>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	4691      	mov	r9, r2
 8009cca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	6849      	ldr	r1, [r1, #4]
 8009cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cd6:	68a3      	ldr	r3, [r4, #8]
 8009cd8:	f108 0601 	add.w	r6, r8, #1
 8009cdc:	42b3      	cmp	r3, r6
 8009cde:	db0b      	blt.n	8009cf8 <__lshift+0x38>
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff fd99 	bl	8009818 <_Balloc>
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b948      	cbnz	r0, 8009cfe <__lshift+0x3e>
 8009cea:	4602      	mov	r2, r0
 8009cec:	4b28      	ldr	r3, [pc, #160]	@ (8009d90 <__lshift+0xd0>)
 8009cee:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cf2:	4828      	ldr	r0, [pc, #160]	@ (8009d94 <__lshift+0xd4>)
 8009cf4:	f001 fb04 	bl	800b300 <__assert_func>
 8009cf8:	3101      	adds	r1, #1
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	e7ee      	b.n	8009cdc <__lshift+0x1c>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f100 0114 	add.w	r1, r0, #20
 8009d04:	f100 0210 	add.w	r2, r0, #16
 8009d08:	4618      	mov	r0, r3
 8009d0a:	4553      	cmp	r3, sl
 8009d0c:	db33      	blt.n	8009d76 <__lshift+0xb6>
 8009d0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d12:	f104 0314 	add.w	r3, r4, #20
 8009d16:	6920      	ldr	r0, [r4, #16]
 8009d18:	f019 091f 	ands.w	r9, r9, #31
 8009d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d24:	d02b      	beq.n	8009d7e <__lshift+0xbe>
 8009d26:	f1c9 0e20 	rsb	lr, r9, #32
 8009d2a:	468a      	mov	sl, r1
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	fa00 f009 	lsl.w	r0, r0, r9
 8009d34:	4310      	orrs	r0, r2
 8009d36:	f84a 0b04 	str.w	r0, [sl], #4
 8009d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3e:	459c      	cmp	ip, r3
 8009d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d44:	d8f3      	bhi.n	8009d2e <__lshift+0x6e>
 8009d46:	ebac 0304 	sub.w	r3, ip, r4
 8009d4a:	f104 0015 	add.w	r0, r4, #21
 8009d4e:	3b15      	subs	r3, #21
 8009d50:	f023 0303 	bic.w	r3, r3, #3
 8009d54:	3304      	adds	r3, #4
 8009d56:	4560      	cmp	r0, ip
 8009d58:	bf88      	it	hi
 8009d5a:	2304      	movhi	r3, #4
 8009d5c:	50ca      	str	r2, [r1, r3]
 8009d5e:	b10a      	cbz	r2, 8009d64 <__lshift+0xa4>
 8009d60:	f108 0602 	add.w	r6, r8, #2
 8009d64:	3e01      	subs	r6, #1
 8009d66:	4638      	mov	r0, r7
 8009d68:	4621      	mov	r1, r4
 8009d6a:	612e      	str	r6, [r5, #16]
 8009d6c:	f7ff fd94 	bl	8009898 <_Bfree>
 8009d70:	4628      	mov	r0, r5
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d76:	3301      	adds	r3, #1
 8009d78:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d7c:	e7c5      	b.n	8009d0a <__lshift+0x4a>
 8009d7e:	3904      	subs	r1, #4
 8009d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d84:	459c      	cmp	ip, r3
 8009d86:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d8a:	d8f9      	bhi.n	8009d80 <__lshift+0xc0>
 8009d8c:	e7ea      	b.n	8009d64 <__lshift+0xa4>
 8009d8e:	bf00      	nop
 8009d90:	0800c4bd 	.word	0x0800c4bd
 8009d94:	0800c4ce 	.word	0x0800c4ce

08009d98 <__mcmp>:
 8009d98:	4603      	mov	r3, r0
 8009d9a:	690a      	ldr	r2, [r1, #16]
 8009d9c:	6900      	ldr	r0, [r0, #16]
 8009d9e:	1a80      	subs	r0, r0, r2
 8009da0:	b530      	push	{r4, r5, lr}
 8009da2:	d10e      	bne.n	8009dc2 <__mcmp+0x2a>
 8009da4:	3314      	adds	r3, #20
 8009da6:	3114      	adds	r1, #20
 8009da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009db8:	4295      	cmp	r5, r2
 8009dba:	d003      	beq.n	8009dc4 <__mcmp+0x2c>
 8009dbc:	d205      	bcs.n	8009dca <__mcmp+0x32>
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc2:	bd30      	pop	{r4, r5, pc}
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	d3f3      	bcc.n	8009db0 <__mcmp+0x18>
 8009dc8:	e7fb      	b.n	8009dc2 <__mcmp+0x2a>
 8009dca:	2001      	movs	r0, #1
 8009dcc:	e7f9      	b.n	8009dc2 <__mcmp+0x2a>
	...

08009dd0 <__mdiff>:
 8009dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4614      	mov	r4, r2
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f7ff ffdb 	bl	8009d98 <__mcmp>
 8009de2:	1e05      	subs	r5, r0, #0
 8009de4:	d112      	bne.n	8009e0c <__mdiff+0x3c>
 8009de6:	4629      	mov	r1, r5
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7ff fd15 	bl	8009818 <_Balloc>
 8009dee:	4602      	mov	r2, r0
 8009df0:	b928      	cbnz	r0, 8009dfe <__mdiff+0x2e>
 8009df2:	4b41      	ldr	r3, [pc, #260]	@ (8009ef8 <__mdiff+0x128>)
 8009df4:	f240 2137 	movw	r1, #567	@ 0x237
 8009df8:	4840      	ldr	r0, [pc, #256]	@ (8009efc <__mdiff+0x12c>)
 8009dfa:	f001 fa81 	bl	800b300 <__assert_func>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e04:	4610      	mov	r0, r2
 8009e06:	b003      	add	sp, #12
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	bfbc      	itt	lt
 8009e0e:	464b      	movlt	r3, r9
 8009e10:	46a1      	movlt	r9, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	bfb8      	it	lt
 8009e16:	2501      	movlt	r5, #1
 8009e18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e1c:	bfb4      	ite	lt
 8009e1e:	461c      	movlt	r4, r3
 8009e20:	2500      	movge	r5, #0
 8009e22:	f7ff fcf9 	bl	8009818 <_Balloc>
 8009e26:	4602      	mov	r2, r0
 8009e28:	b918      	cbnz	r0, 8009e32 <__mdiff+0x62>
 8009e2a:	4b33      	ldr	r3, [pc, #204]	@ (8009ef8 <__mdiff+0x128>)
 8009e2c:	f240 2145 	movw	r1, #581	@ 0x245
 8009e30:	e7e2      	b.n	8009df8 <__mdiff+0x28>
 8009e32:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e36:	f104 0e14 	add.w	lr, r4, #20
 8009e3a:	6926      	ldr	r6, [r4, #16]
 8009e3c:	f100 0b14 	add.w	fp, r0, #20
 8009e40:	60c5      	str	r5, [r0, #12]
 8009e42:	f109 0514 	add.w	r5, r9, #20
 8009e46:	f109 0310 	add.w	r3, r9, #16
 8009e4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e4e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e52:	46d9      	mov	r9, fp
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e60:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e64:	4576      	cmp	r6, lr
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	fa1f f38a 	uxth.w	r3, sl
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	b283      	uxth	r3, r0
 8009e70:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009e74:	eba1 0303 	sub.w	r3, r1, r3
 8009e78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e7c:	4463      	add	r3, ip
 8009e7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e8c:	f849 3b04 	str.w	r3, [r9], #4
 8009e90:	d8e3      	bhi.n	8009e5a <__mdiff+0x8a>
 8009e92:	1b33      	subs	r3, r6, r4
 8009e94:	3415      	adds	r4, #21
 8009e96:	3b15      	subs	r3, #21
 8009e98:	f023 0303 	bic.w	r3, r3, #3
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	42a6      	cmp	r6, r4
 8009ea0:	bf38      	it	cc
 8009ea2:	2304      	movcc	r3, #4
 8009ea4:	441d      	add	r5, r3
 8009ea6:	445b      	add	r3, fp
 8009ea8:	462c      	mov	r4, r5
 8009eaa:	461e      	mov	r6, r3
 8009eac:	4544      	cmp	r4, r8
 8009eae:	d30e      	bcc.n	8009ece <__mdiff+0xfe>
 8009eb0:	f108 0103 	add.w	r1, r8, #3
 8009eb4:	1b49      	subs	r1, r1, r5
 8009eb6:	3d03      	subs	r5, #3
 8009eb8:	f021 0103 	bic.w	r1, r1, #3
 8009ebc:	45a8      	cmp	r8, r5
 8009ebe:	bf38      	it	cc
 8009ec0:	2100      	movcc	r1, #0
 8009ec2:	440b      	add	r3, r1
 8009ec4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ec8:	b199      	cbz	r1, 8009ef2 <__mdiff+0x122>
 8009eca:	6117      	str	r7, [r2, #16]
 8009ecc:	e79a      	b.n	8009e04 <__mdiff+0x34>
 8009ece:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ed2:	46e6      	mov	lr, ip
 8009ed4:	fa1f fc81 	uxth.w	ip, r1
 8009ed8:	0c08      	lsrs	r0, r1, #16
 8009eda:	4471      	add	r1, lr
 8009edc:	44f4      	add	ip, lr
 8009ede:	b289      	uxth	r1, r1
 8009ee0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ee4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ee8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009eec:	f846 1b04 	str.w	r1, [r6], #4
 8009ef0:	e7dc      	b.n	8009eac <__mdiff+0xdc>
 8009ef2:	3f01      	subs	r7, #1
 8009ef4:	e7e6      	b.n	8009ec4 <__mdiff+0xf4>
 8009ef6:	bf00      	nop
 8009ef8:	0800c4bd 	.word	0x0800c4bd
 8009efc:	0800c4ce 	.word	0x0800c4ce

08009f00 <__ulp>:
 8009f00:	b082      	sub	sp, #8
 8009f02:	4b11      	ldr	r3, [pc, #68]	@ (8009f48 <__ulp+0x48>)
 8009f04:	ed8d 0b00 	vstr	d0, [sp]
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dc08      	bgt.n	8009f26 <__ulp+0x26>
 8009f14:	425b      	negs	r3, r3
 8009f16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f1e:	da04      	bge.n	8009f2a <__ulp+0x2a>
 8009f20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f24:	4113      	asrs	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	e008      	b.n	8009f3c <__ulp+0x3c>
 8009f2a:	f1a2 0314 	sub.w	r3, r2, #20
 8009f2e:	2b1e      	cmp	r3, #30
 8009f30:	bfd6      	itet	le
 8009f32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f36:	2201      	movgt	r2, #1
 8009f38:	40da      	lsrle	r2, r3
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	ec41 0b10 	vmov	d0, r0, r1
 8009f44:	b002      	add	sp, #8
 8009f46:	4770      	bx	lr
 8009f48:	7ff00000 	.word	0x7ff00000

08009f4c <__b2d>:
 8009f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f50:	6906      	ldr	r6, [r0, #16]
 8009f52:	f100 0814 	add.w	r8, r0, #20
 8009f56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f5a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f5e:	1f37      	subs	r7, r6, #4
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7ff fd4d 	bl	8009a00 <__hi0bits>
 8009f66:	f1c0 0320 	rsb	r3, r0, #32
 8009f6a:	280a      	cmp	r0, #10
 8009f6c:	600b      	str	r3, [r1, #0]
 8009f6e:	491d      	ldr	r1, [pc, #116]	@ (8009fe4 <__b2d+0x98>)
 8009f70:	dc16      	bgt.n	8009fa0 <__b2d+0x54>
 8009f72:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f76:	45b8      	cmp	r8, r7
 8009f78:	f100 0015 	add.w	r0, r0, #21
 8009f7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f80:	fa02 f000 	lsl.w	r0, r2, r0
 8009f84:	ea43 0501 	orr.w	r5, r3, r1
 8009f88:	bf34      	ite	cc
 8009f8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f8e:	2300      	movcs	r3, #0
 8009f90:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f94:	4303      	orrs	r3, r0
 8009f96:	461c      	mov	r4, r3
 8009f98:	ec45 4b10 	vmov	d0, r4, r5
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	45b8      	cmp	r8, r7
 8009fa2:	bf3a      	itte	cc
 8009fa4:	f1a6 0708 	subcc.w	r7, r6, #8
 8009fa8:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fac:	2300      	movcs	r3, #0
 8009fae:	380b      	subs	r0, #11
 8009fb0:	d014      	beq.n	8009fdc <__b2d+0x90>
 8009fb2:	f1c0 0120 	rsb	r1, r0, #32
 8009fb6:	4082      	lsls	r2, r0
 8009fb8:	4547      	cmp	r7, r8
 8009fba:	fa23 f401 	lsr.w	r4, r3, r1
 8009fbe:	fa03 f300 	lsl.w	r3, r3, r0
 8009fc2:	ea42 0204 	orr.w	r2, r2, r4
 8009fc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009fca:	bf8c      	ite	hi
 8009fcc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fd0:	2200      	movls	r2, #0
 8009fd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fd6:	40ca      	lsrs	r2, r1
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	e7dc      	b.n	8009f96 <__b2d+0x4a>
 8009fdc:	ea42 0501 	orr.w	r5, r2, r1
 8009fe0:	e7d9      	b.n	8009f96 <__b2d+0x4a>
 8009fe2:	bf00      	nop
 8009fe4:	3ff00000 	.word	0x3ff00000

08009fe8 <__d2b>:
 8009fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fec:	460f      	mov	r7, r1
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	ec59 8b10 	vmov	r8, r9, d0
 8009ff6:	f7ff fc0f 	bl	8009818 <_Balloc>
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	b930      	cbnz	r0, 800a00c <__d2b+0x24>
 8009ffe:	4602      	mov	r2, r0
 800a000:	4b23      	ldr	r3, [pc, #140]	@ (800a090 <__d2b+0xa8>)
 800a002:	f240 310f 	movw	r1, #783	@ 0x30f
 800a006:	4823      	ldr	r0, [pc, #140]	@ (800a094 <__d2b+0xac>)
 800a008:	f001 f97a 	bl	800b300 <__assert_func>
 800a00c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a014:	b10d      	cbz	r5, 800a01a <__d2b+0x32>
 800a016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	f1b8 0300 	subs.w	r3, r8, #0
 800a020:	d023      	beq.n	800a06a <__d2b+0x82>
 800a022:	4668      	mov	r0, sp
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	f7ff fd0a 	bl	8009a3e <__lo0bits>
 800a02a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a02e:	b1d0      	cbz	r0, 800a066 <__d2b+0x7e>
 800a030:	f1c0 0320 	rsb	r3, r0, #32
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	40c2      	lsrs	r2, r0
 800a03a:	430b      	orrs	r3, r1
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	6163      	str	r3, [r4, #20]
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	61a3      	str	r3, [r4, #24]
 800a046:	bf0c      	ite	eq
 800a048:	2201      	moveq	r2, #1
 800a04a:	2202      	movne	r2, #2
 800a04c:	6122      	str	r2, [r4, #16]
 800a04e:	b1a5      	cbz	r5, 800a07a <__d2b+0x92>
 800a050:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a054:	4405      	add	r5, r0
 800a056:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a05a:	603d      	str	r5, [r7, #0]
 800a05c:	6030      	str	r0, [r6, #0]
 800a05e:	4620      	mov	r0, r4
 800a060:	b003      	add	sp, #12
 800a062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a066:	6161      	str	r1, [r4, #20]
 800a068:	e7ea      	b.n	800a040 <__d2b+0x58>
 800a06a:	a801      	add	r0, sp, #4
 800a06c:	f7ff fce7 	bl	8009a3e <__lo0bits>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	3020      	adds	r0, #32
 800a074:	2201      	movs	r2, #1
 800a076:	6163      	str	r3, [r4, #20]
 800a078:	e7e8      	b.n	800a04c <__d2b+0x64>
 800a07a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a07e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a082:	6038      	str	r0, [r7, #0]
 800a084:	6918      	ldr	r0, [r3, #16]
 800a086:	f7ff fcbb 	bl	8009a00 <__hi0bits>
 800a08a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a08e:	e7e5      	b.n	800a05c <__d2b+0x74>
 800a090:	0800c4bd 	.word	0x0800c4bd
 800a094:	0800c4ce 	.word	0x0800c4ce

0800a098 <__ratio>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	b085      	sub	sp, #20
 800a09e:	e9cd 1000 	strd	r1, r0, [sp]
 800a0a2:	a902      	add	r1, sp, #8
 800a0a4:	f7ff ff52 	bl	8009f4c <__b2d>
 800a0a8:	a903      	add	r1, sp, #12
 800a0aa:	9800      	ldr	r0, [sp, #0]
 800a0ac:	ec55 4b10 	vmov	r4, r5, d0
 800a0b0:	f7ff ff4c 	bl	8009f4c <__b2d>
 800a0b4:	9b01      	ldr	r3, [sp, #4]
 800a0b6:	462f      	mov	r7, r5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	6919      	ldr	r1, [r3, #16]
 800a0bc:	9b00      	ldr	r3, [sp, #0]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	1ac9      	subs	r1, r1, r3
 800a0c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0c6:	ec5b ab10 	vmov	sl, fp, d0
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	46d9      	mov	r9, fp
 800a0ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfcd      	iteet	gt
 800a0d6:	462a      	movgt	r2, r5
 800a0d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0dc:	465a      	movle	r2, fp
 800a0de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0e2:	bfd8      	it	le
 800a0e4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	464b      	mov	r3, r9
 800a0ee:	f7f6 fbb1 	bl	8000854 <__aeabi_ddiv>
 800a0f2:	ec41 0b10 	vmov	d0, r0, r1
 800a0f6:	b005      	add	sp, #20
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0fc <__copybits>:
 800a0fc:	3901      	subs	r1, #1
 800a0fe:	f102 0314 	add.w	r3, r2, #20
 800a102:	1149      	asrs	r1, r1, #5
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	3101      	adds	r1, #1
 800a108:	6914      	ldr	r4, [r2, #16]
 800a10a:	1f05      	subs	r5, r0, #4
 800a10c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a110:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a114:	42a3      	cmp	r3, r4
 800a116:	d30c      	bcc.n	800a132 <__copybits+0x36>
 800a118:	1aa3      	subs	r3, r4, r2
 800a11a:	3211      	adds	r2, #17
 800a11c:	3b11      	subs	r3, #17
 800a11e:	f023 0303 	bic.w	r3, r3, #3
 800a122:	42a2      	cmp	r2, r4
 800a124:	bf88      	it	hi
 800a126:	2300      	movhi	r3, #0
 800a128:	4418      	add	r0, r3
 800a12a:	2300      	movs	r3, #0
 800a12c:	4288      	cmp	r0, r1
 800a12e:	d305      	bcc.n	800a13c <__copybits+0x40>
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	f853 6b04 	ldr.w	r6, [r3], #4
 800a136:	f845 6f04 	str.w	r6, [r5, #4]!
 800a13a:	e7eb      	b.n	800a114 <__copybits+0x18>
 800a13c:	f840 3b04 	str.w	r3, [r0], #4
 800a140:	e7f4      	b.n	800a12c <__copybits+0x30>

0800a142 <__any_on>:
 800a142:	f100 0214 	add.w	r2, r0, #20
 800a146:	114b      	asrs	r3, r1, #5
 800a148:	6900      	ldr	r0, [r0, #16]
 800a14a:	4298      	cmp	r0, r3
 800a14c:	b510      	push	{r4, lr}
 800a14e:	db11      	blt.n	800a174 <__any_on+0x32>
 800a150:	dd0a      	ble.n	800a168 <__any_on+0x26>
 800a152:	f011 011f 	ands.w	r1, r1, #31
 800a156:	d007      	beq.n	800a168 <__any_on+0x26>
 800a158:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a15c:	fa24 f001 	lsr.w	r0, r4, r1
 800a160:	fa00 f101 	lsl.w	r1, r0, r1
 800a164:	428c      	cmp	r4, r1
 800a166:	d10b      	bne.n	800a180 <__any_on+0x3e>
 800a168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d803      	bhi.n	800a178 <__any_on+0x36>
 800a170:	2000      	movs	r0, #0
 800a172:	bd10      	pop	{r4, pc}
 800a174:	4603      	mov	r3, r0
 800a176:	e7f7      	b.n	800a168 <__any_on+0x26>
 800a178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d0f5      	beq.n	800a16c <__any_on+0x2a>
 800a180:	2001      	movs	r0, #1
 800a182:	e7f6      	b.n	800a172 <__any_on+0x30>

0800a184 <sulp>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	4616      	mov	r6, r2
 800a18c:	ec45 4b10 	vmov	d0, r4, r5
 800a190:	f7ff feb6 	bl	8009f00 <__ulp>
 800a194:	ec51 0b10 	vmov	r0, r1, d0
 800a198:	b17e      	cbz	r6, 800a1ba <sulp+0x36>
 800a19a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a19e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dd09      	ble.n	800a1ba <sulp+0x36>
 800a1a6:	051b      	lsls	r3, r3, #20
 800a1a8:	2400      	movs	r4, #0
 800a1aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	f7f6 fa23 	bl	8000600 <__aeabi_dmul>
 800a1ba:	ec41 0b10 	vmov	d0, r0, r1
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <_strtod_l>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	b09f      	sub	sp, #124	@ 0x7c
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f04f 0a00 	mov.w	sl, #0
 800a1cc:	f04f 0b00 	mov.w	fp, #0
 800a1d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	9005      	str	r0, [sp, #20]
 800a1d6:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1d8:	460a      	mov	r2, r1
 800a1da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1dc:	7811      	ldrb	r1, [r2, #0]
 800a1de:	292b      	cmp	r1, #43	@ 0x2b
 800a1e0:	d04a      	beq.n	800a278 <_strtod_l+0xb8>
 800a1e2:	d838      	bhi.n	800a256 <_strtod_l+0x96>
 800a1e4:	290d      	cmp	r1, #13
 800a1e6:	d832      	bhi.n	800a24e <_strtod_l+0x8e>
 800a1e8:	2908      	cmp	r1, #8
 800a1ea:	d832      	bhi.n	800a252 <_strtod_l+0x92>
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	d03b      	beq.n	800a268 <_strtod_l+0xa8>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1f6:	782a      	ldrb	r2, [r5, #0]
 800a1f8:	2a30      	cmp	r2, #48	@ 0x30
 800a1fa:	f040 80b2 	bne.w	800a362 <_strtod_l+0x1a2>
 800a1fe:	786a      	ldrb	r2, [r5, #1]
 800a200:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a204:	2a58      	cmp	r2, #88	@ 0x58
 800a206:	d16e      	bne.n	800a2e6 <_strtod_l+0x126>
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	a919      	add	r1, sp, #100	@ 0x64
 800a20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20e:	4a90      	ldr	r2, [pc, #576]	@ (800a450 <_strtod_l+0x290>)
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	ab1a      	add	r3, sp, #104	@ 0x68
 800a214:	9805      	ldr	r0, [sp, #20]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a21a:	f001 f909 	bl	800b430 <__gethex>
 800a21e:	f010 060f 	ands.w	r6, r0, #15
 800a222:	4604      	mov	r4, r0
 800a224:	d005      	beq.n	800a232 <_strtod_l+0x72>
 800a226:	2e06      	cmp	r6, #6
 800a228:	d128      	bne.n	800a27c <_strtod_l+0xbc>
 800a22a:	3501      	adds	r5, #1
 800a22c:	2300      	movs	r3, #0
 800a22e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a230:	930e      	str	r3, [sp, #56]	@ 0x38
 800a232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a234:	2b00      	cmp	r3, #0
 800a236:	f040 858e 	bne.w	800ad56 <_strtod_l+0xb96>
 800a23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23c:	b1cb      	cbz	r3, 800a272 <_strtod_l+0xb2>
 800a23e:	4652      	mov	r2, sl
 800a240:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a244:	ec43 2b10 	vmov	d0, r2, r3
 800a248:	b01f      	add	sp, #124	@ 0x7c
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	2920      	cmp	r1, #32
 800a250:	d1ce      	bne.n	800a1f0 <_strtod_l+0x30>
 800a252:	3201      	adds	r2, #1
 800a254:	e7c1      	b.n	800a1da <_strtod_l+0x1a>
 800a256:	292d      	cmp	r1, #45	@ 0x2d
 800a258:	d1ca      	bne.n	800a1f0 <_strtod_l+0x30>
 800a25a:	2101      	movs	r1, #1
 800a25c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a25e:	1c51      	adds	r1, r2, #1
 800a260:	9119      	str	r1, [sp, #100]	@ 0x64
 800a262:	7852      	ldrb	r2, [r2, #1]
 800a264:	2a00      	cmp	r2, #0
 800a266:	d1c5      	bne.n	800a1f4 <_strtod_l+0x34>
 800a268:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a26a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f040 8570 	bne.w	800ad52 <_strtod_l+0xb92>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	e7e5      	b.n	800a244 <_strtod_l+0x84>
 800a278:	2100      	movs	r1, #0
 800a27a:	e7ef      	b.n	800a25c <_strtod_l+0x9c>
 800a27c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a27e:	b13a      	cbz	r2, 800a290 <_strtod_l+0xd0>
 800a280:	2135      	movs	r1, #53	@ 0x35
 800a282:	a81c      	add	r0, sp, #112	@ 0x70
 800a284:	f7ff ff3a 	bl	800a0fc <__copybits>
 800a288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a28a:	9805      	ldr	r0, [sp, #20]
 800a28c:	f7ff fb04 	bl	8009898 <_Bfree>
 800a290:	3e01      	subs	r6, #1
 800a292:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a294:	2e04      	cmp	r6, #4
 800a296:	d806      	bhi.n	800a2a6 <_strtod_l+0xe6>
 800a298:	e8df f006 	tbb	[pc, r6]
 800a29c:	201d0314 	.word	0x201d0314
 800a2a0:	14          	.byte	0x14
 800a2a1:	00          	.byte	0x00
 800a2a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a2a6:	05e1      	lsls	r1, r4, #23
 800a2a8:	bf48      	it	mi
 800a2aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a2ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2b2:	0d1b      	lsrs	r3, r3, #20
 800a2b4:	051b      	lsls	r3, r3, #20
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1bb      	bne.n	800a232 <_strtod_l+0x72>
 800a2ba:	f7fe fbb3 	bl	8008a24 <__errno>
 800a2be:	2322      	movs	r3, #34	@ 0x22
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	e7b6      	b.n	800a232 <_strtod_l+0x72>
 800a2c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2d4:	e7e7      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a458 <_strtod_l+0x298>
 800a2da:	e7e4      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2e0:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e4:	e7df      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b30      	cmp	r3, #48	@ 0x30
 800a2f0:	d0f9      	beq.n	800a2e6 <_strtod_l+0x126>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d09d      	beq.n	800a232 <_strtod_l+0x72>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	2700      	movs	r7, #0
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	220a      	movs	r2, #10
 800a2fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a300:	46b9      	mov	r9, r7
 800a302:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a304:	930c      	str	r3, [sp, #48]	@ 0x30
 800a306:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a308:	7805      	ldrb	r5, [r0, #0]
 800a30a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a30e:	b2d9      	uxtb	r1, r3
 800a310:	2909      	cmp	r1, #9
 800a312:	d928      	bls.n	800a366 <_strtod_l+0x1a6>
 800a314:	2201      	movs	r2, #1
 800a316:	494f      	ldr	r1, [pc, #316]	@ (800a454 <_strtod_l+0x294>)
 800a318:	f000 ffd6 	bl	800b2c8 <strncmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d032      	beq.n	800a386 <_strtod_l+0x1c6>
 800a320:	2000      	movs	r0, #0
 800a322:	462a      	mov	r2, r5
 800a324:	464d      	mov	r5, r9
 800a326:	4603      	mov	r3, r0
 800a328:	900a      	str	r0, [sp, #40]	@ 0x28
 800a32a:	2a65      	cmp	r2, #101	@ 0x65
 800a32c:	d001      	beq.n	800a332 <_strtod_l+0x172>
 800a32e:	2a45      	cmp	r2, #69	@ 0x45
 800a330:	d114      	bne.n	800a35c <_strtod_l+0x19c>
 800a332:	b91d      	cbnz	r5, 800a33c <_strtod_l+0x17c>
 800a334:	9a08      	ldr	r2, [sp, #32]
 800a336:	4302      	orrs	r2, r0
 800a338:	d096      	beq.n	800a268 <_strtod_l+0xa8>
 800a33a:	2500      	movs	r5, #0
 800a33c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a33e:	1c62      	adds	r2, r4, #1
 800a340:	9219      	str	r2, [sp, #100]	@ 0x64
 800a342:	7862      	ldrb	r2, [r4, #1]
 800a344:	2a2b      	cmp	r2, #43	@ 0x2b
 800a346:	d079      	beq.n	800a43c <_strtod_l+0x27c>
 800a348:	2a2d      	cmp	r2, #45	@ 0x2d
 800a34a:	d07d      	beq.n	800a448 <_strtod_l+0x288>
 800a34c:	f04f 0c00 	mov.w	ip, #0
 800a350:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a354:	2909      	cmp	r1, #9
 800a356:	f240 8085 	bls.w	800a464 <_strtod_l+0x2a4>
 800a35a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a35c:	f04f 0800 	mov.w	r8, #0
 800a360:	e0a5      	b.n	800a4ae <_strtod_l+0x2ee>
 800a362:	2300      	movs	r3, #0
 800a364:	e7c8      	b.n	800a2f8 <_strtod_l+0x138>
 800a366:	f1b9 0f08 	cmp.w	r9, #8
 800a36a:	f100 0001 	add.w	r0, r0, #1
 800a36e:	f109 0901 	add.w	r9, r9, #1
 800a372:	bfd4      	ite	le
 800a374:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a376:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a37a:	9019      	str	r0, [sp, #100]	@ 0x64
 800a37c:	bfdc      	itt	le
 800a37e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a382:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a384:	e7bf      	b.n	800a306 <_strtod_l+0x146>
 800a386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a38c:	785a      	ldrb	r2, [r3, #1]
 800a38e:	f1b9 0f00 	cmp.w	r9, #0
 800a392:	d03a      	beq.n	800a40a <_strtod_l+0x24a>
 800a394:	464d      	mov	r5, r9
 800a396:	900a      	str	r0, [sp, #40]	@ 0x28
 800a398:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a39c:	2b09      	cmp	r3, #9
 800a39e:	d912      	bls.n	800a3c6 <_strtod_l+0x206>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7c2      	b.n	800a32a <_strtod_l+0x16a>
 800a3a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3ac:	785a      	ldrb	r2, [r3, #1]
 800a3ae:	2a30      	cmp	r2, #48	@ 0x30
 800a3b0:	d0f8      	beq.n	800a3a4 <_strtod_l+0x1e4>
 800a3b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	f200 84d2 	bhi.w	800ad60 <_strtod_l+0xba0>
 800a3bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3be:	2000      	movs	r0, #0
 800a3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3c6:	3a30      	subs	r2, #48	@ 0x30
 800a3c8:	f100 0301 	add.w	r3, r0, #1
 800a3cc:	d017      	beq.n	800a3fe <_strtod_l+0x23e>
 800a3ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3d0:	462e      	mov	r6, r5
 800a3d2:	f04f 0e0a 	mov.w	lr, #10
 800a3d6:	4419      	add	r1, r3
 800a3d8:	910a      	str	r1, [sp, #40]	@ 0x28
 800a3da:	1c71      	adds	r1, r6, #1
 800a3dc:	eba1 0c05 	sub.w	ip, r1, r5
 800a3e0:	4563      	cmp	r3, ip
 800a3e2:	dc14      	bgt.n	800a40e <_strtod_l+0x24e>
 800a3e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a3e8:	182b      	adds	r3, r5, r0
 800a3ea:	3501      	adds	r5, #1
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	4405      	add	r5, r0
 800a3f0:	dc1a      	bgt.n	800a428 <_strtod_l+0x268>
 800a3f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3f4:	230a      	movs	r3, #10
 800a3f6:	fb03 2301 	mla	r3, r3, r1, r2
 800a3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a400:	4618      	mov	r0, r3
 800a402:	1c51      	adds	r1, r2, #1
 800a404:	9119      	str	r1, [sp, #100]	@ 0x64
 800a406:	7852      	ldrb	r2, [r2, #1]
 800a408:	e7c6      	b.n	800a398 <_strtod_l+0x1d8>
 800a40a:	4648      	mov	r0, r9
 800a40c:	e7cf      	b.n	800a3ae <_strtod_l+0x1ee>
 800a40e:	2e08      	cmp	r6, #8
 800a410:	dc05      	bgt.n	800a41e <_strtod_l+0x25e>
 800a412:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a414:	fb0e f606 	mul.w	r6, lr, r6
 800a418:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a41a:	460e      	mov	r6, r1
 800a41c:	e7dd      	b.n	800a3da <_strtod_l+0x21a>
 800a41e:	2910      	cmp	r1, #16
 800a420:	bfd8      	it	le
 800a422:	fb0e f707 	mulle.w	r7, lr, r7
 800a426:	e7f8      	b.n	800a41a <_strtod_l+0x25a>
 800a428:	2b0f      	cmp	r3, #15
 800a42a:	bfdc      	itt	le
 800a42c:	230a      	movle	r3, #10
 800a42e:	fb03 2707 	mlale	r7, r3, r7, r2
 800a432:	e7e3      	b.n	800a3fc <_strtod_l+0x23c>
 800a434:	2300      	movs	r3, #0
 800a436:	930a      	str	r3, [sp, #40]	@ 0x28
 800a438:	2301      	movs	r3, #1
 800a43a:	e77b      	b.n	800a334 <_strtod_l+0x174>
 800a43c:	f04f 0c00 	mov.w	ip, #0
 800a440:	1ca2      	adds	r2, r4, #2
 800a442:	9219      	str	r2, [sp, #100]	@ 0x64
 800a444:	78a2      	ldrb	r2, [r4, #2]
 800a446:	e783      	b.n	800a350 <_strtod_l+0x190>
 800a448:	f04f 0c01 	mov.w	ip, #1
 800a44c:	e7f8      	b.n	800a440 <_strtod_l+0x280>
 800a44e:	bf00      	nop
 800a450:	0800c6f4 	.word	0x0800c6f4
 800a454:	0800c527 	.word	0x0800c527
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a45e:	1c51      	adds	r1, r2, #1
 800a460:	9119      	str	r1, [sp, #100]	@ 0x64
 800a462:	7852      	ldrb	r2, [r2, #1]
 800a464:	2a30      	cmp	r2, #48	@ 0x30
 800a466:	d0f9      	beq.n	800a45c <_strtod_l+0x29c>
 800a468:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a46c:	2908      	cmp	r1, #8
 800a46e:	f63f af75 	bhi.w	800a35c <_strtod_l+0x19c>
 800a472:	3a30      	subs	r2, #48	@ 0x30
 800a474:	f04f 080a 	mov.w	r8, #10
 800a478:	9209      	str	r2, [sp, #36]	@ 0x24
 800a47a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a47c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a47e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a480:	1c56      	adds	r6, r2, #1
 800a482:	9619      	str	r6, [sp, #100]	@ 0x64
 800a484:	7852      	ldrb	r2, [r2, #1]
 800a486:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a48a:	f1be 0f09 	cmp.w	lr, #9
 800a48e:	d939      	bls.n	800a504 <_strtod_l+0x344>
 800a490:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a492:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a496:	1a76      	subs	r6, r6, r1
 800a498:	2e08      	cmp	r6, #8
 800a49a:	dc03      	bgt.n	800a4a4 <_strtod_l+0x2e4>
 800a49c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a49e:	4588      	cmp	r8, r1
 800a4a0:	bfa8      	it	ge
 800a4a2:	4688      	movge	r8, r1
 800a4a4:	f1bc 0f00 	cmp.w	ip, #0
 800a4a8:	d001      	beq.n	800a4ae <_strtod_l+0x2ee>
 800a4aa:	f1c8 0800 	rsb	r8, r8, #0
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	d14e      	bne.n	800a550 <_strtod_l+0x390>
 800a4b2:	9908      	ldr	r1, [sp, #32]
 800a4b4:	4308      	orrs	r0, r1
 800a4b6:	f47f aebc 	bne.w	800a232 <_strtod_l+0x72>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f47f aed4 	bne.w	800a268 <_strtod_l+0xa8>
 800a4c0:	2a69      	cmp	r2, #105	@ 0x69
 800a4c2:	d028      	beq.n	800a516 <_strtod_l+0x356>
 800a4c4:	dc25      	bgt.n	800a512 <_strtod_l+0x352>
 800a4c6:	2a49      	cmp	r2, #73	@ 0x49
 800a4c8:	d025      	beq.n	800a516 <_strtod_l+0x356>
 800a4ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4cc:	f47f aecc 	bne.w	800a268 <_strtod_l+0xa8>
 800a4d0:	499a      	ldr	r1, [pc, #616]	@ (800a73c <_strtod_l+0x57c>)
 800a4d2:	a819      	add	r0, sp, #100	@ 0x64
 800a4d4:	f001 f9cc 	bl	800b870 <__match>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f43f aec5 	beq.w	800a268 <_strtod_l+0xa8>
 800a4de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b28      	cmp	r3, #40	@ 0x28
 800a4e4:	d12e      	bne.n	800a544 <_strtod_l+0x384>
 800a4e6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4e8:	4995      	ldr	r1, [pc, #596]	@ (800a740 <_strtod_l+0x580>)
 800a4ea:	a819      	add	r0, sp, #100	@ 0x64
 800a4ec:	f001 f9d4 	bl	800b898 <__hexnan>
 800a4f0:	2805      	cmp	r0, #5
 800a4f2:	d127      	bne.n	800a544 <_strtod_l+0x384>
 800a4f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a502:	e696      	b.n	800a232 <_strtod_l+0x72>
 800a504:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a506:	fb08 2101 	mla	r1, r8, r1, r2
 800a50a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a50e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a510:	e7b5      	b.n	800a47e <_strtod_l+0x2be>
 800a512:	2a6e      	cmp	r2, #110	@ 0x6e
 800a514:	e7da      	b.n	800a4cc <_strtod_l+0x30c>
 800a516:	498b      	ldr	r1, [pc, #556]	@ (800a744 <_strtod_l+0x584>)
 800a518:	a819      	add	r0, sp, #100	@ 0x64
 800a51a:	f001 f9a9 	bl	800b870 <__match>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f aea2 	beq.w	800a268 <_strtod_l+0xa8>
 800a524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a526:	a819      	add	r0, sp, #100	@ 0x64
 800a528:	4987      	ldr	r1, [pc, #540]	@ (800a748 <_strtod_l+0x588>)
 800a52a:	3b01      	subs	r3, #1
 800a52c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a52e:	f001 f99f 	bl	800b870 <__match>
 800a532:	b910      	cbnz	r0, 800a53a <_strtod_l+0x37a>
 800a534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a536:	3301      	adds	r3, #1
 800a538:	9319      	str	r3, [sp, #100]	@ 0x64
 800a53a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a758 <_strtod_l+0x598>
 800a53e:	f04f 0a00 	mov.w	sl, #0
 800a542:	e676      	b.n	800a232 <_strtod_l+0x72>
 800a544:	4881      	ldr	r0, [pc, #516]	@ (800a74c <_strtod_l+0x58c>)
 800a546:	f000 fed3 	bl	800b2f0 <nan>
 800a54a:	ec5b ab10 	vmov	sl, fp, d0
 800a54e:	e670      	b.n	800a232 <_strtod_l+0x72>
 800a550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a552:	f1b9 0f00 	cmp.w	r9, #0
 800a556:	bf08      	it	eq
 800a558:	46a9      	moveq	r9, r5
 800a55a:	2d10      	cmp	r5, #16
 800a55c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a55e:	eba8 0303 	sub.w	r3, r8, r3
 800a562:	462c      	mov	r4, r5
 800a564:	bfa8      	it	ge
 800a566:	2410      	movge	r4, #16
 800a568:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56a:	f7f5 ffcf 	bl	800050c <__aeabi_ui2d>
 800a56e:	2d09      	cmp	r5, #9
 800a570:	4682      	mov	sl, r0
 800a572:	468b      	mov	fp, r1
 800a574:	dc13      	bgt.n	800a59e <_strtod_l+0x3de>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f43f ae5a 	beq.w	800a232 <_strtod_l+0x72>
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	dd78      	ble.n	800a674 <_strtod_l+0x4b4>
 800a582:	2b16      	cmp	r3, #22
 800a584:	dc5f      	bgt.n	800a646 <_strtod_l+0x486>
 800a586:	4972      	ldr	r1, [pc, #456]	@ (800a750 <_strtod_l+0x590>)
 800a588:	4652      	mov	r2, sl
 800a58a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a58e:	465b      	mov	r3, fp
 800a590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a594:	f7f6 f834 	bl	8000600 <__aeabi_dmul>
 800a598:	4682      	mov	sl, r0
 800a59a:	468b      	mov	fp, r1
 800a59c:	e649      	b.n	800a232 <_strtod_l+0x72>
 800a59e:	4b6c      	ldr	r3, [pc, #432]	@ (800a750 <_strtod_l+0x590>)
 800a5a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a5a8:	f7f6 f82a 	bl	8000600 <__aeabi_dmul>
 800a5ac:	4682      	mov	sl, r0
 800a5ae:	468b      	mov	fp, r1
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7f5 ffab 	bl	800050c <__aeabi_ui2d>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	f7f5 fe69 	bl	8000294 <__adddf3>
 800a5c2:	2d0f      	cmp	r5, #15
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	468b      	mov	fp, r1
 800a5c8:	ddd5      	ble.n	800a576 <_strtod_l+0x3b6>
 800a5ca:	1b2c      	subs	r4, r5, r4
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	441c      	add	r4, r3
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	f340 8093 	ble.w	800a6fc <_strtod_l+0x53c>
 800a5d6:	f014 030f 	ands.w	r3, r4, #15
 800a5da:	d00a      	beq.n	800a5f2 <_strtod_l+0x432>
 800a5dc:	495c      	ldr	r1, [pc, #368]	@ (800a750 <_strtod_l+0x590>)
 800a5de:	4652      	mov	r2, sl
 800a5e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ea:	f7f6 f809 	bl	8000600 <__aeabi_dmul>
 800a5ee:	4682      	mov	sl, r0
 800a5f0:	468b      	mov	fp, r1
 800a5f2:	f034 040f 	bics.w	r4, r4, #15
 800a5f6:	d073      	beq.n	800a6e0 <_strtod_l+0x520>
 800a5f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5fc:	dd49      	ble.n	800a692 <_strtod_l+0x4d2>
 800a5fe:	2400      	movs	r4, #0
 800a600:	46a0      	mov	r8, r4
 800a602:	46a1      	mov	r9, r4
 800a604:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a606:	2322      	movs	r3, #34	@ 0x22
 800a608:	9a05      	ldr	r2, [sp, #20]
 800a60a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a758 <_strtod_l+0x598>
 800a60e:	f04f 0a00 	mov.w	sl, #0
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a616:	2b00      	cmp	r3, #0
 800a618:	f43f ae0b 	beq.w	800a232 <_strtod_l+0x72>
 800a61c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	f7ff f93a 	bl	8009898 <_Bfree>
 800a624:	4649      	mov	r1, r9
 800a626:	9805      	ldr	r0, [sp, #20]
 800a628:	f7ff f936 	bl	8009898 <_Bfree>
 800a62c:	4641      	mov	r1, r8
 800a62e:	9805      	ldr	r0, [sp, #20]
 800a630:	f7ff f932 	bl	8009898 <_Bfree>
 800a634:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a636:	9805      	ldr	r0, [sp, #20]
 800a638:	f7ff f92e 	bl	8009898 <_Bfree>
 800a63c:	4621      	mov	r1, r4
 800a63e:	9805      	ldr	r0, [sp, #20]
 800a640:	f7ff f92a 	bl	8009898 <_Bfree>
 800a644:	e5f5      	b.n	800a232 <_strtod_l+0x72>
 800a646:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a64a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a64c:	4293      	cmp	r3, r2
 800a64e:	dbbc      	blt.n	800a5ca <_strtod_l+0x40a>
 800a650:	f1c5 050f 	rsb	r5, r5, #15
 800a654:	4c3e      	ldr	r4, [pc, #248]	@ (800a750 <_strtod_l+0x590>)
 800a656:	4652      	mov	r2, sl
 800a658:	465b      	mov	r3, fp
 800a65a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a662:	f7f5 ffcd 	bl	8000600 <__aeabi_dmul>
 800a666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a668:	1b5d      	subs	r5, r3, r5
 800a66a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a66e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a672:	e78f      	b.n	800a594 <_strtod_l+0x3d4>
 800a674:	3316      	adds	r3, #22
 800a676:	dba8      	blt.n	800a5ca <_strtod_l+0x40a>
 800a678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a67a:	4650      	mov	r0, sl
 800a67c:	4659      	mov	r1, fp
 800a67e:	eba3 0808 	sub.w	r8, r3, r8
 800a682:	4b33      	ldr	r3, [pc, #204]	@ (800a750 <_strtod_l+0x590>)
 800a684:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a688:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a68c:	f7f6 f8e2 	bl	8000854 <__aeabi_ddiv>
 800a690:	e782      	b.n	800a598 <_strtod_l+0x3d8>
 800a692:	2300      	movs	r3, #0
 800a694:	1124      	asrs	r4, r4, #4
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	4f2e      	ldr	r7, [pc, #184]	@ (800a754 <_strtod_l+0x594>)
 800a69c:	461e      	mov	r6, r3
 800a69e:	2c01      	cmp	r4, #1
 800a6a0:	dc21      	bgt.n	800a6e6 <_strtod_l+0x526>
 800a6a2:	b10b      	cbz	r3, 800a6a8 <_strtod_l+0x4e8>
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	468b      	mov	fp, r1
 800a6a8:	492a      	ldr	r1, [pc, #168]	@ (800a754 <_strtod_l+0x594>)
 800a6aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a6ae:	4652      	mov	r2, sl
 800a6b0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a6b4:	465b      	mov	r3, fp
 800a6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ba:	f7f5 ffa1 	bl	8000600 <__aeabi_dmul>
 800a6be:	4b26      	ldr	r3, [pc, #152]	@ (800a758 <_strtod_l+0x598>)
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	400b      	ands	r3, r1
 800a6c6:	4925      	ldr	r1, [pc, #148]	@ (800a75c <_strtod_l+0x59c>)
 800a6c8:	428b      	cmp	r3, r1
 800a6ca:	d898      	bhi.n	800a5fe <_strtod_l+0x43e>
 800a6cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	bf86      	itte	hi
 800a6d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a760 <_strtod_l+0x5a0>
 800a6d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a6dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9308      	str	r3, [sp, #32]
 800a6e4:	e076      	b.n	800a7d4 <_strtod_l+0x614>
 800a6e6:	07e2      	lsls	r2, r4, #31
 800a6e8:	d504      	bpl.n	800a6f4 <_strtod_l+0x534>
 800a6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ee:	f7f5 ff87 	bl	8000600 <__aeabi_dmul>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	1064      	asrs	r4, r4, #1
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	e7d0      	b.n	800a69e <_strtod_l+0x4de>
 800a6fc:	d0f0      	beq.n	800a6e0 <_strtod_l+0x520>
 800a6fe:	4264      	negs	r4, r4
 800a700:	f014 020f 	ands.w	r2, r4, #15
 800a704:	d00a      	beq.n	800a71c <_strtod_l+0x55c>
 800a706:	4b12      	ldr	r3, [pc, #72]	@ (800a750 <_strtod_l+0x590>)
 800a708:	4650      	mov	r0, sl
 800a70a:	4659      	mov	r1, fp
 800a70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f6 f89e 	bl	8000854 <__aeabi_ddiv>
 800a718:	4682      	mov	sl, r0
 800a71a:	468b      	mov	fp, r1
 800a71c:	1124      	asrs	r4, r4, #4
 800a71e:	d0df      	beq.n	800a6e0 <_strtod_l+0x520>
 800a720:	2c1f      	cmp	r4, #31
 800a722:	dd1f      	ble.n	800a764 <_strtod_l+0x5a4>
 800a724:	2400      	movs	r4, #0
 800a726:	46a0      	mov	r8, r4
 800a728:	46a1      	mov	r9, r4
 800a72a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a72c:	2322      	movs	r3, #34	@ 0x22
 800a72e:	9a05      	ldr	r2, [sp, #20]
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f04f 0b00 	mov.w	fp, #0
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	e76b      	b.n	800a614 <_strtod_l+0x454>
 800a73c:	0800c415 	.word	0x0800c415
 800a740:	0800c6e0 	.word	0x0800c6e0
 800a744:	0800c40d 	.word	0x0800c40d
 800a748:	0800c444 	.word	0x0800c444
 800a74c:	0800c57d 	.word	0x0800c57d
 800a750:	0800c618 	.word	0x0800c618
 800a754:	0800c5f0 	.word	0x0800c5f0
 800a758:	7ff00000 	.word	0x7ff00000
 800a75c:	7ca00000 	.word	0x7ca00000
 800a760:	7fefffff 	.word	0x7fefffff
 800a764:	f014 0310 	ands.w	r3, r4, #16
 800a768:	4650      	mov	r0, sl
 800a76a:	4659      	mov	r1, fp
 800a76c:	4ea9      	ldr	r6, [pc, #676]	@ (800aa14 <_strtod_l+0x854>)
 800a76e:	bf18      	it	ne
 800a770:	236a      	movne	r3, #106	@ 0x6a
 800a772:	9308      	str	r3, [sp, #32]
 800a774:	2300      	movs	r3, #0
 800a776:	07e7      	lsls	r7, r4, #31
 800a778:	d504      	bpl.n	800a784 <_strtod_l+0x5c4>
 800a77a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a77e:	f7f5 ff3f 	bl	8000600 <__aeabi_dmul>
 800a782:	2301      	movs	r3, #1
 800a784:	1064      	asrs	r4, r4, #1
 800a786:	f106 0608 	add.w	r6, r6, #8
 800a78a:	d1f4      	bne.n	800a776 <_strtod_l+0x5b6>
 800a78c:	b10b      	cbz	r3, 800a792 <_strtod_l+0x5d2>
 800a78e:	4682      	mov	sl, r0
 800a790:	468b      	mov	fp, r1
 800a792:	9b08      	ldr	r3, [sp, #32]
 800a794:	b1b3      	cbz	r3, 800a7c4 <_strtod_l+0x604>
 800a796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a79a:	4659      	mov	r1, fp
 800a79c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dd0f      	ble.n	800a7c4 <_strtod_l+0x604>
 800a7a4:	2b1f      	cmp	r3, #31
 800a7a6:	dd56      	ble.n	800a856 <_strtod_l+0x696>
 800a7a8:	2b34      	cmp	r3, #52	@ 0x34
 800a7aa:	f04f 0a00 	mov.w	sl, #0
 800a7ae:	bfdb      	ittet	le
 800a7b0:	f04f 33ff 	movle.w	r3, #4294967295
 800a7b4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a7b8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a7bc:	4093      	lslle	r3, r2
 800a7be:	bfd8      	it	le
 800a7c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	f7f6 f980 	bl	8000ad0 <__aeabi_dcmpeq>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d1a7      	bne.n	800a724 <_strtod_l+0x564>
 800a7d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7d6:	464a      	mov	r2, r9
 800a7d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	462b      	mov	r3, r5
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	f7ff f8c4 	bl	800996c <__s2b>
 800a7e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f af09 	beq.w	800a5fe <_strtod_l+0x43e>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7ee:	2400      	movs	r4, #0
 800a7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	eba3 0308 	sub.w	r3, r3, r8
 800a7f8:	46a0      	mov	r8, r4
 800a7fa:	bfa8      	it	ge
 800a7fc:	2300      	movge	r3, #0
 800a7fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800a800:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a804:	9316      	str	r3, [sp, #88]	@ 0x58
 800a806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a808:	9805      	ldr	r0, [sp, #20]
 800a80a:	6859      	ldr	r1, [r3, #4]
 800a80c:	f7ff f804 	bl	8009818 <_Balloc>
 800a810:	4681      	mov	r9, r0
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aef7 	beq.w	800a606 <_strtod_l+0x446>
 800a818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a81a:	300c      	adds	r0, #12
 800a81c:	691a      	ldr	r2, [r3, #16]
 800a81e:	f103 010c 	add.w	r1, r3, #12
 800a822:	3202      	adds	r2, #2
 800a824:	0092      	lsls	r2, r2, #2
 800a826:	f7fe f938 	bl	8008a9a <memcpy>
 800a82a:	aa1c      	add	r2, sp, #112	@ 0x70
 800a82c:	a91b      	add	r1, sp, #108	@ 0x6c
 800a82e:	9805      	ldr	r0, [sp, #20]
 800a830:	ec4b ab10 	vmov	d0, sl, fp
 800a834:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a838:	f7ff fbd6 	bl	8009fe8 <__d2b>
 800a83c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f aee1 	beq.w	800a606 <_strtod_l+0x446>
 800a844:	2101      	movs	r1, #1
 800a846:	9805      	ldr	r0, [sp, #20]
 800a848:	f7ff f926 	bl	8009a98 <__i2b>
 800a84c:	4680      	mov	r8, r0
 800a84e:	b948      	cbnz	r0, 800a864 <_strtod_l+0x6a4>
 800a850:	f04f 0800 	mov.w	r8, #0
 800a854:	e6d7      	b.n	800a606 <_strtod_l+0x446>
 800a856:	f04f 32ff 	mov.w	r2, #4294967295
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	ea03 0a0a 	and.w	sl, r3, sl
 800a862:	e7af      	b.n	800a7c4 <_strtod_l+0x604>
 800a864:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a866:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a868:	2d00      	cmp	r5, #0
 800a86a:	bfa9      	itett	ge
 800a86c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a86e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a870:	18ef      	addge	r7, r5, r3
 800a872:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a874:	bfb8      	it	lt
 800a876:	1b5e      	sublt	r6, r3, r5
 800a878:	9b08      	ldr	r3, [sp, #32]
 800a87a:	bfb8      	it	lt
 800a87c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a87e:	1aed      	subs	r5, r5, r3
 800a880:	4b65      	ldr	r3, [pc, #404]	@ (800aa18 <_strtod_l+0x858>)
 800a882:	4415      	add	r5, r2
 800a884:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a888:	3d01      	subs	r5, #1
 800a88a:	429d      	cmp	r5, r3
 800a88c:	da4f      	bge.n	800a92e <_strtod_l+0x76e>
 800a88e:	1b5b      	subs	r3, r3, r5
 800a890:	2101      	movs	r1, #1
 800a892:	2b1f      	cmp	r3, #31
 800a894:	eba2 0203 	sub.w	r2, r2, r3
 800a898:	dc3d      	bgt.n	800a916 <_strtod_l+0x756>
 800a89a:	fa01 f303 	lsl.w	r3, r1, r3
 800a89e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8a4:	18bd      	adds	r5, r7, r2
 800a8a6:	9b08      	ldr	r3, [sp, #32]
 800a8a8:	4416      	add	r6, r2
 800a8aa:	42af      	cmp	r7, r5
 800a8ac:	441e      	add	r6, r3
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	bfa8      	it	ge
 800a8b2:	462b      	movge	r3, r5
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	bfa8      	it	ge
 800a8b8:	4633      	movge	r3, r6
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfc2      	ittt	gt
 800a8be:	1aed      	subgt	r5, r5, r3
 800a8c0:	1af6      	subgt	r6, r6, r3
 800a8c2:	1aff      	subgt	r7, r7, r3
 800a8c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd16      	ble.n	800a8f8 <_strtod_l+0x738>
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	9805      	ldr	r0, [sp, #20]
 800a8d0:	f7ff f99c 	bl	8009c0c <__pow5mult>
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0ba      	beq.n	800a850 <_strtod_l+0x690>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f7ff f8f0 	bl	8009ac4 <__multiply>
 800a8e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f ae8d 	beq.w	800a606 <_strtod_l+0x446>
 800a8ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	f7fe ffd2 	bl	8009898 <_Bfree>
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	dc1d      	bgt.n	800a938 <_strtod_l+0x778>
 800a8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dd23      	ble.n	800a94a <_strtod_l+0x78a>
 800a902:	4649      	mov	r1, r9
 800a904:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a906:	9805      	ldr	r0, [sp, #20]
 800a908:	f7ff f980 	bl	8009c0c <__pow5mult>
 800a90c:	4681      	mov	r9, r0
 800a90e:	b9e0      	cbnz	r0, 800a94a <_strtod_l+0x78a>
 800a910:	f04f 0900 	mov.w	r9, #0
 800a914:	e677      	b.n	800a606 <_strtod_l+0x446>
 800a916:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a91a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a91c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a920:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a924:	35e2      	adds	r5, #226	@ 0xe2
 800a926:	fa01 f305 	lsl.w	r3, r1, r5
 800a92a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a92c:	e7ba      	b.n	800a8a4 <_strtod_l+0x6e4>
 800a92e:	2300      	movs	r3, #0
 800a930:	9310      	str	r3, [sp, #64]	@ 0x40
 800a932:	2301      	movs	r3, #1
 800a934:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a936:	e7b5      	b.n	800a8a4 <_strtod_l+0x6e4>
 800a938:	462a      	mov	r2, r5
 800a93a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a93c:	9805      	ldr	r0, [sp, #20]
 800a93e:	f7ff f9bf 	bl	8009cc0 <__lshift>
 800a942:	901a      	str	r0, [sp, #104]	@ 0x68
 800a944:	2800      	cmp	r0, #0
 800a946:	d1d9      	bne.n	800a8fc <_strtod_l+0x73c>
 800a948:	e65d      	b.n	800a606 <_strtod_l+0x446>
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	dd07      	ble.n	800a95e <_strtod_l+0x79e>
 800a94e:	4649      	mov	r1, r9
 800a950:	4632      	mov	r2, r6
 800a952:	9805      	ldr	r0, [sp, #20]
 800a954:	f7ff f9b4 	bl	8009cc0 <__lshift>
 800a958:	4681      	mov	r9, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0d8      	beq.n	800a910 <_strtod_l+0x750>
 800a95e:	2f00      	cmp	r7, #0
 800a960:	dd08      	ble.n	800a974 <_strtod_l+0x7b4>
 800a962:	4641      	mov	r1, r8
 800a964:	463a      	mov	r2, r7
 800a966:	9805      	ldr	r0, [sp, #20]
 800a968:	f7ff f9aa 	bl	8009cc0 <__lshift>
 800a96c:	4680      	mov	r8, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f ae49 	beq.w	800a606 <_strtod_l+0x446>
 800a974:	464a      	mov	r2, r9
 800a976:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a978:	9805      	ldr	r0, [sp, #20]
 800a97a:	f7ff fa29 	bl	8009dd0 <__mdiff>
 800a97e:	4604      	mov	r4, r0
 800a980:	2800      	cmp	r0, #0
 800a982:	f43f ae40 	beq.w	800a606 <_strtod_l+0x446>
 800a986:	68c3      	ldr	r3, [r0, #12]
 800a988:	4641      	mov	r1, r8
 800a98a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98c:	2300      	movs	r3, #0
 800a98e:	60c3      	str	r3, [r0, #12]
 800a990:	f7ff fa02 	bl	8009d98 <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	da45      	bge.n	800aa24 <_strtod_l+0x864>
 800a998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a99a:	ea53 030a 	orrs.w	r3, r3, sl
 800a99e:	d16b      	bne.n	800aa78 <_strtod_l+0x8b8>
 800a9a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d167      	bne.n	800aa78 <_strtod_l+0x8b8>
 800a9a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9ac:	0d1b      	lsrs	r3, r3, #20
 800a9ae:	051b      	lsls	r3, r3, #20
 800a9b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9b4:	d960      	bls.n	800aa78 <_strtod_l+0x8b8>
 800a9b6:	6963      	ldr	r3, [r4, #20]
 800a9b8:	b913      	cbnz	r3, 800a9c0 <_strtod_l+0x800>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	dd5b      	ble.n	800aa78 <_strtod_l+0x8b8>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	9805      	ldr	r0, [sp, #20]
 800a9c6:	f7ff f97b 	bl	8009cc0 <__lshift>
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	f7ff f9e3 	bl	8009d98 <__mcmp>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	dd50      	ble.n	800aa78 <_strtod_l+0x8b8>
 800a9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9da:	9a08      	ldr	r2, [sp, #32]
 800a9dc:	0d1b      	lsrs	r3, r3, #20
 800a9de:	051b      	lsls	r3, r3, #20
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d06a      	beq.n	800aaba <_strtod_l+0x8fa>
 800a9e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9e8:	d867      	bhi.n	800aaba <_strtod_l+0x8fa>
 800a9ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9ee:	f67f ae9d 	bls.w	800a72c <_strtod_l+0x56c>
 800a9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800aa1c <_strtod_l+0x85c>)
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f7f5 fe01 	bl	8000600 <__aeabi_dmul>
 800a9fe:	4b08      	ldr	r3, [pc, #32]	@ (800aa20 <_strtod_l+0x860>)
 800aa00:	4682      	mov	sl, r0
 800aa02:	468b      	mov	fp, r1
 800aa04:	400b      	ands	r3, r1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f47f ae08 	bne.w	800a61c <_strtod_l+0x45c>
 800aa0c:	2322      	movs	r3, #34	@ 0x22
 800aa0e:	9a05      	ldr	r2, [sp, #20]
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	e603      	b.n	800a61c <_strtod_l+0x45c>
 800aa14:	0800c708 	.word	0x0800c708
 800aa18:	fffffc02 	.word	0xfffffc02
 800aa1c:	39500000 	.word	0x39500000
 800aa20:	7ff00000 	.word	0x7ff00000
 800aa24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aa28:	d165      	bne.n	800aaf6 <_strtod_l+0x936>
 800aa2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa30:	b35a      	cbz	r2, 800aa8a <_strtod_l+0x8ca>
 800aa32:	4a9f      	ldr	r2, [pc, #636]	@ (800acb0 <_strtod_l+0xaf0>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d12b      	bne.n	800aa90 <_strtod_l+0x8d0>
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	4651      	mov	r1, sl
 800aa3c:	b303      	cbz	r3, 800aa80 <_strtod_l+0x8c0>
 800aa3e:	465a      	mov	r2, fp
 800aa40:	4b9c      	ldr	r3, [pc, #624]	@ (800acb4 <_strtod_l+0xaf4>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295
 800aa48:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa4c:	d81b      	bhi.n	800aa86 <_strtod_l+0x8c6>
 800aa4e:	0d1b      	lsrs	r3, r3, #20
 800aa50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa54:	fa02 f303 	lsl.w	r3, r2, r3
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d119      	bne.n	800aa90 <_strtod_l+0x8d0>
 800aa5c:	4b96      	ldr	r3, [pc, #600]	@ (800acb8 <_strtod_l+0xaf8>)
 800aa5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <_strtod_l+0x8aa>
 800aa64:	3101      	adds	r1, #1
 800aa66:	f43f adce 	beq.w	800a606 <_strtod_l+0x446>
 800aa6a:	4b92      	ldr	r3, [pc, #584]	@ (800acb4 <_strtod_l+0xaf4>)
 800aa6c:	f04f 0a00 	mov.w	sl, #0
 800aa70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa72:	401a      	ands	r2, r3
 800aa74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1b9      	bne.n	800a9f2 <_strtod_l+0x832>
 800aa7e:	e5cd      	b.n	800a61c <_strtod_l+0x45c>
 800aa80:	f04f 33ff 	mov.w	r3, #4294967295
 800aa84:	e7e8      	b.n	800aa58 <_strtod_l+0x898>
 800aa86:	4613      	mov	r3, r2
 800aa88:	e7e6      	b.n	800aa58 <_strtod_l+0x898>
 800aa8a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa8e:	d0a2      	beq.n	800a9d6 <_strtod_l+0x816>
 800aa90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa92:	b1db      	cbz	r3, 800aacc <_strtod_l+0x90c>
 800aa94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa96:	4213      	tst	r3, r2
 800aa98:	d0ee      	beq.n	800aa78 <_strtod_l+0x8b8>
 800aa9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa9c:	4650      	mov	r0, sl
 800aa9e:	9a08      	ldr	r2, [sp, #32]
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	b1bb      	cbz	r3, 800aad4 <_strtod_l+0x914>
 800aaa4:	f7ff fb6e 	bl	800a184 <sulp>
 800aaa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaac:	ec53 2b10 	vmov	r2, r3, d0
 800aab0:	f7f5 fbf0 	bl	8000294 <__adddf3>
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	e7de      	b.n	800aa78 <_strtod_l+0x8b8>
 800aaba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aabe:	f04f 3aff 	mov.w	sl, #4294967295
 800aac2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aac6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aaca:	e7d5      	b.n	800aa78 <_strtod_l+0x8b8>
 800aacc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aace:	ea13 0f0a 	tst.w	r3, sl
 800aad2:	e7e1      	b.n	800aa98 <_strtod_l+0x8d8>
 800aad4:	f7ff fb56 	bl	800a184 <sulp>
 800aad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aadc:	ec53 2b10 	vmov	r2, r3, d0
 800aae0:	f7f5 fbd6 	bl	8000290 <__aeabi_dsub>
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4682      	mov	sl, r0
 800aaea:	468b      	mov	fp, r1
 800aaec:	f7f5 fff0 	bl	8000ad0 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0c1      	beq.n	800aa78 <_strtod_l+0x8b8>
 800aaf4:	e61a      	b.n	800a72c <_strtod_l+0x56c>
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff facd 	bl	800a098 <__ratio>
 800aafe:	2200      	movs	r2, #0
 800ab00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab04:	ec57 6b10 	vmov	r6, r7, d0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 fff4 	bl	8000af8 <__aeabi_dcmple>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d06f      	beq.n	800abf4 <_strtod_l+0xa34>
 800ab14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d17a      	bne.n	800ac10 <_strtod_l+0xa50>
 800ab1a:	f1ba 0f00 	cmp.w	sl, #0
 800ab1e:	d158      	bne.n	800abd2 <_strtod_l+0xa12>
 800ab20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d15a      	bne.n	800abe0 <_strtod_l+0xa20>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4b63      	ldr	r3, [pc, #396]	@ (800acbc <_strtod_l+0xafc>)
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 ffd7 	bl	8000ae4 <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d159      	bne.n	800abee <_strtod_l+0xa2e>
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	2200      	movs	r2, #0
 800ab40:	4b5f      	ldr	r3, [pc, #380]	@ (800acc0 <_strtod_l+0xb00>)
 800ab42:	f7f5 fd5d 	bl	8000600 <__aeabi_dmul>
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
 800ab4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab4e:	9606      	str	r6, [sp, #24]
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	4d58      	ldr	r5, [pc, #352]	@ (800acb4 <_strtod_l+0xaf4>)
 800ab54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5e:	401d      	ands	r5, r3
 800ab60:	4b58      	ldr	r3, [pc, #352]	@ (800acc4 <_strtod_l+0xb04>)
 800ab62:	429d      	cmp	r5, r3
 800ab64:	f040 80b2 	bne.w	800accc <_strtod_l+0xb0c>
 800ab68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab6e:	ec4b ab10 	vmov	d0, sl, fp
 800ab72:	f7ff f9c5 	bl	8009f00 <__ulp>
 800ab76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab7a:	ec51 0b10 	vmov	r0, r1, d0
 800ab7e:	f7f5 fd3f 	bl	8000600 <__aeabi_dmul>
 800ab82:	4652      	mov	r2, sl
 800ab84:	465b      	mov	r3, fp
 800ab86:	f7f5 fb85 	bl	8000294 <__adddf3>
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4949      	ldr	r1, [pc, #292]	@ (800acb4 <_strtod_l+0xaf4>)
 800ab8e:	4682      	mov	sl, r0
 800ab90:	4a4d      	ldr	r2, [pc, #308]	@ (800acc8 <_strtod_l+0xb08>)
 800ab92:	4019      	ands	r1, r3
 800ab94:	4291      	cmp	r1, r2
 800ab96:	d942      	bls.n	800ac1e <_strtod_l+0xa5e>
 800ab98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab9a:	4b47      	ldr	r3, [pc, #284]	@ (800acb8 <_strtod_l+0xaf8>)
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d103      	bne.n	800aba8 <_strtod_l+0x9e8>
 800aba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aba2:	3301      	adds	r3, #1
 800aba4:	f43f ad2f 	beq.w	800a606 <_strtod_l+0x446>
 800aba8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800acb8 <_strtod_l+0xaf8>
 800abac:	f04f 3aff 	mov.w	sl, #4294967295
 800abb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abb2:	9805      	ldr	r0, [sp, #20]
 800abb4:	f7fe fe70 	bl	8009898 <_Bfree>
 800abb8:	4649      	mov	r1, r9
 800abba:	9805      	ldr	r0, [sp, #20]
 800abbc:	f7fe fe6c 	bl	8009898 <_Bfree>
 800abc0:	4641      	mov	r1, r8
 800abc2:	9805      	ldr	r0, [sp, #20]
 800abc4:	f7fe fe68 	bl	8009898 <_Bfree>
 800abc8:	4621      	mov	r1, r4
 800abca:	9805      	ldr	r0, [sp, #20]
 800abcc:	f7fe fe64 	bl	8009898 <_Bfree>
 800abd0:	e619      	b.n	800a806 <_strtod_l+0x646>
 800abd2:	f1ba 0f01 	cmp.w	sl, #1
 800abd6:	d103      	bne.n	800abe0 <_strtod_l+0xa20>
 800abd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f43f ada6 	beq.w	800a72c <_strtod_l+0x56c>
 800abe0:	2600      	movs	r6, #0
 800abe2:	4f36      	ldr	r7, [pc, #216]	@ (800acbc <_strtod_l+0xafc>)
 800abe4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ac90 <_strtod_l+0xad0>
 800abe8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abec:	e7b1      	b.n	800ab52 <_strtod_l+0x992>
 800abee:	2600      	movs	r6, #0
 800abf0:	4f33      	ldr	r7, [pc, #204]	@ (800acc0 <_strtod_l+0xb00>)
 800abf2:	e7aa      	b.n	800ab4a <_strtod_l+0x98a>
 800abf4:	4b32      	ldr	r3, [pc, #200]	@ (800acc0 <_strtod_l+0xb00>)
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	2200      	movs	r2, #0
 800abfc:	f7f5 fd00 	bl	8000600 <__aeabi_dmul>
 800ac00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac02:	4606      	mov	r6, r0
 800ac04:	460f      	mov	r7, r1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d09f      	beq.n	800ab4a <_strtod_l+0x98a>
 800ac0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac0e:	e7a0      	b.n	800ab52 <_strtod_l+0x992>
 800ac10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac98 <_strtod_l+0xad8>
 800ac14:	ec57 6b17 	vmov	r6, r7, d7
 800ac18:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac1c:	e799      	b.n	800ab52 <_strtod_l+0x992>
 800ac1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1c1      	bne.n	800abb0 <_strtod_l+0x9f0>
 800ac2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	051b      	lsls	r3, r3, #20
 800ac34:	429d      	cmp	r5, r3
 800ac36:	d1bb      	bne.n	800abb0 <_strtod_l+0x9f0>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f6 f840 	bl	8000cc0 <__aeabi_d2lz>
 800ac40:	f7f5 fcb0 	bl	80005a4 <__aeabi_l2d>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac50:	f7f5 fb1e 	bl	8000290 <__aeabi_dsub>
 800ac54:	460b      	mov	r3, r1
 800ac56:	4602      	mov	r2, r0
 800ac58:	ea46 060a 	orr.w	r6, r6, sl
 800ac5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac62:	431e      	orrs	r6, r3
 800ac64:	d06f      	beq.n	800ad46 <_strtod_l+0xb86>
 800ac66:	a30e      	add	r3, pc, #56	@ (adr r3, 800aca0 <_strtod_l+0xae0>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 ff3a 	bl	8000ae4 <__aeabi_dcmplt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f47f acd3 	bne.w	800a61c <_strtod_l+0x45c>
 800ac76:	a30c      	add	r3, pc, #48	@ (adr r3, 800aca8 <_strtod_l+0xae8>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac80:	f7f5 ff4e 	bl	8000b20 <__aeabi_dcmpgt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d093      	beq.n	800abb0 <_strtod_l+0x9f0>
 800ac88:	e4c8      	b.n	800a61c <_strtod_l+0x45c>
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w
 800ac90:	00000000 	.word	0x00000000
 800ac94:	bff00000 	.word	0xbff00000
 800ac98:	00000000 	.word	0x00000000
 800ac9c:	3ff00000 	.word	0x3ff00000
 800aca0:	94a03595 	.word	0x94a03595
 800aca4:	3fdfffff 	.word	0x3fdfffff
 800aca8:	35afe535 	.word	0x35afe535
 800acac:	3fe00000 	.word	0x3fe00000
 800acb0:	000fffff 	.word	0x000fffff
 800acb4:	7ff00000 	.word	0x7ff00000
 800acb8:	7fefffff 	.word	0x7fefffff
 800acbc:	3ff00000 	.word	0x3ff00000
 800acc0:	3fe00000 	.word	0x3fe00000
 800acc4:	7fe00000 	.word	0x7fe00000
 800acc8:	7c9fffff 	.word	0x7c9fffff
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	b323      	cbz	r3, 800ad1a <_strtod_l+0xb5a>
 800acd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800acd4:	d821      	bhi.n	800ad1a <_strtod_l+0xb5a>
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	a327      	add	r3, pc, #156	@ (adr r3, 800ad78 <_strtod_l+0xbb8>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7f5 ff0a 	bl	8000af8 <__aeabi_dcmple>
 800ace4:	b1a0      	cbz	r0, 800ad10 <_strtod_l+0xb50>
 800ace6:	4639      	mov	r1, r7
 800ace8:	4630      	mov	r0, r6
 800acea:	f7f5 ff61 	bl	8000bb0 <__aeabi_d2uiz>
 800acee:	2801      	cmp	r0, #1
 800acf0:	bf38      	it	cc
 800acf2:	2001      	movcc	r0, #1
 800acf4:	f7f5 fc0a 	bl	800050c <__aeabi_ui2d>
 800acf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	b9fb      	cbnz	r3, 800ad40 <_strtod_l+0xb80>
 800ad00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad04:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad06:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ad0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ad16:	1b5b      	subs	r3, r3, r5
 800ad18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad1a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ad1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad22:	f7ff f8ed 	bl	8009f00 <__ulp>
 800ad26:	4650      	mov	r0, sl
 800ad28:	4659      	mov	r1, fp
 800ad2a:	ec53 2b10 	vmov	r2, r3, d0
 800ad2e:	f7f5 fc67 	bl	8000600 <__aeabi_dmul>
 800ad32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad36:	f7f5 faad 	bl	8000294 <__adddf3>
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	468b      	mov	fp, r1
 800ad3e:	e770      	b.n	800ac22 <_strtod_l+0xa62>
 800ad40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad44:	e7e0      	b.n	800ad08 <_strtod_l+0xb48>
 800ad46:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad80 <_strtod_l+0xbc0>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 feca 	bl	8000ae4 <__aeabi_dcmplt>
 800ad50:	e798      	b.n	800ac84 <_strtod_l+0xac4>
 800ad52:	2300      	movs	r3, #0
 800ad54:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad58:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	f7ff ba6d 	b.w	800a23a <_strtod_l+0x7a>
 800ad60:	2a65      	cmp	r2, #101	@ 0x65
 800ad62:	f43f ab67 	beq.w	800a434 <_strtod_l+0x274>
 800ad66:	2a45      	cmp	r2, #69	@ 0x45
 800ad68:	f43f ab64 	beq.w	800a434 <_strtod_l+0x274>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f7ff bba0 	b.w	800a4b2 <_strtod_l+0x2f2>
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	ffc00000 	.word	0xffc00000
 800ad7c:	41dfffff 	.word	0x41dfffff
 800ad80:	94a03595 	.word	0x94a03595
 800ad84:	3fcfffff 	.word	0x3fcfffff

0800ad88 <_strtod_r>:
 800ad88:	4b01      	ldr	r3, [pc, #4]	@ (800ad90 <_strtod_r+0x8>)
 800ad8a:	f7ff ba19 	b.w	800a1c0 <_strtod_l>
 800ad8e:	bf00      	nop
 800ad90:	20000068 	.word	0x20000068

0800ad94 <_strtol_l.isra.0>:
 800ad94:	2b24      	cmp	r3, #36	@ 0x24
 800ad96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9a:	4686      	mov	lr, r0
 800ad9c:	4690      	mov	r8, r2
 800ad9e:	d801      	bhi.n	800ada4 <_strtol_l.isra.0+0x10>
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d106      	bne.n	800adb2 <_strtol_l.isra.0+0x1e>
 800ada4:	f7fd fe3e 	bl	8008a24 <__errno>
 800ada8:	2316      	movs	r3, #22
 800adaa:	6003      	str	r3, [r0, #0]
 800adac:	2000      	movs	r0, #0
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	460d      	mov	r5, r1
 800adb4:	4833      	ldr	r0, [pc, #204]	@ (800ae84 <_strtol_l.isra.0+0xf0>)
 800adb6:	462a      	mov	r2, r5
 800adb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adbc:	5d06      	ldrb	r6, [r0, r4]
 800adbe:	f016 0608 	ands.w	r6, r6, #8
 800adc2:	d1f8      	bne.n	800adb6 <_strtol_l.isra.0+0x22>
 800adc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800adc6:	d110      	bne.n	800adea <_strtol_l.isra.0+0x56>
 800adc8:	782c      	ldrb	r4, [r5, #0]
 800adca:	2601      	movs	r6, #1
 800adcc:	1c95      	adds	r5, r2, #2
 800adce:	f033 0210 	bics.w	r2, r3, #16
 800add2:	d115      	bne.n	800ae00 <_strtol_l.isra.0+0x6c>
 800add4:	2c30      	cmp	r4, #48	@ 0x30
 800add6:	d10d      	bne.n	800adf4 <_strtol_l.isra.0+0x60>
 800add8:	782a      	ldrb	r2, [r5, #0]
 800adda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adde:	2a58      	cmp	r2, #88	@ 0x58
 800ade0:	d108      	bne.n	800adf4 <_strtol_l.isra.0+0x60>
 800ade2:	786c      	ldrb	r4, [r5, #1]
 800ade4:	3502      	adds	r5, #2
 800ade6:	2310      	movs	r3, #16
 800ade8:	e00a      	b.n	800ae00 <_strtol_l.isra.0+0x6c>
 800adea:	2c2b      	cmp	r4, #43	@ 0x2b
 800adec:	bf04      	itt	eq
 800adee:	782c      	ldrbeq	r4, [r5, #0]
 800adf0:	1c95      	addeq	r5, r2, #2
 800adf2:	e7ec      	b.n	800adce <_strtol_l.isra.0+0x3a>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1f6      	bne.n	800ade6 <_strtol_l.isra.0+0x52>
 800adf8:	2c30      	cmp	r4, #48	@ 0x30
 800adfa:	bf14      	ite	ne
 800adfc:	230a      	movne	r3, #10
 800adfe:	2308      	moveq	r3, #8
 800ae00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae04:	2200      	movs	r2, #0
 800ae06:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	fbbc f9f3 	udiv	r9, ip, r3
 800ae10:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae18:	2f09      	cmp	r7, #9
 800ae1a:	d80f      	bhi.n	800ae3c <_strtol_l.isra.0+0xa8>
 800ae1c:	463c      	mov	r4, r7
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	dd1b      	ble.n	800ae5a <_strtol_l.isra.0+0xc6>
 800ae22:	1c57      	adds	r7, r2, #1
 800ae24:	d007      	beq.n	800ae36 <_strtol_l.isra.0+0xa2>
 800ae26:	4581      	cmp	r9, r0
 800ae28:	d314      	bcc.n	800ae54 <_strtol_l.isra.0+0xc0>
 800ae2a:	d101      	bne.n	800ae30 <_strtol_l.isra.0+0x9c>
 800ae2c:	45a2      	cmp	sl, r4
 800ae2e:	db11      	blt.n	800ae54 <_strtol_l.isra.0+0xc0>
 800ae30:	fb00 4003 	mla	r0, r0, r3, r4
 800ae34:	2201      	movs	r2, #1
 800ae36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae3a:	e7eb      	b.n	800ae14 <_strtol_l.isra.0+0x80>
 800ae3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae40:	2f19      	cmp	r7, #25
 800ae42:	d801      	bhi.n	800ae48 <_strtol_l.isra.0+0xb4>
 800ae44:	3c37      	subs	r4, #55	@ 0x37
 800ae46:	e7ea      	b.n	800ae1e <_strtol_l.isra.0+0x8a>
 800ae48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae4c:	2f19      	cmp	r7, #25
 800ae4e:	d804      	bhi.n	800ae5a <_strtol_l.isra.0+0xc6>
 800ae50:	3c57      	subs	r4, #87	@ 0x57
 800ae52:	e7e4      	b.n	800ae1e <_strtol_l.isra.0+0x8a>
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295
 800ae58:	e7ed      	b.n	800ae36 <_strtol_l.isra.0+0xa2>
 800ae5a:	1c53      	adds	r3, r2, #1
 800ae5c:	d108      	bne.n	800ae70 <_strtol_l.isra.0+0xdc>
 800ae5e:	2322      	movs	r3, #34	@ 0x22
 800ae60:	4660      	mov	r0, ip
 800ae62:	f8ce 3000 	str.w	r3, [lr]
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	d0a0      	beq.n	800adae <_strtol_l.isra.0+0x1a>
 800ae6c:	1e69      	subs	r1, r5, #1
 800ae6e:	e006      	b.n	800ae7e <_strtol_l.isra.0+0xea>
 800ae70:	b106      	cbz	r6, 800ae74 <_strtol_l.isra.0+0xe0>
 800ae72:	4240      	negs	r0, r0
 800ae74:	f1b8 0f00 	cmp.w	r8, #0
 800ae78:	d099      	beq.n	800adae <_strtol_l.isra.0+0x1a>
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	d1f6      	bne.n	800ae6c <_strtol_l.isra.0+0xd8>
 800ae7e:	f8c8 1000 	str.w	r1, [r8]
 800ae82:	e794      	b.n	800adae <_strtol_l.isra.0+0x1a>
 800ae84:	0800c731 	.word	0x0800c731

0800ae88 <_strtol_r>:
 800ae88:	f7ff bf84 	b.w	800ad94 <_strtol_l.isra.0>

0800ae8c <__ssputs_r>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	461f      	mov	r7, r3
 800ae92:	688e      	ldr	r6, [r1, #8]
 800ae94:	4682      	mov	sl, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	42be      	cmp	r6, r7
 800ae9a:	4690      	mov	r8, r2
 800ae9c:	680b      	ldr	r3, [r1, #0]
 800ae9e:	d82d      	bhi.n	800aefc <__ssputs_r+0x70>
 800aea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aea8:	d026      	beq.n	800aef8 <__ssputs_r+0x6c>
 800aeaa:	6965      	ldr	r5, [r4, #20]
 800aeac:	6909      	ldr	r1, [r1, #16]
 800aeae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb2:	eba3 0901 	sub.w	r9, r3, r1
 800aeb6:	1c7b      	adds	r3, r7, #1
 800aeb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aebc:	444b      	add	r3, r9
 800aebe:	106d      	asrs	r5, r5, #1
 800aec0:	429d      	cmp	r5, r3
 800aec2:	bf38      	it	cc
 800aec4:	461d      	movcc	r5, r3
 800aec6:	0553      	lsls	r3, r2, #21
 800aec8:	d527      	bpl.n	800af1a <__ssputs_r+0x8e>
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7fc fd2e 	bl	800792c <_malloc_r>
 800aed0:	4606      	mov	r6, r0
 800aed2:	b360      	cbz	r0, 800af2e <__ssputs_r+0xa2>
 800aed4:	464a      	mov	r2, r9
 800aed6:	6921      	ldr	r1, [r4, #16]
 800aed8:	f7fd fddf 	bl	8008a9a <memcpy>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	6126      	str	r6, [r4, #16]
 800aeea:	444e      	add	r6, r9
 800aeec:	6165      	str	r5, [r4, #20]
 800aeee:	eba5 0509 	sub.w	r5, r5, r9
 800aef2:	6026      	str	r6, [r4, #0]
 800aef4:	463e      	mov	r6, r7
 800aef6:	60a5      	str	r5, [r4, #8]
 800aef8:	42be      	cmp	r6, r7
 800aefa:	d900      	bls.n	800aefe <__ssputs_r+0x72>
 800aefc:	463e      	mov	r6, r7
 800aefe:	4632      	mov	r2, r6
 800af00:	4641      	mov	r1, r8
 800af02:	6820      	ldr	r0, [r4, #0]
 800af04:	f000 f9c6 	bl	800b294 <memmove>
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	2000      	movs	r0, #0
 800af0c:	1b9b      	subs	r3, r3, r6
 800af0e:	60a3      	str	r3, [r4, #8]
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	4433      	add	r3, r6
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1a:	462a      	mov	r2, r5
 800af1c:	f000 fd69 	bl	800b9f2 <_realloc_r>
 800af20:	4606      	mov	r6, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	d1e0      	bne.n	800aee8 <__ssputs_r+0x5c>
 800af26:	6921      	ldr	r1, [r4, #16]
 800af28:	4650      	mov	r0, sl
 800af2a:	f7fe fc2b 	bl	8009784 <_free_r>
 800af2e:	230c      	movs	r3, #12
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	f8ca 3000 	str.w	r3, [sl]
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	e7e9      	b.n	800af16 <__ssputs_r+0x8a>
	...

0800af44 <_svfiprintf_r>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4698      	mov	r8, r3
 800af4a:	898b      	ldrh	r3, [r1, #12]
 800af4c:	b09d      	sub	sp, #116	@ 0x74
 800af4e:	4607      	mov	r7, r0
 800af50:	061b      	lsls	r3, r3, #24
 800af52:	460d      	mov	r5, r1
 800af54:	4614      	mov	r4, r2
 800af56:	d510      	bpl.n	800af7a <_svfiprintf_r+0x36>
 800af58:	690b      	ldr	r3, [r1, #16]
 800af5a:	b973      	cbnz	r3, 800af7a <_svfiprintf_r+0x36>
 800af5c:	2140      	movs	r1, #64	@ 0x40
 800af5e:	f7fc fce5 	bl	800792c <_malloc_r>
 800af62:	6028      	str	r0, [r5, #0]
 800af64:	6128      	str	r0, [r5, #16]
 800af66:	b930      	cbnz	r0, 800af76 <_svfiprintf_r+0x32>
 800af68:	230c      	movs	r3, #12
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	b01d      	add	sp, #116	@ 0x74
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	2340      	movs	r3, #64	@ 0x40
 800af78:	616b      	str	r3, [r5, #20]
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af80:	f04f 0901 	mov.w	r9, #1
 800af84:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b128 <_svfiprintf_r+0x1e4>
 800af88:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8a:	2320      	movs	r3, #32
 800af8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af90:	2330      	movs	r3, #48	@ 0x30
 800af92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af96:	4623      	mov	r3, r4
 800af98:	469a      	mov	sl, r3
 800af9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af9e:	b10a      	cbz	r2, 800afa4 <_svfiprintf_r+0x60>
 800afa0:	2a25      	cmp	r2, #37	@ 0x25
 800afa2:	d1f9      	bne.n	800af98 <_svfiprintf_r+0x54>
 800afa4:	ebba 0b04 	subs.w	fp, sl, r4
 800afa8:	d00b      	beq.n	800afc2 <_svfiprintf_r+0x7e>
 800afaa:	465b      	mov	r3, fp
 800afac:	4622      	mov	r2, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ff6b 	bl	800ae8c <__ssputs_r>
 800afb6:	3001      	adds	r0, #1
 800afb8:	f000 80a7 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afbe:	445a      	add	r2, fp
 800afc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afc2:	f89a 3000 	ldrb.w	r3, [sl]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 809f 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afcc:	2300      	movs	r3, #0
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	f10a 0a01 	add.w	sl, sl, #1
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	9307      	str	r3, [sp, #28]
 800afda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afde:	931a      	str	r3, [sp, #104]	@ 0x68
 800afe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe4:	4654      	mov	r4, sl
 800afe6:	2205      	movs	r2, #5
 800afe8:	484f      	ldr	r0, [pc, #316]	@ (800b128 <_svfiprintf_r+0x1e4>)
 800afea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afee:	f7fd fd46 	bl	8008a7e <memchr>
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	b9d8      	cbnz	r0, 800b02e <_svfiprintf_r+0xea>
 800aff6:	06d0      	lsls	r0, r2, #27
 800aff8:	bf44      	itt	mi
 800affa:	2320      	movmi	r3, #32
 800affc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b000:	0711      	lsls	r1, r2, #28
 800b002:	bf44      	itt	mi
 800b004:	232b      	movmi	r3, #43	@ 0x2b
 800b006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b00a:	f89a 3000 	ldrb.w	r3, [sl]
 800b00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b010:	d015      	beq.n	800b03e <_svfiprintf_r+0xfa>
 800b012:	9a07      	ldr	r2, [sp, #28]
 800b014:	4654      	mov	r4, sl
 800b016:	2000      	movs	r0, #0
 800b018:	f04f 0c0a 	mov.w	ip, #10
 800b01c:	4621      	mov	r1, r4
 800b01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b022:	3b30      	subs	r3, #48	@ 0x30
 800b024:	2b09      	cmp	r3, #9
 800b026:	d94b      	bls.n	800b0c0 <_svfiprintf_r+0x17c>
 800b028:	b1b0      	cbz	r0, 800b058 <_svfiprintf_r+0x114>
 800b02a:	9207      	str	r2, [sp, #28]
 800b02c:	e014      	b.n	800b058 <_svfiprintf_r+0x114>
 800b02e:	eba0 0308 	sub.w	r3, r0, r8
 800b032:	46a2      	mov	sl, r4
 800b034:	fa09 f303 	lsl.w	r3, r9, r3
 800b038:	4313      	orrs	r3, r2
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	e7d2      	b.n	800afe4 <_svfiprintf_r+0xa0>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	1d19      	adds	r1, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	9103      	str	r1, [sp, #12]
 800b048:	bfbb      	ittet	lt
 800b04a:	425b      	neglt	r3, r3
 800b04c:	f042 0202 	orrlt.w	r2, r2, #2
 800b050:	9307      	strge	r3, [sp, #28]
 800b052:	9307      	strlt	r3, [sp, #28]
 800b054:	bfb8      	it	lt
 800b056:	9204      	strlt	r2, [sp, #16]
 800b058:	7823      	ldrb	r3, [r4, #0]
 800b05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b05c:	d10a      	bne.n	800b074 <_svfiprintf_r+0x130>
 800b05e:	7863      	ldrb	r3, [r4, #1]
 800b060:	2b2a      	cmp	r3, #42	@ 0x2a
 800b062:	d132      	bne.n	800b0ca <_svfiprintf_r+0x186>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	3402      	adds	r4, #2
 800b068:	1d1a      	adds	r2, r3, #4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b070:	9203      	str	r2, [sp, #12]
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b138 <_svfiprintf_r+0x1f4>
 800b078:	2203      	movs	r2, #3
 800b07a:	7821      	ldrb	r1, [r4, #0]
 800b07c:	4650      	mov	r0, sl
 800b07e:	f7fd fcfe 	bl	8008a7e <memchr>
 800b082:	b138      	cbz	r0, 800b094 <_svfiprintf_r+0x150>
 800b084:	eba0 000a 	sub.w	r0, r0, sl
 800b088:	2240      	movs	r2, #64	@ 0x40
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	3401      	adds	r4, #1
 800b08e:	4082      	lsls	r2, r0
 800b090:	4313      	orrs	r3, r2
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	2206      	movs	r2, #6
 800b09a:	4824      	ldr	r0, [pc, #144]	@ (800b12c <_svfiprintf_r+0x1e8>)
 800b09c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0a0:	f7fd fced 	bl	8008a7e <memchr>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d036      	beq.n	800b116 <_svfiprintf_r+0x1d2>
 800b0a8:	4b21      	ldr	r3, [pc, #132]	@ (800b130 <_svfiprintf_r+0x1ec>)
 800b0aa:	bb1b      	cbnz	r3, 800b0f4 <_svfiprintf_r+0x1b0>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	3307      	adds	r3, #7
 800b0b0:	f023 0307 	bic.w	r3, r3, #7
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	4433      	add	r3, r6
 800b0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0be:	e76a      	b.n	800af96 <_svfiprintf_r+0x52>
 800b0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7a8      	b.n	800b01c <_svfiprintf_r+0xd8>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0dc:	3a30      	subs	r2, #48	@ 0x30
 800b0de:	2a09      	cmp	r2, #9
 800b0e0:	d903      	bls.n	800b0ea <_svfiprintf_r+0x1a6>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c6      	beq.n	800b074 <_svfiprintf_r+0x130>
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	e7c4      	b.n	800b074 <_svfiprintf_r+0x130>
 800b0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7f0      	b.n	800b0d6 <_svfiprintf_r+0x192>
 800b0f4:	ab03      	add	r3, sp, #12
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b100:	f7fc fd3e 	bl	8007b80 <_printf_float>
 800b104:	1c42      	adds	r2, r0, #1
 800b106:	4606      	mov	r6, r0
 800b108:	d1d6      	bne.n	800b0b8 <_svfiprintf_r+0x174>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	065b      	lsls	r3, r3, #25
 800b10e:	f53f af2d 	bmi.w	800af6c <_svfiprintf_r+0x28>
 800b112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b114:	e72c      	b.n	800af70 <_svfiprintf_r+0x2c>
 800b116:	ab03      	add	r3, sp, #12
 800b118:	462a      	mov	r2, r5
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4638      	mov	r0, r7
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	4b04      	ldr	r3, [pc, #16]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b122:	f7fc ffc9 	bl	80080b8 <_printf_i>
 800b126:	e7ed      	b.n	800b104 <_svfiprintf_r+0x1c0>
 800b128:	0800c529 	.word	0x0800c529
 800b12c:	0800c533 	.word	0x0800c533
 800b130:	08007b81 	.word	0x08007b81
 800b134:	0800ae8d 	.word	0x0800ae8d
 800b138:	0800c52f 	.word	0x0800c52f

0800b13c <__sflush_r>:
 800b13c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	0716      	lsls	r6, r2, #28
 800b146:	4605      	mov	r5, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	d454      	bmi.n	800b1f6 <__sflush_r+0xba>
 800b14c:	684b      	ldr	r3, [r1, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dc02      	bgt.n	800b158 <__sflush_r+0x1c>
 800b152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd48      	ble.n	800b1ea <__sflush_r+0xae>
 800b158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b15a:	2e00      	cmp	r6, #0
 800b15c:	d045      	beq.n	800b1ea <__sflush_r+0xae>
 800b15e:	2300      	movs	r3, #0
 800b160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b164:	682f      	ldr	r7, [r5, #0]
 800b166:	6a21      	ldr	r1, [r4, #32]
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	d030      	beq.n	800b1ce <__sflush_r+0x92>
 800b16c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	0759      	lsls	r1, r3, #29
 800b172:	d505      	bpl.n	800b180 <__sflush_r+0x44>
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	1ad2      	subs	r2, r2, r3
 800b178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b17a:	b10b      	cbz	r3, 800b180 <__sflush_r+0x44>
 800b17c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b17e:	1ad2      	subs	r2, r2, r3
 800b180:	2300      	movs	r3, #0
 800b182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b184:	6a21      	ldr	r1, [r4, #32]
 800b186:	4628      	mov	r0, r5
 800b188:	47b0      	blx	r6
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	d106      	bne.n	800b19e <__sflush_r+0x62>
 800b190:	6829      	ldr	r1, [r5, #0]
 800b192:	291d      	cmp	r1, #29
 800b194:	d82b      	bhi.n	800b1ee <__sflush_r+0xb2>
 800b196:	4a2a      	ldr	r2, [pc, #168]	@ (800b240 <__sflush_r+0x104>)
 800b198:	40ca      	lsrs	r2, r1
 800b19a:	07d6      	lsls	r6, r2, #31
 800b19c:	d527      	bpl.n	800b1ee <__sflush_r+0xb2>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	04d9      	lsls	r1, r3, #19
 800b1a2:	6062      	str	r2, [r4, #4]
 800b1a4:	6922      	ldr	r2, [r4, #16]
 800b1a6:	6022      	str	r2, [r4, #0]
 800b1a8:	d504      	bpl.n	800b1b4 <__sflush_r+0x78>
 800b1aa:	1c42      	adds	r2, r0, #1
 800b1ac:	d101      	bne.n	800b1b2 <__sflush_r+0x76>
 800b1ae:	682b      	ldr	r3, [r5, #0]
 800b1b0:	b903      	cbnz	r3, 800b1b4 <__sflush_r+0x78>
 800b1b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1b6:	602f      	str	r7, [r5, #0]
 800b1b8:	b1b9      	cbz	r1, 800b1ea <__sflush_r+0xae>
 800b1ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	d002      	beq.n	800b1c8 <__sflush_r+0x8c>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7fe fade 	bl	8009784 <_free_r>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1cc:	e00d      	b.n	800b1ea <__sflush_r+0xae>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b0      	blx	r6
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	1c50      	adds	r0, r2, #1
 800b1d8:	d1c9      	bne.n	800b16e <__sflush_r+0x32>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0c6      	beq.n	800b16e <__sflush_r+0x32>
 800b1e0:	2b1d      	cmp	r3, #29
 800b1e2:	d001      	beq.n	800b1e8 <__sflush_r+0xac>
 800b1e4:	2b16      	cmp	r3, #22
 800b1e6:	d11d      	bne.n	800b224 <__sflush_r+0xe8>
 800b1e8:	602f      	str	r7, [r5, #0]
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	e021      	b.n	800b232 <__sflush_r+0xf6>
 800b1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	e01a      	b.n	800b22c <__sflush_r+0xf0>
 800b1f6:	690f      	ldr	r7, [r1, #16]
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	d0f6      	beq.n	800b1ea <__sflush_r+0xae>
 800b1fc:	0793      	lsls	r3, r2, #30
 800b1fe:	680e      	ldr	r6, [r1, #0]
 800b200:	600f      	str	r7, [r1, #0]
 800b202:	bf0c      	ite	eq
 800b204:	694b      	ldreq	r3, [r1, #20]
 800b206:	2300      	movne	r3, #0
 800b208:	eba6 0807 	sub.w	r8, r6, r7
 800b20c:	608b      	str	r3, [r1, #8]
 800b20e:	f1b8 0f00 	cmp.w	r8, #0
 800b212:	ddea      	ble.n	800b1ea <__sflush_r+0xae>
 800b214:	4643      	mov	r3, r8
 800b216:	463a      	mov	r2, r7
 800b218:	6a21      	ldr	r1, [r4, #32]
 800b21a:	4628      	mov	r0, r5
 800b21c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b21e:	47b0      	blx	r6
 800b220:	2800      	cmp	r0, #0
 800b222:	dc08      	bgt.n	800b236 <__sflush_r+0xfa>
 800b224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	4407      	add	r7, r0
 800b238:	eba8 0800 	sub.w	r8, r8, r0
 800b23c:	e7e7      	b.n	800b20e <__sflush_r+0xd2>
 800b23e:	bf00      	nop
 800b240:	20400001 	.word	0x20400001

0800b244 <_fflush_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	690b      	ldr	r3, [r1, #16]
 800b248:	4605      	mov	r5, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	b913      	cbnz	r3, 800b254 <_fflush_r+0x10>
 800b24e:	2500      	movs	r5, #0
 800b250:	4628      	mov	r0, r5
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	b118      	cbz	r0, 800b25e <_fflush_r+0x1a>
 800b256:	6a03      	ldr	r3, [r0, #32]
 800b258:	b90b      	cbnz	r3, 800b25e <_fflush_r+0x1a>
 800b25a:	f7fd fae5 	bl	8008828 <__sinit>
 800b25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f3      	beq.n	800b24e <_fflush_r+0xa>
 800b266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b268:	07d0      	lsls	r0, r2, #31
 800b26a:	d404      	bmi.n	800b276 <_fflush_r+0x32>
 800b26c:	0599      	lsls	r1, r3, #22
 800b26e:	d402      	bmi.n	800b276 <_fflush_r+0x32>
 800b270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b272:	f7fd fc02 	bl	8008a7a <__retarget_lock_acquire_recursive>
 800b276:	4628      	mov	r0, r5
 800b278:	4621      	mov	r1, r4
 800b27a:	f7ff ff5f 	bl	800b13c <__sflush_r>
 800b27e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b280:	4605      	mov	r5, r0
 800b282:	07da      	lsls	r2, r3, #31
 800b284:	d4e4      	bmi.n	800b250 <_fflush_r+0xc>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	059b      	lsls	r3, r3, #22
 800b28a:	d4e1      	bmi.n	800b250 <_fflush_r+0xc>
 800b28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28e:	f7fd fbf5 	bl	8008a7c <__retarget_lock_release_recursive>
 800b292:	e7dd      	b.n	800b250 <_fflush_r+0xc>

0800b294 <memmove>:
 800b294:	4288      	cmp	r0, r1
 800b296:	b510      	push	{r4, lr}
 800b298:	eb01 0402 	add.w	r4, r1, r2
 800b29c:	d902      	bls.n	800b2a4 <memmove+0x10>
 800b29e:	4284      	cmp	r4, r0
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	d807      	bhi.n	800b2b4 <memmove+0x20>
 800b2a4:	1e43      	subs	r3, r0, #1
 800b2a6:	42a1      	cmp	r1, r4
 800b2a8:	d008      	beq.n	800b2bc <memmove+0x28>
 800b2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2b2:	e7f8      	b.n	800b2a6 <memmove+0x12>
 800b2b4:	4402      	add	r2, r0
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	d100      	bne.n	800b2be <memmove+0x2a>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2c6:	e7f7      	b.n	800b2b8 <memmove+0x24>

0800b2c8 <strncmp>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	b16a      	cbz	r2, 800b2e8 <strncmp+0x20>
 800b2cc:	3901      	subs	r1, #1
 800b2ce:	1884      	adds	r4, r0, r2
 800b2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d103      	bne.n	800b2e4 <strncmp+0x1c>
 800b2dc:	42a0      	cmp	r0, r4
 800b2de:	d001      	beq.n	800b2e4 <strncmp+0x1c>
 800b2e0:	2a00      	cmp	r2, #0
 800b2e2:	d1f5      	bne.n	800b2d0 <strncmp+0x8>
 800b2e4:	1ad0      	subs	r0, r2, r3
 800b2e6:	bd10      	pop	{r4, pc}
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	e7fc      	b.n	800b2e6 <strncmp+0x1e>
 800b2ec:	0000      	movs	r0, r0
	...

0800b2f0 <nan>:
 800b2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b2f8 <nan+0x8>
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	7ff80000 	.word	0x7ff80000

0800b300 <__assert_func>:
 800b300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b302:	4614      	mov	r4, r2
 800b304:	461a      	mov	r2, r3
 800b306:	4b09      	ldr	r3, [pc, #36]	@ (800b32c <__assert_func+0x2c>)
 800b308:	4605      	mov	r5, r0
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68d8      	ldr	r0, [r3, #12]
 800b30e:	b14c      	cbz	r4, 800b324 <__assert_func+0x24>
 800b310:	4b07      	ldr	r3, [pc, #28]	@ (800b330 <__assert_func+0x30>)
 800b312:	9100      	str	r1, [sp, #0]
 800b314:	4907      	ldr	r1, [pc, #28]	@ (800b334 <__assert_func+0x34>)
 800b316:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b31a:	462b      	mov	r3, r5
 800b31c:	f000 fba4 	bl	800ba68 <fiprintf>
 800b320:	f000 fbb4 	bl	800ba8c <abort>
 800b324:	4b04      	ldr	r3, [pc, #16]	@ (800b338 <__assert_func+0x38>)
 800b326:	461c      	mov	r4, r3
 800b328:	e7f3      	b.n	800b312 <__assert_func+0x12>
 800b32a:	bf00      	nop
 800b32c:	20000018 	.word	0x20000018
 800b330:	0800c542 	.word	0x0800c542
 800b334:	0800c54f 	.word	0x0800c54f
 800b338:	0800c57d 	.word	0x0800c57d

0800b33c <_calloc_r>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	fba1 5402 	umull	r5, r4, r1, r2
 800b342:	b934      	cbnz	r4, 800b352 <_calloc_r+0x16>
 800b344:	4629      	mov	r1, r5
 800b346:	f7fc faf1 	bl	800792c <_malloc_r>
 800b34a:	4606      	mov	r6, r0
 800b34c:	b928      	cbnz	r0, 800b35a <_calloc_r+0x1e>
 800b34e:	4630      	mov	r0, r6
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	220c      	movs	r2, #12
 800b354:	2600      	movs	r6, #0
 800b356:	6002      	str	r2, [r0, #0]
 800b358:	e7f9      	b.n	800b34e <_calloc_r+0x12>
 800b35a:	462a      	mov	r2, r5
 800b35c:	4621      	mov	r1, r4
 800b35e:	f7fd fafe 	bl	800895e <memset>
 800b362:	e7f4      	b.n	800b34e <_calloc_r+0x12>

0800b364 <rshift>:
 800b364:	6903      	ldr	r3, [r0, #16]
 800b366:	114a      	asrs	r2, r1, #5
 800b368:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b370:	f100 0414 	add.w	r4, r0, #20
 800b374:	dd45      	ble.n	800b402 <rshift+0x9e>
 800b376:	f011 011f 	ands.w	r1, r1, #31
 800b37a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b37e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b382:	d10c      	bne.n	800b39e <rshift+0x3a>
 800b384:	f100 0710 	add.w	r7, r0, #16
 800b388:	4629      	mov	r1, r5
 800b38a:	42b1      	cmp	r1, r6
 800b38c:	d334      	bcc.n	800b3f8 <rshift+0x94>
 800b38e:	1a9b      	subs	r3, r3, r2
 800b390:	1eea      	subs	r2, r5, #3
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4296      	cmp	r6, r2
 800b396:	bf38      	it	cc
 800b398:	2300      	movcc	r3, #0
 800b39a:	4423      	add	r3, r4
 800b39c:	e015      	b.n	800b3ca <rshift+0x66>
 800b39e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3a2:	f1c1 0820 	rsb	r8, r1, #32
 800b3a6:	f105 0e04 	add.w	lr, r5, #4
 800b3aa:	46a1      	mov	r9, r4
 800b3ac:	40cf      	lsrs	r7, r1
 800b3ae:	4576      	cmp	r6, lr
 800b3b0:	46f4      	mov	ip, lr
 800b3b2:	d815      	bhi.n	800b3e0 <rshift+0x7c>
 800b3b4:	1a9a      	subs	r2, r3, r2
 800b3b6:	3501      	adds	r5, #1
 800b3b8:	0092      	lsls	r2, r2, #2
 800b3ba:	3a04      	subs	r2, #4
 800b3bc:	42ae      	cmp	r6, r5
 800b3be:	bf38      	it	cc
 800b3c0:	2200      	movcc	r2, #0
 800b3c2:	18a3      	adds	r3, r4, r2
 800b3c4:	50a7      	str	r7, [r4, r2]
 800b3c6:	b107      	cbz	r7, 800b3ca <rshift+0x66>
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	1b1a      	subs	r2, r3, r4
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3d2:	bf08      	it	eq
 800b3d4:	2300      	moveq	r3, #0
 800b3d6:	6102      	str	r2, [r0, #16]
 800b3d8:	bf08      	it	eq
 800b3da:	6143      	streq	r3, [r0, #20]
 800b3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3e0:	f8dc c000 	ldr.w	ip, [ip]
 800b3e4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3e8:	ea4c 0707 	orr.w	r7, ip, r7
 800b3ec:	f849 7b04 	str.w	r7, [r9], #4
 800b3f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3f4:	40cf      	lsrs	r7, r1
 800b3f6:	e7da      	b.n	800b3ae <rshift+0x4a>
 800b3f8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3fc:	f847 cf04 	str.w	ip, [r7, #4]!
 800b400:	e7c3      	b.n	800b38a <rshift+0x26>
 800b402:	4623      	mov	r3, r4
 800b404:	e7e1      	b.n	800b3ca <rshift+0x66>

0800b406 <__hexdig_fun>:
 800b406:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b40a:	2b09      	cmp	r3, #9
 800b40c:	d802      	bhi.n	800b414 <__hexdig_fun+0xe>
 800b40e:	3820      	subs	r0, #32
 800b410:	b2c0      	uxtb	r0, r0
 800b412:	4770      	bx	lr
 800b414:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b418:	2b05      	cmp	r3, #5
 800b41a:	d801      	bhi.n	800b420 <__hexdig_fun+0x1a>
 800b41c:	3847      	subs	r0, #71	@ 0x47
 800b41e:	e7f7      	b.n	800b410 <__hexdig_fun+0xa>
 800b420:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b424:	2b05      	cmp	r3, #5
 800b426:	d801      	bhi.n	800b42c <__hexdig_fun+0x26>
 800b428:	3827      	subs	r0, #39	@ 0x27
 800b42a:	e7f1      	b.n	800b410 <__hexdig_fun+0xa>
 800b42c:	2000      	movs	r0, #0
 800b42e:	4770      	bx	lr

0800b430 <__gethex>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	b085      	sub	sp, #20
 800b436:	468a      	mov	sl, r1
 800b438:	4690      	mov	r8, r2
 800b43a:	9302      	str	r3, [sp, #8]
 800b43c:	680b      	ldr	r3, [r1, #0]
 800b43e:	9001      	str	r0, [sp, #4]
 800b440:	1c9c      	adds	r4, r3, #2
 800b442:	46a1      	mov	r9, r4
 800b444:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b448:	2830      	cmp	r0, #48	@ 0x30
 800b44a:	d0fa      	beq.n	800b442 <__gethex+0x12>
 800b44c:	eba9 0303 	sub.w	r3, r9, r3
 800b450:	f1a3 0b02 	sub.w	fp, r3, #2
 800b454:	f7ff ffd7 	bl	800b406 <__hexdig_fun>
 800b458:	4605      	mov	r5, r0
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d166      	bne.n	800b52c <__gethex+0xfc>
 800b45e:	2201      	movs	r2, #1
 800b460:	499e      	ldr	r1, [pc, #632]	@ (800b6dc <__gethex+0x2ac>)
 800b462:	4648      	mov	r0, r9
 800b464:	f7ff ff30 	bl	800b2c8 <strncmp>
 800b468:	4607      	mov	r7, r0
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d165      	bne.n	800b53a <__gethex+0x10a>
 800b46e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b472:	4626      	mov	r6, r4
 800b474:	f7ff ffc7 	bl	800b406 <__hexdig_fun>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d060      	beq.n	800b53e <__gethex+0x10e>
 800b47c:	4623      	mov	r3, r4
 800b47e:	7818      	ldrb	r0, [r3, #0]
 800b480:	4699      	mov	r9, r3
 800b482:	3301      	adds	r3, #1
 800b484:	2830      	cmp	r0, #48	@ 0x30
 800b486:	d0fa      	beq.n	800b47e <__gethex+0x4e>
 800b488:	f7ff ffbd 	bl	800b406 <__hexdig_fun>
 800b48c:	fab0 f580 	clz	r5, r0
 800b490:	f04f 0b01 	mov.w	fp, #1
 800b494:	096d      	lsrs	r5, r5, #5
 800b496:	464a      	mov	r2, r9
 800b498:	4616      	mov	r6, r2
 800b49a:	3201      	adds	r2, #1
 800b49c:	7830      	ldrb	r0, [r6, #0]
 800b49e:	f7ff ffb2 	bl	800b406 <__hexdig_fun>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d1f8      	bne.n	800b498 <__gethex+0x68>
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	498c      	ldr	r1, [pc, #560]	@ (800b6dc <__gethex+0x2ac>)
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ff0c 	bl	800b2c8 <strncmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d13e      	bne.n	800b532 <__gethex+0x102>
 800b4b4:	b944      	cbnz	r4, 800b4c8 <__gethex+0x98>
 800b4b6:	1c74      	adds	r4, r6, #1
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	4616      	mov	r6, r2
 800b4bc:	3201      	adds	r2, #1
 800b4be:	7830      	ldrb	r0, [r6, #0]
 800b4c0:	f7ff ffa1 	bl	800b406 <__hexdig_fun>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d1f8      	bne.n	800b4ba <__gethex+0x8a>
 800b4c8:	1ba4      	subs	r4, r4, r6
 800b4ca:	00a7      	lsls	r7, r4, #2
 800b4cc:	7833      	ldrb	r3, [r6, #0]
 800b4ce:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4d2:	2b50      	cmp	r3, #80	@ 0x50
 800b4d4:	d13d      	bne.n	800b552 <__gethex+0x122>
 800b4d6:	7873      	ldrb	r3, [r6, #1]
 800b4d8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4da:	d032      	beq.n	800b542 <__gethex+0x112>
 800b4dc:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4de:	d033      	beq.n	800b548 <__gethex+0x118>
 800b4e0:	1c71      	adds	r1, r6, #1
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	7808      	ldrb	r0, [r1, #0]
 800b4e6:	f7ff ff8e 	bl	800b406 <__hexdig_fun>
 800b4ea:	1e43      	subs	r3, r0, #1
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b18      	cmp	r3, #24
 800b4f0:	d82f      	bhi.n	800b552 <__gethex+0x122>
 800b4f2:	f1a0 0210 	sub.w	r2, r0, #16
 800b4f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4fa:	f7ff ff84 	bl	800b406 <__hexdig_fun>
 800b4fe:	f100 3cff 	add.w	ip, r0, #4294967295
 800b502:	230a      	movs	r3, #10
 800b504:	fa5f fc8c 	uxtb.w	ip, ip
 800b508:	f1bc 0f18 	cmp.w	ip, #24
 800b50c:	d91e      	bls.n	800b54c <__gethex+0x11c>
 800b50e:	b104      	cbz	r4, 800b512 <__gethex+0xe2>
 800b510:	4252      	negs	r2, r2
 800b512:	4417      	add	r7, r2
 800b514:	f8ca 1000 	str.w	r1, [sl]
 800b518:	b1ed      	cbz	r5, 800b556 <__gethex+0x126>
 800b51a:	f1bb 0f00 	cmp.w	fp, #0
 800b51e:	bf0c      	ite	eq
 800b520:	2506      	moveq	r5, #6
 800b522:	2500      	movne	r5, #0
 800b524:	4628      	mov	r0, r5
 800b526:	b005      	add	sp, #20
 800b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	2500      	movs	r5, #0
 800b52e:	462c      	mov	r4, r5
 800b530:	e7b1      	b.n	800b496 <__gethex+0x66>
 800b532:	2c00      	cmp	r4, #0
 800b534:	d1c8      	bne.n	800b4c8 <__gethex+0x98>
 800b536:	4627      	mov	r7, r4
 800b538:	e7c8      	b.n	800b4cc <__gethex+0x9c>
 800b53a:	464e      	mov	r6, r9
 800b53c:	462f      	mov	r7, r5
 800b53e:	2501      	movs	r5, #1
 800b540:	e7c4      	b.n	800b4cc <__gethex+0x9c>
 800b542:	2400      	movs	r4, #0
 800b544:	1cb1      	adds	r1, r6, #2
 800b546:	e7cd      	b.n	800b4e4 <__gethex+0xb4>
 800b548:	2401      	movs	r4, #1
 800b54a:	e7fb      	b.n	800b544 <__gethex+0x114>
 800b54c:	fb03 0002 	mla	r0, r3, r2, r0
 800b550:	e7cf      	b.n	800b4f2 <__gethex+0xc2>
 800b552:	4631      	mov	r1, r6
 800b554:	e7de      	b.n	800b514 <__gethex+0xe4>
 800b556:	eba6 0309 	sub.w	r3, r6, r9
 800b55a:	4629      	mov	r1, r5
 800b55c:	3b01      	subs	r3, #1
 800b55e:	2b07      	cmp	r3, #7
 800b560:	dc0a      	bgt.n	800b578 <__gethex+0x148>
 800b562:	9801      	ldr	r0, [sp, #4]
 800b564:	f7fe f958 	bl	8009818 <_Balloc>
 800b568:	4604      	mov	r4, r0
 800b56a:	b940      	cbnz	r0, 800b57e <__gethex+0x14e>
 800b56c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6e0 <__gethex+0x2b0>)
 800b56e:	4602      	mov	r2, r0
 800b570:	21e4      	movs	r1, #228	@ 0xe4
 800b572:	485c      	ldr	r0, [pc, #368]	@ (800b6e4 <__gethex+0x2b4>)
 800b574:	f7ff fec4 	bl	800b300 <__assert_func>
 800b578:	3101      	adds	r1, #1
 800b57a:	105b      	asrs	r3, r3, #1
 800b57c:	e7ef      	b.n	800b55e <__gethex+0x12e>
 800b57e:	f100 0a14 	add.w	sl, r0, #20
 800b582:	2300      	movs	r3, #0
 800b584:	4655      	mov	r5, sl
 800b586:	469b      	mov	fp, r3
 800b588:	45b1      	cmp	r9, r6
 800b58a:	d337      	bcc.n	800b5fc <__gethex+0x1cc>
 800b58c:	f845 bb04 	str.w	fp, [r5], #4
 800b590:	eba5 050a 	sub.w	r5, r5, sl
 800b594:	4658      	mov	r0, fp
 800b596:	10ad      	asrs	r5, r5, #2
 800b598:	6125      	str	r5, [r4, #16]
 800b59a:	016d      	lsls	r5, r5, #5
 800b59c:	f7fe fa30 	bl	8009a00 <__hi0bits>
 800b5a0:	f8d8 6000 	ldr.w	r6, [r8]
 800b5a4:	1a2d      	subs	r5, r5, r0
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	dd54      	ble.n	800b654 <__gethex+0x224>
 800b5aa:	1bad      	subs	r5, r5, r6
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7fe fdc7 	bl	800a142 <__any_on>
 800b5b4:	4681      	mov	r9, r0
 800b5b6:	b178      	cbz	r0, 800b5d8 <__gethex+0x1a8>
 800b5b8:	1e6b      	subs	r3, r5, #1
 800b5ba:	f04f 0901 	mov.w	r9, #1
 800b5be:	1159      	asrs	r1, r3, #5
 800b5c0:	f003 021f 	and.w	r2, r3, #31
 800b5c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5c8:	fa09 f202 	lsl.w	r2, r9, r2
 800b5cc:	420a      	tst	r2, r1
 800b5ce:	d003      	beq.n	800b5d8 <__gethex+0x1a8>
 800b5d0:	454b      	cmp	r3, r9
 800b5d2:	dc36      	bgt.n	800b642 <__gethex+0x212>
 800b5d4:	f04f 0902 	mov.w	r9, #2
 800b5d8:	442f      	add	r7, r5
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f7ff fec1 	bl	800b364 <rshift>
 800b5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e6:	42bb      	cmp	r3, r7
 800b5e8:	da42      	bge.n	800b670 <__gethex+0x240>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	f7fe f953 	bl	8009898 <_Bfree>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5f6:	25a3      	movs	r5, #163	@ 0xa3
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	e793      	b.n	800b524 <__gethex+0xf4>
 800b5fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b600:	2a2e      	cmp	r2, #46	@ 0x2e
 800b602:	d012      	beq.n	800b62a <__gethex+0x1fa>
 800b604:	2b20      	cmp	r3, #32
 800b606:	d104      	bne.n	800b612 <__gethex+0x1e2>
 800b608:	f845 bb04 	str.w	fp, [r5], #4
 800b60c:	f04f 0b00 	mov.w	fp, #0
 800b610:	465b      	mov	r3, fp
 800b612:	7830      	ldrb	r0, [r6, #0]
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	f7ff fef6 	bl	800b406 <__hexdig_fun>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	f000 000f 	and.w	r0, r0, #15
 800b620:	4098      	lsls	r0, r3
 800b622:	3304      	adds	r3, #4
 800b624:	ea4b 0b00 	orr.w	fp, fp, r0
 800b628:	e7ae      	b.n	800b588 <__gethex+0x158>
 800b62a:	45b1      	cmp	r9, r6
 800b62c:	d8ea      	bhi.n	800b604 <__gethex+0x1d4>
 800b62e:	2201      	movs	r2, #1
 800b630:	492a      	ldr	r1, [pc, #168]	@ (800b6dc <__gethex+0x2ac>)
 800b632:	4630      	mov	r0, r6
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	f7ff fe47 	bl	800b2c8 <strncmp>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d1e1      	bne.n	800b604 <__gethex+0x1d4>
 800b640:	e7a2      	b.n	800b588 <__gethex+0x158>
 800b642:	1ea9      	subs	r1, r5, #2
 800b644:	4620      	mov	r0, r4
 800b646:	f7fe fd7c 	bl	800a142 <__any_on>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d0c2      	beq.n	800b5d4 <__gethex+0x1a4>
 800b64e:	f04f 0903 	mov.w	r9, #3
 800b652:	e7c1      	b.n	800b5d8 <__gethex+0x1a8>
 800b654:	da09      	bge.n	800b66a <__gethex+0x23a>
 800b656:	1b75      	subs	r5, r6, r5
 800b658:	4621      	mov	r1, r4
 800b65a:	9801      	ldr	r0, [sp, #4]
 800b65c:	462a      	mov	r2, r5
 800b65e:	1b7f      	subs	r7, r7, r5
 800b660:	f7fe fb2e 	bl	8009cc0 <__lshift>
 800b664:	4604      	mov	r4, r0
 800b666:	f100 0a14 	add.w	sl, r0, #20
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	e7b8      	b.n	800b5e2 <__gethex+0x1b2>
 800b670:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b674:	42bd      	cmp	r5, r7
 800b676:	dd6f      	ble.n	800b758 <__gethex+0x328>
 800b678:	1bed      	subs	r5, r5, r7
 800b67a:	42ae      	cmp	r6, r5
 800b67c:	dc34      	bgt.n	800b6e8 <__gethex+0x2b8>
 800b67e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d022      	beq.n	800b6cc <__gethex+0x29c>
 800b686:	2b03      	cmp	r3, #3
 800b688:	d024      	beq.n	800b6d4 <__gethex+0x2a4>
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d115      	bne.n	800b6ba <__gethex+0x28a>
 800b68e:	42ae      	cmp	r6, r5
 800b690:	d113      	bne.n	800b6ba <__gethex+0x28a>
 800b692:	2e01      	cmp	r6, #1
 800b694:	d10b      	bne.n	800b6ae <__gethex+0x27e>
 800b696:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b69a:	2562      	movs	r5, #98	@ 0x62
 800b69c:	9a02      	ldr	r2, [sp, #8]
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	6123      	str	r3, [r4, #16]
 800b6a4:	f8ca 3000 	str.w	r3, [sl]
 800b6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6aa:	601c      	str	r4, [r3, #0]
 800b6ac:	e73a      	b.n	800b524 <__gethex+0xf4>
 800b6ae:	1e71      	subs	r1, r6, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f7fe fd46 	bl	800a142 <__any_on>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1ed      	bne.n	800b696 <__gethex+0x266>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	9801      	ldr	r0, [sp, #4]
 800b6be:	f7fe f8eb 	bl	8009898 <_Bfree>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6c6:	2550      	movs	r5, #80	@ 0x50
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	e72b      	b.n	800b524 <__gethex+0xf4>
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1f3      	bne.n	800b6ba <__gethex+0x28a>
 800b6d2:	e7e0      	b.n	800b696 <__gethex+0x266>
 800b6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1dd      	bne.n	800b696 <__gethex+0x266>
 800b6da:	e7ee      	b.n	800b6ba <__gethex+0x28a>
 800b6dc:	0800c527 	.word	0x0800c527
 800b6e0:	0800c4bd 	.word	0x0800c4bd
 800b6e4:	0800c57e 	.word	0x0800c57e
 800b6e8:	1e6f      	subs	r7, r5, #1
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	d130      	bne.n	800b752 <__gethex+0x322>
 800b6f0:	b127      	cbz	r7, 800b6fc <__gethex+0x2cc>
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7fe fd24 	bl	800a142 <__any_on>
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	117a      	asrs	r2, r7, #5
 800b6fe:	2301      	movs	r3, #1
 800b700:	f007 071f 	and.w	r7, r7, #31
 800b704:	4629      	mov	r1, r5
 800b706:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b70a:	4620      	mov	r0, r4
 800b70c:	40bb      	lsls	r3, r7
 800b70e:	1b76      	subs	r6, r6, r5
 800b710:	2502      	movs	r5, #2
 800b712:	4213      	tst	r3, r2
 800b714:	bf18      	it	ne
 800b716:	f049 0902 	orrne.w	r9, r9, #2
 800b71a:	f7ff fe23 	bl	800b364 <rshift>
 800b71e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b722:	f1b9 0f00 	cmp.w	r9, #0
 800b726:	d047      	beq.n	800b7b8 <__gethex+0x388>
 800b728:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d015      	beq.n	800b75c <__gethex+0x32c>
 800b730:	2b03      	cmp	r3, #3
 800b732:	d017      	beq.n	800b764 <__gethex+0x334>
 800b734:	2b01      	cmp	r3, #1
 800b736:	d109      	bne.n	800b74c <__gethex+0x31c>
 800b738:	f019 0f02 	tst.w	r9, #2
 800b73c:	d006      	beq.n	800b74c <__gethex+0x31c>
 800b73e:	f8da 3000 	ldr.w	r3, [sl]
 800b742:	ea49 0903 	orr.w	r9, r9, r3
 800b746:	f019 0f01 	tst.w	r9, #1
 800b74a:	d10e      	bne.n	800b76a <__gethex+0x33a>
 800b74c:	f045 0510 	orr.w	r5, r5, #16
 800b750:	e032      	b.n	800b7b8 <__gethex+0x388>
 800b752:	f04f 0901 	mov.w	r9, #1
 800b756:	e7d1      	b.n	800b6fc <__gethex+0x2cc>
 800b758:	2501      	movs	r5, #1
 800b75a:	e7e2      	b.n	800b722 <__gethex+0x2f2>
 800b75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b75e:	f1c3 0301 	rsb	r3, r3, #1
 800b762:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0f0      	beq.n	800b74c <__gethex+0x31c>
 800b76a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b76e:	f104 0314 	add.w	r3, r4, #20
 800b772:	f04f 0c00 	mov.w	ip, #0
 800b776:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b77a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b77e:	4618      	mov	r0, r3
 800b780:	f853 2b04 	ldr.w	r2, [r3], #4
 800b784:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b788:	d01b      	beq.n	800b7c2 <__gethex+0x392>
 800b78a:	3201      	adds	r2, #1
 800b78c:	6002      	str	r2, [r0, #0]
 800b78e:	2d02      	cmp	r5, #2
 800b790:	f104 0314 	add.w	r3, r4, #20
 800b794:	d13c      	bne.n	800b810 <__gethex+0x3e0>
 800b796:	f8d8 2000 	ldr.w	r2, [r8]
 800b79a:	3a01      	subs	r2, #1
 800b79c:	42b2      	cmp	r2, r6
 800b79e:	d109      	bne.n	800b7b4 <__gethex+0x384>
 800b7a0:	1171      	asrs	r1, r6, #5
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f006 061f 	and.w	r6, r6, #31
 800b7a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b7b0:	421e      	tst	r6, r3
 800b7b2:	d13a      	bne.n	800b82a <__gethex+0x3fa>
 800b7b4:	f045 0520 	orr.w	r5, r5, #32
 800b7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7ba:	601c      	str	r4, [r3, #0]
 800b7bc:	9b02      	ldr	r3, [sp, #8]
 800b7be:	601f      	str	r7, [r3, #0]
 800b7c0:	e6b0      	b.n	800b524 <__gethex+0xf4>
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7c8:	d8d9      	bhi.n	800b77e <__gethex+0x34e>
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	459b      	cmp	fp, r3
 800b7ce:	db17      	blt.n	800b800 <__gethex+0x3d0>
 800b7d0:	6861      	ldr	r1, [r4, #4]
 800b7d2:	9801      	ldr	r0, [sp, #4]
 800b7d4:	3101      	adds	r1, #1
 800b7d6:	f7fe f81f 	bl	8009818 <_Balloc>
 800b7da:	4681      	mov	r9, r0
 800b7dc:	b918      	cbnz	r0, 800b7e6 <__gethex+0x3b6>
 800b7de:	4b1a      	ldr	r3, [pc, #104]	@ (800b848 <__gethex+0x418>)
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	2184      	movs	r1, #132	@ 0x84
 800b7e4:	e6c5      	b.n	800b572 <__gethex+0x142>
 800b7e6:	6922      	ldr	r2, [r4, #16]
 800b7e8:	f104 010c 	add.w	r1, r4, #12
 800b7ec:	300c      	adds	r0, #12
 800b7ee:	3202      	adds	r2, #2
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	f7fd f952 	bl	8008a9a <memcpy>
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	464c      	mov	r4, r9
 800b7fa:	9801      	ldr	r0, [sp, #4]
 800b7fc:	f7fe f84c 	bl	8009898 <_Bfree>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b808:	6122      	str	r2, [r4, #16]
 800b80a:	2201      	movs	r2, #1
 800b80c:	615a      	str	r2, [r3, #20]
 800b80e:	e7be      	b.n	800b78e <__gethex+0x35e>
 800b810:	6922      	ldr	r2, [r4, #16]
 800b812:	455a      	cmp	r2, fp
 800b814:	dd0b      	ble.n	800b82e <__gethex+0x3fe>
 800b816:	2101      	movs	r1, #1
 800b818:	4620      	mov	r0, r4
 800b81a:	f7ff fda3 	bl	800b364 <rshift>
 800b81e:	3701      	adds	r7, #1
 800b820:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b824:	42bb      	cmp	r3, r7
 800b826:	f6ff aee0 	blt.w	800b5ea <__gethex+0x1ba>
 800b82a:	2501      	movs	r5, #1
 800b82c:	e7c2      	b.n	800b7b4 <__gethex+0x384>
 800b82e:	f016 061f 	ands.w	r6, r6, #31
 800b832:	d0fa      	beq.n	800b82a <__gethex+0x3fa>
 800b834:	4453      	add	r3, sl
 800b836:	f1c6 0620 	rsb	r6, r6, #32
 800b83a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b83e:	f7fe f8df 	bl	8009a00 <__hi0bits>
 800b842:	42b0      	cmp	r0, r6
 800b844:	dbe7      	blt.n	800b816 <__gethex+0x3e6>
 800b846:	e7f0      	b.n	800b82a <__gethex+0x3fa>
 800b848:	0800c4bd 	.word	0x0800c4bd

0800b84c <L_shift>:
 800b84c:	f1c2 0208 	rsb	r2, r2, #8
 800b850:	0092      	lsls	r2, r2, #2
 800b852:	b570      	push	{r4, r5, r6, lr}
 800b854:	f1c2 0620 	rsb	r6, r2, #32
 800b858:	6843      	ldr	r3, [r0, #4]
 800b85a:	6804      	ldr	r4, [r0, #0]
 800b85c:	fa03 f506 	lsl.w	r5, r3, r6
 800b860:	40d3      	lsrs	r3, r2
 800b862:	432c      	orrs	r4, r5
 800b864:	6004      	str	r4, [r0, #0]
 800b866:	f840 3f04 	str.w	r3, [r0, #4]!
 800b86a:	4288      	cmp	r0, r1
 800b86c:	d3f4      	bcc.n	800b858 <L_shift+0xc>
 800b86e:	bd70      	pop	{r4, r5, r6, pc}

0800b870 <__match>:
 800b870:	6803      	ldr	r3, [r0, #0]
 800b872:	3301      	adds	r3, #1
 800b874:	b530      	push	{r4, r5, lr}
 800b876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87a:	b914      	cbnz	r4, 800b882 <__match+0x12>
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	bd30      	pop	{r4, r5, pc}
 800b882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b886:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b88a:	2d19      	cmp	r5, #25
 800b88c:	bf98      	it	ls
 800b88e:	3220      	addls	r2, #32
 800b890:	42a2      	cmp	r2, r4
 800b892:	d0f0      	beq.n	800b876 <__match+0x6>
 800b894:	2000      	movs	r0, #0
 800b896:	e7f3      	b.n	800b880 <__match+0x10>

0800b898 <__hexnan>:
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	6801      	ldr	r1, [r0, #0]
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	115e      	asrs	r6, r3, #5
 800b8a2:	f013 031f 	ands.w	r3, r3, #31
 800b8a6:	f04f 0500 	mov.w	r5, #0
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	4690      	mov	r8, r2
 800b8b4:	46ab      	mov	fp, r5
 800b8b6:	bf18      	it	ne
 800b8b8:	3604      	addne	r6, #4
 800b8ba:	9301      	str	r3, [sp, #4]
 800b8bc:	9502      	str	r5, [sp, #8]
 800b8be:	1f37      	subs	r7, r6, #4
 800b8c0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8c4:	46b9      	mov	r9, r7
 800b8c6:	463c      	mov	r4, r7
 800b8c8:	1c4b      	adds	r3, r1, #1
 800b8ca:	784a      	ldrb	r2, [r1, #1]
 800b8cc:	9303      	str	r3, [sp, #12]
 800b8ce:	b342      	cbz	r2, 800b922 <__hexnan+0x8a>
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	9105      	str	r1, [sp, #20]
 800b8d4:	9204      	str	r2, [sp, #16]
 800b8d6:	f7ff fd96 	bl	800b406 <__hexdig_fun>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d151      	bne.n	800b982 <__hexnan+0xea>
 800b8de:	9a04      	ldr	r2, [sp, #16]
 800b8e0:	9905      	ldr	r1, [sp, #20]
 800b8e2:	2a20      	cmp	r2, #32
 800b8e4:	d818      	bhi.n	800b918 <__hexnan+0x80>
 800b8e6:	9b02      	ldr	r3, [sp, #8]
 800b8e8:	459b      	cmp	fp, r3
 800b8ea:	dd13      	ble.n	800b914 <__hexnan+0x7c>
 800b8ec:	454c      	cmp	r4, r9
 800b8ee:	d206      	bcs.n	800b8fe <__hexnan+0x66>
 800b8f0:	2d07      	cmp	r5, #7
 800b8f2:	dc04      	bgt.n	800b8fe <__hexnan+0x66>
 800b8f4:	462a      	mov	r2, r5
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f7ff ffa7 	bl	800b84c <L_shift>
 800b8fe:	4544      	cmp	r4, r8
 800b900:	d951      	bls.n	800b9a6 <__hexnan+0x10e>
 800b902:	2300      	movs	r3, #0
 800b904:	f1a4 0904 	sub.w	r9, r4, #4
 800b908:	f8cd b008 	str.w	fp, [sp, #8]
 800b90c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b910:	461d      	mov	r5, r3
 800b912:	464c      	mov	r4, r9
 800b914:	9903      	ldr	r1, [sp, #12]
 800b916:	e7d7      	b.n	800b8c8 <__hexnan+0x30>
 800b918:	2a29      	cmp	r2, #41	@ 0x29
 800b91a:	d156      	bne.n	800b9ca <__hexnan+0x132>
 800b91c:	3102      	adds	r1, #2
 800b91e:	f8ca 1000 	str.w	r1, [sl]
 800b922:	f1bb 0f00 	cmp.w	fp, #0
 800b926:	d050      	beq.n	800b9ca <__hexnan+0x132>
 800b928:	454c      	cmp	r4, r9
 800b92a:	d206      	bcs.n	800b93a <__hexnan+0xa2>
 800b92c:	2d07      	cmp	r5, #7
 800b92e:	dc04      	bgt.n	800b93a <__hexnan+0xa2>
 800b930:	462a      	mov	r2, r5
 800b932:	4649      	mov	r1, r9
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff ff89 	bl	800b84c <L_shift>
 800b93a:	4544      	cmp	r4, r8
 800b93c:	d935      	bls.n	800b9aa <__hexnan+0x112>
 800b93e:	f1a8 0204 	sub.w	r2, r8, #4
 800b942:	4623      	mov	r3, r4
 800b944:	f853 1b04 	ldr.w	r1, [r3], #4
 800b948:	429f      	cmp	r7, r3
 800b94a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b94e:	d2f9      	bcs.n	800b944 <__hexnan+0xac>
 800b950:	1b3b      	subs	r3, r7, r4
 800b952:	3e03      	subs	r6, #3
 800b954:	3401      	adds	r4, #1
 800b956:	2200      	movs	r2, #0
 800b958:	f023 0303 	bic.w	r3, r3, #3
 800b95c:	3304      	adds	r3, #4
 800b95e:	42b4      	cmp	r4, r6
 800b960:	bf88      	it	hi
 800b962:	2304      	movhi	r3, #4
 800b964:	4443      	add	r3, r8
 800b966:	f843 2b04 	str.w	r2, [r3], #4
 800b96a:	429f      	cmp	r7, r3
 800b96c:	d2fb      	bcs.n	800b966 <__hexnan+0xce>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	b91b      	cbnz	r3, 800b97a <__hexnan+0xe2>
 800b972:	4547      	cmp	r7, r8
 800b974:	d127      	bne.n	800b9c6 <__hexnan+0x12e>
 800b976:	2301      	movs	r3, #1
 800b978:	603b      	str	r3, [r7, #0]
 800b97a:	2005      	movs	r0, #5
 800b97c:	b007      	add	sp, #28
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b982:	3501      	adds	r5, #1
 800b984:	f10b 0b01 	add.w	fp, fp, #1
 800b988:	2d08      	cmp	r5, #8
 800b98a:	dd05      	ble.n	800b998 <__hexnan+0x100>
 800b98c:	4544      	cmp	r4, r8
 800b98e:	d9c1      	bls.n	800b914 <__hexnan+0x7c>
 800b990:	2300      	movs	r3, #0
 800b992:	3c04      	subs	r4, #4
 800b994:	2501      	movs	r5, #1
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	f000 000f 	and.w	r0, r0, #15
 800b99e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	e7b6      	b.n	800b914 <__hexnan+0x7c>
 800b9a6:	2508      	movs	r5, #8
 800b9a8:	e7b4      	b.n	800b914 <__hexnan+0x7c>
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0de      	beq.n	800b96e <__hexnan+0xd6>
 800b9b0:	f1c3 0320 	rsb	r3, r3, #32
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b8:	40da      	lsrs	r2, r3
 800b9ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9c4:	e7d3      	b.n	800b96e <__hexnan+0xd6>
 800b9c6:	3f04      	subs	r7, #4
 800b9c8:	e7d1      	b.n	800b96e <__hexnan+0xd6>
 800b9ca:	2004      	movs	r0, #4
 800b9cc:	e7d6      	b.n	800b97c <__hexnan+0xe4>

0800b9ce <__ascii_mbtowc>:
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	b901      	cbnz	r1, 800b9d4 <__ascii_mbtowc+0x6>
 800b9d2:	a901      	add	r1, sp, #4
 800b9d4:	b142      	cbz	r2, 800b9e8 <__ascii_mbtowc+0x1a>
 800b9d6:	b14b      	cbz	r3, 800b9ec <__ascii_mbtowc+0x1e>
 800b9d8:	7813      	ldrb	r3, [r2, #0]
 800b9da:	600b      	str	r3, [r1, #0]
 800b9dc:	7812      	ldrb	r2, [r2, #0]
 800b9de:	1e10      	subs	r0, r2, #0
 800b9e0:	bf18      	it	ne
 800b9e2:	2001      	movne	r0, #1
 800b9e4:	b002      	add	sp, #8
 800b9e6:	4770      	bx	lr
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	e7fb      	b.n	800b9e4 <__ascii_mbtowc+0x16>
 800b9ec:	f06f 0001 	mvn.w	r0, #1
 800b9f0:	e7f8      	b.n	800b9e4 <__ascii_mbtowc+0x16>

0800b9f2 <_realloc_r>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	4607      	mov	r7, r0
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	b921      	cbnz	r1, 800ba08 <_realloc_r+0x16>
 800b9fe:	4611      	mov	r1, r2
 800ba00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	f7fb bf92 	b.w	800792c <_malloc_r>
 800ba08:	b92a      	cbnz	r2, 800ba16 <_realloc_r+0x24>
 800ba0a:	4625      	mov	r5, r4
 800ba0c:	f7fd feba 	bl	8009784 <_free_r>
 800ba10:	4628      	mov	r0, r5
 800ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba16:	f000 f840 	bl	800ba9a <_malloc_usable_size_r>
 800ba1a:	4284      	cmp	r4, r0
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	d802      	bhi.n	800ba26 <_realloc_r+0x34>
 800ba20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba24:	d8f4      	bhi.n	800ba10 <_realloc_r+0x1e>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7fb ff7f 	bl	800792c <_malloc_r>
 800ba2e:	4680      	mov	r8, r0
 800ba30:	b908      	cbnz	r0, 800ba36 <_realloc_r+0x44>
 800ba32:	4645      	mov	r5, r8
 800ba34:	e7ec      	b.n	800ba10 <_realloc_r+0x1e>
 800ba36:	42b4      	cmp	r4, r6
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	bf28      	it	cs
 800ba3e:	4632      	movcs	r2, r6
 800ba40:	f7fd f82b 	bl	8008a9a <memcpy>
 800ba44:	4629      	mov	r1, r5
 800ba46:	4638      	mov	r0, r7
 800ba48:	f7fd fe9c 	bl	8009784 <_free_r>
 800ba4c:	e7f1      	b.n	800ba32 <_realloc_r+0x40>

0800ba4e <__ascii_wctomb>:
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	b141      	cbz	r1, 800ba66 <__ascii_wctomb+0x18>
 800ba54:	2aff      	cmp	r2, #255	@ 0xff
 800ba56:	d904      	bls.n	800ba62 <__ascii_wctomb+0x14>
 800ba58:	228a      	movs	r2, #138	@ 0x8a
 800ba5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	4770      	bx	lr
 800ba62:	2001      	movs	r0, #1
 800ba64:	700a      	strb	r2, [r1, #0]
 800ba66:	4770      	bx	lr

0800ba68 <fiprintf>:
 800ba68:	b40e      	push	{r1, r2, r3}
 800ba6a:	b503      	push	{r0, r1, lr}
 800ba6c:	ab03      	add	r3, sp, #12
 800ba6e:	4601      	mov	r1, r0
 800ba70:	4805      	ldr	r0, [pc, #20]	@ (800ba88 <fiprintf+0x20>)
 800ba72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba76:	6800      	ldr	r0, [r0, #0]
 800ba78:	9301      	str	r3, [sp, #4]
 800ba7a:	f000 f83f 	bl	800bafc <_vfiprintf_r>
 800ba7e:	b002      	add	sp, #8
 800ba80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba84:	b003      	add	sp, #12
 800ba86:	4770      	bx	lr
 800ba88:	20000018 	.word	0x20000018

0800ba8c <abort>:
 800ba8c:	2006      	movs	r0, #6
 800ba8e:	b508      	push	{r3, lr}
 800ba90:	f000 fa08 	bl	800bea4 <raise>
 800ba94:	2001      	movs	r0, #1
 800ba96:	f7f8 f88e 	bl	8003bb6 <_exit>

0800ba9a <_malloc_usable_size_r>:
 800ba9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9e:	1f18      	subs	r0, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bfbc      	itt	lt
 800baa4:	580b      	ldrlt	r3, [r1, r0]
 800baa6:	18c0      	addlt	r0, r0, r3
 800baa8:	4770      	bx	lr

0800baaa <__sfputc_r>:
 800baaa:	6893      	ldr	r3, [r2, #8]
 800baac:	3b01      	subs	r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	b410      	push	{r4}
 800bab2:	6093      	str	r3, [r2, #8]
 800bab4:	da08      	bge.n	800bac8 <__sfputc_r+0x1e>
 800bab6:	6994      	ldr	r4, [r2, #24]
 800bab8:	42a3      	cmp	r3, r4
 800baba:	db01      	blt.n	800bac0 <__sfputc_r+0x16>
 800babc:	290a      	cmp	r1, #10
 800babe:	d103      	bne.n	800bac8 <__sfputc_r+0x1e>
 800bac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bac4:	f000 b932 	b.w	800bd2c <__swbuf_r>
 800bac8:	6813      	ldr	r3, [r2, #0]
 800baca:	1c58      	adds	r0, r3, #1
 800bacc:	6010      	str	r0, [r2, #0]
 800bace:	4608      	mov	r0, r1
 800bad0:	7019      	strb	r1, [r3, #0]
 800bad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <__sfputs_r>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	4614      	mov	r4, r2
 800bae0:	18d5      	adds	r5, r2, r3
 800bae2:	42ac      	cmp	r4, r5
 800bae4:	d101      	bne.n	800baea <__sfputs_r+0x12>
 800bae6:	2000      	movs	r0, #0
 800bae8:	e007      	b.n	800bafa <__sfputs_r+0x22>
 800baea:	463a      	mov	r2, r7
 800baec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7ff ffda 	bl	800baaa <__sfputc_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d1f3      	bne.n	800bae2 <__sfputs_r+0xa>
 800bafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bafc <_vfiprintf_r>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	460d      	mov	r5, r1
 800bb02:	b09d      	sub	sp, #116	@ 0x74
 800bb04:	4614      	mov	r4, r2
 800bb06:	4698      	mov	r8, r3
 800bb08:	4606      	mov	r6, r0
 800bb0a:	b118      	cbz	r0, 800bb14 <_vfiprintf_r+0x18>
 800bb0c:	6a03      	ldr	r3, [r0, #32]
 800bb0e:	b90b      	cbnz	r3, 800bb14 <_vfiprintf_r+0x18>
 800bb10:	f7fc fe8a 	bl	8008828 <__sinit>
 800bb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb16:	07d9      	lsls	r1, r3, #31
 800bb18:	d405      	bmi.n	800bb26 <_vfiprintf_r+0x2a>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	059a      	lsls	r2, r3, #22
 800bb1e:	d402      	bmi.n	800bb26 <_vfiprintf_r+0x2a>
 800bb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb22:	f7fc ffaa 	bl	8008a7a <__retarget_lock_acquire_recursive>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	071b      	lsls	r3, r3, #28
 800bb2a:	d501      	bpl.n	800bb30 <_vfiprintf_r+0x34>
 800bb2c:	692b      	ldr	r3, [r5, #16]
 800bb2e:	b99b      	cbnz	r3, 800bb58 <_vfiprintf_r+0x5c>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4630      	mov	r0, r6
 800bb34:	f000 f938 	bl	800bda8 <__swsetup_r>
 800bb38:	b170      	cbz	r0, 800bb58 <_vfiprintf_r+0x5c>
 800bb3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb3c:	07dc      	lsls	r4, r3, #31
 800bb3e:	d504      	bpl.n	800bb4a <_vfiprintf_r+0x4e>
 800bb40:	f04f 30ff 	mov.w	r0, #4294967295
 800bb44:	b01d      	add	sp, #116	@ 0x74
 800bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4a:	89ab      	ldrh	r3, [r5, #12]
 800bb4c:	0598      	lsls	r0, r3, #22
 800bb4e:	d4f7      	bmi.n	800bb40 <_vfiprintf_r+0x44>
 800bb50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb52:	f7fc ff93 	bl	8008a7c <__retarget_lock_release_recursive>
 800bb56:	e7f3      	b.n	800bb40 <_vfiprintf_r+0x44>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb5e:	f04f 0901 	mov.w	r9, #1
 800bb62:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bd18 <_vfiprintf_r+0x21c>
 800bb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb6e:	2330      	movs	r3, #48	@ 0x30
 800bb70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb74:	4623      	mov	r3, r4
 800bb76:	469a      	mov	sl, r3
 800bb78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7c:	b10a      	cbz	r2, 800bb82 <_vfiprintf_r+0x86>
 800bb7e:	2a25      	cmp	r2, #37	@ 0x25
 800bb80:	d1f9      	bne.n	800bb76 <_vfiprintf_r+0x7a>
 800bb82:	ebba 0b04 	subs.w	fp, sl, r4
 800bb86:	d00b      	beq.n	800bba0 <_vfiprintf_r+0xa4>
 800bb88:	465b      	mov	r3, fp
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ffa2 	bl	800bad8 <__sfputs_r>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f000 80a7 	beq.w	800bce8 <_vfiprintf_r+0x1ec>
 800bb9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb9c:	445a      	add	r2, fp
 800bb9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bba0:	f89a 3000 	ldrb.w	r3, [sl]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 809f 	beq.w	800bce8 <_vfiprintf_r+0x1ec>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb0:	f10a 0a01 	add.w	sl, sl, #1
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	9307      	str	r3, [sp, #28]
 800bbb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc2:	4654      	mov	r4, sl
 800bbc4:	2205      	movs	r2, #5
 800bbc6:	4854      	ldr	r0, [pc, #336]	@ (800bd18 <_vfiprintf_r+0x21c>)
 800bbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbcc:	f7fc ff57 	bl	8008a7e <memchr>
 800bbd0:	9a04      	ldr	r2, [sp, #16]
 800bbd2:	b9d8      	cbnz	r0, 800bc0c <_vfiprintf_r+0x110>
 800bbd4:	06d1      	lsls	r1, r2, #27
 800bbd6:	bf44      	itt	mi
 800bbd8:	2320      	movmi	r3, #32
 800bbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbde:	0713      	lsls	r3, r2, #28
 800bbe0:	bf44      	itt	mi
 800bbe2:	232b      	movmi	r3, #43	@ 0x2b
 800bbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbee:	d015      	beq.n	800bc1c <_vfiprintf_r+0x120>
 800bbf0:	9a07      	ldr	r2, [sp, #28]
 800bbf2:	4654      	mov	r4, sl
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f04f 0c0a 	mov.w	ip, #10
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc00:	3b30      	subs	r3, #48	@ 0x30
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d94b      	bls.n	800bc9e <_vfiprintf_r+0x1a2>
 800bc06:	b1b0      	cbz	r0, 800bc36 <_vfiprintf_r+0x13a>
 800bc08:	9207      	str	r2, [sp, #28]
 800bc0a:	e014      	b.n	800bc36 <_vfiprintf_r+0x13a>
 800bc0c:	eba0 0308 	sub.w	r3, r0, r8
 800bc10:	46a2      	mov	sl, r4
 800bc12:	fa09 f303 	lsl.w	r3, r9, r3
 800bc16:	4313      	orrs	r3, r2
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	e7d2      	b.n	800bbc2 <_vfiprintf_r+0xc6>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	1d19      	adds	r1, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	9103      	str	r1, [sp, #12]
 800bc26:	bfbb      	ittet	lt
 800bc28:	425b      	neglt	r3, r3
 800bc2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc2e:	9307      	strge	r3, [sp, #28]
 800bc30:	9307      	strlt	r3, [sp, #28]
 800bc32:	bfb8      	it	lt
 800bc34:	9204      	strlt	r2, [sp, #16]
 800bc36:	7823      	ldrb	r3, [r4, #0]
 800bc38:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc3a:	d10a      	bne.n	800bc52 <_vfiprintf_r+0x156>
 800bc3c:	7863      	ldrb	r3, [r4, #1]
 800bc3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc40:	d132      	bne.n	800bca8 <_vfiprintf_r+0x1ac>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	3402      	adds	r4, #2
 800bc46:	1d1a      	adds	r2, r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc4e:	9203      	str	r2, [sp, #12]
 800bc50:	9305      	str	r3, [sp, #20]
 800bc52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd28 <_vfiprintf_r+0x22c>
 800bc56:	2203      	movs	r2, #3
 800bc58:	7821      	ldrb	r1, [r4, #0]
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	f7fc ff0f 	bl	8008a7e <memchr>
 800bc60:	b138      	cbz	r0, 800bc72 <_vfiprintf_r+0x176>
 800bc62:	eba0 000a 	sub.w	r0, r0, sl
 800bc66:	2240      	movs	r2, #64	@ 0x40
 800bc68:	9b04      	ldr	r3, [sp, #16]
 800bc6a:	3401      	adds	r4, #1
 800bc6c:	4082      	lsls	r2, r0
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	2206      	movs	r2, #6
 800bc78:	4828      	ldr	r0, [pc, #160]	@ (800bd1c <_vfiprintf_r+0x220>)
 800bc7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc7e:	f7fc fefe 	bl	8008a7e <memchr>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d03f      	beq.n	800bd06 <_vfiprintf_r+0x20a>
 800bc86:	4b26      	ldr	r3, [pc, #152]	@ (800bd20 <_vfiprintf_r+0x224>)
 800bc88:	bb1b      	cbnz	r3, 800bcd2 <_vfiprintf_r+0x1d6>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	3307      	adds	r3, #7
 800bc8e:	f023 0307 	bic.w	r3, r3, #7
 800bc92:	3308      	adds	r3, #8
 800bc94:	9303      	str	r3, [sp, #12]
 800bc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc98:	443b      	add	r3, r7
 800bc9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc9c:	e76a      	b.n	800bb74 <_vfiprintf_r+0x78>
 800bc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca2:	460c      	mov	r4, r1
 800bca4:	2001      	movs	r0, #1
 800bca6:	e7a8      	b.n	800bbfa <_vfiprintf_r+0xfe>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	3401      	adds	r4, #1
 800bcac:	f04f 0c0a 	mov.w	ip, #10
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcba:	3a30      	subs	r2, #48	@ 0x30
 800bcbc:	2a09      	cmp	r2, #9
 800bcbe:	d903      	bls.n	800bcc8 <_vfiprintf_r+0x1cc>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0c6      	beq.n	800bc52 <_vfiprintf_r+0x156>
 800bcc4:	9105      	str	r1, [sp, #20]
 800bcc6:	e7c4      	b.n	800bc52 <_vfiprintf_r+0x156>
 800bcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bccc:	4604      	mov	r4, r0
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e7f0      	b.n	800bcb4 <_vfiprintf_r+0x1b8>
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	a904      	add	r1, sp, #16
 800bcd8:	4630      	mov	r0, r6
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	4b11      	ldr	r3, [pc, #68]	@ (800bd24 <_vfiprintf_r+0x228>)
 800bcde:	f7fb ff4f 	bl	8007b80 <_printf_float>
 800bce2:	4607      	mov	r7, r0
 800bce4:	1c78      	adds	r0, r7, #1
 800bce6:	d1d6      	bne.n	800bc96 <_vfiprintf_r+0x19a>
 800bce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d405      	bmi.n	800bcfa <_vfiprintf_r+0x1fe>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	059a      	lsls	r2, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_vfiprintf_r+0x1fe>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcf6:	f7fc fec1 	bl	8008a7c <__retarget_lock_release_recursive>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	065b      	lsls	r3, r3, #25
 800bcfe:	f53f af1f 	bmi.w	800bb40 <_vfiprintf_r+0x44>
 800bd02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd04:	e71e      	b.n	800bb44 <_vfiprintf_r+0x48>
 800bd06:	ab03      	add	r3, sp, #12
 800bd08:	462a      	mov	r2, r5
 800bd0a:	a904      	add	r1, sp, #16
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	4b04      	ldr	r3, [pc, #16]	@ (800bd24 <_vfiprintf_r+0x228>)
 800bd12:	f7fc f9d1 	bl	80080b8 <_printf_i>
 800bd16:	e7e4      	b.n	800bce2 <_vfiprintf_r+0x1e6>
 800bd18:	0800c529 	.word	0x0800c529
 800bd1c:	0800c533 	.word	0x0800c533
 800bd20:	08007b81 	.word	0x08007b81
 800bd24:	0800bad9 	.word	0x0800bad9
 800bd28:	0800c52f 	.word	0x0800c52f

0800bd2c <__swbuf_r>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	460e      	mov	r6, r1
 800bd30:	4614      	mov	r4, r2
 800bd32:	4605      	mov	r5, r0
 800bd34:	b118      	cbz	r0, 800bd3e <__swbuf_r+0x12>
 800bd36:	6a03      	ldr	r3, [r0, #32]
 800bd38:	b90b      	cbnz	r3, 800bd3e <__swbuf_r+0x12>
 800bd3a:	f7fc fd75 	bl	8008828 <__sinit>
 800bd3e:	69a3      	ldr	r3, [r4, #24]
 800bd40:	60a3      	str	r3, [r4, #8]
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	071a      	lsls	r2, r3, #28
 800bd46:	d501      	bpl.n	800bd4c <__swbuf_r+0x20>
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	b943      	cbnz	r3, 800bd5e <__swbuf_r+0x32>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f000 f82a 	bl	800bda8 <__swsetup_r>
 800bd54:	b118      	cbz	r0, 800bd5e <__swbuf_r+0x32>
 800bd56:	f04f 37ff 	mov.w	r7, #4294967295
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	b2f6      	uxtb	r6, r6
 800bd62:	6922      	ldr	r2, [r4, #16]
 800bd64:	4637      	mov	r7, r6
 800bd66:	1a98      	subs	r0, r3, r2
 800bd68:	6963      	ldr	r3, [r4, #20]
 800bd6a:	4283      	cmp	r3, r0
 800bd6c:	dc05      	bgt.n	800bd7a <__swbuf_r+0x4e>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4628      	mov	r0, r5
 800bd72:	f7ff fa67 	bl	800b244 <_fflush_r>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d1ed      	bne.n	800bd56 <__swbuf_r+0x2a>
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	60a3      	str	r3, [r4, #8]
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	701e      	strb	r6, [r3, #0]
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	6962      	ldr	r2, [r4, #20]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d004      	beq.n	800bd9a <__swbuf_r+0x6e>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	07db      	lsls	r3, r3, #31
 800bd94:	d5e1      	bpl.n	800bd5a <__swbuf_r+0x2e>
 800bd96:	2e0a      	cmp	r6, #10
 800bd98:	d1df      	bne.n	800bd5a <__swbuf_r+0x2e>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7ff fa51 	bl	800b244 <_fflush_r>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d0d9      	beq.n	800bd5a <__swbuf_r+0x2e>
 800bda6:	e7d6      	b.n	800bd56 <__swbuf_r+0x2a>

0800bda8 <__swsetup_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4b29      	ldr	r3, [pc, #164]	@ (800be50 <__swsetup_r+0xa8>)
 800bdac:	4605      	mov	r5, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	b118      	cbz	r0, 800bdbc <__swsetup_r+0x14>
 800bdb4:	6a03      	ldr	r3, [r0, #32]
 800bdb6:	b90b      	cbnz	r3, 800bdbc <__swsetup_r+0x14>
 800bdb8:	f7fc fd36 	bl	8008828 <__sinit>
 800bdbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc0:	0719      	lsls	r1, r3, #28
 800bdc2:	d422      	bmi.n	800be0a <__swsetup_r+0x62>
 800bdc4:	06da      	lsls	r2, r3, #27
 800bdc6:	d407      	bmi.n	800bdd8 <__swsetup_r+0x30>
 800bdc8:	2209      	movs	r2, #9
 800bdca:	602a      	str	r2, [r5, #0]
 800bdcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	e033      	b.n	800be40 <__swsetup_r+0x98>
 800bdd8:	0758      	lsls	r0, r3, #29
 800bdda:	d512      	bpl.n	800be02 <__swsetup_r+0x5a>
 800bddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdde:	b141      	cbz	r1, 800bdf2 <__swsetup_r+0x4a>
 800bde0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bde4:	4299      	cmp	r1, r3
 800bde6:	d002      	beq.n	800bdee <__swsetup_r+0x46>
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7fd fccb 	bl	8009784 <_free_r>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	6063      	str	r3, [r4, #4]
 800bdfe:	6923      	ldr	r3, [r4, #16]
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f043 0308 	orr.w	r3, r3, #8
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	b94b      	cbnz	r3, 800be22 <__swsetup_r+0x7a>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be18:	d003      	beq.n	800be22 <__swsetup_r+0x7a>
 800be1a:	4621      	mov	r1, r4
 800be1c:	4628      	mov	r0, r5
 800be1e:	f000 f882 	bl	800bf26 <__smakebuf_r>
 800be22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be26:	f013 0201 	ands.w	r2, r3, #1
 800be2a:	d00a      	beq.n	800be42 <__swsetup_r+0x9a>
 800be2c:	2200      	movs	r2, #0
 800be2e:	60a2      	str	r2, [r4, #8]
 800be30:	6962      	ldr	r2, [r4, #20]
 800be32:	4252      	negs	r2, r2
 800be34:	61a2      	str	r2, [r4, #24]
 800be36:	6922      	ldr	r2, [r4, #16]
 800be38:	b942      	cbnz	r2, 800be4c <__swsetup_r+0xa4>
 800be3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be3e:	d1c5      	bne.n	800bdcc <__swsetup_r+0x24>
 800be40:	bd38      	pop	{r3, r4, r5, pc}
 800be42:	0799      	lsls	r1, r3, #30
 800be44:	bf58      	it	pl
 800be46:	6962      	ldrpl	r2, [r4, #20]
 800be48:	60a2      	str	r2, [r4, #8]
 800be4a:	e7f4      	b.n	800be36 <__swsetup_r+0x8e>
 800be4c:	2000      	movs	r0, #0
 800be4e:	e7f7      	b.n	800be40 <__swsetup_r+0x98>
 800be50:	20000018 	.word	0x20000018

0800be54 <_raise_r>:
 800be54:	291f      	cmp	r1, #31
 800be56:	b538      	push	{r3, r4, r5, lr}
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	d904      	bls.n	800be68 <_raise_r+0x14>
 800be5e:	2316      	movs	r3, #22
 800be60:	6003      	str	r3, [r0, #0]
 800be62:	f04f 30ff 	mov.w	r0, #4294967295
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be6a:	b112      	cbz	r2, 800be72 <_raise_r+0x1e>
 800be6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be70:	b94b      	cbnz	r3, 800be86 <_raise_r+0x32>
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f830 	bl	800bed8 <_getpid_r>
 800be78:	4622      	mov	r2, r4
 800be7a:	4601      	mov	r1, r0
 800be7c:	4628      	mov	r0, r5
 800be7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be82:	f000 b817 	b.w	800beb4 <_kill_r>
 800be86:	2b01      	cmp	r3, #1
 800be88:	d00a      	beq.n	800bea0 <_raise_r+0x4c>
 800be8a:	1c59      	adds	r1, r3, #1
 800be8c:	d103      	bne.n	800be96 <_raise_r+0x42>
 800be8e:	2316      	movs	r3, #22
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	2001      	movs	r0, #1
 800be94:	e7e7      	b.n	800be66 <_raise_r+0x12>
 800be96:	2100      	movs	r1, #0
 800be98:	4620      	mov	r0, r4
 800be9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be9e:	4798      	blx	r3
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7e0      	b.n	800be66 <_raise_r+0x12>

0800bea4 <raise>:
 800bea4:	4b02      	ldr	r3, [pc, #8]	@ (800beb0 <raise+0xc>)
 800bea6:	4601      	mov	r1, r0
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	f7ff bfd3 	b.w	800be54 <_raise_r>
 800beae:	bf00      	nop
 800beb0:	20000018 	.word	0x20000018

0800beb4 <_kill_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	2300      	movs	r3, #0
 800beb8:	4d06      	ldr	r5, [pc, #24]	@ (800bed4 <_kill_r+0x20>)
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	4611      	mov	r1, r2
 800bec0:	602b      	str	r3, [r5, #0]
 800bec2:	f7f7 fe68 	bl	8003b96 <_kill>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	d102      	bne.n	800bed0 <_kill_r+0x1c>
 800beca:	682b      	ldr	r3, [r5, #0]
 800becc:	b103      	cbz	r3, 800bed0 <_kill_r+0x1c>
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	bd38      	pop	{r3, r4, r5, pc}
 800bed2:	bf00      	nop
 800bed4:	200008a4 	.word	0x200008a4

0800bed8 <_getpid_r>:
 800bed8:	f7f7 be55 	b.w	8003b86 <_getpid>

0800bedc <__swhatbuf_r>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	460c      	mov	r4, r1
 800bee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee4:	b096      	sub	sp, #88	@ 0x58
 800bee6:	4615      	mov	r5, r2
 800bee8:	2900      	cmp	r1, #0
 800beea:	461e      	mov	r6, r3
 800beec:	da0c      	bge.n	800bf08 <__swhatbuf_r+0x2c>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	2100      	movs	r1, #0
 800bef2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bef6:	bf14      	ite	ne
 800bef8:	2340      	movne	r3, #64	@ 0x40
 800befa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800befe:	2000      	movs	r0, #0
 800bf00:	6031      	str	r1, [r6, #0]
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	b016      	add	sp, #88	@ 0x58
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	466a      	mov	r2, sp
 800bf0a:	f000 f849 	bl	800bfa0 <_fstat_r>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	dbed      	blt.n	800beee <__swhatbuf_r+0x12>
 800bf12:	9901      	ldr	r1, [sp, #4]
 800bf14:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf18:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf1c:	4259      	negs	r1, r3
 800bf1e:	4159      	adcs	r1, r3
 800bf20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf24:	e7eb      	b.n	800befe <__swhatbuf_r+0x22>

0800bf26 <__smakebuf_r>:
 800bf26:	898b      	ldrh	r3, [r1, #12]
 800bf28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf2a:	079d      	lsls	r5, r3, #30
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	d507      	bpl.n	800bf42 <__smakebuf_r+0x1c>
 800bf32:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	6123      	str	r3, [r4, #16]
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	6163      	str	r3, [r4, #20]
 800bf3e:	b003      	add	sp, #12
 800bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf42:	ab01      	add	r3, sp, #4
 800bf44:	466a      	mov	r2, sp
 800bf46:	f7ff ffc9 	bl	800bedc <__swhatbuf_r>
 800bf4a:	9f00      	ldr	r7, [sp, #0]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4639      	mov	r1, r7
 800bf52:	f7fb fceb 	bl	800792c <_malloc_r>
 800bf56:	b948      	cbnz	r0, 800bf6c <__smakebuf_r+0x46>
 800bf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf5c:	059a      	lsls	r2, r3, #22
 800bf5e:	d4ee      	bmi.n	800bf3e <__smakebuf_r+0x18>
 800bf60:	f023 0303 	bic.w	r3, r3, #3
 800bf64:	f043 0302 	orr.w	r3, r3, #2
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	e7e2      	b.n	800bf32 <__smakebuf_r+0xc>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	6020      	str	r0, [r4, #0]
 800bf70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	9b01      	ldr	r3, [sp, #4]
 800bf78:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf7c:	b15b      	cbz	r3, 800bf96 <__smakebuf_r+0x70>
 800bf7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf82:	4630      	mov	r0, r6
 800bf84:	f000 f81e 	bl	800bfc4 <_isatty_r>
 800bf88:	b128      	cbz	r0, 800bf96 <__smakebuf_r+0x70>
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f023 0303 	bic.w	r3, r3, #3
 800bf90:	f043 0301 	orr.w	r3, r3, #1
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	431d      	orrs	r5, r3
 800bf9a:	81a5      	strh	r5, [r4, #12]
 800bf9c:	e7cf      	b.n	800bf3e <__smakebuf_r+0x18>
	...

0800bfa0 <_fstat_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	4d06      	ldr	r5, [pc, #24]	@ (800bfc0 <_fstat_r+0x20>)
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	4611      	mov	r1, r2
 800bfac:	602b      	str	r3, [r5, #0]
 800bfae:	f7f7 fe52 	bl	8003c56 <_fstat>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d102      	bne.n	800bfbc <_fstat_r+0x1c>
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	b103      	cbz	r3, 800bfbc <_fstat_r+0x1c>
 800bfba:	6023      	str	r3, [r4, #0]
 800bfbc:	bd38      	pop	{r3, r4, r5, pc}
 800bfbe:	bf00      	nop
 800bfc0:	200008a4 	.word	0x200008a4

0800bfc4 <_isatty_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4d05      	ldr	r5, [pc, #20]	@ (800bfe0 <_isatty_r+0x1c>)
 800bfca:	4604      	mov	r4, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	602b      	str	r3, [r5, #0]
 800bfd0:	f7f7 fe51 	bl	8003c76 <_isatty>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_isatty_r+0x1a>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_isatty_r+0x1a>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	200008a4 	.word	0x200008a4

0800bfe4 <_init>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr

0800bff0 <_fini>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	bf00      	nop
 800bff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff6:	bc08      	pop	{r3}
 800bff8:	469e      	mov	lr, r3
 800bffa:	4770      	bx	lr
