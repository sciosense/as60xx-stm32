
AS60xx_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800bff0  0800bff0  0000cff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c824  0800c824  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c824  0800c824  0000d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c82c  0800c82c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c82c  0800c82c  0000d82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c834  0800c834  0000d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c83c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200001d4  0800ca10  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800ca10  0000e80c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad74  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e95  00000000  00000000  00028f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0002be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  0002cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034935  00000000  00000000  0002da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014067  00000000  00000000  00062346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131496  00000000  00000000  000763ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005838  00000000  00000000  001a7888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001ad0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bfd4 	.word	0x0800bfd4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800bfd4 	.word	0x0800bfd4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <_ZL40As60xx_CalculateDelayWindowRegisterValuef>:
    }
    return as60xx->CR[idx];
}

static inline uint32_t As60xx_CalculateDelayWindowRegisterValue(float delayWindowNs)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]

    if ( delayWindowNs < 0 )
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	d502      	bpl.n	8001096 <_ZL40As60xx_CalculateDelayWindowRegisterValuef+0x1e>
    {
      delayWindowNs = 0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
    }
    
    return (((uint32_t)( delayWindowNs / AS60XX_DELAY_WINDOW_LSB_TO_NS )) & AS60XX_D1_USM_RLS_DLY_U_Msk);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fa5a 	bl	8000550 <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_ZL40As60xx_CalculateDelayWindowRegisterValuef+0x48>)
 80010a2:	f7ff fbd7 	bl	8000854 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd7f 	bl	8000bb0 <__aeabi_d2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	401f4000 	.word	0x401f4000
 80010c4:	00000000 	.word	0x00000000

080010c8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef>:

static inline uint32_t As60xx_CalculateFirstHitLevelRegisterValue(float thresholdMv)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
    if ( thresholdMv > AS60XX_MAX_ZERO_CROSS_DETECTION_VALUE_MV )
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001130 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x68>
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd01      	ble.n	80010e8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x20>
    {
      thresholdMv = AS60XX_MAX_ZERO_CROSS_DETECTION_VALUE_MV;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x6c>)
 80010e6:	607b      	str	r3, [r7, #4]
    }

    if ( thresholdMv < 0 )
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d502      	bpl.n	80010fc <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x34>
    {
      thresholdMv = 0;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
    }
    
    return(uint32_t)( thresholdMv / AS60XX_ZERO_CROSS_DETECTION_LSB_TO_MV );
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fa27 	bl	8000550 <__aeabi_f2d>
 8001102:	a309      	add	r3, pc, #36	@ (adr r3, 8001128 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef+0x60>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fba4 	bl	8000854 <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd4c 	bl	8000bb0 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	c28f5c29 	.word	0xc28f5c29
 800112c:	3fec28f5 	.word	0x3fec28f5
 8001130:	43480000 	.word	0x43480000
 8001134:	43480000 	.word	0x43480000

08001138 <AS60xx_Example_Setup>:

static Result SerialPrint(const char str[]);
void SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(AS60xx* as60xx);

extern "C" void AS60xx_Example_Setup(UART_HandleTypeDef *uart, SPI_HandleTypeDef *spi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    huart = *uart;
 8001142:	4a3b      	ldr	r2, [pc, #236]	@ (8001230 <AS60xx_Example_Setup+0xf8>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	2394      	movs	r3, #148	@ 0x94
 800114c:	461a      	mov	r2, r3
 800114e:	f007 fc9c 	bl	8008a8a <memcpy>
    /* Wait to allow terminal software to capture the output */
    HAL_Delay(2000);
 8001152:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001156:	f002 ff37 	bl	8003fc8 <HAL_Delay>

    SerialPrint("Starting AS60xx 01_AS60xx_Example_Basic_Ultrasound demo on STM32...\n");
 800115a:	4836      	ldr	r0, [pc, #216]	@ (8001234 <AS60xx_Example_Setup+0xfc>)
 800115c:	f000 fb84 	bl	8001868 <_ZL11SerialPrintPKc>

    HAL_Delay(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 8001160:	205e      	movs	r0, #94	@ 0x5e
 8001162:	f002 ff31 	bl	8003fc8 <HAL_Delay>

    as60xx.begin(spi, SSN_Pin, SSN_GPIO_Port);
 8001166:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <AS60xx_Example_Setup+0x100>)
 8001168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116c:	6839      	ldr	r1, [r7, #0]
 800116e:	4833      	ldr	r0, [pc, #204]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001170:	f002 f8f2 	bl	8003358 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>

    if( as60xx.init() )
 8001174:	4831      	ldr	r0, [pc, #196]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001176:	f002 f970 	bl	800345a <_ZN6AS60xx4initEv>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <AS60xx_Example_Setup+0x50>
    {
        SerialPrint("AS60xx initialized properly\n");
 8001180:	482f      	ldr	r0, [pc, #188]	@ (8001240 <AS60xx_Example_Setup+0x108>)
 8001182:	f000 fb71 	bl	8001868 <_ZL11SerialPrintPKc>
 8001186:	e002      	b.n	800118e <AS60xx_Example_Setup+0x56>
    }
    else
    {
        SerialPrint("AS60xx initialization failed\n");
 8001188:	482e      	ldr	r0, [pc, #184]	@ (8001244 <AS60xx_Example_Setup+0x10c>)
 800118a:	f000 fb6d 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    
    sprintf(messageBuffer, "High Speed Clock Frequency: %0.3f MHz\n", as60xx.getHighSpeedClockFrequencyHz() / 1000000.0);
 800118e:	482b      	ldr	r0, [pc, #172]	@ (800123c <AS60xx_Example_Setup+0x104>)
 8001190:	f002 f942 	bl	8003418 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>
 8001194:	ee10 3a10 	vmov	r3, s0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d9 	bl	8000550 <__aeabi_f2d>
 800119e:	a322      	add	r3, pc, #136	@ (adr r3, 8001228 <AS60xx_Example_Setup+0xf0>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fb56 	bl	8000854 <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4926      	ldr	r1, [pc, #152]	@ (8001248 <AS60xx_Example_Setup+0x110>)
 80011ae:	4827      	ldr	r0, [pc, #156]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011b0:	f007 fb68 	bl	8008884 <siprintf>
    SerialPrint(messageBuffer);
 80011b4:	4825      	ldr	r0, [pc, #148]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011b6:	f000 fb57 	bl	8001868 <_ZL11SerialPrintPKc>

    sprintf(messageBuffer, "Supply Voltage: %ld mV\n", as60xx.getSupplyVoltageMv() );
 80011ba:	4820      	ldr	r0, [pc, #128]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011bc:	f002 f91e 	bl	80033fc <_ZN6AS60xx18getSupplyVoltageMvEv>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4922      	ldr	r1, [pc, #136]	@ (8001250 <AS60xx_Example_Setup+0x118>)
 80011c6:	4821      	ldr	r0, [pc, #132]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011c8:	f007 fb5c 	bl	8008884 <siprintf>
    SerialPrint(messageBuffer);
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <AS60xx_Example_Setup+0x114>)
 80011ce:	f000 fb4b 	bl	8001868 <_ZL11SerialPrintPKc>

    SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(&as60xx);
 80011d2:	481a      	ldr	r0, [pc, #104]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011d4:	f000 f8fe 	bl	80013d4 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx>

    if( as60xx.writeConfig() == RESULT_OK )
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011da:	f002 f8f3 	bl	80033c4 <_ZN6AS60xx11writeConfigEv>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <AS60xx_Example_Setup+0xbe>
    {
        SerialPrint("Configuration properly written\n");
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <AS60xx_Example_Setup+0x11c>)
 80011f0:	f000 fb3a 	bl	8001868 <_ZL11SerialPrintPKc>
 80011f4:	e002      	b.n	80011fc <AS60xx_Example_Setup+0xc4>
    }
    else
    {
        SerialPrint("Error! Configuration read doesn't match the values written\n");
 80011f6:	4818      	ldr	r0, [pc, #96]	@ (8001258 <AS60xx_Example_Setup+0x120>)
 80011f8:	f000 fb36 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    
    if( as60xx.startMeasurement() == RESULT_OK )
 80011fc:	480f      	ldr	r0, [pc, #60]	@ (800123c <AS60xx_Example_Setup+0x104>)
 80011fe:	f002 f8ef 	bl	80033e0 <_ZN6AS60xx16startMeasurementEv>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <AS60xx_Example_Setup+0xe2>
    {
        SerialPrint("Measurements started\n");
 8001212:	4812      	ldr	r0, [pc, #72]	@ (800125c <AS60xx_Example_Setup+0x124>)
 8001214:	f000 fb28 	bl	8001868 <_ZL11SerialPrintPKc>
    }
    else
    {
        SerialPrint("Error! Measurements didn't start properly\n");
    }
}
 8001218:	e002      	b.n	8001220 <AS60xx_Example_Setup+0xe8>
        SerialPrint("Error! Measurements didn't start properly\n");
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <AS60xx_Example_Setup+0x128>)
 800121c:	f000 fb24 	bl	8001868 <_ZL11SerialPrintPKc>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	00000000 	.word	0x00000000
 800122c:	412e8480 	.word	0x412e8480
 8001230:	20000270 	.word	0x20000270
 8001234:	0800bff0 	.word	0x0800bff0
 8001238:	42020800 	.word	0x42020800
 800123c:	20000304 	.word	0x20000304
 8001240:	0800c038 	.word	0x0800c038
 8001244:	0800c058 	.word	0x0800c058
 8001248:	0800c078 	.word	0x0800c078
 800124c:	200001f0 	.word	0x200001f0
 8001250:	0800c0a0 	.word	0x0800c0a0
 8001254:	0800c0b8 	.word	0x0800c0b8
 8001258:	0800c0d8 	.word	0x0800c0d8
 800125c:	0800c114 	.word	0x0800c114
 8001260:	0800c12c 	.word	0x0800c12c

08001264 <AS60xx_Example_Loop>:

extern "C" void AS60xx_Example_Loop()
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
    while( 1 )
    {
        if( !HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) )
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	4850      	ldr	r0, [pc, #320]	@ (80013b0 <AS60xx_Example_Loop+0x14c>)
 800126e:	f003 f987 	bl	8004580 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8091 	beq.w	80013a6 <AS60xx_Example_Loop+0x142>
        {
            as60xx.update();
 8001284:	484b      	ldr	r0, [pc, #300]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001286:	f002 f90f 	bl	80034a8 <_ZN6AS60xx6updateEv>
            
            // Print the timestamp
            As60xx_Timestamp timestamp = as60xx.getTimestamp();
 800128a:	463b      	mov	r3, r7
 800128c:	4949      	ldr	r1, [pc, #292]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 800128e:	4618      	mov	r0, r3
 8001290:	f002 f8d2 	bl	8003438 <_ZN6AS60xx12getTimestampEv>
            sprintf(messageBuffer, "Timestamp[hh:mm:ss]:%ld:%02d:%02d\t", timestamp.hours, timestamp.minutes, timestamp.seconds);
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	793b      	ldrb	r3, [r7, #4]
 8001298:	4619      	mov	r1, r3
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	460b      	mov	r3, r1
 80012a0:	4945      	ldr	r1, [pc, #276]	@ (80013b8 <AS60xx_Example_Loop+0x154>)
 80012a2:	4846      	ldr	r0, [pc, #280]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 80012a4:	f007 faee 	bl	8008884 <siprintf>
            SerialPrint(messageBuffer);
 80012a8:	4844      	ldr	r0, [pc, #272]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 80012aa:	f000 fadd 	bl	8001868 <_ZL11SerialPrintPKc>
            
            // Print the ToF sum upstream and downstream
            uint32_t avgTofUp = as60xx.getSumTofUp() / as60xx.getAmountHitsForSumToF();
 80012ae:	4841      	ldr	r0, [pc, #260]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012b0:	f002 f908 	bl	80034c4 <_ZN6AS60xx11getSumTofUpEv>
 80012b4:	4604      	mov	r4, r0
 80012b6:	483f      	ldr	r0, [pc, #252]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012b8:	f002 f920 	bl	80034fc <_ZN6AS60xx22getAmountHitsForSumToFEv>
 80012bc:	4603      	mov	r3, r0
 80012be:	fbb4 f3f3 	udiv	r3, r4, r3
 80012c2:	617b      	str	r3, [r7, #20]
            uint32_t avgTofDn = as60xx.getSumTofDown() / as60xx.getAmountHitsForSumToF();
 80012c4:	483b      	ldr	r0, [pc, #236]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012c6:	f002 f90b 	bl	80034e0 <_ZN6AS60xx13getSumTofDownEv>
 80012ca:	4604      	mov	r4, r0
 80012cc:	4839      	ldr	r0, [pc, #228]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012ce:	f002 f915 	bl	80034fc <_ZN6AS60xx22getAmountHitsForSumToFEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80012d8:	613b      	str	r3, [r7, #16]
            float avgTofUp_ns = as60xx.calculateTimeNs(avgTofUp);
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	4835      	ldr	r0, [pc, #212]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012de:	f002 f91b 	bl	8003518 <_ZN6AS60xx15calculateTimeNsEm>
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
            float avgTofDn_ns = as60xx.calculateTimeNs(avgTofDn);
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	4832      	ldr	r0, [pc, #200]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 80012ea:	f002 f915 	bl	8003518 <_ZN6AS60xx15calculateTimeNsEm>
 80012ee:	ed87 0a02 	vstr	s0, [r7, #8]

            sprintf(messageBuffer, "AvgTofSumUp[ns]:%0.2f\tAvgTofSumDn[ns]:%0.2f\t", avgTofUp_ns, avgTofDn_ns);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff f92c 	bl	8000550 <__aeabi_f2d>
 80012f8:	4604      	mov	r4, r0
 80012fa:	460d      	mov	r5, r1
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff f927 	bl	8000550 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9cd 2300 	strd	r2, r3, [sp]
 800130a:	4622      	mov	r2, r4
 800130c:	462b      	mov	r3, r5
 800130e:	492c      	ldr	r1, [pc, #176]	@ (80013c0 <AS60xx_Example_Loop+0x15c>)
 8001310:	482a      	ldr	r0, [pc, #168]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001312:	f007 fab7 	bl	8008884 <siprintf>
            SerialPrint(messageBuffer);
 8001316:	4829      	ldr	r0, [pc, #164]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001318:	f000 faa6 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the ToF difference
            sprintf(messageBuffer, "TofDiff[ns]:%0.2f\t", avgTofUp_ns - avgTofDn_ns );
 800131c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001320:	edd7 7a02 	vldr	s15, [r7, #8]
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f910 	bl	8000550 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4923      	ldr	r1, [pc, #140]	@ (80013c4 <AS60xx_Example_Loop+0x160>)
 8001336:	4821      	ldr	r0, [pc, #132]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001338:	f007 faa4 	bl	8008884 <siprintf>
            SerialPrint(messageBuffer);
 800133c:	481f      	ldr	r0, [pc, #124]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800133e:	f000 fa93 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the amplitude from the pulse measured upstream and downstream
            sprintf(messageBuffer, "AmpUp[mV]:%ld\tAmpDn[mV]:%ld\t", as60xx.getAmplitudeUp(), as60xx.getAmplitudeDown());
 8001342:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001344:	f002 f910 	bl	8003568 <_ZN6AS60xx14getAmplitudeUpEv>
 8001348:	4604      	mov	r4, r0
 800134a:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 800134c:	f002 f91a 	bl	8003584 <_ZN6AS60xx16getAmplitudeDownEv>
 8001350:	4603      	mov	r3, r0
 8001352:	4622      	mov	r2, r4
 8001354:	491c      	ldr	r1, [pc, #112]	@ (80013c8 <AS60xx_Example_Loop+0x164>)
 8001356:	4819      	ldr	r0, [pc, #100]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001358:	f007 fa94 	bl	8008884 <siprintf>
            SerialPrint(messageBuffer);
 800135c:	4817      	ldr	r0, [pc, #92]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800135e:	f000 fa83 	bl	8001868 <_ZL11SerialPrintPKc>

            // Print the Pulse Width Ratio measured upstream and downstream
            sprintf(messageBuffer, "PWRUp[]:%0.3f\tPWRDn[]:%0.3f\t", as60xx.getPulseWidthRatioUp(), as60xx.getPulseWidthRatioDown());
 8001362:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001364:	f002 f91c 	bl	80035a0 <_ZN6AS60xx20getPulseWidthRatioUpEv>
 8001368:	ee10 3a10 	vmov	r3, s0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8ef 	bl	8000550 <__aeabi_f2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	480f      	ldr	r0, [pc, #60]	@ (80013b4 <AS60xx_Example_Loop+0x150>)
 8001378:	f002 f922 	bl	80035c0 <_ZN6AS60xx22getPulseWidthRatioDownEv>
 800137c:	ee10 3a10 	vmov	r3, s0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8e5 	bl	8000550 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9cd 2300 	strd	r2, r3, [sp]
 800138e:	4622      	mov	r2, r4
 8001390:	462b      	mov	r3, r5
 8001392:	490e      	ldr	r1, [pc, #56]	@ (80013cc <AS60xx_Example_Loop+0x168>)
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 8001396:	f007 fa75 	bl	8008884 <siprintf>
            SerialPrint(messageBuffer);
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <AS60xx_Example_Loop+0x158>)
 800139c:	f000 fa64 	bl	8001868 <_ZL11SerialPrintPKc>
            
            SerialPrint("\n");
 80013a0:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <AS60xx_Example_Loop+0x16c>)
 80013a2:	f000 fa61 	bl	8001868 <_ZL11SerialPrintPKc>
        }

        HAL_Delay(20);
 80013a6:	2014      	movs	r0, #20
 80013a8:	f002 fe0e 	bl	8003fc8 <HAL_Delay>
    }
 80013ac:	e75d      	b.n	800126a <AS60xx_Example_Loop+0x6>
 80013ae:	bf00      	nop
 80013b0:	42020800 	.word	0x42020800
 80013b4:	20000304 	.word	0x20000304
 80013b8:	0800c158 	.word	0x0800c158
 80013bc:	200001f0 	.word	0x200001f0
 80013c0:	0800c17c 	.word	0x0800c17c
 80013c4:	0800c1ac 	.word	0x0800c1ac
 80013c8:	0800c1c0 	.word	0x0800c1c0
 80013cc:	0800c1e0 	.word	0x0800c1e0
 80013d0:	0800c200 	.word	0x0800c200

080013d4 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx>:
}

void SetConfigurationAS60XX_Demo_1MHz_water_meter_FHL(AS60xx* as60xx)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    /* 0x48DBA399 */
    as60xx->as60xxConfig.Param.CR0.WS_DIS               = AS60XX_C0_WS_DIS;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4aca      	ldr	r2, [pc, #808]	@ (8001708 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x334>)
 80013e0:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8

    /* 0x00800401 */
    as60xx->as60xxConfig.Param.CR1.PI_TPW               = AS60XX_C1_PI_TPW_0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
    as60xx->as60xxConfig.Param.CR1.PI_UPD_MODE          = AS60XX_C1_PI_UPD_MODE_ENABLED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 21af 	strb.w	r2, [r3, #431]	@ 0x1af
    as60xx->as60xxConfig.Param.CR1.PI_EN                = AS60XX_C1_PI_EN_DISABLE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 21ad 	strb.w	r2, [r3, #429]	@ 0x1ad
    as60xx->as60xxConfig.Param.CR1.PI_OUT_MODE          = AS60XX_C1_PI_OUT_MODE_ONE_LINE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 21ae 	strb.w	r2, [r3, #430]	@ 0x1ae
    as60xx->as60xxConfig.Param.CR1.SPI_INPORT_CFG       = AS60XX_C1_SPI_INPORT_CFG_PULL_DN;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 21b4 	strb.w	r2, [r3, #436]	@ 0x1b4

    /* 0x00000000 */
    as60xx->as60xxConfig.Param.CR2.GP0_DIR              = AS60XX_C2_GP0_DIR_OUTPUT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 21b6 	strb.w	r2, [r3, #438]	@ 0x1b6
    as60xx->as60xxConfig.Param.CR2.GP0_SEL              = AS60XX_C2_GP0_SEL_GENERAL_PURPOSE_OUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 21b7 	strb.w	r2, [r3, #439]	@ 0x1b7
    as60xx->as60xxConfig.Param.CR2.GP1_DIR              = AS60XX_C2_GP1_DIR_OUTPUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
    as60xx->as60xxConfig.Param.CR2.GP1_SEL              = AS60XX_C2_GP1_SEL_GENERAL_PURPOSE_OUT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9
    as60xx->as60xxConfig.Param.CR2.GP2_DIR              = AS60XX_C2_GP2_DIR_OUTPUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 21ba 	strb.w	r2, [r3, #442]	@ 0x1ba
    as60xx->as60xxConfig.Param.CR2.GP2_SEL              = AS60XX_C2_GP2_SEL_GENERAL_PURPOSE_OUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 21bb 	strb.w	r2, [r3, #443]	@ 0x1bb
    as60xx->as60xxConfig.Param.CR2.GP3_DIR              = AS60XX_C2_GP3_DIR_OUTPUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 21bc 	strb.w	r2, [r3, #444]	@ 0x1bc
    as60xx->as60xxConfig.Param.CR2.GP3_SEL              = AS60XX_C2_GP3_SEL_GENERAL_PURPOSE_OUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 21bd 	strb.w	r2, [r3, #445]	@ 0x1bd
    as60xx->as60xxConfig.Param.CR2.GP4_DIR              = AS60XX_C2_GP4_DIR_OUTPUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 21be 	strb.w	r2, [r3, #446]	@ 0x1be
    as60xx->as60xxConfig.Param.CR2.GP4_SEL              = AS60XX_C2_GP4_SEL_GENERAL_PURPOSE_OUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 21bf 	strb.w	r2, [r3, #447]	@ 0x1bf
    as60xx->as60xxConfig.Param.CR2.GP5_DIR              = AS60XX_C2_GP5_DIR_OUTPUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
    as60xx->as60xxConfig.Param.CR2.GP5_SEL              = AS60XX_C2_GP5_SEL_GENERAL_PURPOSE_OUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 21c1 	strb.w	r2, [r3, #449]	@ 0x1c1
    as60xx->as60xxConfig.Param.CR2.NOT_USED_31_24       = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 21c2 	strb.w	r2, [r3, #450]	@ 0x1c2

    /* 0x00000001 */
    as60xx->as60xxConfig.Param.CR3.USM_OPT              = AS60XX_C3_USM_OPT_0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4

    /* 0x0011FFFF */
    as60xx->as60xxConfig.Param.CR4.EF_EN_TDC_TMO        = AS60XX_C4_EF_EN_TDC_TMO;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
    as60xx->as60xxConfig.Param.CR4.EF_EN_TOF_TMO        = AS60XX_C4_EF_EN_TOF_TMO;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 21cd 	strb.w	r2, [r3, #461]	@ 0x1cd
    as60xx->as60xxConfig.Param.CR4.EF_EN_AM_TMO         = AS60XX_C4_EF_EN_AM_TMO;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 21ce 	strb.w	r2, [r3, #462]	@ 0x1ce
    as60xx->as60xxConfig.Param.CR4.EF_EN_TM_OC          = AS60XX_C4_EF_EN_TM_OC;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 21cf 	strb.w	r2, [r3, #463]	@ 0x1cf
    as60xx->as60xxConfig.Param.CR4.EF_EN_TM_SC          = AS60XX_C4_EF_EN_TM_SC;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
    as60xx->as60xxConfig.Param.CR4.EF_EN_ZCC_ERR        = AS60XX_C4_EF_EN_ZCC_ERR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 21d1 	strb.w	r2, [r3, #465]	@ 0x1d1
    as60xx->as60xxConfig.Param.CR4.EF_EN_LBD_ERR        = AS60XX_C4_EF_EN_LBD_ERR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 21d2 	strb.w	r2, [r3, #466]	@ 0x1d2
    as60xx->as60xxConfig.Param.CR4.EF_EN_USM_SQC_TMO    = AS60XX_C4_EF_EN_USM_SQC_TMO;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 21d3 	strb.w	r2, [r3, #467]	@ 0x1d3
    as60xx->as60xxConfig.Param.CR4.EF_EN_TM_SQC_TMO     = AS60XX_C4_EF_EN_TM_SQC_TMO;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
    as60xx->as60xxConfig.Param.CR4.EF_EN_TSQ_TMO        = AS60XX_C4_EF_EN_TSQ_TMO;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
    as60xx->as60xxConfig.Param.CR4.EF_EN_I2C_ACK_ERR    = AS60XX_C4_EF_EN_I2C_ACK_ERR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 21d6 	strb.w	r2, [r3, #470]	@ 0x1d6
    as60xx->as60xxConfig.Param.CR4.EF_EN_CHP_ERR        = AS60XX_C4_EF_EN_CHP_ERR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 21d7 	strb.w	r2, [r3, #471]	@ 0x1d7
    as60xx->as60xxConfig.Param.CR4.EF_EN_NVM_FWCU_ERR   = AS60XX_C4_EF_EN_NVM_FWCU_ERR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    as60xx->as60xxConfig.Param.CR4.EF_EN_NVM_FWDU_ERR   = AS60XX_C4_EF_EN_NVM_FWDU_ERR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 21d9 	strb.w	r2, [r3, #473]	@ 0x1d9
    as60xx->as60xxConfig.Param.CR4.EF_EN_NVM_FWA_ERR    = AS60XX_C4_EF_EN_NVM_FWA_ERR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 21da 	strb.w	r2, [r3, #474]	@ 0x1da
    as60xx->as60xxConfig.Param.CR4.EF_EN_CPU_ERR        = AS60XX_C4_EF_EN_CPU_ERR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 21db 	strb.w	r2, [r3, #475]	@ 0x1db
    as60xx->as60xxConfig.Param.CR4.IRQ_EN_TSQ_FNS       = AS60XX_C4_IRQ_EN_TSQ_FNS;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    as60xx->as60xxConfig.Param.CR4.IRQ_EN_FW_S          = AS60XX_C4_IRQ_EN_FW_S;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 21e0 	strb.w	r2, [r3, #480]	@ 0x1e0
    as60xx->as60xxConfig.Param.CR4.NOT_USED_26_24       = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    as60xx->as60xxConfig.Param.CR4.TS_GPT_RATE          = AS60XX_C4_TS_GPT_RATE_DISABLED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6

    /* 0x4046EE08 */
    as60xx->as60xxConfig.Param.CR5.HSC_DIV_MODE         = AS60XX_C5_HSC_DIV_MODE_4MHZ;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
    as60xx->as60xxConfig.Param.CR5.NOT_USED_1           = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
    as60xx->as60xxConfig.Param.CR5.HSC_CLK_ST           = AS60XX_C5_HSC_CLK_ST_135_USEC;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
    as60xx->as60xxConfig.Param.CR5.NOT_USED_7_5         = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
    as60xx->as60xxConfig.Param.CR5.HSC_DIV              = AS60XX_C5_HSC_DIV_4MHZ;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
    as60xx->as60xxConfig.Param.CR5.HSC_RATE             = AS60XX_C5_HSC_RATE_EVERY_100;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2207      	movs	r2, #7
 8001548:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
    as60xx->as60xxConfig.Param.CR5.HSC_MODE_CPU         = AS60XX_C5_HSC_MODE_CPU_4MHZ;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
    as60xx->as60xxConfig.Param.CR5.VM_RATE              = AS60XX_C5_VM_RATE_EVERY_100;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2207      	movs	r2, #7
 8001558:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
    uint16_t lowBatteryDetectionThMv     = 2300;
 800155c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8001560:	83fb      	strh	r3, [r7, #30]
    as60xx->as60xxConfig.Param.CR5.LBD_TH               = (uint8_t)( ( lowBatteryDetectionThMv - 2150 ) / 25);
 8001562:	8bfb      	ldrh	r3, [r7, #30]
 8001564:	f6a3 0366 	subw	r3, r3, #2150	@ 0x866
 8001568:	4a68      	ldr	r2, [pc, #416]	@ (800170c <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x338>)
 800156a:	fb82 1203 	smull	r1, r2, r2, r3
 800156e:	10d2      	asrs	r2, r2, #3
 8001570:	17db      	asrs	r3, r3, #31
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
    as60xx->as60xxConfig.Param.CR5.TSV_UPD_MODE         = AS60XX_C5_TSV_UPD_MODE_AUTOMATIC;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 21f0 	strb.w	r2, [r3, #496]	@ 0x1f0
    as60xx->as60xxConfig.Param.CR5.BF_SEL               = AS60XX_C5_BF_SEL_50_HZ;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 21f1 	strb.w	r2, [r3, #497]	@ 0x1f1
    uint16_t chargePumpVoltageMv         = 5600;
 800158c:	f44f 53af 	mov.w	r3, #5600	@ 0x15e0
 8001590:	83bb      	strh	r3, [r7, #28]
    as60xx->as60xxConfig.Param.CR5.CHP_HV_SEL           = (uint8_t)( ( (chargePumpVoltageMv - 5600) / 900 ) & 0x0F );
 8001592:	8bbb      	ldrh	r3, [r7, #28]
 8001594:	f5a3 53af 	sub.w	r3, r3, #5600	@ 0x15e0
 8001598:	4a5d      	ldr	r2, [pc, #372]	@ (8001710 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x33c>)
 800159a:	fb82 1203 	smull	r1, r2, r2, r3
 800159e:	441a      	add	r2, r3
 80015a0:	1252      	asrs	r2, r2, #9
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f883 21f2 	strb.w	r2, [r3, #498]	@ 0x1f2
    as60xx->as60xxConfig.Param.CR5.NOT_USED_28          = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 21f3 	strb.w	r2, [r3, #499]	@ 0x1f3
    as60xx->as60xxConfig.Param.CR5.TI_PATH_SEL          = AS60XX_C5_TI_PATH_SEL_350_OHM_BUFFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
    as60xx->as60xxConfig.Param.CR5.NOT_USED_31          = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 21f5 	strb.w	r2, [r3, #501]	@ 0x1f5

    /* 0x01012100 */
    as60xx->as60xxConfig.Param.CR6.MR_CT                = AS60XX_C6_MR_CT_8;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d2:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
    as60xx->as60xxConfig.Param.CR6.TS_MCM               = AS60XX_C6_TS_PP_F_EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    as60xx->as60xxConfig.Param.CR6.TS_PP_MODE           = AS60XX_C6_TS_PP_MODE_ON_MEASUREMENT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    as60xx->as60xxConfig.Param.CR6.TS_CST_RATE          = AS60XX_C6_TS_CST_RATE_DISABLED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    as60xx->as60xxConfig.Param.CR6.TS_NVR_RATE          = AS60XX_C6_TS_NVR_RATE_DISABLED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    as60xx->as60xxConfig.Param.CR6.NOT_USED_25_24       = AS60XX_C6_NOT_USED_25_24;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
    as60xx->as60xxConfig.Param.CR6.TS_CHP_MODE          = AS60XX_C6_TS_CHP_MODE_DISABLED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
    as60xx->as60xxConfig.Param.CR6.TS_CHP_WT            = AS60XX_C6_TS_CHP_WT_520_USEC;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
    as60xx->as60xxConfig.Param.CR6.NOT_USED_30          = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
    as60xx->as60xxConfig.Param.CR6.TS_CST_MODE          = AS60XX_C6_TS_CST_MODE_ALWAYS;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

    /* 0x00240000 */
    as60xx->as60xxConfig.Param.CR7.TM_RATE              = AS60XX_C7_TM_RATE_DISABLED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    as60xx->as60xxConfig.Param.CR7.TPM_PAUSE            = AS60XX_C7_TPM_PAUSE_DISABLED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
    as60xx->as60xxConfig.Param.CR7.TM_MODE              = AS60XX_C7_TM_MODE_OFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
    as60xx->as60xxConfig.Param.CR7.NOT_USED_16          = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e
    as60xx->as60xxConfig.Param.CR7.TPM_PORT_MODE        = AS60XX_C7_TPM_PORT_MODE_UNUSED_TO_GND;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 220f 	strb.w	r2, [r3, #527]	@ 0x20f
    as60xx->as60xxConfig.Param.CR7.TM_PORT_ORDER        = AS60XX_C7_TM_PORT_ORDER_1ST_MEASUREMENT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
    as60xx->as60xxConfig.Param.CR7.TPM_CLOAD_TRIM       = AS60XX_C7_TPM_CLOAD_TRIM_1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
    as60xx->as60xxConfig.Param.CR7.TPM_CYCLE_SEL        = AS60XX_C7_TPM_CYCLE_SEL_512_USEC;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
    as60xx->as60xxConfig.Param.CR7.TPM_FAKE_NO          = AS60XX_C7_TPM_FAKE_NO_2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
    as60xx->as60xxConfig.Param.CR7.NOT_USED_31_24       = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214

    /* 0x046807E4 */
    as60xx->as60xxConfig.Param.CR8.USM_PAUSE            = AS60XX_C8_USM_PAUSE_2;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    as60xx->as60xxConfig.Param.CR8.TI_PGA_AZ_DIS        = AS60XX_C8_TI_PGA_AZ_DIS_ENABLED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    as60xx->as60xxConfig.Param.CR8.USM_DIR_MODE         = AS60XX_C8_USM_DIR_MODE_VIA_TOGGLE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    as60xx->as60xxConfig.Param.CR8.USM_NOISE_MASK_WIN   = 31;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	221f      	movs	r2, #31
 800168a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    as60xx->as60xxConfig.Param.CR8.USM_TO               = AS60XX_C8_USM_TO_128_USEC;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
    as60xx->as60xxConfig.Param.CR8.NOT_USED_18          = 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
    as60xx->as60xxConfig.Param.CR8.USM_RLS_MODE         = AS60XX_C8_USM_RLS_MODE_COMBINED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    as60xx->as60xxConfig.Param.CR8.ZCC_RATE             = AS60XX_C8_ZCC_RATE_EVERY_50;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2206      	movs	r2, #6
 80016aa:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
    as60xx->as60xxConfig.Param.CR8.NOT_USED_29_23       = 8;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    as60xx->as60xxConfig.Param.CR8.TI_PGA_CON_MODE      = AS60XX_C8_TI_PGA_CON_MODE_NO_EXTERNAL;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228

    /* 0x60160204 */
    as60xx->as60xxConfig.Param.CR9.FBG_CLK_DIV          = 4;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2204      	movs	r2, #4
 80016c2:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
    as60xx->as60xxConfig.Param.CR9.FBG_MODE             = AS60XX_C9_FBG_MODE_LOW_PHASE_INSERTION;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 222d 	strb.w	r2, [r3, #557]	@ 0x22d
    as60xx->as60xxConfig.Param.CR9.FBG_PHASE_INS        = AS60XX_C9_FBG_PHASE_INS_1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
    as60xx->as60xxConfig.Param.CR9.FBG_BURST_PRE        = 22;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2216      	movs	r2, #22
 80016da:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
    as60xx->as60xxConfig.Param.CR9.FBG_BURST_POST       = 0;                              // THIS IS NOT ALLOWED!! Should be 1 to 63!!
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
    as60xx->as60xxConfig.Param.CR9.NOT_USED_28          = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    as60xx->as60xxConfig.Param.CR9.NOT_USED_29          = AS60XX_C9_NOT_USED_29;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2232 	strb.w	r2, [r3, #562]	@ 0x232
    as60xx->as60xxConfig.Param.CR9.TOF_HIT_MODE         = AS60XX_C9_TOF_HIT_MODE_GP30;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2233 	strb.w	r2, [r3, #563]	@ 0x233
    as60xx->as60xxConfig.Param.CR9.NOT_USED_31          = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
 8001706:	e005      	b.n	8001714 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x340>
 8001708:	48dba399 	.word	0x48dba399
 800170c:	51eb851f 	.word	0x51eb851f
 8001710:	91a2b3c5 	.word	0x91a2b3c5

    /* 0x010FEA10 */
    as60xx->as60xxConfig.Param.CR10.NOT_USED_0          = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2235 	strb.w	r2, [r3, #565]	@ 0x235
    as60xx->as60xxConfig.Param.CR10.TOF_HIT_START       = 8;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2208      	movs	r2, #8
 8001720:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    as60xx->as60xxConfig.Param.CR10.TOF_HIT_IGN         = AS60XX_CA_TOF_HIT_IGN_0_HITS;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    as60xx->as60xxConfig.Param.CR10.TOF_HIT_SUM_NO      = 10;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	220a      	movs	r2, #10
 8001730:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
    as60xx->as60xxConfig.Param.CR10.TOF_HIT_END         = 127;                            // Because CR9.TOF_HIT_MODE was set to GP30, has to be put to 127
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	227f      	movs	r2, #127	@ 0x7f
 8001738:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
    as60xx->as60xxConfig.Param.CR10.NOT_USED_21_20      = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
    as60xx->as60xxConfig.Param.CR10.TOF_EDGE_MODE       = AS60XX_CA_TOF_EDGE_MODE_POS_EDGE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 223b 	strb.w	r2, [r3, #571]	@ 0x23b
    as60xx->as60xxConfig.Param.CR10.TOF_RATE_INIT       = 1;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    as60xx->as60xxConfig.Param.CR10.NOT_USED_31_30      = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d

    /* 0x23A0DE71 */
    as60xx->as60xxConfig.Param.CR11.AM_RATE             = AS60XX_CB_AM_RATE_EVERY_1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 223e 	strb.w	r2, [r3, #574]	@ 0x23e
    as60xx->as60xxConfig.Param.CR11.NOT_USED_3          = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 223f 	strb.w	r2, [r3, #575]	@ 0x23f
    as60xx->as60xxConfig.Param.CR11.AM_PD_END           = 7;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2207      	movs	r2, #7
 8001770:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    as60xx->as60xxConfig.Param.CR11.NOT_USED_11_9       = AS60XX_CB_NOT_USED_11_9;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2207      	movs	r2, #7
 8001778:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
    as60xx->as60xxConfig.Param.CR11.AMC_RATE            = AS60XX_CB_AMC_RATE_EVERY_20;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2205      	movs	r2, #5
 8001780:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    as60xx->as60xxConfig.Param.CR11.PWD_EN              = AS60XX_CB_PWD_EN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    as60xx->as60xxConfig.Param.CR11.PGA_TRIM            = AS60XX_CB_PGA_TRIM_2_V_PER_V;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
    as60xx->as60xxConfig.Param.CR11.PGA_EN_MODE         = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
    as60xx->as60xxConfig.Param.CR11.PGA_MODE            = AS60XX_CB_PGA_MODE_ENABLED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    as60xx->as60xxConfig.Param.CR11.NOT_USED_22         = 0;                              // AS6030 says it should be 0, AS6040 says it should be 1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
    as60xx->as60xxConfig.Param.CR11.AM_PD_START_MODE    = AS60XX_CB_AM_PD_START_MODE_US_RELEASE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
    as60xx->as60xxConfig.Param.CR11.ZCD_FHL_INIT        = 35;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2223      	movs	r2, #35	@ 0x23
 80017b8:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249

    /* 0x94A0C46C */
    as60xx->as60xxConfig.Param.CR12.TRIM1               = AS60XX_CC_TRIM1_DEFAULT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a25      	ldr	r2, [pc, #148]	@ (8001854 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x480>)
 80017c0:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c

    /* 0x401100C4 */
    as60xx->as60xxConfig.Param.CR13.TRIM2               = AS60XX_CD_TRIM2_DEFAULT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x484>)
 80017c8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

    /* 0x00A7400F */
    as60xx->as60xxConfig.Param.CR14.TRIM3               = AS60XX_CE_TRIM3_DEFAULT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a23      	ldr	r2, [pc, #140]	@ (800185c <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x488>)
 80017d0:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254

    /* 0x00000001 */
    as60xx->as60xxConfig.Param.CR15.TOF_RATE            = AS60XX_D0_TOF_RATE_0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    as60xx->as60xxConfig.Param.CR15.NOT_USED_31_6       = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c

    /* 0x000015E0 */
    float delayWindowNs = 43750;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x48c>)
 80017e6:	61bb      	str	r3, [r7, #24]
    uint32_t delayWindowRegisterContent = As60xx_CalculateDelayWindowRegisterValue(delayWindowNs);
 80017e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80017ec:	f7ff fc44 	bl	8001078 <_ZL40As60xx_CalculateDelayWindowRegisterValuef>
 80017f0:	6178      	str	r0, [r7, #20]
    as60xx->as60xxConfig.Param.CR16.USM_RLS_DLY_U       = delayWindowRegisterContent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
    as60xx->as60xxConfig.Param.CR16.NOT_USED_31_19      = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    /* 0x000015E0 */
    as60xx->as60xxConfig.Param.CR17.USM_RLS_DLY_D       = delayWindowRegisterContent;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
    as60xx->as60xxConfig.Param.CR17.NOT_USED_31_19      = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    /* 0x00000023 */
    float zeroCrossDetectionLevelMv = 31.0;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <_Z48SetConfigurationAS60XX_Demo_1MHz_water_meter_FHLP6AS60xx+0x490>)
 8001814:	613b      	str	r3, [r7, #16]
    uint32_t zeroCrossDetectionLevelRegisterValue = As60xx_CalculateFirstHitLevelRegisterValue(zeroCrossDetectionLevelMv);
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f7ff fc55 	bl	80010c8 <_ZL42As60xx_CalculateFirstHitLevelRegisterValuef>
 800181e:	60f8      	str	r0, [r7, #12]
    as60xx->as60xxConfig.Param.CR18.ZCD_FHL_U           = zeroCrossDetectionLevelRegisterValue;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
    as60xx->as60xxConfig.Param.CR18.NOT_USED_31_8       = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274

    /* 0x00000023 */
    as60xx->as60xxConfig.Param.CR19.ZCD_FHL_D           = zeroCrossDetectionLevelRegisterValue;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
    as60xx->as60xxConfig.Param.CR19.NOT_USED_31_8       = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c

    as60xx->updateConfiguration();
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 fecb 	bl	80035e0 <_ZN6AS60xx19updateConfigurationEv>
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	94a0c46c 	.word	0x94a0c46c
 8001858:	401100c4 	.word	0x401100c4
 800185c:	00a7400f 	.word	0x00a7400f
 8001860:	472ae600 	.word	0x472ae600
 8001864:	41f80000 	.word	0x41f80000

08001868 <_ZL11SerialPrintPKc>:

static Result SerialPrint(const char str[])
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint8_t result = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  uint16_t i = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	81bb      	strh	r3, [r7, #12]
  while(str[i] != 0)
 8001878:	e002      	b.n	8001880 <_ZL11SerialPrintPKc+0x18>
  {
    i++;
 800187a:	89bb      	ldrh	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	81bb      	strh	r3, [r7, #12]
  while(str[i] != 0)
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f6      	bne.n	800187a <_ZL11SerialPrintPKc+0x12>
  }
  HAL_StatusTypeDef stmResult = HAL_UART_Transmit(&huart, (uint8_t*)str, i, 10);
 800188c:	89ba      	ldrh	r2, [r7, #12]
 800188e:	230a      	movs	r3, #10
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <_ZL11SerialPrintPKc+0x78>)
 8001894:	f005 fae8 	bl	8006e68 <HAL_UART_Transmit>
 8001898:	4603      	mov	r3, r0
 800189a:	72fb      	strb	r3, [r7, #11]
               
  switch( stmResult)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d816      	bhi.n	80018d0 <_ZL11SerialPrintPKc+0x68>
 80018a2:	a201      	add	r2, pc, #4	@ (adr r2, 80018a8 <_ZL11SerialPrintPKc+0x40>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bf 	.word	0x080018bf
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018cb 	.word	0x080018cb
  {
    case HAL_OK:
      result = RESULT_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e00a      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_ERROR:
      result = RESULT_IO_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;
 80018c2:	e007      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_BUSY:
      result = RESULT_IO_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
      break;
 80018c8:	e004      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    case HAL_TIMEOUT:
      result = RESULT_TIMEOUT;
 80018ca:	2305      	movs	r3, #5
 80018cc:	73fb      	strb	r3, [r7, #15]
      break;
 80018ce:	e001      	b.n	80018d4 <_ZL11SerialPrintPKc+0x6c>
    default:
      result = RESULT_INVALID;
 80018d0:	2302      	movs	r3, #2
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000270 	.word	0x20000270

080018e4 <_Z41__static_initialization_and_destruction_0v>:
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80018ea:	f001 fd21 	bl	8003330 <_ZN6AS60xxC1Ev>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000304 	.word	0x20000304

080018f8 <_Z41__static_initialization_and_destruction_1v>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80018fe:	f001 fcf5 	bl	80032ec <_ZN6AS60xxD1Ev>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000304 	.word	0x20000304

0800190c <_GLOBAL__sub_I_AS60xx_Example_Setup>:
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
 8001910:	f7ff ffe8 	bl	80018e4 <_Z41__static_initialization_and_destruction_0v>
 8001914:	bd80      	pop	{r7, pc}

08001916 <_GLOBAL__sub_D_AS60xx_Example_Setup>:
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
 800191a:	f7ff ffed 	bl	80018f8 <_Z41__static_initialization_and_destruction_1v>
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZL41As60xx_Get_Amount_Configuration_Registersv>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    return AS60XX_AMOUNT_CONFIGURATION_REGISTERS;
 8001924:	2314      	movs	r3, #20
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>:
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b13      	cmp	r3, #19
 8001940:	d901      	bls.n	8001946 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x16>
        return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e004      	b.n	8001950 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x20>
    return as60xx->Addresses[idx];
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3230      	adds	r2, #48	@ 0x30
 800194c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	2b13      	cmp	r3, #19
 800196c:	d901      	bls.n	8001972 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x16>
        return 0;
 800196e:	2300      	movs	r3, #0
 8001970:	e004      	b.n	800197c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x20>
    return as60xx->CR[idx];
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3204      	adds	r2, #4
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>:

static inline Result As60xx_Write_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
    uint8_t valuesToWrite[1];
    valuesToWrite[0] = opcode;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	733b      	strb	r3, [r7, #12]

    return (Result)write(&valuesToWrite, 1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68d0      	ldr	r0, [r2, #12]
 80019a0:	f107 010c 	add.w	r1, r7, #12
 80019a4:	2201      	movs	r2, #1
 80019a6:	4798      	blx	r3
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>:

static inline Result As60xx_Write_Extended_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t extendedOpcode)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	4613      	mov	r3, r2
 80019c0:	70bb      	strb	r3, [r7, #2]
    uint8_t valuesToWrite[2];
    valuesToWrite[0] = opcode;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	733b      	strb	r3, [r7, #12]
    valuesToWrite[1] = extendedOpcode;
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	737b      	strb	r3, [r7, #13]

    return (Result)write(valuesToWrite, 2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68d0      	ldr	r0, [r2, #12]
 80019d2:	f107 010c 	add.w	r1, r7, #12
 80019d6:	2202      	movs	r2, #2
 80019d8:	4798      	blx	r3
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhhm>:

static inline Result As60xx_Write_8_Bit_Address_Register(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t address, uint32_t dataToWrite)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	72fb      	strb	r3, [r7, #11]
 80019f2:	4613      	mov	r3, r2
 80019f4:	72bb      	strb	r3, [r7, #10]
    uint8_t valuesToWrite[6];
    valuesToWrite[0] = opcode;
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	743b      	strb	r3, [r7, #16]
    valuesToWrite[1] = address;
 80019fa:	7abb      	ldrb	r3, [r7, #10]
 80019fc:	747b      	strb	r3, [r7, #17]
    valuesToWrite[2] = (uint8_t)(dataToWrite>>24);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0e1b      	lsrs	r3, r3, #24
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	74bb      	strb	r3, [r7, #18]
    valuesToWrite[3] = (uint8_t)(dataToWrite>>16);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	74fb      	strb	r3, [r7, #19]
    valuesToWrite[4] = (uint8_t)(dataToWrite>>8);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	753b      	strb	r3, [r7, #20]
    valuesToWrite[5] = (uint8_t)(dataToWrite);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	757b      	strb	r3, [r7, #21]

    return (Result)write(valuesToWrite, 6);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	68d0      	ldr	r0, [r2, #12]
 8001a24:	f107 0110 	add.w	r1, r7, #16
 8001a28:	2206      	movs	r2, #6
 8001a2a:	4798      	blx	r3
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>:

    return result;
}

static inline uint8_t As60xx_Read_1_Byte(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af02      	add	r7, sp, #8
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
    uint8_t dataToWrite[1];
    uint8_t dataRead[1];

    dataToWrite[0] = opcode;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	733b      	strb	r3, [r7, #12]

    Result result = (Result)read(dataToWrite, 1, dataRead, 1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68d8      	ldr	r0, [r3, #12]
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	f107 010c 	add.w	r1, r7, #12
 8001a56:	2201      	movs	r2, #1
 8001a58:	9200      	str	r2, [sp, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	47a0      	blx	r4
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73bb      	strb	r3, [r7, #14]

    uint8_t readValue = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]

    if ( result == RESULT_OK )
 8001a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh+0x3c>
    {
        readValue = dataRead[0];
 8001a6e:	7a3b      	ldrb	r3, [r7, #8]
 8001a70:	73fb      	strb	r3, [r7, #15]
    }

    return readValue;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh>:

    return readValue;
}

static inline uint32_t As60xx_Read_Register_1_Dword(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t address)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	70bb      	strb	r3, [r7, #2]
    uint8_t dataToWrite[2];
    uint8_t dataRead[4];

    dataToWrite[0] = opcode;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	743b      	strb	r3, [r7, #16]
    dataToWrite[1] = address;
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	747b      	strb	r3, [r7, #17]

    Result result = (Result)read(dataToWrite, 2, dataRead, 4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681c      	ldr	r4, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68d8      	ldr	r0, [r3, #12]
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	f107 0110 	add.w	r1, r7, #16
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	9200      	str	r2, [sp, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	47a0      	blx	r4
 8001aac:	4603      	mov	r3, r0
 8001aae:	74fb      	strb	r3, [r7, #19]

    uint32_t readValue = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

    if ( result == RESULT_OK )
 8001ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh+0x56>
    {
        readValue = (dataRead[0]<<24) + (dataRead[1]<<16) + (dataRead[2]<<8) + (dataRead[3]);
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	061a      	lsls	r2, r3, #24
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	441a      	add	r2, r3
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	4413      	add	r3, r2
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
    }

    return readValue;
 8001ad2:	697b      	ldr	r3, [r7, #20]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}

08001adc <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt>:

static inline void As60xx_Read_Register_N_Dword(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t address, uint32_t* outputData, uint16_t amountRegistersToRead)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	72fb      	strb	r3, [r7, #11]
 8001aea:	4613      	mov	r3, r2
 8001aec:	72bb      	strb	r3, [r7, #10]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001aee:	2300      	movs	r3, #0
 8001af0:	82fb      	strh	r3, [r7, #22]
 8001af2:	e013      	b.n	8001b1c <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt+0x40>
    {
        outputData[i] = As60xx_Read_Register_1_Dword(as60xx, opcode, address+i);
 8001af4:	8afb      	ldrh	r3, [r7, #22]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	7abb      	ldrb	r3, [r7, #10]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2d9      	uxtb	r1, r3
 8001afe:	8afb      	ldrh	r3, [r7, #22]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	18d4      	adds	r4, r2, r3
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	460a      	mov	r2, r1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ffb5 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh>
 8001b12:	4603      	mov	r3, r0
 8001b14:	6023      	str	r3, [r4, #0]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001b16:	8afb      	ldrh	r3, [r7, #22]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	82fb      	strh	r3, [r7, #22]
 8001b1c:	8afa      	ldrh	r2, [r7, #22]
 8001b1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d3e7      	bcc.n	8001af4 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt+0x18>
    }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}

08001b2e <_ZL12As60xx_ResetP16ScioSense_As60xx>:

static inline Result As60xx_Reset(ScioSense_As60xx* as60xx)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 8001b3a:	2188      	movs	r1, #136	@ 0x88
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff23 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2019      	movs	r0, #25
 8001b48:	4798      	blx	r3
    
    As60xx_Write_Opcode(as60xx, RC_SYS_RST);
 8001b4a:	2199      	movs	r1, #153	@ 0x99
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff1b 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2019      	movs	r0, #25
 8001b58:	4798      	blx	r3

    As60xx_Write_8_Bit_Address_Register(as60xx, RC_RAA_WR, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_IF_CLR_CLEAR | AS60XX_DD_EF_CLR_CLEAR );
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	22dd      	movs	r2, #221	@ 0xdd
 8001b5e:	215a      	movs	r1, #90	@ 0x5a
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff3f 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhhm>
    wait(25);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2019      	movs	r0, #25
 8001b6c:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001b6e:	2187      	movs	r1, #135	@ 0x87
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff09 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	205e      	movs	r0, #94	@ 0x5e
 8001b7c:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 8001b7e:	218f      	movs	r1, #143	@ 0x8f
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff58 	bl	8001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_RST_FLAG_Msk )
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <_ZL12As60xx_ResetP16ScioSense_As60xx+0x72>
    {
        as60xx->State = AS60XX_STATE_RESET;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
        result = RESULT_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    }
    
    return result;
 8001ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZL11As60xx_InitP16ScioSense_As60xx>:

static inline Result As60xx_Init(ScioSense_As60xx* as60xx)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    As6xx_Initialize_Configuration(as60xx);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 f8cd 	bl	8002d54 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>
    return As60xx_Reset(as60xx);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffb7 	bl	8001b2e <_ZL12As60xx_ResetP16ScioSense_As60xx>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZL18As60xx_isConnectedP16ScioSense_As60xx>:

uint8_t As60xx_isConnected(ScioSense_As60xx* as60xx)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
    return (as60xx->State != AS60XX_STATE_NOT_CONNECTED);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 327c 	ldrb.w	r3, [r3, #636]	@ 0x27c
 8001bd8:	2bff      	cmp	r3, #255	@ 0xff
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>:

static inline Result As60xx_Write_Config(ScioSense_As60xx* as60xx)
{
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 8001bfa:	2188      	movs	r1, #136	@ 0x88
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fec3 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_OFF);
 8001c02:	218a      	movs	r1, #138	@ 0x8a
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff febf 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001c0a:	218d      	movs	r1, #141	@ 0x8d
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff febb 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    // Write Configuration (0xC0 - 0xCE, 0xD0 - 0xD2, 0xDA - 0xDB)
    uint8_t registersToWrite = As60xx_Get_Amount_Configuration_Registers();
 8001c12:	f7ff fe85 	bl	8001920 <_ZL41As60xx_Get_Amount_Configuration_Registersv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	72fb      	strb	r3, [r7, #11]
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73bb      	strb	r3, [r7, #14]
 8001c1e:	e014      	b.n	8001c4a <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x5c>
    {
	As60xx_Write_8_Bit_Address_Register(as60xx, RC_RAA_WR, As60xx_Get_Configuration_Register_Address(as60xx, idx), As60xx_Get_Configuration_Register_Setting(as60xx, idx));
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fe83 	bl	8001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b2dc      	uxtb	r4, r3
 8001c2e:	7bbb      	ldrb	r3, [r7, #14]
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fe92 	bl	800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	215a      	movs	r1, #90	@ 0x5a
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fed0 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhhm>
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73bb      	strb	r3, [r7, #14]
 8001c4a:	7bba      	ldrb	r2, [r7, #14]
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3e6      	bcc.n	8001c20 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x32>
    }

    uint8_t configurationCorrect = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 8001c56:	2301      	movs	r3, #1
 8001c58:	733b      	strb	r3, [r7, #12]
 8001c5a:	e01e      	b.n	8001c9a <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xac>
    {
        configurationCorrect &= ( As60xx_Get_Configuration_Register_Setting(as60xx, idx) == As60xx_Read_Register_1_Dword(as60xx, RC_RAA_RD, As60xx_Get_Configuration_Register_Address(as60xx, idx)) );
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fe7b 	bl	800195c <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 8001c66:	4604      	mov	r4, r0
 8001c68:	7b3b      	ldrb	r3, [r7, #12]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fe5f 	bl	8001930 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	217a      	movs	r1, #122	@ 0x7a
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fefe 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh>
 8001c80:	4603      	mov	r3, r0
 8001c82:	429c      	cmp	r4, r3
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7b7b      	ldrb	r3, [r7, #13]
 8001c90:	4013      	ands	r3, r2
 8001c92:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 8001c94:	7b3b      	ldrb	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	733b      	strb	r3, [r7, #12]
 8001c9a:	7b3a      	ldrb	r2, [r7, #12]
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3dc      	bcc.n	8001c5c <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x6e>
    }

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001ca2:	218d      	movs	r1, #141	@ 0x8d
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fe6f 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001caa:	2187      	movs	r1, #135	@ 0x87
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fe6b 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 8001cb2:	219a      	movs	r1, #154	@ 0x9a
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fe67 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2014      	movs	r0, #20
 8001cc0:	4798      	blx	r3
    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 8001cc2:	2189      	movs	r1, #137	@ 0x89
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fe5f 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    if( configurationCorrect )
 8001cca:	7b7b      	ldrb	r3, [r7, #13]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xee>
    {
        as60xx->State = AS60XX_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
        result = RESULT_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}

08001ce8 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>:

static inline Result As60xx_Start_Measurements(ScioSense_As60xx* as60xx)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001cf4:	218d      	movs	r1, #141	@ 0x8d
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fe46 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 8001cfc:	219a      	movs	r1, #154	@ 0x9a
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe42 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2014      	movs	r0, #20
 8001d0a:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 8001d0c:	2189      	movs	r1, #137	@ 0x89
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fe3a 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_ON);
 8001d14:	218b      	movs	r1, #139	@ 0x8b
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fe36 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    wait(120);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2078      	movs	r0, #120	@ 0x78
 8001d22:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 8001d24:	218f      	movs	r1, #143	@ 0x8f
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fe85 	bl	8001a36 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_MCT_STATE_Msk )
 8001d30:	7bbb      	ldrb	r3, [r7, #14]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx+0x56>
    {
        result = RESULT_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>:
  }
  return result;
}

static inline uint32_t As60xx_GetSupplyVoltageMv(ScioSense_As60xx* as60xx)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_VCC_VOLTAGE_MEASUREMENT);
 8001d52:	2201      	movs	r2, #1
 8001d54:	21da      	movs	r1, #218	@ 0xda
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fe2b 	bl	80019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
  wait(110);     // Wait for the measurement to complete
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	206e      	movs	r0, #110	@ 0x6e
 8001d62:	4798      	blx	r3
  
  uint32_t measurement = As60xx_Read_Register_1_Dword(as60xx, RC_RAA_RD, AS60XX_SRR_VCC_VAL_ADDRESS);
 8001d64:	22e5      	movs	r2, #229	@ 0xe5
 8001d66:	217a      	movs	r1, #122	@ 0x7a
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fe87 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh>
 8001d6e:	60f8      	str	r0, [r7, #12]
  
  return (2150 + measurement * 25);
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f603 0366 	addw	r3, r3, #2150	@ 0x866
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>:

static inline float As60xx_GetHsClkFreqHz(ScioSense_As60xx* as60xx)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_HIGH_SPEED_CLOCK_CAL);
 8001d90:	2240      	movs	r2, #64	@ 0x40
 8001d92:	21da      	movs	r1, #218	@ 0xda
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fe0c 	bl	80019b2 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
  wait(110);     // Wait for the measurement to complete
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	206e      	movs	r0, #110	@ 0x6e
 8001da0:	4798      	blx	r3
  
  float highSpeedClockCalibration = (float)As60xx_Read_Register_1_Dword(as60xx, RC_RAA_RD, AS60XX_SRR_HCC_VAL_ADDRESS);
 8001da2:	22e4      	movs	r2, #228	@ 0xe4
 8001da4:	217a      	movs	r1, #122	@ 0x7a
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fe68 	bl	8001a7c <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxhh>
 8001dac:	ee07 0a90 	vmov	s15, r0
 8001db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db4:	edc7 7a03 	vstr	s15, [r7, #12]
  
  return (highSpeedClockCalibration / 8.0);
 8001db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbc:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001dc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>:

static inline As60xx_Timestamp As60xx_GetTimestamp(ScioSense_As60xx* as60xx)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  As60xx_Timestamp timestamp;
  timestamp.hours   =           (as60xx->Status[AS60XX_STATUS_SRR_TS_HOUR_INDEX]     & AS60XX_E6_TS_HOUR_Msk)   >> AS60XX_E6_TS_HOUR_Pos;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001de2:	f3c3 0215 	ubfx	r2, r3, #0, #22
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
  timestamp.minutes = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_MIN_Msk)    >> AS60XX_E7_TS_MIN_Pos);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	711a      	strb	r2, [r3, #4]
  timestamp.seconds = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_SEC_Msk)    >> AS60XX_E6_TS_HOUR_Pos);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	715a      	strb	r2, [r3, #5]
  
  return timestamp;
 8001e04:	bf00      	nop
}
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZL13As60xx_UpdateP16ScioSense_As60xx>:
    // END
    As60xx_Write_Opcode(as60xx, RC_SYS_RST);
}

AS60xx_Measure_Type As60xx_Update(ScioSense_As60xx* as60xx)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af02      	add	r7, sp, #8
 8001e18:	6078      	str	r0, [r7, #4]
    uint8_t newData = AS60XX_NO_MEASUREMENT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]

    As60xx_Read_Register_N_Dword(as60xx, RC_RAA_RD, AS60XX_SRR_IRQ_FLAG_ADDRESS, as60xx->Status, AS60XX_AMOUNT_STATUS_REGISTERS);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e24:	220f      	movs	r2, #15
 8001e26:	9200      	str	r2, [sp, #0]
 8001e28:	22e0      	movs	r2, #224	@ 0xe0
 8001e2a:	217a      	movs	r1, #122	@ 0x7a
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe55 	bl	8001adc <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt>
    
    if( 1 )	// !(as60xx->Status[AS60XX_STATUS_SRR_ERR_FLAG_INDEX])
    {
        if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & AS60XX_E2_TM_UPD_Msk )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x46>
        {
            As60xx_Read_Register_N_Dword(as60xx, RC_RAA_RD, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferTemperature, AS60XX_AMOUNT_FDB_REGISTERS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	33f8      	adds	r3, #248	@ 0xf8
 8001e44:	221c      	movs	r2, #28
 8001e46:	9200      	str	r2, [sp, #0]
 8001e48:	2280      	movs	r2, #128	@ 0x80
 8001e4a:	217a      	movs	r1, #122	@ 0x7a
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fe45 	bl	8001adc <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt>
            newData = AS60XX_TEMPERATURE_MEASUREMENT;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e011      	b.n	8001e7c <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x6a>
        }
        else if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & (AS60XX_E2_US_U_UPD_Msk | AS60XX_E2_US_D_UPD_Msk | AS60XX_E2_US_TOF_UPD_Msk) )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x6a>
        {
            As60xx_Read_Register_N_Dword(as60xx, RC_RAA_RD, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferUltrasound, AS60XX_AMOUNT_FDB_REGISTERS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3388      	adds	r3, #136	@ 0x88
 8001e6a:	221c      	movs	r2, #28
 8001e6c:	9200      	str	r2, [sp, #0]
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	217a      	movs	r1, #122	@ 0x7a
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fe32 	bl	8001adc <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxhhPmt>
            newData = AS60XX_TOF_MEASUREMENT;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	73fb      	strb	r3, [r7, #15]
        }    
    }

    As60xx_Write_8_Bit_Address_Register(as60xx, RC_RAA_WR, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_FES_CLR_CLEAR);
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	22dd      	movs	r2, #221	@ 0xdd
 8001e80:	215a      	movs	r1, #90	@ 0x5a
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fdae 	bl	80019e4 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhhm>
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001e88:	218d      	movs	r1, #141	@ 0x8d
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fd7c 	bl	8001988 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    return newData;
 8001e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofUp(ScioSense_As60xx* as60xx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_U_INDEX];
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofDown(ScioSense_As60xx* as60xx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_D_INDEX];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmountHitsForSumTof(ScioSense_As60xx* as60xx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    return ( (as60xx->CR[AS60XX_CR_ARRAY_CR_USM_TOF_INDEX] & AS60XX_CA_TOF_HIT_SUM_NO_Msk) >> AS60XX_CA_TOF_HIT_SUM_NO_Pos );
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 031f 	and.w	r3, r3, #31
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>:

static inline uint32_t As60xx_CalculateTDCTimePs(ScioSense_As60xx* as60xx, uint32_t contentTDCRegister)
{
 8001eee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    uint8_t frequencyTDC = ( (as60xx->CR[AS60XX_CR_ARRAY_CR_CPM_INDEX] & AS60XX_C5_HSC_DIV_MODE_Msk) >> AS60XX_C5_HSC_DIV_MODE_Pos );
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8001efe:	b2c9      	uxtb	r1, r1
 8001f00:	f001 0101 	and.w	r1, r1, #1
 8001f04:	73f9      	strb	r1, [r7, #15]
    uint64_t tPeriodHSO;
    if( frequencyTDC == AS60XX_C5_HSC_DIV_MODE_4MHZ )
 8001f06:	7bf9      	ldrb	r1, [r7, #15]
 8001f08:	2900      	cmp	r1, #0
 8001f0a:	d106      	bne.n	8001f1a <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x2c>
    {
        tPeriodHSO = 250;
 8001f0c:	f04f 00fa 	mov.w	r0, #250	@ 0xfa
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001f18:	e005      	b.n	8001f26 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x38>
    }
    else
    {
        tPeriodHSO = 125;
 8001f1a:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	e9c7 0104 	strd	r0, r1, [r7, #16]
    }
    return (uint32_t)( (((uint64_t)contentTDCRegister) * tPeriodHSO * 1000) / (1<<16) );
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	2000      	movs	r0, #0
 8001f2a:	468a      	mov	sl, r1
 8001f2c:	4683      	mov	fp, r0
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	fb0b f001 	mul.w	r0, fp, r1
 8001f34:	6979      	ldr	r1, [r7, #20]
 8001f36:	fb0a f101 	mul.w	r1, sl, r1
 8001f3a:	4401      	add	r1, r0
 8001f3c:	6938      	ldr	r0, [r7, #16]
 8001f3e:	fba0 230a 	umull	r2, r3, r0, sl
 8001f42:	4419      	add	r1, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0a00 	mov.w	sl, #0
 8001f4e:	f04f 0b00 	mov.w	fp, #0
 8001f52:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f56:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f5a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f5e:	4650      	mov	r0, sl
 8001f60:	4659      	mov	r1, fp
 8001f62:	1a84      	subs	r4, r0, r2
 8001f64:	eb61 0503 	sbc.w	r5, r1, r3
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	00a9      	lsls	r1, r5, #2
 8001f72:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 8001f76:	00a0      	lsls	r0, r4, #2
 8001f78:	4604      	mov	r4, r0
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	eb14 0802 	adds.w	r8, r4, r2
 8001f80:	eb45 0903 	adc.w	r9, r5, r3
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f98:	4690      	mov	r8, r2
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	0c02      	lsrs	r2, r0, #16
 8001faa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fae:	0c0b      	lsrs	r3, r1, #16
 8001fb0:	4613      	mov	r3, r2
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <_ZL20As60xx_AmplitudeToMvmmm>:

    return ( (t_MI_M_1 / t_MI_R_1) - 1 ) * 1235 / 3.8;
}

static inline uint32_t As60xx_AmplitudeToMv(uint32_t AM, uint32_t AMCHigh, uint32_t AMCLow)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
    float VCal = 350.0 / 2.0;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <_ZL20As60xx_AmplitudeToMvmmm+0x74>)
 8001fce:	61fb      	str	r3, [r7, #28]
    float AMCGradient = VCal / (float)(AMCHigh - AMCLow);
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe6:	edc7 7a06 	vstr	s15, [r7, #24]
    float AMCOffset = (float)(2 * AMCLow - AMCHigh) * AMCGradient;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	edc7 7a05 	vstr	s15, [r7, #20]

    return (uint32_t)(AMCGradient * AM - AMCOffset);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002010:	edd7 7a06 	vldr	s15, [r7, #24]
 8002014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002018:	edd7 7a05 	vldr	s15, [r7, #20]
 800201c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002024:	ee17 3a90 	vmov	r3, s15
}
 8002028:	4618      	mov	r0, r3
 800202a:	3724      	adds	r7, #36	@ 0x24
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	432f0000 	.word	0x432f0000

08002038 <_ZL21As60xx_GetAmplitudeUpP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmplitudeUp(ScioSense_As60xx* as60xx)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    uint32_t AM_Up = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AM_U_INDEX];
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	617b      	str	r3, [r7, #20]
    uint32_t AMC_High = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VH_INDEX];
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204e:	613b      	str	r3, [r7, #16]
    uint32_t AMC_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VL_INDEX];
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002056:	60fb      	str	r3, [r7, #12]

    return As60xx_AmplitudeToMv(AM_Up, AMC_High, AMC_Low);
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7ff ffaf 	bl	8001fc0 <_ZL20As60xx_AmplitudeToMvmmm>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZL23As60xx_GetAmplitudeDownP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmplitudeDown(ScioSense_As60xx* as60xx)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    uint32_t AM_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AM_D_INDEX];
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800207a:	617b      	str	r3, [r7, #20]
    uint32_t AMC_High = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VH_INDEX];
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002082:	613b      	str	r3, [r7, #16]
    uint32_t AMC_Low = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_AMC_VL_INDEX];
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800208a:	60fb      	str	r3, [r7, #12]

    return As60xx_AmplitudeToMv(AM_Low, AMC_High, AMC_Low);
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6939      	ldr	r1, [r7, #16]
 8002090:	6978      	ldr	r0, [r7, #20]
 8002092:	f7ff ff95 	bl	8001fc0 <_ZL20As60xx_AmplitudeToMvmmm>
 8002096:	4603      	mov	r3, r0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZL29As60xx_PulseWidthRatioToFloatm>:

static inline float As60xx_PulseWidthRatioToFloat(uint32_t registerContent)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    float contentInteger = (float)((registerContent & AS60XX_FDB_US_PW_DECIMAL_Msk) >> AS60XX_FDB_US_PW_DECIMAL_Pos);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	09db      	lsrs	r3, r3, #7
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b8:	edc7 7a03 	vstr	s15, [r7, #12]
    float contentFractional = (float)(registerContent & AS60XX_FDB_US_PW_FRACTIONAL_Msk) * AS60XX_FDB_US_PW_FRACTIONAL_LSB;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80020f0 <_ZL29As60xx_PulseWidthRatioToFloatm+0x50>
 80020ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d2:	edc7 7a02 	vstr	s15, [r7, #8]
    return (contentInteger + contentFractional);
 80020d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80020da:	edd7 7a02 	vldr	s15, [r7, #8]
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	3c000000 	.word	0x3c000000

080020f4 <_ZL27As60xx_GetPulseWidthRatioUpP16ScioSense_As60xx>:

static inline float As60xx_GetPulseWidthRatioUp(ScioSense_As60xx* as60xx)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    return As60xx_PulseWidthRatioToFloat(as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_PW_U_INDEX]);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ffcc 	bl	80020a0 <_ZL29As60xx_PulseWidthRatioToFloatm>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
}
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_ZL29As60xx_GetPulseWidthRatioDownP16ScioSense_As60xx>:

static inline float As60xx_GetPulseWidthRatioDown(ScioSense_As60xx* as60xx)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
    return As60xx_PulseWidthRatioToFloat(as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_PW_D_INDEX]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ffbb 	bl	80020a0 <_ZL29As60xx_PulseWidthRatioToFloatm>
 800212a:	eef0 7a40 	vmov.f32	s15, s0
}
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>:
    as60xx->Param.CR19.ZCD_FHL_D            = ( (as60xx->CR[19]) & AS60XX_DB_ZCD_FHL_D_Msk )            >> AS60XX_DB_ZCD_FHL_D_Pos;
    as60xx->Param.CR19.NOT_USED_31_8        = ( (as60xx->CR[19]) & AS60XX_DB_NOT_USED_31_8_Msk )        >> AS60XX_DB_NOT_USED_31_8_Pos;
}

static inline void As60xx_Update_Configuration(ScioSense_As60xx* as60xx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    /* Writes all parameters into every configuration register */
    /* Parameter for CR[0] */
    as60xx->CR[0]   = 0;// Clearing the register
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
    as60xx->CR[0]   |= AS60XX_C0_WS_DIS_SET             (as60xx->Param.CR0.WS_DIS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
    /* Parameter for CR[1] */
    as60xx->CR[1]   = 0;// Clearing the register
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_TPW_SET             (as60xx->Param.CR1.PI_TPW);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	f892 21a8 	ldrb.w	r2, [r2, #424]	@ 0x1a8
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_EN_SET              (as60xx->Param.CR1.PI_EN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 31a9 	ldrb.w	r3, [r3, #425]	@ 0x1a9
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_OUT_MODE_SET        (as60xx->Param.CR1.PI_OUT_MODE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 31aa 	ldrb.w	r3, [r3, #426]	@ 0x1aa
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_UPD_MODE_SET        (as60xx->Param.CR1.PI_UPD_MODE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 31ab 	ldrb.w	r3, [r3, #427]	@ 0x1ab
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_11_SET        (as60xx->Param.CR1.NOT_USED_11);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 31ac 	ldrb.w	r3, [r3, #428]	@ 0x1ac
 80021b8:	02db      	lsls	r3, r3, #11
 80021ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_MODE_SET           (as60xx->Param.CR1.I2C_MODE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 31ad 	ldrb.w	r3, [r3, #429]	@ 0x1ad
 80021ce:	031b      	lsls	r3, r3, #12
 80021d0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_ADR_SET            (as60xx->Param.CR1.I2C_ADR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 31ae 	ldrb.w	r3, [r3, #430]	@ 0x1ae
 80021e4:	039b      	lsls	r3, r3, #14
 80021e6:	f403 13fe 	and.w	r3, r3, #2080768	@ 0x1fc000
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_21_SET        (as60xx->Param.CR1.NOT_USED_21);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 31af 	ldrb.w	r3, [r3, #431]	@ 0x1af
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_SPI_INPORT_CFG_SET     (as60xx->Param.CR1.SPI_INPORT_CFG);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002210:	059b      	lsls	r3, r3, #22
 8002212:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_31_24_SET     (as60xx->Param.CR1.NOT_USED_31_24);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 31b1 	ldrb.w	r3, [r3, #433]	@ 0x1b1
 8002226:	061b      	lsls	r3, r3, #24
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]
    /* Parameter for CR[2] */
    as60xx->CR[2]   = 0;// Clearing the register
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_DIR_SET            (as60xx->Param.CR2.GP0_DIR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 31b2 	ldrb.w	r3, [r3, #434]	@ 0x1b2
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_SEL_SET            (as60xx->Param.CR2.GP0_SEL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 31b3 	ldrb.w	r3, [r3, #435]	@ 0x1b3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_DIR_SET            (as60xx->Param.CR2.GP1_DIR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_SEL_SET            (as60xx->Param.CR2.GP1_SEL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 31b5 	ldrb.w	r3, [r3, #437]	@ 0x1b5
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	b2db      	uxtb	r3, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_DIR_SET            (as60xx->Param.CR2.GP2_DIR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 31b6 	ldrb.w	r3, [r3, #438]	@ 0x1b6
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_SEL_SET            (as60xx->Param.CR2.GP2_SEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 31b7 	ldrb.w	r3, [r3, #439]	@ 0x1b7
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_DIR_SET            (as60xx->Param.CR2.GP3_DIR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 80022be:	031b      	lsls	r3, r3, #12
 80022c0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_SEL_SET            (as60xx->Param.CR2.GP3_SEL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 31b9 	ldrb.w	r3, [r3, #441]	@ 0x1b9
 80022d4:	039b      	lsls	r3, r3, #14
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_DIR_SET            (as60xx->Param.CR2.GP4_DIR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 31ba 	ldrb.w	r3, [r3, #442]	@ 0x1ba
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_SEL_SET            (as60xx->Param.CR2.GP4_SEL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 31bb 	ldrb.w	r3, [r3, #443]	@ 0x1bb
 80022fe:	049b      	lsls	r3, r3, #18
 8002300:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_DIR_SET            (as60xx->Param.CR2.GP5_DIR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_SEL_SET            (as60xx->Param.CR2.GP5_SEL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 31bd 	ldrb.w	r3, [r3, #445]	@ 0x1bd
 800232a:	059b      	lsls	r3, r3, #22
 800232c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_NOT_USED_31_24_SET     (as60xx->Param.CR2.NOT_USED_31_24);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 31be 	ldrb.w	r3, [r3, #446]	@ 0x1be
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
    /* Parameter for CR[3] */
    as60xx->CR[3]   = 0;// Clearing the register
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_USM_OPT_SET            (as60xx->Param.CR3.USM_OPT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 31c0 	ldrb.w	r3, [r3, #448]	@ 0x1c0
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_NOT_USED_31_5_SET      (as60xx->Param.CR3.NOT_USED_31_5);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800236c:	015b      	lsls	r3, r3, #5
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	61da      	str	r2, [r3, #28]
    /* Parameter for CR[4] */
    as60xx->CR[4]   = 0;// Clearing the register
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TDC_TMO_SET      (as60xx->Param.CR4.EF_EN_TDC_TMO);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TOF_TMO_SET      (as60xx->Param.CR4.EF_EN_TOF_TMO);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 31c9 	ldrb.w	r3, [r3, #457]	@ 0x1c9
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_AM_TMO_SET       (as60xx->Param.CR4.EF_EN_AM_TMO);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 31ca 	ldrb.w	r3, [r3, #458]	@ 0x1ca
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_OC_SET        (as60xx->Param.CR4.EF_EN_TM_OC);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 31cb 	ldrb.w	r3, [r3, #459]	@ 0x1cb
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SC_SET        (as60xx->Param.CR4.EF_EN_TM_SC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_ZCC_ERR_SET      (as60xx->Param.CR4.EF_EN_ZCC_ERR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 31cd 	ldrb.w	r3, [r3, #461]	@ 0x1cd
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_LBD_ERR_SET      (as60xx->Param.CR4.EF_EN_LBD_ERR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 31ce 	ldrb.w	r3, [r3, #462]	@ 0x1ce
 8002406:	019b      	lsls	r3, r3, #6
 8002408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_USM_SQC_TMO_SET  (as60xx->Param.CR4.EF_EN_USM_SQC_TMO);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 31cf 	ldrb.w	r3, [r3, #463]	@ 0x1cf
 800241c:	01db      	lsls	r3, r3, #7
 800241e:	b2db      	uxtb	r3, r3
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SQC_TMO_SET   (as60xx->Param.CR4.EF_EN_TM_SQC_TMO);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 31d0 	ldrb.w	r3, [r3, #464]	@ 0x1d0
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TSQ_TMO_SET      (as60xx->Param.CR4.EF_EN_TSQ_TMO);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 31d1 	ldrb.w	r3, [r3, #465]	@ 0x1d1
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_I2C_ACK_ERR_SET  (as60xx->Param.CR4.EF_EN_I2C_ACK_ERR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 31d2 	ldrb.w	r3, [r3, #466]	@ 0x1d2
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CHP_ERR_SET      (as60xx->Param.CR4.EF_EN_CHP_ERR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 31d3 	ldrb.w	r3, [r3, #467]	@ 0x1d3
 8002472:	02db      	lsls	r3, r3, #11
 8002474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWCU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8002488:	031b      	lsls	r3, r3, #12
 800248a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWDU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 31d5 	ldrb.w	r3, [r3, #469]	@ 0x1d5
 800249e:	035b      	lsls	r3, r3, #13
 80024a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWA_ERR_SET  (as60xx->Param.CR4.EF_EN_NVM_FWA_ERR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 31d6 	ldrb.w	r3, [r3, #470]	@ 0x1d6
 80024b4:	039b      	lsls	r3, r3, #14
 80024b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CPU_ERR_SET      (as60xx->Param.CR4.EF_EN_CPU_ERR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 31d7 	ldrb.w	r3, [r3, #471]	@ 0x1d7
 80024ca:	03db      	lsls	r3, r3, #15
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_FNS_SET     (as60xx->Param.CR4.IRQ_EN_TSQ_FNS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 31d8 	ldrb.w	r3, [r3, #472]	@ 0x1d8
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TRANS_FNS_SET   (as60xx->Param.CR4.IRQ_EN_TRANS_FNS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1a      	ldr	r2, [r3, #32]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 80024f4:	045b      	lsls	r3, r3, #17
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_BLD_FNS_SET     (as60xx->Param.CR4.IRQ_EN_BLD_FNS);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 800250a:	049b      	lsls	r3, r3, #18
 800250c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_CHKSUM_FNS_SET  (as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1a      	ldr	r2, [r3, #32]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 31db 	ldrb.w	r3, [r3, #475]	@ 0x1db
 8002520:	04db      	lsls	r3, r3, #19
 8002522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_FW_S_SET        (as60xx->Param.CR4.IRQ_EN_FW_S);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8002536:	051b      	lsls	r3, r3, #20
 8002538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_TO_SET      (as60xx->Param.CR4.IRQ_EN_TSQ_TO);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1a      	ldr	r2, [r3, #32]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 800254c:	055b      	lsls	r3, r3, #21
 800254e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_22_SET        (as60xx->Param.CR4.NOT_USED_22);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 31de 	ldrb.w	r3, [r3, #478]	@ 0x1de
 8002562:	059b      	lsls	r3, r3, #22
 8002564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_ERR_FLAG_SET    (as60xx->Param.CR4.IRQ_EN_ERR_FLAG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 31df 	ldrb.w	r3, [r3, #479]	@ 0x1df
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_26_24_SET     (as60xx->Param.CR4.NOT_USED_26_24);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_CPU_REQ_EN_GPH_SET     (as60xx->Param.CR4.CPU_REQ_EN_GPH);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 80025a4:	06db      	lsls	r3, r3, #27
 80025a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_TS_GPT_RATE_SET        (as60xx->Param.CR4.TS_GPT_RATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 80025ba:	071b      	lsls	r3, r3, #28
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]
    /* Parameter for CR[5] */
    as60xx->CR[5]   = 0;// Clearing the register
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_MODE_SET       (as60xx->Param.CR5.HSC_DIV_MODE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 31e3 	ldrb.w	r3, [r3, #483]	@ 0x1e3
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_1_SET         (as60xx->Param.CR5.NOT_USED_1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_CLK_ST_SET         (as60xx->Param.CR5.HSC_CLK_ST);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	f003 031c 	and.w	r3, r3, #28
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_7_5_SET       (as60xx->Param.CR5.NOT_USED_7_5);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_SET            (as60xx->Param.CR5.HSC_DIV);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_RATE_SET           (as60xx->Param.CR5.HSC_RATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_MODE_CPU_SET       (as60xx->Param.CR5.HSC_MODE_CPU);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_VM_RATE_SET            (as60xx->Param.CR5.VM_RATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8002668:	035b      	lsls	r3, r3, #13
 800266a:	b29b      	uxth	r3, r3
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_LBD_TH_SET             (as60xx->Param.CR5.LBD_TH);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TSV_UPD_MODE_SET       (as60xx->Param.CR5.TSV_UPD_MODE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
 8002692:	059b      	lsls	r3, r3, #22
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_BF_SEL_SET             (as60xx->Param.CR5.BF_SEL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80026a8:	05db      	lsls	r3, r3, #23
 80026aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_CHP_HV_SEL_SET         (as60xx->Param.CR5.CHP_HV_SEL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_28_SET        (as60xx->Param.CR5.NOT_USED_28);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TI_PATH_SEL_SET        (as60xx->Param.CR5.TI_PATH_SEL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 31f0 	ldrb.w	r3, [r3, #496]	@ 0x1f0
 80026ea:	075b      	lsls	r3, r3, #29
 80026ec:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_31_SET        (as60xx->Param.CR5.NOT_USED_31);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 31f1 	ldrb.w	r3, [r3, #497]	@ 0x1f1
 8002700:	07db      	lsls	r3, r3, #31
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Parameter for CR[6] */
    as60xx->CR[6]   = 0;// Clearing the register
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_MR_CT_SET              (as60xx->Param.CR6.MR_CT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 8002718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_MCM_SET             (as60xx->Param.CR6.TS_MCM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 800272c:	035b      	lsls	r3, r3, #13
 800272e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_T_EN_SET         (as60xx->Param.CR6.TS_PP_T_EN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_F_EN_SET         (as60xx->Param.CR6.TS_PP_F_EN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 8002758:	03db      	lsls	r3, r3, #15
 800275a:	b29b      	uxth	r3, r3
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_MODE_SET         (as60xx->Param.CR6.TS_PP_MODE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_RATE_SET        (as60xx->Param.CR6.TS_CST_RATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8002782:	045b      	lsls	r3, r3, #17
 8002784:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_NVR_RATE_SET        (as60xx->Param.CR6.TS_NVR_RATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_NOT_USED_25_24_SET     (as60xx->Param.CR6.NOT_USED_25_24);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_MODE_SET        (as60xx->Param.CR6.TS_CHP_MODE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80027c4:	069b      	lsls	r3, r3, #26
 80027c6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_WT_SET          (as60xx->Param.CR6.TS_CHP_WT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80027da:	071b      	lsls	r3, r3, #28
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_MODE_SET        (as60xx->Param.CR6.TS_CST_MODE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80027ec:	07db      	lsls	r3, r3, #31
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Parameter for CR[7] */
    as60xx->CR[7]   = 0;// Clearing the register
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_RATE_SET            (as60xx->Param.CR7.TM_RATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PAUSE_SET          (as60xx->Param.CR7.TPM_PAUSE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_MODE_SET            (as60xx->Param.CR7.TM_MODE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 800282e:	035b      	lsls	r3, r3, #13
 8002830:	b29b      	uxth	r3, r3
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_16_SET        (as60xx->Param.CR7.NOT_USED_16);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PORT_MODE_SET      (as60xx->Param.CR7.TPM_PORT_MODE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 320b 	ldrb.w	r3, [r3, #523]	@ 0x20b
 8002858:	045b      	lsls	r3, r3, #17
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_PORT_ORDER_SET      (as60xx->Param.CR7.TM_PORT_ORDER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CLOAD_TRIM_SET     (as60xx->Param.CR7.TPM_CLOAD_TRIM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CYCLE_SEL_SET      (as60xx->Param.CR7.TPM_CYCLE_SEL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 800289a:	059b      	lsls	r3, r3, #22
 800289c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_FAKE_NO_SET        (as60xx->Param.CR7.TPM_FAKE_NO);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80028b0:	05db      	lsls	r3, r3, #23
 80028b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_31_24_SET     (as60xx->Param.CR7.NOT_USED_31_24);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Parameter for CR[8] */
    as60xx->CR[8]   = 0;// Clearing the register
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_PAUSE_SET          (as60xx->Param.CR8.USM_PAUSE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_AZ_DIS_SET      (as60xx->Param.CR8.TI_PGA_AZ_DIS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_DIR_MODE_SET       (as60xx->Param.CR8.USM_DIR_MODE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_NOISE_MASK_WIN_SET (as60xx->Param.CR8.USM_NOISE_MASK_WIN);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	b29b      	uxth	r3, r3
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_TO_SET             (as60xx->Param.CR8.USM_TO);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_18_SET        (as60xx->Param.CR8.NOT_USED_18);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8002948:	049b      	lsls	r3, r3, #18
 800294a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_RLS_MODE_SET       (as60xx->Param.CR8.USM_RLS_MODE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800295e:	04db      	lsls	r3, r3, #19
 8002960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_ZCC_RATE_SET           (as60xx->Param.CR8.ZCC_RATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_29_23_SET     (as60xx->Param.CR8.NOT_USED_29_23);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800298a:	05db      	lsls	r3, r3, #23
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_CON_MODE_SET    (as60xx->Param.CR8.TI_PGA_CON_MODE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8b3 3224 	ldrh.w	r3, [r3, #548]	@ 0x224
 800299c:	079b      	lsls	r3, r3, #30
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Parameter for CR[9] */
    as60xx->CR[9]   = 0;// Clearing the register
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_CLK_DIV_SET        (as60xx->Param.CR9.FBG_CLK_DIV);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 80029b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_MODE_SET           (as60xx->Param.CR9.FBG_MODE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 80029c8:	01db      	lsls	r3, r3, #7
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_PHASE_INS_SET      (as60xx->Param.CR9.FBG_PHASE_INS);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_PRE_SET      (as60xx->Param.CR9.FBG_BURST_PRE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_POST_SET     (as60xx->Param.CR9.FBG_BURST_POST);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002a06:	059b      	lsls	r3, r3, #22
 8002a08:	f003 637c 	and.w	r3, r3, #264241152	@ 0xfc00000
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_28_SET        (as60xx->Param.CR9.NOT_USED_28);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 8002a1c:	071b      	lsls	r3, r3, #28
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_29_SET        (as60xx->Param.CR9.NOT_USED_29);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8002a32:	075b      	lsls	r3, r3, #29
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_TOF_HIT_MODE_SET       (as60xx->Param.CR9.TOF_HIT_MODE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8002a48:	079b      	lsls	r3, r3, #30
 8002a4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_31_SET        (as60xx->Param.CR9.NOT_USED_31);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002a5e:	07db      	lsls	r3, r3, #31
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34
    /* Parameter for CR[10] */
    as60xx->CR[10]  = 0;// Clearing the register
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_0_SET         (as60xx->Param.CR10.NOT_USED_0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_START_SET      (as60xx->Param.CR10.TOF_HIT_START);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3232 	ldrb.w	r3, [r3, #562]	@ 0x232
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_IGN_SET        (as60xx->Param.CR10.TOF_HIT_IGN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3233 	ldrb.w	r3, [r3, #563]	@ 0x233
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_SUM_NO_SET     (as60xx->Param.CR10.TOF_HIT_SUM_NO);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_END_SET        (as60xx->Param.CR10.TOF_HIT_END);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3235 	ldrb.w	r3, [r3, #565]	@ 0x235
 8002aca:	035b      	lsls	r3, r3, #13
 8002acc:	f403 237e 	and.w	r3, r3, #1040384	@ 0xfe000
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_21_20_SET     (as60xx->Param.CR10.NOT_USED_21_20);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 8002ae0:	051b      	lsls	r3, r3, #20
 8002ae2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_EDGE_MODE_SET      (as60xx->Param.CR10.TOF_EDGE_MODE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8002af6:	059b      	lsls	r3, r3, #22
 8002af8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_RATE_INIT_SET      (as60xx->Param.CR10.TOF_RATE_INIT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_31_30_SET     (as60xx->Param.CR10.NOT_USED_31_30);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 8002b22:	079b      	lsls	r3, r3, #30
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameter for CR[11] */
    as60xx->CR[11]  = 0;// Clearing the register
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_RATE_SET            (as60xx->Param.CR11.AM_RATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 323a 	ldrb.w	r3, [r3, #570]	@ 0x23a
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_3_SET         (as60xx->Param.CR11.NOT_USED_3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 323b 	ldrb.w	r3, [r3, #571]	@ 0x23b
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_END_SET          (as60xx->Param.CR11.AM_PD_END);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_11_9_SET      (as60xx->Param.CR11.NOT_USED_11_9);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
 8002b7a:	025b      	lsls	r3, r3, #9
 8002b7c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AMC_RATE_SET           (as60xx->Param.CR11.AMC_RATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 323e 	ldrb.w	r3, [r3, #574]	@ 0x23e
 8002b90:	031b      	lsls	r3, r3, #12
 8002b92:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PWD_EN_SET             (as60xx->Param.CR11.PWD_EN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 323f 	ldrb.w	r3, [r3, #575]	@ 0x23f
 8002ba6:	03db      	lsls	r3, r3, #15
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_TRIM_SET           (as60xx->Param.CR11.PGA_TRIM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_EN_MODE_SET        (as60xx->Param.CR11.PGA_EN_MODE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8002bd0:	051b      	lsls	r3, r3, #20
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_MODE_SET           (as60xx->Param.CR11.PGA_MODE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8002be6:	055b      	lsls	r3, r3, #21
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_22_SET        (as60xx->Param.CR11.NOT_USED_22);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3243 	ldrb.w	r3, [r3, #579]	@ 0x243
 8002bfc:	059b      	lsls	r3, r3, #22
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_START_MODE_SET   (as60xx->Param.CR11.AM_PD_START_MODE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_ZCD_FHL_INIT_SET       (as60xx->Param.CR11.ZCD_FHL_INIT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Parameter for CR[12] */
    as60xx->CR[12]  = 0;// Clearing the register
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
    as60xx->CR[12]  |= AS60XX_CC_TRIM1_SET              (as60xx->Param.CR12.TRIM1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Parameter for CR[13] */
    as60xx->CR[13]  = 0;// Clearing the register
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    as60xx->CR[13]  |= AS60XX_CD_TRIM2_SET              (as60xx->Param.CR13.TRIM2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Parameter for CR[14] */
    as60xx->CR[14]  = 0;// Clearing the register
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	649a      	str	r2, [r3, #72]	@ 0x48
    as60xx->CR[14]  |= AS60XX_CE_TRIM3_SET              (as60xx->Param.CR14.TRIM3);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Parameter for CR[15] */
    as60xx->CR[15]  = 0;// Clearing the register
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_TOF_RATE_SET           (as60xx->Param.CR15.TOF_RATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8002c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_NOT_USED_31_6_SET      (as60xx->Param.CR15.NOT_USED_31_6);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Parameter for CR[16] */
    as60xx->CR[16]  = 0;// Clearing the register
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_USM_RLS_DLY_U_SET      (as60xx->Param.CR16.USM_RLS_DLY_U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_NOT_USED_31_19_SET     (as60xx->Param.CR16.NOT_USED_31_19);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002cc2:	04db      	lsls	r3, r3, #19
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Parameter for CR[17] */
    as60xx->CR[17]  = 0;// Clearing the register
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_USM_RLS_DLY_D_SET      (as60xx->Param.CR17.USM_RLS_DLY_D);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_NOT_USED_31_19_SET     (as60xx->Param.CR17.NOT_USED_31_19);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8002cee:	04db      	lsls	r3, r3, #19
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Parameter for CR[18] */
    as60xx->CR[18]  = 0;// Clearing the register
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_ZCD_FHL_U_SET          (as60xx->Param.CR18.ZCD_FHL_U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	f892 226c 	ldrb.w	r2, [r2, #620]	@ 0x26c
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_NOT_USED_31_8_SET      (as60xx->Param.CR18.NOT_USED_31_8);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Parameter for CR[19] */
    as60xx->CR[19]  = 0;// Clearing the register
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_ZCD_FHL_D_SET          (as60xx->Param.CR19.ZCD_FHL_D);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	f892 2274 	ldrb.w	r2, [r2, #628]	@ 0x274
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_NOT_USED_31_8_SET      (as60xx->Param.CR19.NOT_USED_31_8);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>:

static inline void As6xx_Initialize_Configuration(ScioSense_As60xx* as60xx)
{
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint8_t registersToWrite[] = {
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x20>)
 8002d5e:	f107 0408 	add.w	r4, r7, #8
 8002d62:	461d      	mov	r5, r3
 8002d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	6023      	str	r3, [r4, #0]
        0x0C0, 0X0C1, 0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C6, 0x0C7, 0x0C8, 0x0C9, 0x0CA, 0x0CB, 0x0CC, 0x0CD, 0x0CE,
        0x0D0, 0x0D1, 0x0D2,                                                  0x0DA, 0x0DB};
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e010      	b.n	8002d94 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x40>
 8002d72:	bf00      	nop
 8002d74:	0800c204 	.word	0x0800c204
  {
    as60xx->Addresses[idx] = registersToWrite[idx];
 8002d78:	7ffb      	ldrb	r3, [r7, #31]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	443b      	add	r3, r7
 8002d7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d82:	7ffa      	ldrb	r2, [r7, #31]
 8002d84:	4619      	mov	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3230      	adds	r2, #48	@ 0x30
 8002d8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	3301      	adds	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b13      	cmp	r3, #19
 8002d98:	d9ee      	bls.n	8002d78 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x24>
  }

  as60xx->State = AS60XX_STATE_RESET;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c

  as60xx->Param.CR0.WS_DIS              = 0xAF0A7435;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4aca      	ldr	r2, [pc, #808]	@ (80030d0 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x37c>)
 8002da6:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  as60xx->Param.CR1.PI_TPW              = 0;                            /*!< Pulse Interface, Pulse Width */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
  as60xx->Param.CR1.PI_EN               = 0;                            /*!< Pulse Interface Enable */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
  as60xx->Param.CR1.PI_OUT_MODE         = 0;                            /*!< Pulse Interface Output Mode */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 21aa 	strb.w	r2, [r3, #426]	@ 0x1aa
  as60xx->Param.CR1.PI_UPD_MODE         = 0;                            /*!< Pulse Interface Update Mode */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 21ab 	strb.w	r2, [r3, #427]	@ 0x1ab
  as60xx->Param.CR1.NOT_USED_11         = AS60XX_C1_NOT_USED_11;        /*!< Mandatory setting: b0 */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
  as60xx->Param.CR1.I2C_MODE            = 0;                            /*!< 2-wire master interface mode */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 21ad 	strb.w	r2, [r3, #429]	@ 0x1ad
  as60xx->Param.CR1.I2C_ADR             = 0;                            /*!< 2-wire master interface slave address */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 21ae 	strb.w	r2, [r3, #430]	@ 0x1ae
  as60xx->Param.CR1.NOT_USED_21         = AS60XX_C1_NOT_USED_21;        /*!< Mandatory setting: b0 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 21af 	strb.w	r2, [r3, #431]	@ 0x1af
  as60xx->Param.CR1.SPI_INPORT_CFG      = 0;                            /*!< Configuration of SPI input ports */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 21b0 	strb.w	r2, [r3, #432]	@ 0x1b0
  as60xx->Param.CR1.NOT_USED_31_24      = AS60XX_C1_NOT_USED_31_24;     /*!< Not used */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 21b1 	strb.w	r2, [r3, #433]	@ 0x1b1

  as60xx->Param.CR2.GP0_DIR             = 0;                            /*!< Direction of General Purpose Port 0 */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 21b2 	strb.w	r2, [r3, #434]	@ 0x1b2
  as60xx->Param.CR2.GP0_SEL             = 0;                            /*!< Output Select of General Purpose Port 0 */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 21b3 	strb.w	r2, [r3, #435]	@ 0x1b3
  as60xx->Param.CR2.GP1_DIR             = 0;                            /*!< Direction of General Purpose Port 1 */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 21b4 	strb.w	r2, [r3, #436]	@ 0x1b4
  as60xx->Param.CR2.GP1_SEL             = 0;                            /*!< Output Select of General Purpose Port 1 */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 21b5 	strb.w	r2, [r3, #437]	@ 0x1b5
  as60xx->Param.CR2.GP2_DIR             = 0;                            /*!< Direction of General Purpose Port 2 */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 21b6 	strb.w	r2, [r3, #438]	@ 0x1b6
  as60xx->Param.CR2.GP2_SEL             = 0;                            /*!< Output Select of General Purpose Port 2 */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 21b7 	strb.w	r2, [r3, #439]	@ 0x1b7
  as60xx->Param.CR2.GP3_DIR             = 0;                            /*!< Direction of General Purpose Port 3 */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  as60xx->Param.CR2.GP3_SEL             = 0;                            /*!< Output Select of General Purpose Port 3 */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9
  as60xx->Param.CR2.GP4_DIR             = 0;                            /*!< Direction of General Purpose Port 4 */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 21ba 	strb.w	r2, [r3, #442]	@ 0x1ba
  as60xx->Param.CR2.GP4_SEL             = 0;                            /*!< Output Select of General Purpose Port 4 */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 21bb 	strb.w	r2, [r3, #443]	@ 0x1bb
  as60xx->Param.CR2.GP5_DIR             = 0;                            /*!< Direction of General Purpose Port 5 */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 21bc 	strb.w	r2, [r3, #444]	@ 0x1bc
  as60xx->Param.CR2.GP5_SEL             = 0;                            /*!< Output Select of General Purpose Port 5 */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 21bd 	strb.w	r2, [r3, #445]	@ 0x1bd
  as60xx->Param.CR2.NOT_USED_31_24      = AS60XX_C2_NOT_USED_31_24;     /*!< Not used */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 21be 	strb.w	r2, [r3, #446]	@ 0x1be

  as60xx->Param.CR3.USM_OPT             = 0;                            /*!< Mandatory setting: b00001 */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
  as60xx->Param.CR3.NOT_USED_31_5       = AS60XX_C3_NOT_USED_31_5;      /*!< Not used */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
  
  as60xx->Param.CR4.EF_EN_TDC_TMO       = 0;                            /*!< Error Flag Enable, TDC Timeout */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8
  as60xx->Param.CR4.EF_EN_TOF_TMO       = 0;                            /*!< Error Flag Enable, TOF Timeout */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 21c9 	strb.w	r2, [r3, #457]	@ 0x1c9
  as60xx->Param.CR4.EF_EN_AM_TMO        = 0;                            /*!< Error Flag Enable, Amplitude Measurement Timeout */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 21ca 	strb.w	r2, [r3, #458]	@ 0x1ca
  as60xx->Param.CR4.EF_EN_TM_OC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Open Circuit */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 21cb 	strb.w	r2, [r3, #459]	@ 0x1cb
  as60xx->Param.CR4.EF_EN_TM_SC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Short Circuit */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
  as60xx->Param.CR4.EF_EN_ZCC_ERR       = 0;                            /*!< Error Flag Enable, Zero Cross Calibration Error */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 21cd 	strb.w	r2, [r3, #461]	@ 0x1cd
  as60xx->Param.CR4.EF_EN_LBD_ERR       = 0;                            /*!< Error Flag Enable, Low Battery Detect Error */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 21ce 	strb.w	r2, [r3, #462]	@ 0x1ce
  as60xx->Param.CR4.EF_EN_USM_SQC_TMO   = 0;                            /*!< Error Flag Enable, Ultrasonic Sequence Timeout */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 21cf 	strb.w	r2, [r3, #463]	@ 0x1cf
  as60xx->Param.CR4.EF_EN_TM_SQC_TMO    = 0;                            /*!< Error Flag Enable, Temperature Sequence Timeout */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
  as60xx->Param.CR4.EF_EN_TSQ_TMO       = 0;                            /*!< Error Flag Enable, Task Sequencer Timeout */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 21d1 	strb.w	r2, [r3, #465]	@ 0x1d1
  as60xx->Param.CR4.EF_EN_I2C_ACK_ERR   = 0;                            /*!< Error Flag Enable, EEPROM Acknowledge Error */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 21d2 	strb.w	r2, [r3, #466]	@ 0x1d2
  as60xx->Param.CR4.EF_EN_CHP_ERR       = 0;                            /*!< Mandatory setting: b0 */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 21d3 	strb.w	r2, [r3, #467]	@ 0x1d3
  as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWCU Error */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
  as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWDU Error */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
  as60xx->Param.CR4.EF_EN_NVM_FWA_ERR   = 0;                            /*!< Error Flag Enable, NVM Applied Firmware Error */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 21d6 	strb.w	r2, [r3, #470]	@ 0x1d6
  as60xx->Param.CR4.EF_EN_CPU_ERR       = 0;                            /*!< Error Flag Enable, CPU Error */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 21d7 	strb.w	r2, [r3, #471]	@ 0x1d7
  as60xx->Param.CR4.IRQ_EN_TSQ_FNS      = 0;                            /*!< Interrupt Request Enable, Task Sequencer finished */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
  as60xx->Param.CR4.IRQ_EN_TRANS_FNS    = 0;                            /*!< Interrupt Request Enable, FW Transaction finished */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 21d9 	strb.w	r2, [r3, #473]	@ 0x1d9
  as60xx->Param.CR4.IRQ_EN_BLD_FNS      = 0;                            /*!< Interrupt Request Enable, Bootload finished */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 21da 	strb.w	r2, [r3, #474]	@ 0x1da
  as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS   = 0;                            /*!< Interrupt Request Enable, Checksum generation finished */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 21db 	strb.w	r2, [r3, #475]	@ 0x1db
  as60xx->Param.CR4.IRQ_EN_FW_S         = 0;                            /*!< Interrupt Request Enable, Firmware, synchronized with task sequencer */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
  as60xx->Param.CR4.IRQ_EN_TSQ_TO       = 0;                            /*!< Interrupt Request Enable, Firmware */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
  as60xx->Param.CR4.NOT_USED_22         = AS60XX_C4_NOT_USED_22;        /*!< Error Flag Enable, Charge Pump Error */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 21de 	strb.w	r2, [r3, #478]	@ 0x1de
  as60xx->Param.CR4.IRQ_EN_ERR_FLAG     = 0;                            /*!< Interrupt Request Enable, Error Flag */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 21df 	strb.w	r2, [r3, #479]	@ 0x1df
  as60xx->Param.CR4.NOT_USED_26_24      = AS60XX_C4_NOT_USED_26_24;     /*!< Mandatory setting: b000 */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 21e0 	strb.w	r2, [r3, #480]	@ 0x1e0
  as60xx->Param.CR4.CPU_REQ_EN_GPH      = 0;                            /*!< CPU Request Enable, General Purpose Handling */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 21e1 	strb.w	r2, [r3, #481]	@ 0x1e1
  as60xx->Param.CR4.TS_GPT_RATE         = 0;                            /*!< General Purpose Timer Rate */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 21e2 	strb.w	r2, [r3, #482]	@ 0x1e2
  
  as60xx->Param.CR5.HSC_DIV_MODE        = 0;                            /*!< High Speed Clock Divider Mode */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 21e3 	strb.w	r2, [r3, #483]	@ 0x1e3
  as60xx->Param.CR5.NOT_USED_1          = AS60XX_C5_NOT_USED_1;         /*!< Mandatory setting: b0 */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
  as60xx->Param.CR5.HSC_CLK_ST          = 0;                            /*!< High-Speed Clock Settling Time */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
  as60xx->Param.CR5.NOT_USED_7_5        = AS60XX_C5_NOT_USED_7_5;       /*!< Recommended setting: b001 */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
  as60xx->Param.CR5.HSC_DIV             = 0;                            /*!< High-Speed Clock Divider */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
  as60xx->Param.CR5.HSC_RATE            = 0;                            /*!< High-Speed Clock Calibration Rate */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
  as60xx->Param.CR5.HSC_MODE_CPU        = 0;                            /*!< High-Speed Clock Mode CPU */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
  as60xx->Param.CR5.VM_RATE             = 0;                            /*!< VCC Voltage measurement rate */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
  as60xx->Param.CR5.LBD_TH              = 0;                            /*!< Low battery detection threshold */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
  as60xx->Param.CR5.TSV_UPD_MODE        = 0;                            /*!< Time stamp update mode */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
  as60xx->Param.CR5.BF_SEL              = 0;                            /*!< Base Frequency Select */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
  as60xx->Param.CR5.CHP_HV_SEL          = 1;         			/*!< Selection of charge pump voltage */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
  as60xx->Param.CR5.NOT_USED_28         = AS60XX_C5_NOT_USED_28;        /*!< Mandatory setting: b0 */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
  as60xx->Param.CR5.TI_PATH_SEL         = 0;                            /*!< Transducer Fire Buffer Impedance */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 21f0 	strb.w	r2, [r3, #496]	@ 0x1f0
  as60xx->Param.CR5.NOT_USED_31         = AS60XX_C5_NOT_USED_31;        /*!< Mandatory setting: b0 */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 21f1 	strb.w	r2, [r3, #497]	@ 0x1f1

  as60xx->Param.CR6.MR_CT               = 0;                            /*!< Measure rate cycle time */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  as60xx->Param.CR6.TS_MCM              = 0;                            /*!< Task Sequencer Measure Cycle Mode */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
  as60xx->Param.CR6.TS_PP_T_EN          = 0;                            /*!< Enables final post processing T */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
  as60xx->Param.CR6.TS_PP_F_EN          = 0;                            /*!< Enables post processing F */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
  as60xx->Param.CR6.TS_PP_MODE          = 0;                            /*!< Post processing mode */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
  as60xx->Param.CR6.TS_CST_RATE         = 0;                            /*!< Firmware Check(sum) Timer Rate */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  as60xx->Param.CR6.TS_NVR_RATE         = 0;                            /*!< Recall Timer Rate */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  as60xx->Param.CR6.NOT_USED_25_24      = AS60XX_C6_NOT_USED_25_24;     /*!< Mandatory setting: b01 */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
  as60xx->Param.CR6.NOT_USED_30      	= 0;                            /*!< Mandatory setting: b0 */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  as60xx->Param.CR6.TS_CST_MODE         = 0;                            /*!< Checksum Handling Mode */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  as60xx->Param.CR7.TM_RATE             = 0;                            /*!< Temperature Measurement Rate */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  as60xx->Param.CR7.TPM_PAUSE           = 0;                            /*!< Pause time between 2 temperature measurements */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
  as60xx->Param.CR7.TM_MODE             = 0;                            /*!< Temperature Measurement Mode */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
  as60xx->Param.CR7.NOT_USED_16         = AS60XX_C7_NOT_USED_16;        /*!< Mandatory setting: b0 */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
  as60xx->Param.CR7.TPM_PORT_MODE       = 0;                            /*!< Temperature Measurement Port Mode */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 220b 	strb.w	r2, [r3, #523]	@ 0x20b
  as60xx->Param.CR7.TM_PORT_ORDER       = 0;                            /*!< Temperature Measurement Port Order */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
  as60xx->Param.CR7.TPM_CLOAD_TRIM      = 0;                            /*!< Temperature Measurement Load Trim */
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
  as60xx->Param.CR7.TPM_CYCLE_SEL       = 0;                            /*!< Temperature Measurement Cycle Select */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e
  as60xx->Param.CR7.TPM_FAKE_NO         = 0;                            /*!< Number of Fake measurements */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 220f 	strb.w	r2, [r3, #527]	@ 0x20f
  as60xx->Param.CR7.NOT_USED_31_24      = AS60XX_C7_NOT_USED_31_24;     /*!< Mandatory setting: h00 */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210

  as60xx->Param.CR8.USM_PAUSE           = 0;                            /*!< Pause time between two ultrasonic measurements */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
  as60xx->Param.CR8.TI_PGA_AZ_DIS       = AS60XX_C8_TI_PGA_AZ_DIS_ENABLED;             /*!< Mandatory setting: b0 */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
  as60xx->Param.CR8.USM_DIR_MODE        = 0;                            /*!< Ultrasonic Measurement Direction Mode */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
  as60xx->Param.CR8.USM_NOISE_MASK_WIN  = 0;                            /*!< Noise Mask Window */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  as60xx->Param.CR8.USM_TO              = 0;                            /*!< Timeout */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
  as60xx->Param.CR8.NOT_USED_18         = AS60XX_C8_NOT_USED_18;        /*!< Mandatory setting: b0 */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
  as60xx->Param.CR8.USM_RLS_MODE        = 0;                            /*!< Select mode for multihit start release */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
  as60xx->Param.CR8.ZCC_RATE            = 0;                            /*!< Zero Cross Calibration Rate */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
  as60xx->Param.CR8.NOT_USED_29_23      = 0;                            /*!< Mandatory setting: b0000000 */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  as60xx->Param.CR8.TI_PGA_CON_MODE     = AS60XX_C8_TI_PGA_CON_MODE_WITH_EXTERNAL;     /*!< Connection of PGA filter */
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224

  as60xx->Param.CR9.FBG_CLK_DIV         = 0;                            /*!< Clock divider for fire burst generator */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  as60xx->Param.CR9.FBG_MODE            = 0;                            /*!< Fire Burst Generator Mode */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
  as60xx->Param.CR9.FBG_PHASE_INS       = 0;                            /*!< Fire Burst Generator, Phase Insertion */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a
  as60xx->Param.CR9.FBG_BURST_PRE       = 0;                            /*!< Fire Burst Generator, pre-burst */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	e001      	b.n	80030d4 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x380>
 80030d0:	af0a7435 	.word	0xaf0a7435
 80030d4:	f883 222b 	strb.w	r2, [r3, #555]	@ 0x22b
  as60xx->Param.CR9.FBG_BURST_POST      = 0;                            /*!< Fire Burst Generator, post-burst */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
  as60xx->Param.CR9.NOT_USED_28         = AS60XX_C9_NOT_USED_28;        /*!< Mandatory setting: b0 */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 222d 	strb.w	r2, [r3, #557]	@ 0x22d
  as60xx->Param.CR9.NOT_USED_29         = AS60XX_C9_NOT_USED_29;        /*!< Mandatory setting: b1 */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
  as60xx->Param.CR9.TOF_HIT_MODE        = 0;                            /*!< TOF data in FDB according to Multi-Hit Mode */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
  as60xx->Param.CR9.NOT_USED_31         = AS60XX_C9_NOT_USED_31;        /*!< Mandatory setting: b0 */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230

  as60xx->Param.CR10.NOT_USED_0         = AS60XX_CA_NOT_USED_0;         /*!< Mandatory setting: b0 */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
  as60xx->Param.CR10.TOF_HIT_START      = 0;                            /*!< Defines number of detected hits (including first hit) */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2232 	strb.w	r2, [r3, #562]	@ 0x232
  as60xx->Param.CR10.TOF_HIT_IGN        = 0;                            /*!< Number of multi hits ignored between two hits taken for TDC measurement */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2233 	strb.w	r2, [r3, #563]	@ 0x233
  as60xx->Param.CR10.TOF_HIT_SUM_NO     = 0;                            /*!< Number of hits taken for sum value of TOF measurement */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
  as60xx->Param.CR10.TOF_HIT_END        = 0;                            /*!< TOF Hits stored to frontend data buffer */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2235 	strb.w	r2, [r3, #565]	@ 0x235
  as60xx->Param.CR10.NOT_USED_21_20     = AS60XX_CA_NOT_USED_21_20;     /*!< Mandatory setting: b00 */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
  as60xx->Param.CR10.TOF_EDGE_MODE      = 0;                            /*!< Time of Flight, edge mode */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
  as60xx->Param.CR10.TOF_RATE_INIT      = 0;                            /*!< FWD copy of initial value for TOF rate */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  as60xx->Param.CR10.NOT_USED_31_30     = AS60XX_CA_NOT_USED_31_30;     /*!< Not Used */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239

  as60xx->Param.CR11.AM_RATE            = 0;                            /*!< Amplitude measurement rate */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
  as60xx->Param.CR11.NOT_USED_3         = AS60XX_CB_NOT_USED_3;         /*!< Default setting: b0 */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 223b 	strb.w	r2, [r3, #571]	@ 0x23b
  as60xx->Param.CR11.AM_PD_END          = 0;                            /*!< Amplitude measurement, end of peak detection */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  as60xx->Param.CR11.NOT_USED_11_9      = AS60XX_CB_NOT_USED_11_9;      /*!< Mandatory setting: b111 */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2207      	movs	r2, #7
 8003164:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
  as60xx->Param.CR11.AMC_RATE           = 0;                            /*!< Amplitude measurement calibration rate */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 223e 	strb.w	r2, [r3, #574]	@ 0x23e
  as60xx->Param.CR11.PWD_EN             = 0;                            /*!< Enables pulse width detection */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 223f 	strb.w	r2, [r3, #575]	@ 0x23f
  as60xx->Param.CR11.PGA_TRIM           = 0;                            /*!< DC gain of the PGA */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  as60xx->Param.CR11.PGA_EN_MODE        = 0;                            /*!< PGA enable mode */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
  as60xx->Param.CR11.PGA_MODE           = 0;                            /*!< Ultrasonic measurement PGA Mode */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
  as60xx->Param.CR11.NOT_USED_22        = AS60XX_CB_NOT_USED_22;        /*!< Mandatory setting: b0 */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
  as60xx->Param.CR11.AM_PD_START_MODE   = 0;                            /*!< Peak Detection Start Mode */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
  as60xx->Param.CR11.ZCD_FHL_INIT       = 0;                            /*!< FWD copy of initial value for first hit levels */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
  
  as60xx->Param.CR12.TRIM1              = AS60XX_CC_TRIM1_DEFAULT;      /*!< Default setting: 0x95A0C06C */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4cc>)
 80031ac:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248

  as60xx->Param.CR13.TRIM2              = AS60XX_CD_TRIM2_DEFAULT;      /*!< Default setting: 0x40110000 */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003224 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d0>)
 80031b4:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c

  as60xx->Param.CR14.TRIM3              = AS60XX_CE_TRIM3_DEFAULT;      /*!< Default setting: 0x4027000F */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d4>)
 80031bc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

  as60xx->Param.CR15.TOF_RATE           = 0;                            /*!< TOF Rate */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
  as60xx->Param.CR15.NOT_USED_31_6      = AS60XX_D0_NOT_USED_31_6;      /*!< Not used */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258

  as60xx->Param.CR16.USM_RLS_DLY_U      = 0;                            /*!< Delay window in up direction, releasing ultrasonic measurement */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
  as60xx->Param.CR16.NOT_USED_31_19     = AS60XX_D1_NOT_USED_31_19;     /*!< Not used */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
  
  as60xx->Param.CR17.USM_RLS_DLY_D      = 0;                            /*!< Delay window in down direction, releasing ultrasonic measurement */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  as60xx->Param.CR17.NOT_USED_31_19     = AS60XX_D2_NOT_USED_31_19;     /*!< Not used */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  as60xx->Param.CR18.ZCD_FHL_U          = 0;                            /*!< First Hit Level Up */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 226c 	strb.w	r2, [r3, #620]	@ 0x26c
  as60xx->Param.CR18.NOT_USED_31_8      = AS60XX_DA_NOT_USED_31_8;      /*!< Not used */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  as60xx->Param.CR19.ZCD_FHL_D          = 0;                            /*!< First Hit Level Down */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2274 	strb.w	r2, [r3, #628]	@ 0x274
  as60xx->Param.CR19.NOT_USED_31_8      = AS60XX_DB_NOT_USED_31_8;      /*!< Not used */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278

  As60xx_Update_Configuration(as60xx);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe ff91 	bl	8002138 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>
}
 8003216:	bf00      	nop
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	bf00      	nop
 8003220:	94a0c46c 	.word	0x94a0c46c
 8003224:	401100c4 	.word	0x401100c4
 8003228:	00a7400f 	.word	0x00a7400f

0800322c <_ZL25ScioSense_STM32_Spi_WritePvPht>:
    uint16_t            cs_pin;
    GPIO_TypeDef*       port;
} ScioSense_Stm32_Spi_Config;

static inline int8_t ScioSense_STM32_Spi_Write(void* config, uint8_t* data, const uint16_t size)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	617b      	str	r3, [r7, #20]

    /* 1. Put CN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	2200      	movs	r2, #0
 8003250:	4619      	mov	r1, r3
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f001 f9ac 	bl	80045b0 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, data, size, STM32_SPI_TIMEOUT_MS);
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	230a      	movs	r3, #10
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	69f8      	ldr	r0, [r7, #28]
 8003260:	f002 ffba 	bl	80061d8 <HAL_SPI_Transmit>
    
    /* 3. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	2201      	movs	r2, #1
 8003268:	4619      	mov	r1, r3
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f001 f9a0 	bl	80045b0 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_ZL24ScioSense_STM32_Spi_ReadPvPhtS0_t>:

static inline int8_t ScioSense_STM32_Spi_Read(void* config, uint8_t* dataToWrite, const uint16_t sizeToWrite, uint8_t* dataToRead, const uint16_t sizeToRead)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	889b      	ldrh	r3, [r3, #4]
 8003294:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	617b      	str	r3, [r7, #20]

    /* 1. Put SSN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 800329c:	8b7b      	ldrh	r3, [r7, #26]
 800329e:	2200      	movs	r2, #0
 80032a0:	4619      	mov	r1, r3
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f001 f984 	bl	80045b0 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, dataToWrite, sizeToWrite, STM32_SPI_TIMEOUT_MS);
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	230a      	movs	r3, #10
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	69f8      	ldr	r0, [r7, #28]
 80032b0:	f002 ff92 	bl	80061d8 <HAL_SPI_Transmit>

    /* 3. Read the data */
    HAL_SPI_Receive(spi, dataToRead, sizeToRead, STM32_SPI_TIMEOUT_MS);
 80032b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80032b6:	230a      	movs	r3, #10
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	69f8      	ldr	r0, [r7, #28]
 80032bc:	f003 f98e 	bl	80065dc <HAL_SPI_Receive>
    
    /* 4. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 80032c0:	8b7b      	ldrh	r3, [r7, #26]
 80032c2:	2201      	movs	r2, #1
 80032c4:	4619      	mov	r1, r3
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f001 f972 	bl	80045b0 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_ZL20ScioSense_STM32_Waitm>:

static inline void ScioSense_STM32_Wait(uint32_t ms)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fe72 	bl	8003fc8 <HAL_Delay>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <_ZN6AS60xxD1Ev>:
#include "as60xx.h"
#include "lib/as60xx/ScioSense_As60xx.h"
#include "lib/io/ScioSense_IOInterface_STM32.c"


AS60xx::~AS60xx() { }
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <_ZN6AS60xxD1Ev+0x1c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	0800c3a8 	.word	0x0800c3a8

0800330c <_ZN6AS60xxD0Ev>:
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffe9 	bl	80032ec <_ZN6AS60xxD1Ev>
 800331a:	f44f 7124 	mov.w	r1, #656	@ 0x290
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f004 fac6 	bl	80078b0 <_ZdlPvj>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <_ZN6AS60xxC1Ev>:

AS60xx::AS60xx()
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	4a06      	ldr	r2, [pc, #24]	@ (8003354 <_ZN6AS60xxC1Ev+0x24>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
{
  as60xxConfig.State   = AS60XX_STATE_NOT_CONNECTED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	22ff      	movs	r2, #255	@ 0xff
 8003342:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
}
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	0800c3a8 	.word	0x0800c3a8

08003358 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

void AS60xx::begin(SPI_HandleTypeDef* spi, uint16_t cs_pin, GPIO_TypeDef* port)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
    spiConfig               = { 0 };
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
    spiConfig.spi           = spi;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
    spiConfig.cs_pin        = cs_pin;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	f8a3 2288 	strh.w	r2, [r3, #648]	@ 0x288
    spiConfig.port          = port;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

    as60xxConfig.io.read    = ScioSense_STM32_Spi_Read;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x60>)
 8003392:	605a      	str	r2, [r3, #4]
    as60xxConfig.io.write   = ScioSense_STM32_Spi_Write;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x64>)
 8003398:	609a      	str	r2, [r3, #8]
    as60xxConfig.io.wait    = ScioSense_STM32_Wait;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x68>)
 800339e:	60da      	str	r2, [r3, #12]
    as60xxConfig.io.config  = &spiConfig;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 7221 	add.w	r2, r3, #644	@ 0x284
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	611a      	str	r2, [r3, #16]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	0800327b 	.word	0x0800327b
 80033bc:	0800322d 	.word	0x0800322d
 80033c0:	080032d7 	.word	0x080032d7

080033c4 <_ZN6AS60xx11writeConfigEv>:
{
    return As60xx_Reset(&(this->as60xxConfig));
}

Result AS60xx::writeConfig()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    return As60xx_Write_Config(&(this->as60xxConfig));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fc0c 	bl	8001bee <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>
 80033d6:	4603      	mov	r3, r0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN6AS60xx16startMeasurementEv>:

Result AS60xx::startMeasurement()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    return As60xx_Start_Measurements(&(this->as60xxConfig));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fc7b 	bl	8001ce8 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>
 80033f2:	4603      	mov	r3, r0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN6AS60xx18getSupplyVoltageMvEv>:

uint32_t AS60xx::getSupplyVoltageMv()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    return As60xx_GetSupplyVoltageMv(&(this->as60xxConfig));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fc9e 	bl	8001d4a <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>:

float AS60xx::getHighSpeedClockFrequencyHz()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    return As60xx_GetHsClkFreqHz(&(this->as60xxConfig));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fcaf 	bl	8001d88 <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>
 800342a:	eef0 7a40 	vmov.f32	s15, s0
}
 800342e:	eeb0 0a67 	vmov.f32	s0, s15
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZN6AS60xx12getTimestampEv>:

As60xx_Timestamp AS60xx::getTimestamp()
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
    return As60xx_GetTimestamp(&(this->as60xxConfig));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fcc1 	bl	8001dd2 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>
 8003450:	bf00      	nop
}
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN6AS60xx4initEv>:
    // ToDo: add a check to verify that the values were written properly
    return RESULT_OK;
}

bool AS60xx::init()
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    As60xx_Init(&(this->as60xxConfig));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fba0 	bl	8001bac <_ZL11As60xx_InitP16ScioSense_As60xx>

    return isConnected();
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZN6AS60xx11isConnectedEv>:

bool AS60xx::isConnected()
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
    return (bool)As60xx_isConnected(&(this->as60xxConfig));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fb9b 	bl	8001bca <_ZL18As60xx_isConnectedP16ScioSense_As60xx>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_ZN6AS60xx6updateEv>:

AS60xx_Measure_Type AS60xx::update()
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
    return As60xx_Update(&(this->as60xxConfig));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fcac 	bl	8001e12 <_ZL13As60xx_UpdateP16ScioSense_As60xx>
 80034ba:	4603      	mov	r3, r0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_ZN6AS60xx11getSumTofUpEv>:

uint32_t AS60xx::getSumTofUp()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofUp(&(this->as60xxConfig));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fce3 	bl	8001e9c <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_ZN6AS60xx13getSumTofDownEv>:

uint32_t AS60xx::getSumTofDown()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofDown(&(this->as60xxConfig));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fce2 	bl	8001eb6 <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>
 80034f2:	4603      	mov	r3, r0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZN6AS60xx22getAmountHitsForSumToFEv>:

uint32_t AS60xx::getAmountHitsForSumToF()
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmountHitsForSumTof(&(this->as60xxConfig));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fce1 	bl	8001ed0 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZN6AS60xx15calculateTimeNsEm>:

float AS60xx::calculateTimeNs(uint32_t contentTDCRegister)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    return ((float)As60xx_CalculateTDCTimePs(&(this->as60xxConfig), contentTDCRegister)) / 1000.0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fce0 	bl	8001eee <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>
 800352e:	ee07 0a90 	vmov	s15, r0
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	ee17 0a90 	vmov	r0, s15
 800353a:	f7fd f809 	bl	8000550 <__aeabi_f2d>
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <_ZN6AS60xx15calculateTimeNsEm+0x4c>)
 8003544:	f7fd f986 	bl	8000854 <__aeabi_ddiv>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fb4e 	bl	8000bf0 <__aeabi_d2f>
 8003554:	4603      	mov	r3, r0
 8003556:	ee07 3a90 	vmov	s15, r3
}
 800355a:	eeb0 0a67 	vmov.f32	s0, s15
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	408f4000 	.word	0x408f4000

08003568 <_ZN6AS60xx14getAmplitudeUpEv>:
{
    return AS60xx_CalculateInternalTemperature(&(this->as60xxConfig));
}

uint32_t AS60xx::getAmplitudeUp()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmplitudeUp(&(this->as60xxConfig));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fd5f 	bl	8002038 <_ZL21As60xx_GetAmplitudeUpP16ScioSense_As60xx>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_ZN6AS60xx16getAmplitudeDownEv>:

uint32_t AS60xx::getAmplitudeDown()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmplitudeDown(&(this->as60xxConfig));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fd6b 	bl	800206c <_ZL23As60xx_GetAmplitudeDownP16ScioSense_As60xx>
 8003596:	4603      	mov	r3, r0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZN6AS60xx20getPulseWidthRatioUpEv>:

float AS60xx::getPulseWidthRatioUp()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    return As60xx_GetPulseWidthRatioUp(&(this->as60xxConfig));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fda1 	bl	80020f4 <_ZL27As60xx_GetPulseWidthRatioUpP16ScioSense_As60xx>
 80035b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80035b6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN6AS60xx22getPulseWidthRatioDownEv>:

float AS60xx::getPulseWidthRatioDown()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    return As60xx_GetPulseWidthRatioDown(&(this->as60xxConfig));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fda2 	bl	8002116 <_ZL29As60xx_GetPulseWidthRatioDownP16ScioSense_As60xx>
 80035d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80035d6:	eeb0 0a67 	vmov.f32	s0, s15
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZN6AS60xx19updateConfigurationEv>:
{
    return As60xx_GetTofValuesDown(&(this->as60xxConfig), tofValues);
}

void AS60xx::updateConfiguration()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    As60xx_Update_Configuration(&(this->as60xxConfig));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fda3 	bl	8002138 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003600:	f000 fc24 	bl	8003e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003604:	f000 f814 	bl	8003630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003608:	f000 f92e 	bl	8003868 <MX_GPIO_Init>
  MX_SPI1_Init();
 800360c:	f000 f870 	bl	80036f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003610:	f000 f8de 	bl	80037d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AS60xx_Example_Setup(&huart1, &hspi1);
 8003614:	4904      	ldr	r1, [pc, #16]	@ (8003628 <main+0x2c>)
 8003616:	4805      	ldr	r0, [pc, #20]	@ (800362c <main+0x30>)
 8003618:	f7fd fd8e 	bl	8001138 <AS60xx_Example_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      AS60xx_Example_Loop(&huart1, &hspi1);
 800361c:	4902      	ldr	r1, [pc, #8]	@ (8003628 <main+0x2c>)
 800361e:	4803      	ldr	r0, [pc, #12]	@ (800362c <main+0x30>)
 8003620:	f7fd fe20 	bl	8001264 <AS60xx_Example_Loop>
 8003624:	e7fa      	b.n	800361c <main+0x20>
 8003626:	bf00      	nop
 8003628:	20000594 	.word	0x20000594
 800362c:	20000624 	.word	0x20000624

08003630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b094      	sub	sp, #80	@ 0x50
 8003634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003636:	f107 0318 	add.w	r3, r7, #24
 800363a:	2238      	movs	r2, #56	@ 0x38
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f005 f985 	bl	800894e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003644:	463b      	mov	r3, r7
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	611a      	str	r2, [r3, #16]
 8003652:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8003654:	2100      	movs	r1, #0
 8003656:	2001      	movs	r0, #1
 8003658:	f002 fc8a 	bl	8005f70 <HAL_RCCEx_EpodBoosterClkConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003662:	f000 f971 	bl	8003948 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8003666:	f000 fff9 	bl	800465c <HAL_PWREx_EnableEpodBooster>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8003670:	f000 f96a 	bl	8003948 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003674:	2001      	movs	r0, #1
 8003676:	f000 ffb3 	bl	80045e0 <HAL_PWREx_ControlVoltageScaling>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003680:	f000 f962 	bl	8003948 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <SystemClock_Config+0xbc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 030f 	bic.w	r3, r3, #15
 800368c:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <SystemClock_Config+0xbc>)
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 8003694:	2320      	movs	r3, #32
 8003696:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8003698:	2301      	movs	r3, #1
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 800369c:	2300      	movs	r3, #0
 800369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 f803 	bl	80046b4 <HAL_RCC_OscConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80036b4:	f000 f948 	bl	8003948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b8:	231f      	movs	r3, #31
 80036ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036d0:	463b      	mov	r3, r7
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fb43 	bl	8004d60 <HAL_RCC_ClockConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80036e0:	f000 f932 	bl	8003948 <Error_Handler>
  }
}
 80036e4:	bf00      	nop
 80036e6:	3750      	adds	r7, #80	@ 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40022000 	.word	0x40022000

080036f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003700:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003702:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <MX_SPI1_Init+0xdc>)
 8003704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003708:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800370c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800370e:	4b2e      	ldr	r3, [pc, #184]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003714:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003716:	2207      	movs	r2, #7
 8003718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371a:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003720:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003722:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003728:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800372a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800372e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003730:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003732:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003740:	2200      	movs	r2, #0
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003744:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800374a:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800374c:	2207      	movs	r2, #7
 800374e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003752:	2200      	movs	r2, #0
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003758:	2200      	movs	r2, #0
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800375c:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003762:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003764:	2200      	movs	r2, #0
 8003766:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003768:	4b17      	ldr	r3, [pc, #92]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800376a:	2200      	movs	r2, #0
 800376c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800376e:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003770:	2200      	movs	r2, #0
 8003772:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003776:	2200      	movs	r2, #0
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800377a:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800377c:	2200      	movs	r2, #0
 800377e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003782:	2200      	movs	r2, #0
 8003784:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800378c:	480e      	ldr	r0, [pc, #56]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 800378e:	f002 fc33 	bl	8005ff8 <HAL_SPI_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8003798:	f000 f8d6 	bl	8003948 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80037a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80037a4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4806      	ldr	r0, [pc, #24]	@ (80037c8 <MX_SPI1_Init+0xd8>)
 80037b0:	f003 fac9 	bl	8006d46 <HAL_SPIEx_SetConfigAutonomousMode>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80037ba:	f000 f8c5 	bl	8003948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000594 	.word	0x20000594
 80037cc:	40013000 	.word	0x40013000

080037d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d4:	4b22      	ldr	r3, [pc, #136]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <MX_USART1_UART_Init+0x94>)
 80037d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80037da:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037dc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80037e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037f6:	220c      	movs	r2, #12
 80037f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fa:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003800:	4b17      	ldr	r3, [pc, #92]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 8003808:	2200      	movs	r2, #0
 800380a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800380c:	4b14      	ldr	r3, [pc, #80]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 800380e:	2200      	movs	r2, #0
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 8003814:	2200      	movs	r2, #0
 8003816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003818:	4811      	ldr	r0, [pc, #68]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 800381a:	f003 fad5 	bl	8006dc8 <HAL_UART_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003824:	f000 f890 	bl	8003948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003828:	2100      	movs	r1, #0
 800382a:	480d      	ldr	r0, [pc, #52]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 800382c:	f003 ff76 	bl	800771c <HAL_UARTEx_SetTxFifoThreshold>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003836:	f000 f887 	bl	8003948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800383a:	2100      	movs	r1, #0
 800383c:	4808      	ldr	r0, [pc, #32]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 800383e:	f003 ffab 	bl	8007798 <HAL_UARTEx_SetRxFifoThreshold>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003848:	f000 f87e 	bl	8003948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800384c:	4804      	ldr	r0, [pc, #16]	@ (8003860 <MX_USART1_UART_Init+0x90>)
 800384e:	f003 ff2c 	bl	80076aa <HAL_UARTEx_DisableFifoMode>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003858:	f000 f876 	bl	8003948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000624 	.word	0x20000624
 8003864:	40013800 	.word	0x40013800

08003868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <MX_GPIO_Init+0xd4>)
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003884:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <MX_GPIO_Init+0xd4>)
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800388e:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <MX_GPIO_Init+0xd4>)
 8003890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389c:	4b27      	ldr	r3, [pc, #156]	@ (800393c <MX_GPIO_Init+0xd4>)
 800389e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a2:	4a26      	ldr	r2, [pc, #152]	@ (800393c <MX_GPIO_Init+0xd4>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038ac:	4b23      	ldr	r3, [pc, #140]	@ (800393c <MX_GPIO_Init+0xd4>)
 80038ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	4b20      	ldr	r3, [pc, #128]	@ (800393c <MX_GPIO_Init+0xd4>)
 80038bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c0:	4a1e      	ldr	r2, [pc, #120]	@ (800393c <MX_GPIO_Init+0xd4>)
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <MX_GPIO_Init+0xd4>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038de:	4818      	ldr	r0, [pc, #96]	@ (8003940 <MX_GPIO_Init+0xd8>)
 80038e0:	f000 fe66 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INTN_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = INTN_Pin|GPIO2_Pin;
 80038e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80038e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f2:	f107 030c 	add.w	r3, r7, #12
 80038f6:	4619      	mov	r1, r3
 80038f8:	4811      	ldr	r0, [pc, #68]	@ (8003940 <MX_GPIO_Init+0xd8>)
 80038fa:	f000 fcb7 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 80038fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2301      	movs	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	4619      	mov	r1, r3
 8003916:	480a      	ldr	r0, [pc, #40]	@ (8003940 <MX_GPIO_Init+0xd8>)
 8003918:	f000 fca8 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO5_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO5_Pin|GPIO4_Pin;
 800391c:	2330      	movs	r3, #48	@ 0x30
 800391e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003928:	f107 030c 	add.w	r3, r7, #12
 800392c:	4619      	mov	r1, r3
 800392e:	4805      	ldr	r0, [pc, #20]	@ (8003944 <MX_GPIO_Init+0xdc>)
 8003930:	f000 fc9c 	bl	800426c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003934:	bf00      	nop
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40030c00 	.word	0x40030c00
 8003940:	42020800 	.word	0x42020800
 8003944:	42020400 	.word	0x42020400

08003948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800394c:	b672      	cpsid	i
}
 800394e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <Error_Handler+0x8>

08003954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <HAL_MspInit+0x30>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003960:	4a08      	ldr	r2, [pc, #32]	@ (8003984 <HAL_MspInit+0x30>)
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_MspInit+0x30>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40030c00 	.word	0x40030c00

08003988 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0a8      	sub	sp, #160	@ 0xa0
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2278      	movs	r2, #120	@ 0x78
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f004 ffd0 	bl	800894e <memset>
  if(hspi->Instance==SPI1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <HAL_SPI_MspInit+0xbc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d141      	bne.n	8003a3c <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80039b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80039be:	2300      	movs	r3, #0
 80039c0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fb8a 	bl	80050e0 <HAL_RCCEx_PeriphCLKConfig>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80039d2:	f7ff ffb9 	bl	8003948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039e2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80039e6:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f4:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039fa:	4a13      	ldr	r2, [pc, #76]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a04:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_SPI_MspInit+0xc0>)
 8003a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003a12:	23e0      	movs	r3, #224	@ 0xe0
 8003a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003a34:	4619      	mov	r1, r3
 8003a36:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <HAL_SPI_MspInit+0xc4>)
 8003a38:	f000 fc18 	bl	800426c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003a3c:	bf00      	nop
 8003a3e:	37a0      	adds	r7, #160	@ 0xa0
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40013000 	.word	0x40013000
 8003a48:	40030c00 	.word	0x40030c00
 8003a4c:	42020000 	.word	0x42020000

08003a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0a8      	sub	sp, #160	@ 0xa0
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	2278      	movs	r2, #120	@ 0x78
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 ff6c 	bl	800894e <memset>
  if(huart->Instance==USART1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <HAL_UART_MspInit+0xbc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d141      	bne.n	8003b04 <HAL_UART_MspInit+0xb4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fb27 	bl	80050e0 <HAL_RCCEx_PeriphCLKConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a98:	f7ff ff56 	bl	8003948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac0:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_UART_MspInit+0xc0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003ad8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af2:	2307      	movs	r3, #7
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003afc:	4619      	mov	r1, r3
 8003afe:	4805      	ldr	r0, [pc, #20]	@ (8003b14 <HAL_UART_MspInit+0xc4>)
 8003b00:	f000 fbb4 	bl	800426c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003b04:	bf00      	nop
 8003b06:	37a0      	adds	r7, #160	@ 0xa0
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40030c00 	.word	0x40030c00
 8003b14:	42020000 	.word	0x42020000

08003b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <NMI_Handler+0x4>

08003b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <HardFault_Handler+0x4>

08003b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <MemManage_Handler+0x4>

08003b30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <BusFault_Handler+0x4>

08003b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <UsageFault_Handler+0x4>

08003b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b6e:	f000 fa0b 	bl	8003f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  return 1;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <_kill>:

int _kill(int pid, int sig)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b90:	f004 ff40 	bl	8008a14 <__errno>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2216      	movs	r2, #22
 8003b98:	601a      	str	r2, [r3, #0]
  return -1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_exit>:

void _exit (int status)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bae:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffe7 	bl	8003b86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <_exit+0x12>

08003bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e00a      	b.n	8003be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bce:	f3af 8000 	nop.w
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60ba      	str	r2, [r7, #8]
 8003bda:	b2ca      	uxtb	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dbf0      	blt.n	8003bce <_read+0x12>
  }

  return len;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e009      	b.n	8003c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	60ba      	str	r2, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	dbf1      	blt.n	8003c08 <_write+0x12>
  }
  return len;
 8003c24:	687b      	ldr	r3, [r7, #4]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_close>:

int _close(int file)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c56:	605a      	str	r2, [r3, #4]
  return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_isatty>:

int _isatty(int file)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca0:	4a14      	ldr	r2, [pc, #80]	@ (8003cf4 <_sbrk+0x5c>)
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <_sbrk+0x60>)
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cac:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <_sbrk+0x64>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <_sbrk+0x64>)
 8003cb6:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <_sbrk+0x68>)
 8003cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d207      	bcs.n	8003cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cc8:	f004 fea4 	bl	8008a14 <__errno>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	220c      	movs	r2, #12
 8003cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	e009      	b.n	8003cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <_sbrk+0x64>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cde:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <_sbrk+0x64>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a05      	ldr	r2, [pc, #20]	@ (8003cfc <_sbrk+0x64>)
 8003ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20030000 	.word	0x20030000
 8003cf8:	00000400 	.word	0x00000400
 8003cfc:	200006b8 	.word	0x200006b8
 8003d00:	20000810 	.word	0x20000810

08003d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <SystemInit+0x20>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	4a05      	ldr	r2, [pc, #20]	@ (8003d24 <SystemInit+0x20>)
 8003d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <SystemCoreClockUpdate+0xb8>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d034      	beq.n	8003da4 <SystemCoreClockUpdate+0x7c>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d836      	bhi.n	8003dac <SystemCoreClockUpdate+0x84>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <SystemCoreClockUpdate+0x20>
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d02a      	beq.n	8003d9c <SystemCoreClockUpdate+0x74>
 8003d46:	e031      	b.n	8003dac <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8003d48:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <SystemCoreClockUpdate+0xb8>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da03      	bge.n	8003d66 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8003d5e:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d60:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <SystemCoreClockUpdate+0xc0>)
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e002      	b.n	8003d6c <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d68:	4a20      	ldr	r2, [pc, #128]	@ (8003dec <SystemCoreClockUpdate+0xc4>)
 8003d6a:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	0f5b      	lsrs	r3, r3, #29
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	e009      	b.n	8003d8c <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <SystemCoreClockUpdate+0xc0>)
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8003d7e:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <SystemCoreClockUpdate+0xb8>)
 8003d80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003d84:	0b1b      	lsrs	r3, r3, #12
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d98:	6013      	str	r3, [r2, #0]
    break;
 8003d9a:	e00c      	b.n	8003db6 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003d9e:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <SystemCoreClockUpdate+0xc8>)
 8003da0:	601a      	str	r2, [r3, #0]
    break;
 8003da2:	e008      	b.n	8003db6 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <SystemCoreClockUpdate+0xc8>)
 8003da8:	601a      	str	r2, [r3, #0]
    break;
 8003daa:	e004      	b.n	8003db6 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	601a      	str	r2, [r3, #0]
    break;
 8003db4:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <SystemCoreClockUpdate+0xb8>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <SystemCoreClockUpdate+0xcc>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a05      	ldr	r2, [pc, #20]	@ (8003de4 <SystemCoreClockUpdate+0xbc>)
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40030c00 	.word	0x40030c00
 8003de4:	20000000 	.word	0x20000000
 8003de8:	016e3600 	.word	0x016e3600
 8003dec:	05b8d800 	.word	0x05b8d800
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	0800c3b8 	.word	0x0800c3b8

08003df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dfc:	f7ff ff82 	bl	8003d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e02:	e003      	b.n	8003e0c <LoopCopyDataInit>

08003e04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003e06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e0a:	3104      	adds	r1, #4

08003e0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e0c:	480a      	ldr	r0, [pc, #40]	@ (8003e38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e14:	d3f6      	bcc.n	8003e04 <CopyDataInit>
	ldr	r2, =_sbss
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e18:	e002      	b.n	8003e20 <LoopFillZerobss>

08003e1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e1c:	f842 3b04 	str.w	r3, [r2], #4

08003e20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e20:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <LoopForever+0x16>)
	cmp	r2, r3
 8003e22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e24:	d3f9      	bcc.n	8003e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e26:	f004 fdfb 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e2a:	f7ff fbe7 	bl	80035fc <main>

08003e2e <LoopForever>:

LoopForever:
    b LoopForever
 8003e2e:	e7fe      	b.n	8003e2e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003e30:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003e34:	0800c83c 	.word	0x0800c83c
	ldr	r0, =_sdata
 8003e38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e3c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8003e40:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8003e44:	2000080c 	.word	0x2000080c

08003e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC1_IRQHandler>
	...

08003e4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_Init+0x3c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <HAL_Init+0x3c>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f000 f966 	bl	800412e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8003e62:	f7ff ff61 	bl	8003d28 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e66:	2004      	movs	r0, #4
 8003e68:	f000 f9a8 	bl	80041bc <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6c:	200f      	movs	r0, #15
 8003e6e:	f000 f80d 	bl	8003e8c <HAL_InitTick>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e002      	b.n	8003e82 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e7c:	f7ff fd6a 	bl	8003954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000

08003e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003e98:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <HAL_InitTick+0xe8>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e062      	b.n	8003f6a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003ea4:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_InitTick+0xec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d10c      	bne.n	8003eca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003eb0:	4b32      	ldr	r3, [pc, #200]	@ (8003f7c <HAL_InitTick+0xf0>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f74 <HAL_InitTick+0xe8>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e03d      	b.n	8003f46 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8003eca:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <HAL_InitTick+0xf4>)
 8003ecc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ed0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ed4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003edc:	d025      	beq.n	8003f2a <HAL_InitTick+0x9e>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ee4:	d82e      	bhi.n	8003f44 <HAL_InitTick+0xb8>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_InitTick+0x6a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef2:	d00d      	beq.n	8003f10 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8003ef4:	e026      	b.n	8003f44 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003ef6:	4b21      	ldr	r3, [pc, #132]	@ (8003f7c <HAL_InitTick+0xf0>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_InitTick+0xe8>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	4619      	mov	r1, r3
 8003f00:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003f04:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
        break;
 8003f0e:	e01a      	b.n	8003f46 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f10:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <HAL_InitTick+0xe8>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	60fb      	str	r3, [r7, #12]
        break;
 8003f28:	e00d      	b.n	8003f46 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <HAL_InitTick+0xe8>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	60fb      	str	r3, [r7, #12]
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_InitTick+0xba>
        break;
 8003f44:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f916 	bl	8004178 <HAL_SYSTICK_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e009      	b.n	8003f6a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f56:	2200      	movs	r2, #0
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5e:	f000 f8f1 	bl	8004144 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003f62:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <HAL_InitTick+0xf8>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000008 	.word	0x20000008
 8003f78:	e000e010 	.word	0xe000e010
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	40030c00 	.word	0x40030c00
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_IncTick+0x20>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_IncTick+0x24>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <HAL_IncTick+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	200006bc 	.word	0x200006bc

08003fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <HAL_GetTick+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	200006bc 	.word	0x200006bc

08003fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff ffee 	bl	8003fb0 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d005      	beq.n	8003fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <HAL_Delay+0x44>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d8f7      	bhi.n	8003ff0 <HAL_Delay+0x28>
  {
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000008 	.word	0x20000008

08004010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004020:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800402c:	4013      	ands	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800403c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004042:	4a04      	ldr	r2, [pc, #16]	@ (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	60d3      	str	r3, [r2, #12]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800405c:	4b04      	ldr	r3, [pc, #16]	@ (8004070 <__NVIC_GetPriorityGrouping+0x18>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 0307 	and.w	r3, r3, #7
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	@ (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	@ (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
         );
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff6a 	bl	8004010 <__NVIC_SetPriorityGrouping>
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8004152:	f7ff ff81 	bl	8004058 <__NVIC_GetPriorityGrouping>
 8004156:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f7ff ffb3 	bl	80040c8 <NVIC_EncodePriority>
 8004162:	4602      	mov	r2, r0
 8004164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ff82 	bl	8004074 <__NVIC_SetPriority>
}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004188:	d301      	bcc.n	800418e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800418a:	2301      	movs	r3, #1
 800418c:	e00d      	b.n	80041aa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <HAL_SYSTICK_Config+0x40>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <HAL_SYSTICK_Config+0x40>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_SYSTICK_Config+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <HAL_SYSTICK_Config+0x40>)
 80041a2:	f043 0303 	orr.w	r3, r3, #3
 80041a6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e010 	.word	0xe000e010

080041bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d844      	bhi.n	8004254 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041f3 	.word	0x080041f3
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004233 	.word	0x08004233
 80041dc:	08004255 	.word	0x08004255
 80041e0:	080041e5 	.word	0x080041e5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80041e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6013      	str	r3, [r2, #0]
      break;
 80041f0:	e031      	b.n	8004256 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80041f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041f8:	f023 0304 	bic.w	r3, r3, #4
 80041fc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004200:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004204:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004206:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800420a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800420e:	e022      	b.n	8004256 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004210:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a13      	ldr	r2, [pc, #76]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800421c:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800421e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004222:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004226:	4a10      	ldr	r2, [pc, #64]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800422c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004230:	e011      	b.n	8004256 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004232:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800423e:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004240:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004244:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004248:	4a07      	ldr	r2, [pc, #28]	@ (8004268 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800424a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800424e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004252:	e000      	b.n	8004256 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004254:	bf00      	nop
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010
 8004268:	40030c00 	.word	0x40030c00

0800426c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800427a:	e162      	b.n	8004542 <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2101      	movs	r1, #1
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8154 	beq.w	800453c <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d005      	beq.n	80042ac <HAL_GPIO_Init+0x40>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d130      	bne.n	800430e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042e2:	2201      	movs	r2, #1
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0201 	and.w	r2, r3, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b03      	cmp	r3, #3
 8004318:	d109      	bne.n	800432e <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004322:	2b03      	cmp	r3, #3
 8004324:	d11b      	bne.n	800435e <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d017      	beq.n	800435e <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d123      	bne.n	80043b2 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	08da      	lsrs	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3208      	adds	r2, #8
 8004372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	08da      	lsrs	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3208      	adds	r2, #8
 80043ac:	6939      	ldr	r1, [r7, #16]
 80043ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0203 	and.w	r2, r3, #3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a4 	beq.w	800453c <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80043f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3318      	adds	r3, #24
 80043fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a52      	ldr	r2, [pc, #328]	@ (8004564 <HAL_GPIO_Init+0x2f8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d025      	beq.n	800446c <HAL_GPIO_Init+0x200>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a51      	ldr	r2, [pc, #324]	@ (8004568 <HAL_GPIO_Init+0x2fc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01f      	beq.n	8004468 <HAL_GPIO_Init+0x1fc>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a50      	ldr	r2, [pc, #320]	@ (800456c <HAL_GPIO_Init+0x300>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d019      	beq.n	8004464 <HAL_GPIO_Init+0x1f8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a4f      	ldr	r2, [pc, #316]	@ (8004570 <HAL_GPIO_Init+0x304>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_GPIO_Init+0x1f4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <HAL_GPIO_Init+0x308>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00d      	beq.n	800445c <HAL_GPIO_Init+0x1f0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a4d      	ldr	r2, [pc, #308]	@ (8004578 <HAL_GPIO_Init+0x30c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <HAL_GPIO_Init+0x1ec>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a4c      	ldr	r2, [pc, #304]	@ (800457c <HAL_GPIO_Init+0x310>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_GPIO_Init+0x1e8>
 8004450:	2307      	movs	r3, #7
 8004452:	e00c      	b.n	800446e <HAL_GPIO_Init+0x202>
 8004454:	2310      	movs	r3, #16
 8004456:	e00a      	b.n	800446e <HAL_GPIO_Init+0x202>
 8004458:	2306      	movs	r3, #6
 800445a:	e008      	b.n	800446e <HAL_GPIO_Init+0x202>
 800445c:	2304      	movs	r3, #4
 800445e:	e006      	b.n	800446e <HAL_GPIO_Init+0x202>
 8004460:	2303      	movs	r3, #3
 8004462:	e004      	b.n	800446e <HAL_GPIO_Init+0x202>
 8004464:	2302      	movs	r3, #2
 8004466:	e002      	b.n	800446e <HAL_GPIO_Init+0x202>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_GPIO_Init+0x202>
 800446c:	2300      	movs	r3, #0
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	f002 0203 	and.w	r2, r2, #3
 8004474:	00d2      	lsls	r2, r2, #3
 8004476:	4093      	lsls	r3, r2
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800447e:	4938      	ldr	r1, [pc, #224]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3318      	adds	r3, #24
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800448c:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 800448e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004536:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <HAL_GPIO_Init+0x2f4>)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3301      	adds	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f ae95 	bne.w	800427c <HAL_GPIO_Init+0x10>
  }
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40032000 	.word	0x40032000
 8004564:	42020000 	.word	0x42020000
 8004568:	42020400 	.word	0x42020400
 800456c:	42020800 	.word	0x42020800
 8004570:	42020c00 	.word	0x42020c00
 8004574:	42021000 	.word	0x42021000
 8004578:	42021800 	.word	0x42021800
 800457c:	42021c00 	.word	0x42021c00

08004580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e001      	b.n	80045a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045c0:	787b      	ldrb	r3, [r7, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045cc:	e002      	b.n	80045d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f023 0303 	bic.w	r3, r3, #3
 80045f0:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 80045fa:	4a15      	ldr	r2, [pc, #84]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8004600:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2232      	movs	r2, #50	@ 0x32
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	4a13      	ldr	r2, [pc, #76]	@ (8004658 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	0c9b      	lsrs	r3, r3, #18
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 800461c:	e002      	b.n	8004624 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b01      	subs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004624:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d002      	beq.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x58>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f2      	bne.n	800461e <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e000      	b.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8004642:	2300      	movs	r3, #0
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40030800 	.word	0x40030800
 8004654:	20000000 	.word	0x20000000
 8004658:	431bde83 	.word	0x431bde83

0800465c <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8004662:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466c:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800466e:	f7ff fc9f 	bl	8003fb0 <HAL_GetTick>
 8004672:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004674:	e00f      	b.n	8004696 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8004676:	f7ff fc9b 	bl	8003fb0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d908      	bls.n	8004696 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800468c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004690:	d001      	beq.n	8004696 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e007      	b.n	80046a6 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a2:	d1e8      	bne.n	8004676 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40030800 	.word	0x40030800

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e340      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b98      	ldr	r3, [pc, #608]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ad 	beq.w	8004838 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 80a5 	bne.w	8004838 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e32a      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d04f      	beq.n	800479a <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x5e>
 8004704:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a87      	ldr	r2, [pc, #540]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800470a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e02f      	b.n	8004772 <HAL_RCC_OscConfig+0xbe>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x82>
 800471c:	4b82      	ldr	r3, [pc, #520]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a81      	ldr	r2, [pc, #516]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b7f      	ldr	r3, [pc, #508]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7e      	ldr	r2, [pc, #504]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e01d      	b.n	8004772 <HAL_RCC_OscConfig+0xbe>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800473e:	d10c      	bne.n	800475a <HAL_RCC_OscConfig+0xa6>
 8004740:	4b79      	ldr	r3, [pc, #484]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a78      	ldr	r2, [pc, #480]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004746:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b76      	ldr	r3, [pc, #472]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a75      	ldr	r2, [pc, #468]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e00b      	b.n	8004772 <HAL_RCC_OscConfig+0xbe>
 800475a:	4b73      	ldr	r3, [pc, #460]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a72      	ldr	r2, [pc, #456]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b70      	ldr	r3, [pc, #448]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6f      	ldr	r2, [pc, #444]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800476c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7ff fc1d 	bl	8003fb0 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477a:	f7ff fc19 	bl	8003fb0 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b64      	cmp	r3, #100	@ 0x64
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e2dd      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478c:	4b66      	ldr	r3, [pc, #408]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0xc6>
 8004798:	e04e      	b.n	8004838 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0xfe>
 80047a4:	4b60      	ldr	r3, [pc, #384]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e02f      	b.n	8004812 <HAL_RCC_OscConfig+0x15e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047ba:	d10c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x122>
 80047bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a59      	ldr	r2, [pc, #356]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a56      	ldr	r2, [pc, #344]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e01d      	b.n	8004812 <HAL_RCC_OscConfig+0x15e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x146>
 80047e0:	4b51      	ldr	r3, [pc, #324]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a50      	ldr	r2, [pc, #320]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047e6:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a4d      	ldr	r2, [pc, #308]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x15e>
 80047fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b48      	ldr	r3, [pc, #288]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a47      	ldr	r2, [pc, #284]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800480c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7ff fbcd 	bl	8003fb0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481a:	f7ff fbc9 	bl	8003fb0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	@ 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e28d      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800482c:	4b3e      	ldr	r3, [pc, #248]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d054      	beq.n	80048ee <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b04      	cmp	r3, #4
 8004848:	d110      	bne.n	800486c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e278      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	4b34      	ldr	r3, [pc, #208]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	4930      	ldr	r1, [pc, #192]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004866:	4313      	orrs	r3, r2
 8004868:	610b      	str	r3, [r1, #16]
 800486a:	e040      	b.n	80048ee <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004874:	4b2c      	ldr	r3, [pc, #176]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2b      	ldr	r2, [pc, #172]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800487a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800487e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7ff fb96 	bl	8003fb0 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004888:	f7ff fb92 	bl	8003fb0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e256      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489a:	4b23      	ldr	r3, [pc, #140]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	491c      	ldr	r1, [pc, #112]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	610b      	str	r3, [r1, #16]
 80048ba:	e018      	b.n	80048ee <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7ff fb72 	bl	8003fb0 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d0:	f7ff fb6e 	bl	8003fb0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e232      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e2:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d038      	beq.n	800496c <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a08      	ldr	r2, [pc, #32]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800490c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7ff fb4f 	bl	8003fb0 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004916:	f7ff fb4b 	bl	8003fb0 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d903      	bls.n	800492c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e20f      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
 8004928:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800492c:	4ba0      	ldr	r3, [pc, #640]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ee      	beq.n	8004916 <HAL_RCC_OscConfig+0x262>
 8004938:	e018      	b.n	800496c <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b9d      	ldr	r3, [pc, #628]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a9c      	ldr	r2, [pc, #624]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004940:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004944:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7ff fb33 	bl	8003fb0 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494e:	f7ff fb2f 	bl	8003fb0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1f3      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004960:	4b93      	ldr	r3, [pc, #588]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a7 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800497e:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 800498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004992:	4a87      	ldr	r2, [pc, #540]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800499c:	4b84      	ldr	r3, [pc, #528]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80049ae:	4b81      	ldr	r3, [pc, #516]	@ (8004bb4 <HAL_RCC_OscConfig+0x500>)
 80049b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b2:	4a80      	ldr	r2, [pc, #512]	@ (8004bb4 <HAL_RCC_OscConfig+0x500>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d051      	beq.n	8004a66 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 80049c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 80049c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80049c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049cc:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 80049d8:	4a75      	ldr	r2, [pc, #468]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7ff fae6 	bl	8003fb0 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7ff fae2 	bl	8003fb0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1a4      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a00:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ed      	beq.n	80049e8 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7ff fac9 	bl	8003fb0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e18b      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a30:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a32:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ed      	beq.n	8004a1a <HAL_RCC_OscConfig+0x366>
 8004a3e:	e038      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7ff fab6 	bl	8003fb0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e178      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a56:	4b56      	ldr	r3, [pc, #344]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a58:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ed      	bne.n	8004a40 <HAL_RCC_OscConfig+0x38c>
 8004a64:	e025      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8004a66:	4b52      	ldr	r3, [pc, #328]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a68:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a6c:	4a50      	ldr	r2, [pc, #320]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a6e:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8004a72:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a76:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a78:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7ff fa93 	bl	8003fb0 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7ff fa8f 	bl	8003fb0 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e151      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa4:	4b42      	ldr	r3, [pc, #264]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004aa6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ed      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ab2:	7efb      	ldrb	r3, [r7, #27]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abe:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d078      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8004ad4:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004ad6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004ada:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d050      	beq.n	8004b86 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d023      	beq.n	8004b3a <HAL_RCC_OscConfig+0x486>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01e      	beq.n	8004b3a <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8004b04:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7ff fa50 	bl	8003fb0 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b14:	f7ff fa4c 	bl	8003fb0 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b14      	cmp	r3, #20
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e110      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004b26:	4b22      	ldr	r3, [pc, #136]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004b28:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ef      	bne.n	8004b14 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7ff fa47 	bl	8003fc8 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004b54:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7ff fa28 	bl	8003fb0 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b64:	f7ff fa24 	bl	8003fb0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b14      	cmp	r3, #20
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0e8      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004b76:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004b78:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <HAL_RCC_OscConfig+0x4b0>
 8004b84:	e01f      	b.n	8004bc6 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004b8e:	4a08      	ldr	r2, [pc, #32]	@ (8004bb0 <HAL_RCC_OscConfig+0x4fc>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7ff fa0b 	bl	8003fb0 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004b9c:	e00c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7ff fa07 	bl	8003fb0 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b14      	cmp	r3, #20
 8004baa:	d905      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e0cb      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
 8004bb0:	40030c00 	.word	0x40030c00
 8004bb4:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004bb8:	4b65      	ldr	r3, [pc, #404]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004bba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1eb      	bne.n	8004b9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d068      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b1      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8004be4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a59      	ldr	r2, [pc, #356]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e03b      	b.n	8004c6e <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8004bf6:	4b56      	ldr	r3, [pc, #344]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0305 	and.w	r3, r3, #5
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0a0      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8004c06:	4b52      	ldr	r3, [pc, #328]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004c0e:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c22:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8004c24:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c30:	f000 f982 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b46      	ldr	r3, [pc, #280]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	4945      	ldr	r1, [pc, #276]	@ (8004d54 <HAL_RCC_OscConfig+0x6a0>)
 8004c40:	5ccb      	ldrb	r3, [r1, r3]
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	4a44      	ldr	r2, [pc, #272]	@ (8004d58 <HAL_RCC_OscConfig+0x6a4>)
 8004c48:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c4a:	4b44      	ldr	r3, [pc, #272]	@ (8004d5c <HAL_RCC_OscConfig+0x6a8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff f91c 	bl	8003e8c <HAL_InitTick>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e074      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3b      	ldr	r2, [pc, #236]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7ff f99f 	bl	8003fb0 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004c74:	e00f      	b.n	8004c96 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c76:	f7ff f99b 	bl	8003fb0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d908      	bls.n	8004c96 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004c84:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e058      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8004c96:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1e8      	bne.n	8004c76 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d04a      	beq.n	8004d46 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8004cb8:	4b25      	ldr	r3, [pc, #148]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004cbe:	f023 0308 	bic.w	r3, r3, #8
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e022      	b.n	8004d10 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8004cca:	4b21      	ldr	r3, [pc, #132]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0318 	and.w	r3, r3, #24
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e036      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8004cda:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8004ce2:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cec:	4313      	orrs	r3, r2
 8004cee:	08da      	lsrs	r2, r3, #3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cf8:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8004cfa:	4a15      	ldr	r2, [pc, #84]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8004d00:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7ff f94e 	bl	8003fb0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d16:	e00f      	b.n	8004d38 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d18:	f7ff f94a 	bl	8003fb0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d908      	bls.n	8004d38 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d26:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e007      	b.n	8004d48 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8004d38:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <HAL_RCC_OscConfig+0x69c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d1e8      	bne.n	8004d18 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40030c00 	.word	0x40030c00
 8004d54:	0800c3b8 	.word	0x0800c3b8
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	20000004 	.word	0x20000004

08004d60 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0d2      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d74:	4b6b      	ldr	r3, [pc, #428]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d910      	bls.n	8004da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b68      	ldr	r3, [pc, #416]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 020f 	bic.w	r2, r3, #15
 8004d8a:	4966      	ldr	r1, [pc, #408]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b64      	ldr	r3, [pc, #400]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0ba      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d040      	beq.n	8004e32 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8004db0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d106      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0a6      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d108      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e09b      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e094      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f023 0203 	bic.w	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	494a      	ldr	r1, [pc, #296]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7ff f8d5 	bl	8003fb0 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0a:	f7ff f8d1 	bl	8003fb0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e07c      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8004e20:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 020c 	and.w	r2, r3, #12
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d1eb      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8004e32:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 030f 	bic.w	r3, r3, #15
 8004e4e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e92:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8004ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b17      	ldr	r3, [pc, #92]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d210      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4912      	ldr	r1, [pc, #72]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e012      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ef4:	f000 f820 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x1cc>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_ClockConfig+0x1d0>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_ClockConfig+0x1d4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe ffba 	bl	8003e8c <HAL_InitTick>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40022000 	.word	0x40022000
 8004f28:	40030c00 	.word	0x40030c00
 8004f2c:	0800c3b8 	.word	0x0800c3b8
 8004f30:	20000000 	.word	0x20000000
 8004f34:	20000004 	.word	0x20000004

08004f38 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x84>)
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	e029      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d102      	bne.n	8004f60 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8004f5a:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x84>)
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	e023      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8004f60:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da02      	bge.n	8004f7c <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	e001      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004f7e:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0f5b      	lsrs	r3, r3, #29
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004f8e:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8004f90:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f92:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004f96:	0b1b      	lsrs	r3, r3, #12
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8004fa8:	683b      	ldr	r3, [r7, #0]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40030c00 	.word	0x40030c00
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	016e3600 	.word	0x016e3600
 8004fc4:	05b8d800 	.word	0x05b8d800

08004fc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fcc:	f7ff ffb4 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4906      	ldr	r1, [pc, #24]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fdc:	5ccb      	ldrb	r3, [r1, r3]
 8004fde:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe2:	4a05      	ldr	r2, [pc, #20]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fe4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004fe6:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40030c00 	.word	0x40030c00
 8004ff4:	0800c3b8 	.word	0x0800c3b8
 8004ff8:	20000000 	.word	0x20000000

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005000:	f7ff ffe2 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40030c00 	.word	0x40030c00
 8005020:	0800c3c8 	.word	0x0800c3c8

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005028:	f7ff ffce 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40030c00 	.word	0x40030c00
 8005048:	0800c3c8 	.word	0x0800c3c8

0800504c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005050:	f7ff ffba 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40030c00 	.word	0x40030c00
 8005070:	0800c3c8 	.word	0x0800c3c8

08005074 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 800507a:	4b16      	ldr	r3, [pc, #88]	@ (80050d4 <HAL_RCC_GetMSIKFreq+0x60>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00f      	beq.n	80050aa <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <HAL_RCC_GetMSIKFreq+0x64>)
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 80050a4:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <HAL_RCC_GetMSIKFreq+0x68>)
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e008      	b.n	80050bc <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <HAL_RCC_GetMSIKFreq+0x64>)
 80050ac:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_GetMSIKFreq+0x60>)
 80050b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	607b      	str	r3, [r7, #4]

  return tmp;
 80050c6:	687b      	ldr	r3, [r7, #4]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40030c00 	.word	0x40030c00
 80050d8:	016e3600 	.word	0x016e3600
 80050dc:	05b8d800 	.word	0x05b8d800

080050e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f4:	4bad      	ldr	r3, [pc, #692]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80050f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	49aa      	ldr	r1, [pc, #680]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005116:	4ba5      	ldr	r3, [pc, #660]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005118:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800511c:	f023 0204 	bic.w	r2, r3, #4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	49a1      	ldr	r1, [pc, #644]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005138:	4b9c      	ldr	r3, [pc, #624]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800513a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800513e:	f023 0210 	bic.w	r2, r3, #16
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4999      	ldr	r1, [pc, #612]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800515a:	4b94      	ldr	r3, [pc, #592]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800515c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005160:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	4990      	ldr	r1, [pc, #576]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 800517c:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800517e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005182:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4988      	ldr	r1, [pc, #544]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b83      	ldr	r3, [pc, #524]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051a4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	497f      	ldr	r1, [pc, #508]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c0:	4b7a      	ldr	r3, [pc, #488]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4977      	ldr	r1, [pc, #476]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 80051e2:	4b72      	ldr	r3, [pc, #456]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051e8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	496e      	ldr	r1, [pc, #440]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8005204:	4b69      	ldr	r3, [pc, #420]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005206:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800520a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	4966      	ldr	r1, [pc, #408]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005226:	4b61      	ldr	r3, [pc, #388]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005228:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800522c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	495d      	ldr	r1, [pc, #372]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8005248:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800524a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800524e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	4955      	ldr	r1, [pc, #340]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 800526a:	4b50      	ldr	r3, [pc, #320]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800526c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005270:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	494c      	ldr	r1, [pc, #304]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800528c:	4b47      	ldr	r3, [pc, #284]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800528e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005292:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529a:	4944      	ldr	r1, [pc, #272]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 80052ae:	4b3f      	ldr	r3, [pc, #252]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	493b      	ldr	r1, [pc, #236]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 80052d0:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052de:	4933      	ldr	r1, [pc, #204]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 80052f2:	4b2e      	ldr	r3, [pc, #184]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80052f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	492a      	ldr	r1, [pc, #168]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005316:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	4922      	ldr	r1, [pc, #136]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8005336:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005338:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800533c:	f023 0208 	bic.w	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005344:	4919      	ldr	r1, [pc, #100]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800535a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800535e:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005366:	4911      	ldr	r1, [pc, #68]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800537c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005380:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005388:	4908      	ldr	r1, [pc, #32]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 800539c:	4b03      	ldr	r3, [pc, #12]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800539e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	e002      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053aa:	bf00      	nop
 80053ac:	40030c00 	.word	0x40030c00
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	4980      	ldr	r1, [pc, #512]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 80053ba:	4b7e      	ldr	r3, [pc, #504]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053c0:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	497a      	ldr	r1, [pc, #488]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 80053dc:	4b75      	ldr	r3, [pc, #468]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80053e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	4972      	ldr	r1, [pc, #456]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 80053fe:	4b6d      	ldr	r3, [pc, #436]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005400:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005404:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540c:	4969      	ldr	r1, [pc, #420]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b64      	ldr	r3, [pc, #400]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005422:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542e:	4961      	ldr	r1, [pc, #388]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005442:	4b5c      	ldr	r3, [pc, #368]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005444:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005448:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005450:	4958      	ldr	r1, [pc, #352]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8005464:	4b53      	ldr	r3, [pc, #332]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005466:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800546a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005472:	4950      	ldr	r1, [pc, #320]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005486:	4b4b      	ldr	r3, [pc, #300]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005488:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800548c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4947      	ldr	r1, [pc, #284]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f280 8082 	bge.w	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 80054a6:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80054ac:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ae:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80054b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b8:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d072      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 80054c4:	2300      	movs	r3, #0
 80054c6:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80054c8:	4b3a      	ldr	r3, [pc, #232]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d110      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b37      	ldr	r3, [pc, #220]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054dc:	4a35      	ldr	r2, [pc, #212]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054e6:	4b33      	ldr	r3, [pc, #204]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054f8:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00f      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800550a:	4b2a      	ldr	r3, [pc, #168]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800550c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005510:	4a28      	ldr	r2, [pc, #160]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005516:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 800551a:	4b26      	ldr	r3, [pc, #152]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800551c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005520:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005526:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005530:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4313      	orrs	r3, r2
 8005542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005546:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8005548:	4a1a      	ldr	r2, [pc, #104]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01c      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fe fd29 	bl	8003fb0 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005560:	e011      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fe fd25 	bl	8003fb0 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d908      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005574:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005576:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e012      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005588:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0e6      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005594:	7efb      	ldrb	r3, [r7, #27]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800559a:	4b06      	ldr	r3, [pc, #24]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a0:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80055a2:	f023 0304 	bic.w	r3, r3, #4
 80055a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40030c00 	.word	0x40030c00
 80055b8:	40030800 	.word	0x40030800

080055bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ce:	f000 8469 	beq.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d8:	f200 84a0 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e2:	f000 8420 	beq.w	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ec:	f200 8496 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f6:	f000 83d3 	beq.w	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005600:	f200 848c 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800560a:	f000 83b8 	beq.w	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005614:	f200 8482 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800561e:	f000 8377 	beq.w	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005628:	f200 8478 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005632:	f000 835c 	beq.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800563c:	f200 846e 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005646:	f000 8326 	beq.w	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005650:	f200 8464 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800565a:	f000 82db 	beq.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005664:	f200 845a 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800566e:	f000 82b9 	beq.w	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005678:	f200 8450 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005682:	f000 828c 	beq.w	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800568c:	f200 8446 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005696:	f000 8271 	beq.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a0:	f200 843c 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056aa:	f000 8246 	beq.w	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b4:	f200 8432 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056be:	f000 8228 	beq.w	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c8:	f200 8428 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d2:	f000 81ef 	beq.w	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056dc:	f200 841e 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e6:	f000 81ce 	beq.w	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f0:	f200 8414 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056fa:	f000 8189 	beq.w	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005704:	f200 840a 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	f000 816e 	beq.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005718:	f200 8400 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005722:	f000 8121 	beq.w	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	f200 83f6 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005736:	f000 8106 	beq.w	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005740:	f200 83ec 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b80      	cmp	r3, #128	@ 0x80
 8005748:	f000 80ec 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	f200 83e4 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b20      	cmp	r3, #32
 8005758:	d84c      	bhi.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 83dd 	beq.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3b01      	subs	r3, #1
 8005766:	2b1f      	cmp	r3, #31
 8005768:	f200 83d8 	bhi.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800576c:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	080057ff 	.word	0x080057ff
 8005778:	0800582f 	.word	0x0800582f
 800577c:	08005f1d 	.word	0x08005f1d
 8005780:	0800585f 	.word	0x0800585f
 8005784:	08005f1d 	.word	0x08005f1d
 8005788:	08005f1d 	.word	0x08005f1d
 800578c:	08005f1d 	.word	0x08005f1d
 8005790:	0800588f 	.word	0x0800588f
 8005794:	08005f1d 	.word	0x08005f1d
 8005798:	08005f1d 	.word	0x08005f1d
 800579c:	08005f1d 	.word	0x08005f1d
 80057a0:	08005f1d 	.word	0x08005f1d
 80057a4:	08005f1d 	.word	0x08005f1d
 80057a8:	08005f1d 	.word	0x08005f1d
 80057ac:	08005f1d 	.word	0x08005f1d
 80057b0:	080058bf 	.word	0x080058bf
 80057b4:	08005f1d 	.word	0x08005f1d
 80057b8:	08005f1d 	.word	0x08005f1d
 80057bc:	08005f1d 	.word	0x08005f1d
 80057c0:	08005f1d 	.word	0x08005f1d
 80057c4:	08005f1d 	.word	0x08005f1d
 80057c8:	08005f1d 	.word	0x08005f1d
 80057cc:	08005f1d 	.word	0x08005f1d
 80057d0:	08005f1d 	.word	0x08005f1d
 80057d4:	08005f1d 	.word	0x08005f1d
 80057d8:	08005f1d 	.word	0x08005f1d
 80057dc:	08005f1d 	.word	0x08005f1d
 80057e0:	08005f1d 	.word	0x08005f1d
 80057e4:	08005f1d 	.word	0x08005f1d
 80057e8:	08005f1d 	.word	0x08005f1d
 80057ec:	08005f1d 	.word	0x08005f1d
 80057f0:	080058e1 	.word	0x080058e1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	f000 8083 	beq.w	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 80057fc:	e38e      	b.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80057fe:	4ba9      	ldr	r3, [pc, #676]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005800:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005810:	f7ff fc08 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8005814:	60f8      	str	r0, [r7, #12]
      break;
 8005816:	e383      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005818:	4ba2      	ldr	r3, [pc, #648]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005824:	f040 837c 	bne.w	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8005828:	4b9f      	ldr	r3, [pc, #636]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800582a:	60fb      	str	r3, [r7, #12]
      break;
 800582c:	e378      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800582e:	4b9d      	ldr	r3, [pc, #628]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005830:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005840:	f7ff fbdc 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005844:	60f8      	str	r0, [r7, #12]
      break;
 8005846:	e36d      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005848:	4b96      	ldr	r3, [pc, #600]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005854:	f040 8366 	bne.w	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8005858:	4b93      	ldr	r3, [pc, #588]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800585a:	60fb      	str	r3, [r7, #12]
      break;
 800585c:	e362      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800585e:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005860:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005870:	f7ff fbc4 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005874:	60f8      	str	r0, [r7, #12]
      break;
 8005876:	e357      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005878:	4b8a      	ldr	r3, [pc, #552]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005884:	f040 8350 	bne.w	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8005888:	4b87      	ldr	r3, [pc, #540]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800588a:	60fb      	str	r3, [r7, #12]
      break;
 800588c:	e34c      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800588e:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005890:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7ff fbac 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80058a4:	60f8      	str	r0, [r7, #12]
      break;
 80058a6:	e341      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058a8:	4b7e      	ldr	r3, [pc, #504]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b4:	f040 833a 	bne.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 80058b8:	4b7b      	ldr	r3, [pc, #492]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058ba:	60fb      	str	r3, [r7, #12]
      break;
 80058bc:	e336      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80058be:	4b79      	ldr	r3, [pc, #484]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7ff fb94 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80058d4:	60f8      	str	r0, [r7, #12]
      break;
 80058d6:	e340      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80058d8:	f7ff fbcc 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 80058dc:	60f8      	str	r0, [r7, #12]
      break;
 80058de:	e33c      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80058e0:	4b70      	ldr	r3, [pc, #448]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ea:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058f2:	f7ff fb83 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80058f6:	60f8      	str	r0, [r7, #12]
      break;
 80058f8:	e32f      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80058fa:	f7ff fbbb 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 80058fe:	60f8      	str	r0, [r7, #12]
      break;
 8005900:	e32b      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005902:	4b68      	ldr	r3, [pc, #416]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005904:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800590c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005914:	f7ff fb72 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005918:	60f8      	str	r0, [r7, #12]
      break;
 800591a:	e31e      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800591c:	f7ff fbaa 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005920:	60f8      	str	r0, [r7, #12]
      break;
 8005922:	e31a      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005924:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005926:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800592a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005936:	f7ff fb75 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 800593a:	60f8      	str	r0, [r7, #12]
      break;
 800593c:	e30d      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800593e:	f7ff fb99 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005942:	60f8      	str	r0, [r7, #12]
      break;
 8005944:	e309      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005946:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005948:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800594c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005950:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005958:	f7ff fb50 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800595c:	60f8      	str	r0, [r7, #12]
      break;
 800595e:	e2fc      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005960:	f7ff fb88 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005964:	60f8      	str	r0, [r7, #12]
      break;
 8005966:	e2f8      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005968:	4b4e      	ldr	r3, [pc, #312]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800596a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800596e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005972:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 800597a:	f7ff fb3f 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800597e:	60f8      	str	r0, [r7, #12]
      break;
 8005980:	e2d6      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005988:	d116      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800598a:	4b46      	ldr	r3, [pc, #280]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800598c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	f040 82cb 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 800599a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800599e:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80059a0:	4b40      	ldr	r3, [pc, #256]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	f040 82c0 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	09db      	lsrs	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
      break;
 80059b6:	e2bb      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059be:	d10a      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c0:	4b38      	ldr	r3, [pc, #224]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059cc:	f040 82b0 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 80059d0:	4b35      	ldr	r3, [pc, #212]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80059d2:	60fb      	str	r3, [r7, #12]
      break;
 80059d4:	e2ac      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059d6:	4b33      	ldr	r3, [pc, #204]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	f040 82a5 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ea:	60fb      	str	r3, [r7, #12]
      break;
 80059ec:	e2a0      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80059ee:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80059f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059f8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005a00:	f7ff fb10 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8005a04:	60f8      	str	r0, [r7, #12]
      break;
 8005a06:	e2a8      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005a08:	f7ff fb34 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005a0c:	60f8      	str	r0, [r7, #12]
      break;
 8005a0e:	e2a4      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8005a10:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a16:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005a1a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8005a22:	f7ff fad1 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005a26:	4603      	mov	r3, r0
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
      break;
 8005a2c:	e282      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a34:	d10b      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a36:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a38:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	f040 8277 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4a:	60fb      	str	r3, [r7, #12]
      break;
 8005a4c:	e272      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a54:	f040 826e 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	f040 8266 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8005a68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a6c:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a70:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	f040 825b 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
      break;
 8005a84:	e256      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005a86:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a90:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a98:	d108      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8005a9a:	f7ff faeb 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005a9e:	60f8      	str	r0, [r7, #12]
      break;
 8005aa0:	e25b      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005aa2:	bf00      	nop
 8005aa4:	40030c00 	.word	0x40030c00
 8005aa8:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8005aac:	f7ff fa44 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8005ab0:	60f8      	str	r0, [r7, #12]
      break;
 8005ab2:	e252      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005ab4:	4ba4      	ldr	r3, [pc, #656]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ab6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005aba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005abe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005ac6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad2:	f040 8231 	bne.w	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8005ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005ad8:	60fb      	str	r3, [r7, #12]
      break;
 8005ada:	e22d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ae2:	d103      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8005ae4:	f7ff fac6 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005ae8:	60f8      	str	r0, [r7, #12]
      break;
 8005aea:	e225      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005af2:	d10a      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005af4:	4b94      	ldr	r3, [pc, #592]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b00:	f040 821a 	bne.w	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8005b04:	4b92      	ldr	r3, [pc, #584]	@ (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005b06:	60fb      	str	r3, [r7, #12]
      break;
 8005b08:	e216      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005b0a:	f7ff fa15 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8005b0e:	60f8      	str	r0, [r7, #12]
      break;
 8005b10:	e212      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8005b12:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b16:	f7ff fd51 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b1a:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8005b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b26:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2e:	f040 8205 	bne.w	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
      break;
 8005b38:	e200      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005b3a:	4b83      	ldr	r3, [pc, #524]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b3c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8005b4c:	f7ff fa3c 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005b50:	60f8      	str	r0, [r7, #12]
      break;
 8005b52:	e202      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d103      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b5e:	60fb      	str	r3, [r7, #12]
      break;
 8005b60:	e1fb      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d103      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8005b68:	f7ff fa84 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005b6c:	60f8      	str	r0, [r7, #12]
      break;
 8005b6e:	e1f4      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b70:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005b74:	f7ff fd22 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b78:	60f8      	str	r0, [r7, #12]
      break;
 8005b7a:	e1ee      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005b7c:	4b72      	ldr	r3, [pc, #456]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7ff fa35 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005b92:	60f8      	str	r0, [r7, #12]
      break;
 8005b94:	e1e1      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005b96:	f7ff fa6d 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005b9a:	60f8      	str	r0, [r7, #12]
      break;
 8005b9c:	e1dd      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ba0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005ba4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ba8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8005bb0:	f7ff fa60 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005bb4:	60f8      	str	r0, [r7, #12]
      break;
 8005bb6:	e1c3      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d103      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005bbe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005bc2:	60fb      	str	r3, [r7, #12]
      break;
 8005bc4:	e1bc      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b40      	cmp	r3, #64	@ 0x40
 8005bca:	f040 81b9 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bce:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bda:	f040 81b1 	bne.w	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8005bde:	4b5c      	ldr	r3, [pc, #368]	@ (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005be0:	60fb      	str	r3, [r7, #12]
      break;
 8005be2:	e1ad      	b.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005be4:	4b58      	ldr	r3, [pc, #352]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005be6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bee:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005bf6:	4b54      	ldr	r3, [pc, #336]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c02:	f040 819f 	bne.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005c08:	60fb      	str	r3, [r7, #12]
      break;
 8005c0a:	e19b      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8005c0c:	f7ff fa32 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005c10:	60f8      	str	r0, [r7, #12]
      break;
 8005c12:	e197      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005c14:	4b4c      	ldr	r3, [pc, #304]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c16:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005c1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c1e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8005c26:	f7ff f9cf 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	e014      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d109      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c36:	4b44      	ldr	r3, [pc, #272]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c42:	d109      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8005c44:	4b42      	ldr	r3, [pc, #264]	@ (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c50:	d102      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 8005c52:	f7ff fa0f 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005c56:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8005c58:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005c5e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c62:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c76:	d202      	bcs.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	0b1a      	lsrs	r2, r3, #12
 8005c82:	4b34      	ldr	r3, [pc, #208]	@ (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	3302      	adds	r3, #2
 8005c88:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c92:	60fb      	str	r3, [r7, #12]
      break;
 8005c94:	e161      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8005c96:	4b2c      	ldr	r3, [pc, #176]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005c98:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ca0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d116      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ca8:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005caa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	f040 8148 	bne.w	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8005cb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005cbc:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005cbe:	4b22      	ldr	r3, [pc, #136]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cc0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	f040 813d 	bne.w	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
      break;
 8005cd4:	e138      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cd8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	f040 8131 	bne.w	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cea:	60fb      	str	r3, [r7, #12]
      break;
 8005cec:	e12c      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8005cee:	4b16      	ldr	r3, [pc, #88]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cf0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cf8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005d00:	f7ff f91a 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8005d04:	60f8      	str	r0, [r7, #12]
      break;
 8005d06:	e128      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d08:	f7ff f9b4 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005d0c:	60f8      	str	r0, [r7, #12]
      break;
 8005d0e:	e124      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d10:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
        frequency = HAL_RCC_GetPCLK3Freq();
 8005d22:	f7ff f993 	bl	800504c <HAL_RCC_GetPCLK3Freq>
 8005d26:	60f8      	str	r0, [r7, #12]
      break;
 8005d28:	e110      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d113      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3c:	f040 8106 	bne.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8005d40:	4b03      	ldr	r3, [pc, #12]	@ (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005d42:	60fb      	str	r3, [r7, #12]
      break;
 8005d44:	e102      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8005d46:	bf00      	nop
 8005d48:	40030c00 	.word	0x40030c00
 8005d4c:	02dc6c00 	.word	0x02dc6c00
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d10b      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d5e:	4b81      	ldr	r3, [pc, #516]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d60:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	f040 80ef 	bne.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	60fb      	str	r3, [r7, #12]
      break;
 8005d74:	e0ea      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d76:	f7ff f97d 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005d7a:	60f8      	str	r0, [r7, #12]
      break;
 8005d7c:	e0e6      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d7e:	4b79      	ldr	r3, [pc, #484]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8005d90:	f7ff f95c 	bl	800504c <HAL_RCC_GetPCLK3Freq>
 8005d94:	60f8      	str	r0, [r7, #12]
      break;
 8005d96:	e0e0      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d98:	f7ff f96c 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005d9c:	60f8      	str	r0, [r7, #12]
      break;
 8005d9e:	e0dc      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005da0:	4b70      	ldr	r3, [pc, #448]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005daa:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8005db2:	f7ff f95f 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005db6:	60f8      	str	r0, [r7, #12]
      break;
 8005db8:	e0ca      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dc2:	4b68      	ldr	r3, [pc, #416]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	f040 80bf 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8005dd2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005dd6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005dd8:	4b62      	ldr	r3, [pc, #392]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dda:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	f040 80b4 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	09db      	lsrs	r3, r3, #7
 8005dec:	60fb      	str	r3, [r7, #12]
      break;
 8005dee:	e0af      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df6:	d10a      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005df8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	f040 80a4 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8005e08:	4b57      	ldr	r3, [pc, #348]	@ (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005e0a:	60fb      	str	r3, [r7, #12]
      break;
 8005e0c:	e0a0      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e0e:	4b55      	ldr	r3, [pc, #340]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e10:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f040 8099 	bne.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8005e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e22:	60fb      	str	r3, [r7, #12]
      break;
 8005e24:	e094      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e26:	4b4f      	ldr	r3, [pc, #316]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e30:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8005e38:	f7ff f91c 	bl	8005074 <HAL_RCC_GetMSIKFreq>
 8005e3c:	60f8      	str	r0, [r7, #12]
      break;
 8005e3e:	e089      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	d114      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e48:	4b46      	ldr	r3, [pc, #280]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d17e      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8005e56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e5a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005e5c:	4b41      	ldr	r3, [pc, #260]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d174      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	60fb      	str	r3, [r7, #12]
      break;
 8005e70:	e070      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e78:	d109      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e86:	d165      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8005e88:	4b37      	ldr	r3, [pc, #220]	@ (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005e8a:	60fb      	str	r3, [r7, #12]
      break;
 8005e8c:	e062      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e8e:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e90:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d15b      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8005e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea0:	60fb      	str	r3, [r7, #12]
      break;
 8005ea2:	e057      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005ea6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eae:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb6:	d10a      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005eba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d148      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eca:	60fb      	str	r3, [r7, #12]
      break;
 8005ecc:	e044      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed4:	d114      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ed6:	4b23      	ldr	r3, [pc, #140]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005ed8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d139      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8005ee4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ee8:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005eea:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005eec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d12f      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
      break;
 8005efe:	e02b      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f06:	d127      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f08:	4b16      	ldr	r3, [pc, #88]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f14:	d120      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8005f18:	60fb      	str	r3, [r7, #12]
      break;
 8005f1a:	e01d      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e01c      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f20:	bf00      	nop
 8005f22:	e01a      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f24:	bf00      	nop
 8005f26:	e018      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f28:	bf00      	nop
 8005f2a:	e016      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f2c:	bf00      	nop
 8005f2e:	e014      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f30:	bf00      	nop
 8005f32:	e012      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f34:	bf00      	nop
 8005f36:	e010      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f38:	bf00      	nop
 8005f3a:	e00e      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f3c:	bf00      	nop
 8005f3e:	e00c      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f40:	bf00      	nop
 8005f42:	e00a      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f44:	bf00      	nop
 8005f46:	e008      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f48:	bf00      	nop
 8005f4a:	e006      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e004      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8005f58:	bf00      	nop
  }

  return (frequency);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40030c00 	.word	0x40030c00
 8005f68:	00f42400 	.word	0x00f42400
 8005f6c:	0007a120 	.word	0x0007a120

08005f70 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff4 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d107      	bne.n	8005f96 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	e027      	b.n	8005fe6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d107      	bne.n	8005fac <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
 8005faa:	e01c      	b.n	8005fe6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e011      	b.n	8005fe6 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8005fdc:	4a05      	ldr	r2, [pc, #20]	@ (8005ff4 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40030c00 	.word	0x40030c00

08005ff8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e0dc      	b.n	80061c4 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6d      	ldr	r2, [pc, #436]	@ (80061cc <HAL_SPI_Init+0x1d4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d105      	bne.n	8006026 <HAL_SPI_Init+0x2e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d901      	bls.n	8006026 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0ce      	b.n	80061c4 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fe72 	bl	8006d10 <SPI_GetPacketSize>
 800602c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a66      	ldr	r2, [pc, #408]	@ (80061cc <HAL_SPI_Init+0x1d4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d102      	bne.n	800603e <HAL_SPI_Init+0x46>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d80c      	bhi.n	8006058 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006042:	4a63      	ldr	r2, [pc, #396]	@ (80061d0 <HAL_SPI_Init+0x1d8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a61      	ldr	r2, [pc, #388]	@ (80061d4 <HAL_SPI_Init+0x1dc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d104      	bne.n	800605c <HAL_SPI_Init+0x64>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b10      	cmp	r3, #16
 8006056:	d901      	bls.n	800605c <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0b3      	b.n	80061c4 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fd fc89 	bl	8003988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006098:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060a2:	d119      	bne.n	80060d8 <HAL_SPI_Init+0xe0>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ac:	d103      	bne.n	80060b6 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10c      	bne.n	80060d8 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80060c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c6:	d107      	bne.n	80060d8 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00f      	beq.n	8006104 <HAL_SPI_Init+0x10c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b06      	cmp	r3, #6
 80060ea:	d90b      	bls.n	8006104 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e007      	b.n	8006114 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	431a      	orrs	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006126:	ea42 0103 	orr.w	r1, r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006180:	ea42 0103 	orr.w	r1, r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40002000 	.word	0x40002000
 80061d0:	40013000 	.word	0x40013000
 80061d4:	40003800 	.word	0x40003800

080061d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3320      	adds	r3, #32
 80061ee:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061f0:	f7fd fede 	bl	8003fb0 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d001      	beq.n	8006206 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
 8006204:	e1e5      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_SPI_Transmit+0x3a>
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e1dd      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_SPI_Transmit+0x4c>
 8006220:	2302      	movs	r3, #2
 8006222:	e1d6      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2203      	movs	r2, #3
 8006230:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800627c:	d108      	bne.n	8006290 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e009      	b.n	80062a4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80062a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	041b      	lsls	r3, r3, #16
 80062ae:	88f9      	ldrh	r1, [r7, #6]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10c      	bne.n	80062f0 <HAL_SPI_Transmit+0x118>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062de:	d107      	bne.n	80062f0 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d951      	bls.n	800639c <HAL_SPI_Transmit+0x1c4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a8a      	ldr	r2, [pc, #552]	@ (8006528 <HAL_SPI_Transmit+0x350>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d045      	beq.n	800638e <HAL_SPI_Transmit+0x1b6>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a89      	ldr	r2, [pc, #548]	@ (800652c <HAL_SPI_Transmit+0x354>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d147      	bne.n	800639c <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800630c:	e03f      	b.n	800638e <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d114      	bne.n	8006346 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006344:	e023      	b.n	800638e <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006346:	f7fd fe33 	bl	8003fb0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d803      	bhi.n	800635e <HAL_SPI_Transmit+0x186>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Transmit+0x18c>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d114      	bne.n	800638e <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc05 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006370:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e121      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1b9      	bne.n	800630e <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800639a:	e0f4      	b.n	8006586 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b07      	cmp	r3, #7
 80063a2:	f240 80e9 	bls.w	8006578 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063a6:	e05d      	b.n	8006464 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d132      	bne.n	800641c <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d918      	bls.n	80063f4 <HAL_SPI_Transmit+0x21c>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d014      	beq.n	80063f4 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b02      	subs	r3, #2
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063f2:	e037      	b.n	8006464 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800641a:	e023      	b.n	8006464 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641c:	f7fd fdc8 	bl	8003fb0 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d803      	bhi.n	8006434 <HAL_SPI_Transmit+0x25c>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d102      	bne.n	800643a <HAL_SPI_Transmit+0x262>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d114      	bne.n	8006464 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fb9a 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e0b6      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d19b      	bne.n	80063a8 <HAL_SPI_Transmit+0x1d0>
 8006470:	e089      	b.n	8006586 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d157      	bne.n	8006530 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d918      	bls.n	80064be <HAL_SPI_Transmit+0x2e6>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006490:	2b40      	cmp	r3, #64	@ 0x40
 8006492:	d914      	bls.n	80064be <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064a4:	1d1a      	adds	r2, r3, #4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b04      	subs	r3, #4
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064bc:	e05c      	b.n	8006578 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d917      	bls.n	80064fa <HAL_SPI_Transmit+0x322>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d013      	beq.n	80064fa <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d6:	881a      	ldrh	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b02      	subs	r3, #2
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064f8:	e03e      	b.n	8006578 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3320      	adds	r3, #32
 8006504:	7812      	ldrb	r2, [r2, #0]
 8006506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006524:	e028      	b.n	8006578 <HAL_SPI_Transmit+0x3a0>
 8006526:	bf00      	nop
 8006528:	40013000 	.word	0x40013000
 800652c:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006530:	f7fd fd3e 	bl	8003fb0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d803      	bhi.n	8006548 <HAL_SPI_Transmit+0x370>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d102      	bne.n	800654e <HAL_SPI_Transmit+0x376>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d114      	bne.n	8006578 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fb10 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800655a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e02c      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f af76 	bne.w	8006472 <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	2108      	movs	r1, #8
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fb8f 	bl	8006cb4 <SPI_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fae1 	bl	8006b74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop

080065dc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3301      	adds	r3, #1
 80065f6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3330      	adds	r3, #48	@ 0x30
 80065fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006600:	f7fd fcd6 	bl	8003fb0 <HAL_GetTick>
 8006604:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b01      	cmp	r3, #1
 8006610:	d001      	beq.n	8006616 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006612:	2302      	movs	r3, #2
 8006614:	e2aa      	b.n	8006b6c <HAL_SPI_Receive+0x590>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Receive+0x46>
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e2a2      	b.n	8006b6c <HAL_SPI_Receive+0x590>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_SPI_Receive+0x58>
 8006630:	2302      	movs	r3, #2
 8006632:	e29b      	b.n	8006b6c <HAL_SPI_Receive+0x590>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2204      	movs	r2, #4
 8006640:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	88fa      	ldrh	r2, [r7, #6]
 8006656:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800668c:	d108      	bne.n	80066a0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e009      	b.n	80066b4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80066b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	88f9      	ldrh	r1, [r7, #6]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <HAL_SPI_Receive+0x124>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ee:	d107      	bne.n	8006700 <HAL_SPI_Receive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	f240 8090 	bls.w	800682a <HAL_SPI_Receive+0x24e>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a8b      	ldr	r2, [pc, #556]	@ (800693c <HAL_SPI_Receive+0x360>)
 8006710:	4293      	cmp	r3, r2
 8006712:	f000 8082 	beq.w	800681a <HAL_SPI_Receive+0x23e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a89      	ldr	r2, [pc, #548]	@ (8006940 <HAL_SPI_Receive+0x364>)
 800671c:	4293      	cmp	r3, r2
 800671e:	f040 8084 	bne.w	800682a <HAL_SPI_Receive+0x24e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006722:	e07a      	b.n	800681a <HAL_SPI_Receive+0x23e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d114      	bne.n	8006764 <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006742:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006744:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006762:	e05a      	b.n	800681a <HAL_SPI_Receive+0x23e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800676a:	b29b      	uxth	r3, r3
 800676c:	8bfa      	ldrh	r2, [r7, #30]
 800676e:	429a      	cmp	r2, r3
 8006770:	d919      	bls.n	80067a6 <HAL_SPI_Receive+0x1ca>
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d014      	beq.n	80067a6 <HAL_SPI_Receive+0x1ca>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006786:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800678c:	1d1a      	adds	r2, r3, #4
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80067a4:	e039      	b.n	800681a <HAL_SPI_Receive+0x23e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_SPI_Receive+0x1f6>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067be:	d12c      	bne.n	800681a <HAL_SPI_Receive+0x23e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067ce:	619a      	str	r2, [r3, #24]
 80067d0:	e023      	b.n	800681a <HAL_SPI_Receive+0x23e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d2:	f7fd fbed 	bl	8003fb0 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d803      	bhi.n	80067ea <HAL_SPI_Receive+0x20e>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d102      	bne.n	80067f0 <HAL_SPI_Receive+0x214>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d114      	bne.n	800681a <HAL_SPI_Receive+0x23e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f9bf 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1a8      	b.n	8006b6c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	f47f af7e 	bne.w	8006724 <HAL_SPI_Receive+0x148>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006828:	e18d      	b.n	8006b46 <HAL_SPI_Receive+0x56a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b07      	cmp	r3, #7
 8006830:	f240 8182 	bls.w	8006b38 <HAL_SPI_Receive+0x55c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006834:	e0aa      	b.n	800698c <HAL_SPI_Receive+0x3b0>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d114      	bne.n	8006876 <HAL_SPI_Receive+0x29a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	8812      	ldrh	r2, [r2, #0]
 8006854:	b292      	uxth	r2, r2
 8006856:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006874:	e08a      	b.n	800698c <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800687c:	b29b      	uxth	r3, r3
 800687e:	8bfa      	ldrh	r2, [r7, #30]
 8006880:	429a      	cmp	r2, r3
 8006882:	d924      	bls.n	80068ce <HAL_SPI_Receive+0x2f2>
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01f      	beq.n	80068ce <HAL_SPI_Receive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	8812      	ldrh	r2, [r2, #0]
 8006896:	b292      	uxth	r2, r2
 8006898:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	8812      	ldrh	r2, [r2, #0]
 80068ac:	b292      	uxth	r2, r2
 80068ae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b02      	subs	r3, #2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80068cc:	e05e      	b.n	800698c <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d119      	bne.n	800690e <HAL_SPI_Receive+0x332>
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d014      	beq.n	800690e <HAL_SPI_Receive+0x332>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	8812      	ldrh	r2, [r2, #0]
 80068ec:	b292      	uxth	r2, r2
 80068ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f4:	1c9a      	adds	r2, r3, #2
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800690c:	e03e      	b.n	800698c <HAL_SPI_Receive+0x3b0>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_SPI_Receive+0x368>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006926:	d131      	bne.n	800698c <HAL_SPI_Receive+0x3b0>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006936:	619a      	str	r2, [r3, #24]
 8006938:	e028      	b.n	800698c <HAL_SPI_Receive+0x3b0>
 800693a:	bf00      	nop
 800693c:	40013000 	.word	0x40013000
 8006940:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006944:	f7fd fb34 	bl	8003fb0 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d803      	bhi.n	800695c <HAL_SPI_Receive+0x380>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d102      	bne.n	8006962 <HAL_SPI_Receive+0x386>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d114      	bne.n	800698c <HAL_SPI_Receive+0x3b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f906 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e0ef      	b.n	8006b6c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	f47f af4e 	bne.w	8006836 <HAL_SPI_Receive+0x25a>
 800699a:	e0d4      	b.n	8006b46 <HAL_SPI_Receive+0x56a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d117      	bne.n	80069e2 <HAL_SPI_Receive+0x406>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80069e0:	e0aa      	b.n	8006b38 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	8bfa      	ldrh	r2, [r7, #30]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d946      	bls.n	8006a7e <HAL_SPI_Receive+0x4a2>
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d041      	beq.n	8006a7e <HAL_SPI_Receive+0x4a2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a06:	7812      	ldrb	r2, [r2, #0]
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a22:	7812      	ldrb	r2, [r2, #0]
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b04      	subs	r3, #4
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006a7c:	e05c      	b.n	8006b38 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d81c      	bhi.n	8006ac4 <HAL_SPI_Receive+0x4e8>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d017      	beq.n	8006ac4 <HAL_SPI_Receive+0x4e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aa0:	7812      	ldrb	r2, [r2, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006ac2:	e039      	b.n	8006b38 <HAL_SPI_Receive+0x55c>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d010      	beq.n	8006af0 <HAL_SPI_Receive+0x514>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006adc:	d12c      	bne.n	8006b38 <HAL_SPI_Receive+0x55c>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aec:	619a      	str	r2, [r3, #24]
 8006aee:	e023      	b.n	8006b38 <HAL_SPI_Receive+0x55c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af0:	f7fd fa5e 	bl	8003fb0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d803      	bhi.n	8006b08 <HAL_SPI_Receive+0x52c>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d102      	bne.n	8006b0e <HAL_SPI_Receive+0x532>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d114      	bne.n	8006b38 <HAL_SPI_Receive+0x55c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f830 	bl	8006b74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e019      	b.n	8006b6c <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f47f af2b 	bne.w	800699c <HAL_SPI_Receive+0x3c0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f814 	bl	8006b74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_SPI_Receive+0x58e>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <HAL_SPI_Receive+0x590>
  }
  else
  {
    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0210 	orr.w	r2, r2, #16
 8006ba2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d014      	beq.n	8006c0e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00f      	beq.n	8006c0e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bf4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0220 	orr.w	r2, r2, #32
 8006c0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d014      	beq.n	8006c44 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00f      	beq.n	8006c44 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2a:	f043 0204 	orr.w	r2, r3, #4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00f      	beq.n	8006c6e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c54:	f043 0201 	orr.w	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00f      	beq.n	8006c98 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c7e:	f043 0208 	orr.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cc4:	e010      	b.n	8006ce8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc6:	f7fd f973 	bl	8003fb0 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d803      	bhi.n	8006cde <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d102      	bne.n	8006ce4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e00f      	b.n	8006d08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d0df      	beq.n	8006cc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	08db      	lsrs	r3, r3, #3
 8006d30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d12e      	bne.n	8006dba <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e028      	b.n	8006dbc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006d96:	ea42 0103 	orr.w	r1, r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e000      	b.n	8006dbc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e042      	b.n	8006e60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7fc fe2f 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2224      	movs	r2, #36	@ 0x24
 8006df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa2a 	bl	800726c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8b3 	bl	8006f84 <UART_SetConfig>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e01b      	b.n	8006e60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 faa9 	bl	80073b0 <UART_CheckIdleState>
 8006e5e:	4603      	mov	r3, r0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	@ 0x28
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d17b      	bne.n	8006f7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_UART_Transmit+0x26>
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e074      	b.n	8006f7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2221      	movs	r2, #33	@ 0x21
 8006e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ea2:	f7fd f885 	bl	8003fb0 <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	88fa      	ldrh	r2, [r7, #6]
 8006eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec0:	d108      	bne.n	8006ed4 <HAL_UART_Transmit+0x6c>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e003      	b.n	8006edc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006edc:	e030      	b.n	8006f40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2180      	movs	r1, #128	@ 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fb0b 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e03d      	b.n	8006f7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	3302      	adds	r3, #2
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e007      	b.n	8006f2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1c8      	bne.n	8006ede <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2140      	movs	r1, #64	@ 0x40
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fad4 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e006      	b.n	8006f7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f7a:	2302      	movs	r3, #2
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3720      	adds	r7, #32
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f88:	b08e      	sub	sp, #56	@ 0x38
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b9b      	ldr	r3, [pc, #620]	@ (8007220 <UART_SetConfig+0x29c>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a90      	ldr	r2, [pc, #576]	@ (8007224 <UART_SetConfig+0x2a0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fec:	4313      	orrs	r3, r2
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006ffa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007004:	430b      	orrs	r3, r1
 8007006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	f023 010f 	bic.w	r1, r3, #15
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a81      	ldr	r2, [pc, #516]	@ (8007228 <UART_SetConfig+0x2a4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d102      	bne.n	800702e <UART_SetConfig+0xaa>
 8007028:	2301      	movs	r3, #1
 800702a:	633b      	str	r3, [r7, #48]	@ 0x30
 800702c:	e022      	b.n	8007074 <UART_SetConfig+0xf0>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a7e      	ldr	r2, [pc, #504]	@ (800722c <UART_SetConfig+0x2a8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d102      	bne.n	800703e <UART_SetConfig+0xba>
 8007038:	2302      	movs	r3, #2
 800703a:	633b      	str	r3, [r7, #48]	@ 0x30
 800703c:	e01a      	b.n	8007074 <UART_SetConfig+0xf0>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7b      	ldr	r2, [pc, #492]	@ (8007230 <UART_SetConfig+0x2ac>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d102      	bne.n	800704e <UART_SetConfig+0xca>
 8007048:	2304      	movs	r3, #4
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30
 800704c:	e012      	b.n	8007074 <UART_SetConfig+0xf0>
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a78      	ldr	r2, [pc, #480]	@ (8007234 <UART_SetConfig+0x2b0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d102      	bne.n	800705e <UART_SetConfig+0xda>
 8007058:	2308      	movs	r3, #8
 800705a:	633b      	str	r3, [r7, #48]	@ 0x30
 800705c:	e00a      	b.n	8007074 <UART_SetConfig+0xf0>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a70      	ldr	r2, [pc, #448]	@ (8007224 <UART_SetConfig+0x2a0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d103      	bne.n	8007070 <UART_SetConfig+0xec>
 8007068:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800706c:	633b      	str	r3, [r7, #48]	@ 0x30
 800706e:	e001      	b.n	8007074 <UART_SetConfig+0xf0>
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6a      	ldr	r2, [pc, #424]	@ (8007224 <UART_SetConfig+0x2a0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d16c      	bne.n	8007158 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800707e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007080:	f7fe fa9c 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 8007084:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80da 	beq.w	8007242 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	4a69      	ldr	r2, [pc, #420]	@ (8007238 <UART_SetConfig+0x2b4>)
 8007094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007098:	461a      	mov	r2, r3
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a0:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d305      	bcc.n	80070be <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d903      	bls.n	80070c6 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80070c4:	e0bd      	b.n	8007242 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	2200      	movs	r2, #0
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	60fa      	str	r2, [r7, #12]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	4a59      	ldr	r2, [pc, #356]	@ (8007238 <UART_SetConfig+0x2b4>)
 80070d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2200      	movs	r2, #0
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070e8:	f7f9 fdd2 	bl	8000c90 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	020b      	lsls	r3, r1, #8
 80070fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007102:	0202      	lsls	r2, r0, #8
 8007104:	6979      	ldr	r1, [r7, #20]
 8007106:	6849      	ldr	r1, [r1, #4]
 8007108:	0849      	lsrs	r1, r1, #1
 800710a:	2000      	movs	r0, #0
 800710c:	460c      	mov	r4, r1
 800710e:	4605      	mov	r5, r0
 8007110:	eb12 0804 	adds.w	r8, r2, r4
 8007114:	eb43 0905 	adc.w	r9, r3, r5
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	469a      	mov	sl, r3
 8007120:	4693      	mov	fp, r2
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fdb1 	bl	8000c90 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4613      	mov	r3, r2
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800713c:	d308      	bcc.n	8007150 <UART_SetConfig+0x1cc>
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007144:	d204      	bcs.n	8007150 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e078      	b.n	8007242 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007156:	e074      	b.n	8007242 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007160:	d137      	bne.n	80071d2 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007162:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007164:	f7fe fa2a 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 8007168:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d068      	beq.n	8007242 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	4a30      	ldr	r2, [pc, #192]	@ (8007238 <UART_SetConfig+0x2b4>)
 8007176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800717a:	461a      	mov	r2, r3
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007182:	005a      	lsls	r2, r3, #1
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	441a      	add	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	2b0f      	cmp	r3, #15
 800719a:	d916      	bls.n	80071ca <UART_SetConfig+0x246>
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a2:	d212      	bcs.n	80071ca <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f023 030f 	bic.w	r3, r3, #15
 80071ac:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071bc:	4313      	orrs	r3, r2
 80071be:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e03b      	b.n	8007242 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80071d0:	e037      	b.n	8007242 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d4:	f7fe f9f2 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 80071d8:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d030      	beq.n	8007242 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e4:	4a14      	ldr	r2, [pc, #80]	@ (8007238 <UART_SetConfig+0x2b4>)
 80071e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ea:	461a      	mov	r2, r3
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	441a      	add	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d918      	bls.n	800723c <UART_SetConfig+0x2b8>
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007210:	d214      	bcs.n	800723c <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	b29a      	uxth	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
 800721c:	e011      	b.n	8007242 <UART_SetConfig+0x2be>
 800721e:	bf00      	nop
 8007220:	cfff69f3 	.word	0xcfff69f3
 8007224:	40042400 	.word	0x40042400
 8007228:	40013800 	.word	0x40013800
 800722c:	40004800 	.word	0x40004800
 8007230:	40004c00 	.word	0x40004c00
 8007234:	40005000 	.word	0x40005000
 8007238:	0800c3d0 	.word	0x0800c3d0
      }
      else
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2201      	movs	r2, #1
 8007246:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2201      	movs	r2, #1
 800724e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2200      	movs	r2, #0
 800725c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800725e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007262:	4618      	mov	r0, r3
 8007264:	3738      	adds	r7, #56	@ 0x38
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800726c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01a      	beq.n	8007382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736a:	d10a      	bne.n	8007382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
  }
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b098      	sub	sp, #96	@ 0x60
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073c0:	f7fc fdf6 	bl	8003fb0 <HAL_GetTick>
 80073c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d12f      	bne.n	8007434 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073dc:	2200      	movs	r2, #0
 80073de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f88e 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d022      	beq.n	8007434 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007402:	653b      	str	r3, [r7, #80]	@ 0x50
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740c:	647b      	str	r3, [r7, #68]	@ 0x44
 800740e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e063      	b.n	80074fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d149      	bne.n	80074d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007442:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744a:	2200      	movs	r2, #0
 800744c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f857 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03c      	beq.n	80074d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	623b      	str	r3, [r7, #32]
   return(result);
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007470:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800747a:	633b      	str	r3, [r7, #48]	@ 0x30
 800747c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e6      	bne.n	800745c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	60fb      	str	r3, [r7, #12]
   return(result);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ae:	61fa      	str	r2, [r7, #28]
 80074b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	69b9      	ldr	r1, [r7, #24]
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	617b      	str	r3, [r7, #20]
   return(result);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e012      	b.n	80074fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3758      	adds	r7, #88	@ 0x58
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007514:	e04f      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d04b      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fc fd47 	bl	8003fb0 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <UART_WaitOnFlagUntilTimeout+0x30>
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e04e      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d037      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b80      	cmp	r3, #128	@ 0x80
 800754a:	d034      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d031      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b08      	cmp	r3, #8
 800755e:	d110      	bne.n	8007582 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2208      	movs	r2, #8
 8007566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f838 	bl	80075de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2208      	movs	r2, #8
 8007572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e029      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007590:	d111      	bne.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800759a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f81e 	bl	80075de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e00f      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4013      	ands	r3, r2
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bf0c      	ite	eq
 80075c6:	2301      	moveq	r3, #1
 80075c8:	2300      	movne	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d0a0      	beq.n	8007516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b095      	sub	sp, #84	@ 0x54
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007604:	643b      	str	r3, [r7, #64]	@ 0x40
 8007606:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800760a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	61fb      	str	r3, [r7, #28]
   return(result);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800763c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800763e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e3      	bne.n	8007618 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d118      	bne.n	800768a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	60bb      	str	r3, [r7, #8]
   return(result);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	647b      	str	r3, [r7, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6979      	ldr	r1, [r7, #20]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	613b      	str	r3, [r7, #16]
   return(result);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e6      	bne.n	8007658 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800769e:	bf00      	nop
 80076a0:	3754      	adds	r7, #84	@ 0x54
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80076bc:	2302      	movs	r3, #2
 80076be:	e027      	b.n	8007710 <HAL_UARTEx_DisableFifoMode+0x66>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2224      	movs	r2, #36	@ 0x24
 80076cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007730:	2302      	movs	r3, #2
 8007732:	e02d      	b.n	8007790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	@ 0x24
 8007740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f84f 	bl	8007814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e02d      	b.n	800780c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2224      	movs	r2, #36	@ 0x24
 80077bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0201 	bic.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f811 	bl	8007814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007820:	2b00      	cmp	r3, #0
 8007822:	d108      	bne.n	8007836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007834:	e031      	b.n	800789a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007836:	2308      	movs	r3, #8
 8007838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800783a:	2308      	movs	r3, #8
 800783c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	0e5b      	lsrs	r3, r3, #25
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	0f5b      	lsrs	r3, r3, #29
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	7b3a      	ldrb	r2, [r7, #12]
 8007862:	4911      	ldr	r1, [pc, #68]	@ (80078a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007864:	5c8a      	ldrb	r2, [r1, r2]
 8007866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800786a:	7b3a      	ldrb	r2, [r7, #12]
 800786c:	490f      	ldr	r1, [pc, #60]	@ (80078ac <UARTEx_SetNbDataToProcess+0x98>)
 800786e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007870:	fb93 f3f2 	sdiv	r3, r3, r2
 8007874:	b29a      	uxth	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	7b7a      	ldrb	r2, [r7, #13]
 8007880:	4909      	ldr	r1, [pc, #36]	@ (80078a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007882:	5c8a      	ldrb	r2, [r1, r2]
 8007884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007888:	7b7a      	ldrb	r2, [r7, #13]
 800788a:	4908      	ldr	r1, [pc, #32]	@ (80078ac <UARTEx_SetNbDataToProcess+0x98>)
 800788c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800788e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	0800c3e8 	.word	0x0800c3e8
 80078ac:	0800c3f0 	.word	0x0800c3f0

080078b0 <_ZdlPvj>:
 80078b0:	f000 b800 	b.w	80078b4 <_ZdlPv>

080078b4 <_ZdlPv>:
 80078b4:	f000 b808 	b.w	80078c8 <free>

080078b8 <malloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	@ (80078c4 <malloc+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f000 b82d 	b.w	800791c <_malloc_r>
 80078c2:	bf00      	nop
 80078c4:	20000018 	.word	0x20000018

080078c8 <free>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	@ (80078d4 <free+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f001 bf51 	b.w	8009774 <_free_r>
 80078d2:	bf00      	nop
 80078d4:	20000018 	.word	0x20000018

080078d8 <sbrk_aligned>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4e0f      	ldr	r6, [pc, #60]	@ (8007918 <sbrk_aligned+0x40>)
 80078dc:	460c      	mov	r4, r1
 80078de:	4605      	mov	r5, r0
 80078e0:	6831      	ldr	r1, [r6, #0]
 80078e2:	b911      	cbnz	r1, 80078ea <sbrk_aligned+0x12>
 80078e4:	f001 f874 	bl	80089d0 <_sbrk_r>
 80078e8:	6030      	str	r0, [r6, #0]
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f001 f86f 	bl	80089d0 <_sbrk_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d103      	bne.n	80078fe <sbrk_aligned+0x26>
 80078f6:	f04f 34ff 	mov.w	r4, #4294967295
 80078fa:	4620      	mov	r0, r4
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	1cc4      	adds	r4, r0, #3
 8007900:	f024 0403 	bic.w	r4, r4, #3
 8007904:	42a0      	cmp	r0, r4
 8007906:	d0f8      	beq.n	80078fa <sbrk_aligned+0x22>
 8007908:	1a21      	subs	r1, r4, r0
 800790a:	4628      	mov	r0, r5
 800790c:	f001 f860 	bl	80089d0 <_sbrk_r>
 8007910:	3001      	adds	r0, #1
 8007912:	d1f2      	bne.n	80078fa <sbrk_aligned+0x22>
 8007914:	e7ef      	b.n	80078f6 <sbrk_aligned+0x1e>
 8007916:	bf00      	nop
 8007918:	200006c0 	.word	0x200006c0

0800791c <_malloc_r>:
 800791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007920:	1ccd      	adds	r5, r1, #3
 8007922:	4606      	mov	r6, r0
 8007924:	f025 0503 	bic.w	r5, r5, #3
 8007928:	3508      	adds	r5, #8
 800792a:	2d0c      	cmp	r5, #12
 800792c:	bf38      	it	cc
 800792e:	250c      	movcc	r5, #12
 8007930:	2d00      	cmp	r5, #0
 8007932:	db01      	blt.n	8007938 <_malloc_r+0x1c>
 8007934:	42a9      	cmp	r1, r5
 8007936:	d904      	bls.n	8007942 <_malloc_r+0x26>
 8007938:	230c      	movs	r3, #12
 800793a:	6033      	str	r3, [r6, #0]
 800793c:	2000      	movs	r0, #0
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a18 <_malloc_r+0xfc>
 8007946:	f000 f869 	bl	8007a1c <__malloc_lock>
 800794a:	f8d8 3000 	ldr.w	r3, [r8]
 800794e:	461c      	mov	r4, r3
 8007950:	bb44      	cbnz	r4, 80079a4 <_malloc_r+0x88>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff ffbf 	bl	80078d8 <sbrk_aligned>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	4604      	mov	r4, r0
 800795e:	d158      	bne.n	8007a12 <_malloc_r+0xf6>
 8007960:	f8d8 4000 	ldr.w	r4, [r8]
 8007964:	4627      	mov	r7, r4
 8007966:	2f00      	cmp	r7, #0
 8007968:	d143      	bne.n	80079f2 <_malloc_r+0xd6>
 800796a:	2c00      	cmp	r4, #0
 800796c:	d04b      	beq.n	8007a06 <_malloc_r+0xea>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	4639      	mov	r1, r7
 8007972:	4630      	mov	r0, r6
 8007974:	eb04 0903 	add.w	r9, r4, r3
 8007978:	f001 f82a 	bl	80089d0 <_sbrk_r>
 800797c:	4581      	cmp	r9, r0
 800797e:	d142      	bne.n	8007a06 <_malloc_r+0xea>
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	1a6d      	subs	r5, r5, r1
 8007986:	4629      	mov	r1, r5
 8007988:	f7ff ffa6 	bl	80078d8 <sbrk_aligned>
 800798c:	3001      	adds	r0, #1
 800798e:	d03a      	beq.n	8007a06 <_malloc_r+0xea>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	442b      	add	r3, r5
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	f8d8 3000 	ldr.w	r3, [r8]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	bb62      	cbnz	r2, 80079f8 <_malloc_r+0xdc>
 800799e:	f8c8 7000 	str.w	r7, [r8]
 80079a2:	e00f      	b.n	80079c4 <_malloc_r+0xa8>
 80079a4:	6822      	ldr	r2, [r4, #0]
 80079a6:	1b52      	subs	r2, r2, r5
 80079a8:	d420      	bmi.n	80079ec <_malloc_r+0xd0>
 80079aa:	2a0b      	cmp	r2, #11
 80079ac:	d917      	bls.n	80079de <_malloc_r+0xc2>
 80079ae:	1961      	adds	r1, r4, r5
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	6025      	str	r5, [r4, #0]
 80079b4:	bf18      	it	ne
 80079b6:	6059      	strne	r1, [r3, #4]
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	bf08      	it	eq
 80079bc:	f8c8 1000 	streq.w	r1, [r8]
 80079c0:	5162      	str	r2, [r4, r5]
 80079c2:	604b      	str	r3, [r1, #4]
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 f82f 	bl	8007a28 <__malloc_unlock>
 80079ca:	f104 000b 	add.w	r0, r4, #11
 80079ce:	1d23      	adds	r3, r4, #4
 80079d0:	f020 0007 	bic.w	r0, r0, #7
 80079d4:	1ac2      	subs	r2, r0, r3
 80079d6:	bf1c      	itt	ne
 80079d8:	1a1b      	subne	r3, r3, r0
 80079da:	50a3      	strne	r3, [r4, r2]
 80079dc:	e7af      	b.n	800793e <_malloc_r+0x22>
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	bf0c      	ite	eq
 80079e4:	f8c8 2000 	streq.w	r2, [r8]
 80079e8:	605a      	strne	r2, [r3, #4]
 80079ea:	e7eb      	b.n	80079c4 <_malloc_r+0xa8>
 80079ec:	4623      	mov	r3, r4
 80079ee:	6864      	ldr	r4, [r4, #4]
 80079f0:	e7ae      	b.n	8007950 <_malloc_r+0x34>
 80079f2:	463c      	mov	r4, r7
 80079f4:	687f      	ldr	r7, [r7, #4]
 80079f6:	e7b6      	b.n	8007966 <_malloc_r+0x4a>
 80079f8:	461a      	mov	r2, r3
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d1fb      	bne.n	80079f8 <_malloc_r+0xdc>
 8007a00:	2300      	movs	r3, #0
 8007a02:	6053      	str	r3, [r2, #4]
 8007a04:	e7de      	b.n	80079c4 <_malloc_r+0xa8>
 8007a06:	230c      	movs	r3, #12
 8007a08:	4630      	mov	r0, r6
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	f000 f80c 	bl	8007a28 <__malloc_unlock>
 8007a10:	e794      	b.n	800793c <_malloc_r+0x20>
 8007a12:	6005      	str	r5, [r0, #0]
 8007a14:	e7d6      	b.n	80079c4 <_malloc_r+0xa8>
 8007a16:	bf00      	nop
 8007a18:	200006c4 	.word	0x200006c4

08007a1c <__malloc_lock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__malloc_lock+0x8>)
 8007a1e:	f001 b824 	b.w	8008a6a <__retarget_lock_acquire_recursive>
 8007a22:	bf00      	nop
 8007a24:	20000808 	.word	0x20000808

08007a28 <__malloc_unlock>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__malloc_unlock+0x8>)
 8007a2a:	f001 b81f 	b.w	8008a6c <__retarget_lock_release_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20000808 	.word	0x20000808

08007a34 <__cvt>:
 8007a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	ec57 6b10 	vmov	r6, r7, d0
 8007a3c:	2f00      	cmp	r7, #0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4619      	mov	r1, r3
 8007a42:	463b      	mov	r3, r7
 8007a44:	bfb4      	ite	lt
 8007a46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a4a:	2300      	movge	r3, #0
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	bfbf      	itttt	lt
 8007a50:	4632      	movlt	r2, r6
 8007a52:	461f      	movlt	r7, r3
 8007a54:	232d      	movlt	r3, #45	@ 0x2d
 8007a56:	4616      	movlt	r6, r2
 8007a58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a5c:	700b      	strb	r3, [r1, #0]
 8007a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a60:	f023 0820 	bic.w	r8, r3, #32
 8007a64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a68:	d005      	beq.n	8007a76 <__cvt+0x42>
 8007a6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a6e:	d100      	bne.n	8007a72 <__cvt+0x3e>
 8007a70:	3401      	adds	r4, #1
 8007a72:	2102      	movs	r1, #2
 8007a74:	e000      	b.n	8007a78 <__cvt+0x44>
 8007a76:	2103      	movs	r1, #3
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	ab02      	add	r3, sp, #8
 8007a80:	ec47 6b10 	vmov	d0, r6, r7
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4653      	mov	r3, sl
 8007a88:	f001 f8a2 	bl	8008bd0 <_dtoa_r>
 8007a8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a90:	4605      	mov	r5, r0
 8007a92:	d119      	bne.n	8007ac8 <__cvt+0x94>
 8007a94:	f019 0f01 	tst.w	r9, #1
 8007a98:	d00e      	beq.n	8007ab8 <__cvt+0x84>
 8007a9a:	eb00 0904 	add.w	r9, r0, r4
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	f7f9 f813 	bl	8000ad0 <__aeabi_dcmpeq>
 8007aaa:	b108      	cbz	r0, 8007ab0 <__cvt+0x7c>
 8007aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ab0:	2230      	movs	r2, #48	@ 0x30
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	454b      	cmp	r3, r9
 8007ab6:	d31e      	bcc.n	8007af6 <__cvt+0xc2>
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	4628      	mov	r0, r5
 8007abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007abe:	1b5b      	subs	r3, r3, r5
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	b004      	add	sp, #16
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007acc:	eb00 0904 	add.w	r9, r0, r4
 8007ad0:	d1e5      	bne.n	8007a9e <__cvt+0x6a>
 8007ad2:	7803      	ldrb	r3, [r0, #0]
 8007ad4:	2b30      	cmp	r3, #48	@ 0x30
 8007ad6:	d10a      	bne.n	8007aee <__cvt+0xba>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2300      	movs	r3, #0
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fff6 	bl	8000ad0 <__aeabi_dcmpeq>
 8007ae4:	b918      	cbnz	r0, 8007aee <__cvt+0xba>
 8007ae6:	f1c4 0401 	rsb	r4, r4, #1
 8007aea:	f8ca 4000 	str.w	r4, [sl]
 8007aee:	f8da 3000 	ldr.w	r3, [sl]
 8007af2:	4499      	add	r9, r3
 8007af4:	e7d3      	b.n	8007a9e <__cvt+0x6a>
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	9103      	str	r1, [sp, #12]
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e7d9      	b.n	8007ab2 <__cvt+0x7e>

08007afe <__exponent>:
 8007afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b00:	2900      	cmp	r1, #0
 8007b02:	7002      	strb	r2, [r0, #0]
 8007b04:	bfba      	itte	lt
 8007b06:	4249      	neglt	r1, r1
 8007b08:	232d      	movlt	r3, #45	@ 0x2d
 8007b0a:	232b      	movge	r3, #43	@ 0x2b
 8007b0c:	2909      	cmp	r1, #9
 8007b0e:	7043      	strb	r3, [r0, #1]
 8007b10:	dd28      	ble.n	8007b64 <__exponent+0x66>
 8007b12:	f10d 0307 	add.w	r3, sp, #7
 8007b16:	270a      	movs	r7, #10
 8007b18:	461d      	mov	r5, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b22:	fb07 1416 	mls	r4, r7, r6, r1
 8007b26:	3430      	adds	r4, #48	@ 0x30
 8007b28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	4631      	mov	r1, r6
 8007b30:	2c63      	cmp	r4, #99	@ 0x63
 8007b32:	dcf2      	bgt.n	8007b1a <__exponent+0x1c>
 8007b34:	3130      	adds	r1, #48	@ 0x30
 8007b36:	1e94      	subs	r4, r2, #2
 8007b38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b3c:	1c41      	adds	r1, r0, #1
 8007b3e:	4623      	mov	r3, r4
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	d30a      	bcc.n	8007b5a <__exponent+0x5c>
 8007b44:	f10d 0309 	add.w	r3, sp, #9
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	42ac      	cmp	r4, r5
 8007b4c:	bf88      	it	hi
 8007b4e:	2300      	movhi	r3, #0
 8007b50:	3302      	adds	r3, #2
 8007b52:	4403      	add	r3, r0
 8007b54:	1a18      	subs	r0, r3, r0
 8007b56:	b003      	add	sp, #12
 8007b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b62:	e7ed      	b.n	8007b40 <__exponent+0x42>
 8007b64:	2330      	movs	r3, #48	@ 0x30
 8007b66:	3130      	adds	r1, #48	@ 0x30
 8007b68:	7083      	strb	r3, [r0, #2]
 8007b6a:	1d03      	adds	r3, r0, #4
 8007b6c:	70c1      	strb	r1, [r0, #3]
 8007b6e:	e7f1      	b.n	8007b54 <__exponent+0x56>

08007b70 <_printf_float>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	b08d      	sub	sp, #52	@ 0x34
 8007b76:	460c      	mov	r4, r1
 8007b78:	4616      	mov	r6, r2
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b80:	4605      	mov	r5, r0
 8007b82:	f000 feed 	bl	8008960 <_localeconv_r>
 8007b86:	6803      	ldr	r3, [r0, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f7f8 fb74 	bl	8000278 <strlen>
 8007b90:	2300      	movs	r3, #0
 8007b92:	9005      	str	r0, [sp, #20]
 8007b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b96:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9a:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	f103 0208 	add.w	r2, r3, #8
 8007bac:	f8c8 2000 	str.w	r2, [r8]
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007bbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	4b9d      	ldr	r3, [pc, #628]	@ (8007e38 <_printf_float+0x2c8>)
 8007bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bc8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007bcc:	f7f8 ffb2 	bl	8000b34 <__aeabi_dcmpun>
 8007bd0:	bb70      	cbnz	r0, 8007c30 <_printf_float+0xc0>
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	4b98      	ldr	r3, [pc, #608]	@ (8007e38 <_printf_float+0x2c8>)
 8007bd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bdc:	f7f8 ff8c 	bl	8000af8 <__aeabi_dcmple>
 8007be0:	bb30      	cbnz	r0, 8007c30 <_printf_float+0xc0>
 8007be2:	2200      	movs	r2, #0
 8007be4:	2300      	movs	r3, #0
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 ff7b 	bl	8000ae4 <__aeabi_dcmplt>
 8007bee:	b110      	cbz	r0, 8007bf6 <_printf_float+0x86>
 8007bf0:	232d      	movs	r3, #45	@ 0x2d
 8007bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf6:	4a91      	ldr	r2, [pc, #580]	@ (8007e3c <_printf_float+0x2cc>)
 8007bf8:	4b91      	ldr	r3, [pc, #580]	@ (8007e40 <_printf_float+0x2d0>)
 8007bfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bfe:	bf8c      	ite	hi
 8007c00:	4690      	movhi	r8, r2
 8007c02:	4698      	movls	r8, r3
 8007c04:	2303      	movs	r3, #3
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	f02b 0304 	bic.w	r3, fp, #4
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	4633      	mov	r3, r6
 8007c14:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	9700      	str	r7, [sp, #0]
 8007c1c:	f000 f9d2 	bl	8007fc4 <_printf_common>
 8007c20:	3001      	adds	r0, #1
 8007c22:	f040 808d 	bne.w	8007d40 <_printf_float+0x1d0>
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	b00d      	add	sp, #52	@ 0x34
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 ff7c 	bl	8000b34 <__aeabi_dcmpun>
 8007c3c:	b140      	cbz	r0, 8007c50 <_printf_float+0xe0>
 8007c3e:	464b      	mov	r3, r9
 8007c40:	4a80      	ldr	r2, [pc, #512]	@ (8007e44 <_printf_float+0x2d4>)
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bfbc      	itt	lt
 8007c46:	232d      	movlt	r3, #45	@ 0x2d
 8007c48:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8007e48 <_printf_float+0x2d8>)
 8007c4e:	e7d4      	b.n	8007bfa <_printf_float+0x8a>
 8007c50:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	9206      	str	r2, [sp, #24]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	d13b      	bne.n	8007cd4 <_printf_float+0x164>
 8007c5c:	2306      	movs	r3, #6
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c64:	2300      	movs	r3, #0
 8007c66:	4628      	mov	r0, r5
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c6e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c72:	ab09      	add	r3, sp, #36	@ 0x24
 8007c74:	ec49 8b10 	vmov	d0, r8, r9
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c7e:	6861      	ldr	r1, [r4, #4]
 8007c80:	f7ff fed8 	bl	8007a34 <__cvt>
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	4680      	mov	r8, r0
 8007c88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c8a:	2b47      	cmp	r3, #71	@ 0x47
 8007c8c:	d129      	bne.n	8007ce2 <_printf_float+0x172>
 8007c8e:	1cc8      	adds	r0, r1, #3
 8007c90:	db02      	blt.n	8007c98 <_printf_float+0x128>
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	4299      	cmp	r1, r3
 8007c96:	dd41      	ble.n	8007d1c <_printf_float+0x1ac>
 8007c98:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c9c:	fa5f fa8a 	uxtb.w	sl, sl
 8007ca0:	3901      	subs	r1, #1
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ca8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007caa:	f7ff ff28 	bl	8007afe <__exponent>
 8007cae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cb0:	4681      	mov	r9, r0
 8007cb2:	1813      	adds	r3, r2, r0
 8007cb4:	2a01      	cmp	r2, #1
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	dc02      	bgt.n	8007cc0 <_printf_float+0x150>
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	07d2      	lsls	r2, r2, #31
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_float+0x154>
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	6123      	str	r3, [r4, #16]
 8007cc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0a2      	beq.n	8007c12 <_printf_float+0xa2>
 8007ccc:	232d      	movs	r3, #45	@ 0x2d
 8007cce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd2:	e79e      	b.n	8007c12 <_printf_float+0xa2>
 8007cd4:	9a06      	ldr	r2, [sp, #24]
 8007cd6:	2a47      	cmp	r2, #71	@ 0x47
 8007cd8:	d1c2      	bne.n	8007c60 <_printf_float+0xf0>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1c0      	bne.n	8007c60 <_printf_float+0xf0>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e7bd      	b.n	8007c5e <_printf_float+0xee>
 8007ce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ce6:	d9db      	bls.n	8007ca0 <_printf_float+0x130>
 8007ce8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007cec:	d118      	bne.n	8007d20 <_printf_float+0x1b0>
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	6863      	ldr	r3, [r4, #4]
 8007cf2:	dd0b      	ble.n	8007d0c <_printf_float+0x19c>
 8007cf4:	6121      	str	r1, [r4, #16]
 8007cf6:	b913      	cbnz	r3, 8007cfe <_printf_float+0x18e>
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	07d0      	lsls	r0, r2, #31
 8007cfc:	d502      	bpl.n	8007d04 <_printf_float+0x194>
 8007cfe:	3301      	adds	r3, #1
 8007d00:	440b      	add	r3, r1
 8007d02:	6123      	str	r3, [r4, #16]
 8007d04:	f04f 0900 	mov.w	r9, #0
 8007d08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d0a:	e7db      	b.n	8007cc4 <_printf_float+0x154>
 8007d0c:	b913      	cbnz	r3, 8007d14 <_printf_float+0x1a4>
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	07d2      	lsls	r2, r2, #31
 8007d12:	d501      	bpl.n	8007d18 <_printf_float+0x1a8>
 8007d14:	3302      	adds	r3, #2
 8007d16:	e7f4      	b.n	8007d02 <_printf_float+0x192>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e7f2      	b.n	8007d02 <_printf_float+0x192>
 8007d1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d22:	4299      	cmp	r1, r3
 8007d24:	db05      	blt.n	8007d32 <_printf_float+0x1c2>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6121      	str	r1, [r4, #16]
 8007d2a:	07d8      	lsls	r0, r3, #31
 8007d2c:	d5ea      	bpl.n	8007d04 <_printf_float+0x194>
 8007d2e:	1c4b      	adds	r3, r1, #1
 8007d30:	e7e7      	b.n	8007d02 <_printf_float+0x192>
 8007d32:	2900      	cmp	r1, #0
 8007d34:	bfd4      	ite	le
 8007d36:	f1c1 0202 	rsble	r2, r1, #2
 8007d3a:	2201      	movgt	r2, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	e7e0      	b.n	8007d02 <_printf_float+0x192>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	055a      	lsls	r2, r3, #21
 8007d44:	d407      	bmi.n	8007d56 <_printf_float+0x1e6>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	4642      	mov	r2, r8
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	d12b      	bne.n	8007dac <_printf_float+0x23c>
 8007d54:	e767      	b.n	8007c26 <_printf_float+0xb6>
 8007d56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d5a:	f240 80dd 	bls.w	8007f18 <_printf_float+0x3a8>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d66:	f7f8 feb3 	bl	8000ad0 <__aeabi_dcmpeq>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d033      	beq.n	8007dd6 <_printf_float+0x266>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4a36      	ldr	r2, [pc, #216]	@ (8007e4c <_printf_float+0x2dc>)
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f af54 	beq.w	8007c26 <_printf_float+0xb6>
 8007d7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d82:	4543      	cmp	r3, r8
 8007d84:	db02      	blt.n	8007d8c <_printf_float+0x21c>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	07d8      	lsls	r0, r3, #31
 8007d8a:	d50f      	bpl.n	8007dac <_printf_float+0x23c>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af45 	beq.w	8007c26 <_printf_float+0xb6>
 8007d9c:	f04f 0900 	mov.w	r9, #0
 8007da0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007da4:	f104 0a1a 	add.w	sl, r4, #26
 8007da8:	45c8      	cmp	r8, r9
 8007daa:	dc09      	bgt.n	8007dc0 <_printf_float+0x250>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	079b      	lsls	r3, r3, #30
 8007db0:	f100 8103 	bmi.w	8007fba <_printf_float+0x44a>
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007db8:	4298      	cmp	r0, r3
 8007dba:	bfb8      	it	lt
 8007dbc:	4618      	movlt	r0, r3
 8007dbe:	e734      	b.n	8007c2a <_printf_float+0xba>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f af2b 	beq.w	8007c26 <_printf_float+0xb6>
 8007dd0:	f109 0901 	add.w	r9, r9, #1
 8007dd4:	e7e8      	b.n	8007da8 <_printf_float+0x238>
 8007dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc39      	bgt.n	8007e50 <_printf_float+0x2e0>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4a1b      	ldr	r2, [pc, #108]	@ (8007e4c <_printf_float+0x2dc>)
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af1d 	beq.w	8007c26 <_printf_float+0xb6>
 8007dec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007df0:	ea59 0303 	orrs.w	r3, r9, r3
 8007df4:	d102      	bne.n	8007dfc <_printf_float+0x28c>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	07d9      	lsls	r1, r3, #31
 8007dfa:	d5d7      	bpl.n	8007dac <_printf_float+0x23c>
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af0d 	beq.w	8007c26 <_printf_float+0xb6>
 8007e0c:	f04f 0a00 	mov.w	sl, #0
 8007e10:	f104 0b1a 	add.w	fp, r4, #26
 8007e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e16:	425b      	negs	r3, r3
 8007e18:	4553      	cmp	r3, sl
 8007e1a:	dc01      	bgt.n	8007e20 <_printf_float+0x2b0>
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	e793      	b.n	8007d48 <_printf_float+0x1d8>
 8007e20:	2301      	movs	r3, #1
 8007e22:	465a      	mov	r2, fp
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f43f aefb 	beq.w	8007c26 <_printf_float+0xb6>
 8007e30:	f10a 0a01 	add.w	sl, sl, #1
 8007e34:	e7ee      	b.n	8007e14 <_printf_float+0x2a4>
 8007e36:	bf00      	nop
 8007e38:	7fefffff 	.word	0x7fefffff
 8007e3c:	0800c3fc 	.word	0x0800c3fc
 8007e40:	0800c3f8 	.word	0x0800c3f8
 8007e44:	0800c404 	.word	0x0800c404
 8007e48:	0800c400 	.word	0x0800c400
 8007e4c:	0800c408 	.word	0x0800c408
 8007e50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e56:	4553      	cmp	r3, sl
 8007e58:	bfa8      	it	ge
 8007e5a:	4653      	movge	r3, sl
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	4699      	mov	r9, r3
 8007e60:	dc36      	bgt.n	8007ed0 <_printf_float+0x360>
 8007e62:	f04f 0b00 	mov.w	fp, #0
 8007e66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e6a:	f104 021a 	add.w	r2, r4, #26
 8007e6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e70:	9306      	str	r3, [sp, #24]
 8007e72:	eba3 0309 	sub.w	r3, r3, r9
 8007e76:	455b      	cmp	r3, fp
 8007e78:	dc31      	bgt.n	8007ede <_printf_float+0x36e>
 8007e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7c:	459a      	cmp	sl, r3
 8007e7e:	dc3a      	bgt.n	8007ef6 <_printf_float+0x386>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07da      	lsls	r2, r3, #31
 8007e84:	d437      	bmi.n	8007ef6 <_printf_float+0x386>
 8007e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e88:	ebaa 0903 	sub.w	r9, sl, r3
 8007e8c:	9b06      	ldr	r3, [sp, #24]
 8007e8e:	ebaa 0303 	sub.w	r3, sl, r3
 8007e92:	4599      	cmp	r9, r3
 8007e94:	bfa8      	it	ge
 8007e96:	4699      	movge	r9, r3
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	dc33      	bgt.n	8007f06 <_printf_float+0x396>
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ea6:	f104 0b1a 	add.w	fp, r4, #26
 8007eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eac:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb0:	eba3 0309 	sub.w	r3, r3, r9
 8007eb4:	4543      	cmp	r3, r8
 8007eb6:	f77f af79 	ble.w	8007dac <_printf_float+0x23c>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	465a      	mov	r2, fp
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f aeae 	beq.w	8007c26 <_printf_float+0xb6>
 8007eca:	f108 0801 	add.w	r8, r8, #1
 8007ece:	e7ec      	b.n	8007eaa <_printf_float+0x33a>
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d1c2      	bne.n	8007e62 <_printf_float+0x2f2>
 8007edc:	e6a3      	b.n	8007c26 <_printf_float+0xb6>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	9206      	str	r2, [sp, #24]
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f ae9c 	beq.w	8007c26 <_printf_float+0xb6>
 8007eee:	f10b 0b01 	add.w	fp, fp, #1
 8007ef2:	9a06      	ldr	r2, [sp, #24]
 8007ef4:	e7bb      	b.n	8007e6e <_printf_float+0x2fe>
 8007ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	d1c0      	bne.n	8007e86 <_printf_float+0x316>
 8007f04:	e68f      	b.n	8007c26 <_printf_float+0xb6>
 8007f06:	9a06      	ldr	r2, [sp, #24]
 8007f08:	464b      	mov	r3, r9
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	4442      	add	r2, r8
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	d1c3      	bne.n	8007e9e <_printf_float+0x32e>
 8007f16:	e686      	b.n	8007c26 <_printf_float+0xb6>
 8007f18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f1c:	f1ba 0f01 	cmp.w	sl, #1
 8007f20:	dc01      	bgt.n	8007f26 <_printf_float+0x3b6>
 8007f22:	07db      	lsls	r3, r3, #31
 8007f24:	d536      	bpl.n	8007f94 <_printf_float+0x424>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4642      	mov	r2, r8
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f ae78 	beq.w	8007c26 <_printf_float+0xb6>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae70 	beq.w	8007c26 <_printf_float+0xb6>
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f52:	f7f8 fdbd 	bl	8000ad0 <__aeabi_dcmpeq>
 8007f56:	b9c0      	cbnz	r0, 8007f8a <_printf_float+0x41a>
 8007f58:	4653      	mov	r3, sl
 8007f5a:	f108 0201 	add.w	r2, r8, #1
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	d10c      	bne.n	8007f82 <_printf_float+0x412>
 8007f68:	e65d      	b.n	8007c26 <_printf_float+0xb6>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	465a      	mov	r2, fp
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	f43f ae56 	beq.w	8007c26 <_printf_float+0xb6>
 8007f7a:	f108 0801 	add.w	r8, r8, #1
 8007f7e:	45d0      	cmp	r8, sl
 8007f80:	dbf3      	blt.n	8007f6a <_printf_float+0x3fa>
 8007f82:	464b      	mov	r3, r9
 8007f84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f88:	e6df      	b.n	8007d4a <_printf_float+0x1da>
 8007f8a:	f04f 0800 	mov.w	r8, #0
 8007f8e:	f104 0b1a 	add.w	fp, r4, #26
 8007f92:	e7f4      	b.n	8007f7e <_printf_float+0x40e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	4642      	mov	r2, r8
 8007f98:	e7e1      	b.n	8007f5e <_printf_float+0x3ee>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	464a      	mov	r2, r9
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae3e 	beq.w	8007c26 <_printf_float+0xb6>
 8007faa:	f108 0801 	add.w	r8, r8, #1
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fb2:	1a5b      	subs	r3, r3, r1
 8007fb4:	4543      	cmp	r3, r8
 8007fb6:	dcf0      	bgt.n	8007f9a <_printf_float+0x42a>
 8007fb8:	e6fc      	b.n	8007db4 <_printf_float+0x244>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	f104 0919 	add.w	r9, r4, #25
 8007fc2:	e7f4      	b.n	8007fae <_printf_float+0x43e>

08007fc4 <_printf_common>:
 8007fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc8:	4616      	mov	r6, r2
 8007fca:	4698      	mov	r8, r3
 8007fcc:	688a      	ldr	r2, [r1, #8]
 8007fce:	4607      	mov	r7, r0
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	bfb8      	it	lt
 8007fdc:	4613      	movlt	r3, r2
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fe4:	b10a      	cbz	r2, 8007fea <_printf_common+0x26>
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	0699      	lsls	r1, r3, #26
 8007fee:	bf42      	ittt	mi
 8007ff0:	6833      	ldrmi	r3, [r6, #0]
 8007ff2:	3302      	addmi	r3, #2
 8007ff4:	6033      	strmi	r3, [r6, #0]
 8007ff6:	6825      	ldr	r5, [r4, #0]
 8007ff8:	f015 0506 	ands.w	r5, r5, #6
 8007ffc:	d106      	bne.n	800800c <_printf_common+0x48>
 8007ffe:	f104 0a19 	add.w	sl, r4, #25
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	6832      	ldr	r2, [r6, #0]
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	42ab      	cmp	r3, r5
 800800a:	dc2b      	bgt.n	8008064 <_printf_common+0xa0>
 800800c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	3b00      	subs	r3, #0
 8008014:	bf18      	it	ne
 8008016:	2301      	movne	r3, #1
 8008018:	0692      	lsls	r2, r2, #26
 800801a:	d430      	bmi.n	800807e <_printf_common+0xba>
 800801c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008020:	4641      	mov	r1, r8
 8008022:	4638      	mov	r0, r7
 8008024:	47c8      	blx	r9
 8008026:	3001      	adds	r0, #1
 8008028:	d023      	beq.n	8008072 <_printf_common+0xae>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	341a      	adds	r4, #26
 800802e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008032:	f003 0306 	and.w	r3, r3, #6
 8008036:	2b04      	cmp	r3, #4
 8008038:	bf0a      	itet	eq
 800803a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800803e:	2500      	movne	r5, #0
 8008040:	6833      	ldreq	r3, [r6, #0]
 8008042:	f04f 0600 	mov.w	r6, #0
 8008046:	bf08      	it	eq
 8008048:	1aed      	subeq	r5, r5, r3
 800804a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800804e:	bf08      	it	eq
 8008050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008054:	4293      	cmp	r3, r2
 8008056:	bfc4      	itt	gt
 8008058:	1a9b      	subgt	r3, r3, r2
 800805a:	18ed      	addgt	r5, r5, r3
 800805c:	42b5      	cmp	r5, r6
 800805e:	d11a      	bne.n	8008096 <_printf_common+0xd2>
 8008060:	2000      	movs	r0, #0
 8008062:	e008      	b.n	8008076 <_printf_common+0xb2>
 8008064:	2301      	movs	r3, #1
 8008066:	4652      	mov	r2, sl
 8008068:	4641      	mov	r1, r8
 800806a:	4638      	mov	r0, r7
 800806c:	47c8      	blx	r9
 800806e:	3001      	adds	r0, #1
 8008070:	d103      	bne.n	800807a <_printf_common+0xb6>
 8008072:	f04f 30ff 	mov.w	r0, #4294967295
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	3501      	adds	r5, #1
 800807c:	e7c1      	b.n	8008002 <_printf_common+0x3e>
 800807e:	18e1      	adds	r1, r4, r3
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	2030      	movs	r0, #48	@ 0x30
 8008084:	3302      	adds	r3, #2
 8008086:	4422      	add	r2, r4
 8008088:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800808c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008094:	e7c2      	b.n	800801c <_printf_common+0x58>
 8008096:	2301      	movs	r3, #1
 8008098:	4622      	mov	r2, r4
 800809a:	4641      	mov	r1, r8
 800809c:	4638      	mov	r0, r7
 800809e:	47c8      	blx	r9
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0e6      	beq.n	8008072 <_printf_common+0xae>
 80080a4:	3601      	adds	r6, #1
 80080a6:	e7d9      	b.n	800805c <_printf_common+0x98>

080080a8 <_printf_i>:
 80080a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	7e0f      	ldrb	r7, [r1, #24]
 80080ae:	4691      	mov	r9, r2
 80080b0:	4680      	mov	r8, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	2f78      	cmp	r7, #120	@ 0x78
 80080b6:	469a      	mov	sl, r3
 80080b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080be:	d807      	bhi.n	80080d0 <_printf_i+0x28>
 80080c0:	2f62      	cmp	r7, #98	@ 0x62
 80080c2:	d80a      	bhi.n	80080da <_printf_i+0x32>
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	f000 80d1 	beq.w	800826c <_printf_i+0x1c4>
 80080ca:	2f58      	cmp	r7, #88	@ 0x58
 80080cc:	f000 80b8 	beq.w	8008240 <_printf_i+0x198>
 80080d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080d8:	e03a      	b.n	8008150 <_printf_i+0xa8>
 80080da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080de:	2b15      	cmp	r3, #21
 80080e0:	d8f6      	bhi.n	80080d0 <_printf_i+0x28>
 80080e2:	a101      	add	r1, pc, #4	@ (adr r1, 80080e8 <_printf_i+0x40>)
 80080e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008155 	.word	0x08008155
 80080f0:	080080d1 	.word	0x080080d1
 80080f4:	080080d1 	.word	0x080080d1
 80080f8:	080080d1 	.word	0x080080d1
 80080fc:	080080d1 	.word	0x080080d1
 8008100:	08008155 	.word	0x08008155
 8008104:	080080d1 	.word	0x080080d1
 8008108:	080080d1 	.word	0x080080d1
 800810c:	080080d1 	.word	0x080080d1
 8008110:	080080d1 	.word	0x080080d1
 8008114:	08008253 	.word	0x08008253
 8008118:	0800817f 	.word	0x0800817f
 800811c:	0800820d 	.word	0x0800820d
 8008120:	080080d1 	.word	0x080080d1
 8008124:	080080d1 	.word	0x080080d1
 8008128:	08008275 	.word	0x08008275
 800812c:	080080d1 	.word	0x080080d1
 8008130:	0800817f 	.word	0x0800817f
 8008134:	080080d1 	.word	0x080080d1
 8008138:	080080d1 	.word	0x080080d1
 800813c:	08008215 	.word	0x08008215
 8008140:	6833      	ldr	r3, [r6, #0]
 8008142:	1d1a      	adds	r2, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6032      	str	r2, [r6, #0]
 8008148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800814c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008150:	2301      	movs	r3, #1
 8008152:	e09c      	b.n	800828e <_printf_i+0x1e6>
 8008154:	6833      	ldr	r3, [r6, #0]
 8008156:	6820      	ldr	r0, [r4, #0]
 8008158:	1d19      	adds	r1, r3, #4
 800815a:	6031      	str	r1, [r6, #0]
 800815c:	0606      	lsls	r6, r0, #24
 800815e:	d501      	bpl.n	8008164 <_printf_i+0xbc>
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	e003      	b.n	800816c <_printf_i+0xc4>
 8008164:	0645      	lsls	r5, r0, #25
 8008166:	d5fb      	bpl.n	8008160 <_printf_i+0xb8>
 8008168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800816c:	2d00      	cmp	r5, #0
 800816e:	da03      	bge.n	8008178 <_printf_i+0xd0>
 8008170:	232d      	movs	r3, #45	@ 0x2d
 8008172:	426d      	negs	r5, r5
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008178:	4858      	ldr	r0, [pc, #352]	@ (80082dc <_printf_i+0x234>)
 800817a:	230a      	movs	r3, #10
 800817c:	e011      	b.n	80081a2 <_printf_i+0xfa>
 800817e:	6821      	ldr	r1, [r4, #0]
 8008180:	6833      	ldr	r3, [r6, #0]
 8008182:	0608      	lsls	r0, r1, #24
 8008184:	f853 5b04 	ldr.w	r5, [r3], #4
 8008188:	d402      	bmi.n	8008190 <_printf_i+0xe8>
 800818a:	0649      	lsls	r1, r1, #25
 800818c:	bf48      	it	mi
 800818e:	b2ad      	uxthmi	r5, r5
 8008190:	2f6f      	cmp	r7, #111	@ 0x6f
 8008192:	6033      	str	r3, [r6, #0]
 8008194:	4851      	ldr	r0, [pc, #324]	@ (80082dc <_printf_i+0x234>)
 8008196:	bf14      	ite	ne
 8008198:	230a      	movne	r3, #10
 800819a:	2308      	moveq	r3, #8
 800819c:	2100      	movs	r1, #0
 800819e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081a2:	6866      	ldr	r6, [r4, #4]
 80081a4:	2e00      	cmp	r6, #0
 80081a6:	60a6      	str	r6, [r4, #8]
 80081a8:	db05      	blt.n	80081b6 <_printf_i+0x10e>
 80081aa:	6821      	ldr	r1, [r4, #0]
 80081ac:	432e      	orrs	r6, r5
 80081ae:	f021 0104 	bic.w	r1, r1, #4
 80081b2:	6021      	str	r1, [r4, #0]
 80081b4:	d04b      	beq.n	800824e <_printf_i+0x1a6>
 80081b6:	4616      	mov	r6, r2
 80081b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081bc:	fb03 5711 	mls	r7, r3, r1, r5
 80081c0:	5dc7      	ldrb	r7, [r0, r7]
 80081c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081c6:	462f      	mov	r7, r5
 80081c8:	460d      	mov	r5, r1
 80081ca:	42bb      	cmp	r3, r7
 80081cc:	d9f4      	bls.n	80081b8 <_printf_i+0x110>
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d10b      	bne.n	80081ea <_printf_i+0x142>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	07df      	lsls	r7, r3, #31
 80081d6:	d508      	bpl.n	80081ea <_printf_i+0x142>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	6861      	ldr	r1, [r4, #4]
 80081dc:	4299      	cmp	r1, r3
 80081de:	bfde      	ittt	le
 80081e0:	2330      	movle	r3, #48	@ 0x30
 80081e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081ea:	1b92      	subs	r2, r2, r6
 80081ec:	6122      	str	r2, [r4, #16]
 80081ee:	464b      	mov	r3, r9
 80081f0:	aa03      	add	r2, sp, #12
 80081f2:	4621      	mov	r1, r4
 80081f4:	4640      	mov	r0, r8
 80081f6:	f8cd a000 	str.w	sl, [sp]
 80081fa:	f7ff fee3 	bl	8007fc4 <_printf_common>
 80081fe:	3001      	adds	r0, #1
 8008200:	d14a      	bne.n	8008298 <_printf_i+0x1f0>
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	b004      	add	sp, #16
 8008208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	f043 0320 	orr.w	r3, r3, #32
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	2778      	movs	r7, #120	@ 0x78
 8008216:	4832      	ldr	r0, [pc, #200]	@ (80082e0 <_printf_i+0x238>)
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800821e:	061f      	lsls	r7, r3, #24
 8008220:	6831      	ldr	r1, [r6, #0]
 8008222:	f851 5b04 	ldr.w	r5, [r1], #4
 8008226:	d402      	bmi.n	800822e <_printf_i+0x186>
 8008228:	065f      	lsls	r7, r3, #25
 800822a:	bf48      	it	mi
 800822c:	b2ad      	uxthmi	r5, r5
 800822e:	6031      	str	r1, [r6, #0]
 8008230:	07d9      	lsls	r1, r3, #31
 8008232:	bf44      	itt	mi
 8008234:	f043 0320 	orrmi.w	r3, r3, #32
 8008238:	6023      	strmi	r3, [r4, #0]
 800823a:	b11d      	cbz	r5, 8008244 <_printf_i+0x19c>
 800823c:	2310      	movs	r3, #16
 800823e:	e7ad      	b.n	800819c <_printf_i+0xf4>
 8008240:	4826      	ldr	r0, [pc, #152]	@ (80082dc <_printf_i+0x234>)
 8008242:	e7e9      	b.n	8008218 <_printf_i+0x170>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	f023 0320 	bic.w	r3, r3, #32
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	e7f6      	b.n	800823c <_printf_i+0x194>
 800824e:	4616      	mov	r6, r2
 8008250:	e7bd      	b.n	80081ce <_printf_i+0x126>
 8008252:	6833      	ldr	r3, [r6, #0]
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	1d18      	adds	r0, r3, #4
 8008258:	6961      	ldr	r1, [r4, #20]
 800825a:	6030      	str	r0, [r6, #0]
 800825c:	062e      	lsls	r6, r5, #24
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	d501      	bpl.n	8008266 <_printf_i+0x1be>
 8008262:	6019      	str	r1, [r3, #0]
 8008264:	e002      	b.n	800826c <_printf_i+0x1c4>
 8008266:	0668      	lsls	r0, r5, #25
 8008268:	d5fb      	bpl.n	8008262 <_printf_i+0x1ba>
 800826a:	8019      	strh	r1, [r3, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	4616      	mov	r6, r2
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	e7bc      	b.n	80081ee <_printf_i+0x146>
 8008274:	6833      	ldr	r3, [r6, #0]
 8008276:	2100      	movs	r1, #0
 8008278:	1d1a      	adds	r2, r3, #4
 800827a:	6032      	str	r2, [r6, #0]
 800827c:	681e      	ldr	r6, [r3, #0]
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	4630      	mov	r0, r6
 8008282:	f000 fbf4 	bl	8008a6e <memchr>
 8008286:	b108      	cbz	r0, 800828c <_printf_i+0x1e4>
 8008288:	1b80      	subs	r0, r0, r6
 800828a:	6060      	str	r0, [r4, #4]
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	2300      	movs	r3, #0
 8008292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008296:	e7aa      	b.n	80081ee <_printf_i+0x146>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	4632      	mov	r2, r6
 800829c:	4649      	mov	r1, r9
 800829e:	4640      	mov	r0, r8
 80082a0:	47d0      	blx	sl
 80082a2:	3001      	adds	r0, #1
 80082a4:	d0ad      	beq.n	8008202 <_printf_i+0x15a>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	079b      	lsls	r3, r3, #30
 80082aa:	d413      	bmi.n	80082d4 <_printf_i+0x22c>
 80082ac:	68e0      	ldr	r0, [r4, #12]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	4298      	cmp	r0, r3
 80082b2:	bfb8      	it	lt
 80082b4:	4618      	movlt	r0, r3
 80082b6:	e7a6      	b.n	8008206 <_printf_i+0x15e>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4632      	mov	r2, r6
 80082bc:	4649      	mov	r1, r9
 80082be:	4640      	mov	r0, r8
 80082c0:	47d0      	blx	sl
 80082c2:	3001      	adds	r0, #1
 80082c4:	d09d      	beq.n	8008202 <_printf_i+0x15a>
 80082c6:	3501      	adds	r5, #1
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	9903      	ldr	r1, [sp, #12]
 80082cc:	1a5b      	subs	r3, r3, r1
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	dcf2      	bgt.n	80082b8 <_printf_i+0x210>
 80082d2:	e7eb      	b.n	80082ac <_printf_i+0x204>
 80082d4:	2500      	movs	r5, #0
 80082d6:	f104 0619 	add.w	r6, r4, #25
 80082da:	e7f5      	b.n	80082c8 <_printf_i+0x220>
 80082dc:	0800c40a 	.word	0x0800c40a
 80082e0:	0800c41b 	.word	0x0800c41b

080082e4 <_scanf_float>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	b087      	sub	sp, #28
 80082ea:	4691      	mov	r9, r2
 80082ec:	4680      	mov	r8, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	688b      	ldr	r3, [r1, #8]
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80082fa:	460a      	mov	r2, r1
 80082fc:	bf89      	itett	hi
 80082fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008302:	f04f 0b00 	movls.w	fp, #0
 8008306:	eb03 0b05 	addhi.w	fp, r3, r5
 800830a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800830e:	f04f 0500 	mov.w	r5, #0
 8008312:	bf88      	it	hi
 8008314:	608b      	strhi	r3, [r1, #8]
 8008316:	680b      	ldr	r3, [r1, #0]
 8008318:	46aa      	mov	sl, r5
 800831a:	462f      	mov	r7, r5
 800831c:	9502      	str	r5, [sp, #8]
 800831e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008322:	f842 3b1c 	str.w	r3, [r2], #28
 8008326:	4616      	mov	r6, r2
 8008328:	9201      	str	r2, [sp, #4]
 800832a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800832e:	68a2      	ldr	r2, [r4, #8]
 8008330:	b15a      	cbz	r2, 800834a <_scanf_float+0x66>
 8008332:	f8d9 3000 	ldr.w	r3, [r9]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b4e      	cmp	r3, #78	@ 0x4e
 800833a:	d863      	bhi.n	8008404 <_scanf_float+0x120>
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d83b      	bhi.n	80083b8 <_scanf_float+0xd4>
 8008340:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008344:	b2c8      	uxtb	r0, r1
 8008346:	280e      	cmp	r0, #14
 8008348:	d939      	bls.n	80083be <_scanf_float+0xda>
 800834a:	b11f      	cbz	r7, 8008354 <_scanf_float+0x70>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008358:	f1ba 0f01 	cmp.w	sl, #1
 800835c:	f200 8115 	bhi.w	800858a <_scanf_float+0x2a6>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	429e      	cmp	r6, r3
 8008364:	f200 8106 	bhi.w	8008574 <_scanf_float+0x290>
 8008368:	2001      	movs	r0, #1
 800836a:	b007      	add	sp, #28
 800836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008370:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008374:	2a0d      	cmp	r2, #13
 8008376:	d8e8      	bhi.n	800834a <_scanf_float+0x66>
 8008378:	a101      	add	r1, pc, #4	@ (adr r1, 8008380 <_scanf_float+0x9c>)
 800837a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800837e:	bf00      	nop
 8008380:	080084c9 	.word	0x080084c9
 8008384:	0800834b 	.word	0x0800834b
 8008388:	0800834b 	.word	0x0800834b
 800838c:	0800834b 	.word	0x0800834b
 8008390:	08008525 	.word	0x08008525
 8008394:	080084ff 	.word	0x080084ff
 8008398:	0800834b 	.word	0x0800834b
 800839c:	0800834b 	.word	0x0800834b
 80083a0:	080084d7 	.word	0x080084d7
 80083a4:	0800834b 	.word	0x0800834b
 80083a8:	0800834b 	.word	0x0800834b
 80083ac:	0800834b 	.word	0x0800834b
 80083b0:	0800834b 	.word	0x0800834b
 80083b4:	08008493 	.word	0x08008493
 80083b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80083bc:	e7da      	b.n	8008374 <_scanf_float+0x90>
 80083be:	290e      	cmp	r1, #14
 80083c0:	d8c3      	bhi.n	800834a <_scanf_float+0x66>
 80083c2:	a001      	add	r0, pc, #4	@ (adr r0, 80083c8 <_scanf_float+0xe4>)
 80083c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083c8:	08008483 	.word	0x08008483
 80083cc:	0800834b 	.word	0x0800834b
 80083d0:	08008483 	.word	0x08008483
 80083d4:	08008513 	.word	0x08008513
 80083d8:	0800834b 	.word	0x0800834b
 80083dc:	08008425 	.word	0x08008425
 80083e0:	08008469 	.word	0x08008469
 80083e4:	08008469 	.word	0x08008469
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008469 	.word	0x08008469
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008469 	.word	0x08008469
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	2b6e      	cmp	r3, #110	@ 0x6e
 8008406:	d809      	bhi.n	800841c <_scanf_float+0x138>
 8008408:	2b60      	cmp	r3, #96	@ 0x60
 800840a:	d8b1      	bhi.n	8008370 <_scanf_float+0x8c>
 800840c:	2b54      	cmp	r3, #84	@ 0x54
 800840e:	d07b      	beq.n	8008508 <_scanf_float+0x224>
 8008410:	2b59      	cmp	r3, #89	@ 0x59
 8008412:	d19a      	bne.n	800834a <_scanf_float+0x66>
 8008414:	2d07      	cmp	r5, #7
 8008416:	d198      	bne.n	800834a <_scanf_float+0x66>
 8008418:	2508      	movs	r5, #8
 800841a:	e02f      	b.n	800847c <_scanf_float+0x198>
 800841c:	2b74      	cmp	r3, #116	@ 0x74
 800841e:	d073      	beq.n	8008508 <_scanf_float+0x224>
 8008420:	2b79      	cmp	r3, #121	@ 0x79
 8008422:	e7f6      	b.n	8008412 <_scanf_float+0x12e>
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	05c8      	lsls	r0, r1, #23
 8008428:	d51e      	bpl.n	8008468 <_scanf_float+0x184>
 800842a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800842e:	3701      	adds	r7, #1
 8008430:	6021      	str	r1, [r4, #0]
 8008432:	f1bb 0f00 	cmp.w	fp, #0
 8008436:	d003      	beq.n	8008440 <_scanf_float+0x15c>
 8008438:	3201      	adds	r2, #1
 800843a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800843e:	60a2      	str	r2, [r4, #8]
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	3b01      	subs	r3, #1
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	f8c9 3004 	str.w	r3, [r9, #4]
 8008458:	f340 8083 	ble.w	8008562 <_scanf_float+0x27e>
 800845c:	f8d9 3000 	ldr.w	r3, [r9]
 8008460:	3301      	adds	r3, #1
 8008462:	f8c9 3000 	str.w	r3, [r9]
 8008466:	e762      	b.n	800832e <_scanf_float+0x4a>
 8008468:	eb1a 0105 	adds.w	r1, sl, r5
 800846c:	f47f af6d 	bne.w	800834a <_scanf_float+0x66>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	460d      	mov	r5, r1
 8008474:	468a      	mov	sl, r1
 8008476:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800847a:	6022      	str	r2, [r4, #0]
 800847c:	f806 3b01 	strb.w	r3, [r6], #1
 8008480:	e7de      	b.n	8008440 <_scanf_float+0x15c>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	0610      	lsls	r0, r2, #24
 8008486:	f57f af60 	bpl.w	800834a <_scanf_float+0x66>
 800848a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800848e:	6022      	str	r2, [r4, #0]
 8008490:	e7f4      	b.n	800847c <_scanf_float+0x198>
 8008492:	f1ba 0f00 	cmp.w	sl, #0
 8008496:	d10c      	bne.n	80084b2 <_scanf_float+0x1ce>
 8008498:	b977      	cbnz	r7, 80084b8 <_scanf_float+0x1d4>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084a4:	d108      	bne.n	80084b8 <_scanf_float+0x1d4>
 80084a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084aa:	f04f 0a01 	mov.w	sl, #1
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	e7e4      	b.n	800847c <_scanf_float+0x198>
 80084b2:	f1ba 0f02 	cmp.w	sl, #2
 80084b6:	d051      	beq.n	800855c <_scanf_float+0x278>
 80084b8:	2d01      	cmp	r5, #1
 80084ba:	d002      	beq.n	80084c2 <_scanf_float+0x1de>
 80084bc:	2d04      	cmp	r5, #4
 80084be:	f47f af44 	bne.w	800834a <_scanf_float+0x66>
 80084c2:	3501      	adds	r5, #1
 80084c4:	b2ed      	uxtb	r5, r5
 80084c6:	e7d9      	b.n	800847c <_scanf_float+0x198>
 80084c8:	f1ba 0f01 	cmp.w	sl, #1
 80084cc:	f47f af3d 	bne.w	800834a <_scanf_float+0x66>
 80084d0:	f04f 0a02 	mov.w	sl, #2
 80084d4:	e7d2      	b.n	800847c <_scanf_float+0x198>
 80084d6:	b975      	cbnz	r5, 80084f6 <_scanf_float+0x212>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	f47f af37 	bne.w	800834c <_scanf_float+0x68>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084e8:	f040 8103 	bne.w	80086f2 <_scanf_float+0x40e>
 80084ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084f0:	2501      	movs	r5, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	e7c2      	b.n	800847c <_scanf_float+0x198>
 80084f6:	2d03      	cmp	r5, #3
 80084f8:	d0e3      	beq.n	80084c2 <_scanf_float+0x1de>
 80084fa:	2d05      	cmp	r5, #5
 80084fc:	e7df      	b.n	80084be <_scanf_float+0x1da>
 80084fe:	2d02      	cmp	r5, #2
 8008500:	f47f af23 	bne.w	800834a <_scanf_float+0x66>
 8008504:	2503      	movs	r5, #3
 8008506:	e7b9      	b.n	800847c <_scanf_float+0x198>
 8008508:	2d06      	cmp	r5, #6
 800850a:	f47f af1e 	bne.w	800834a <_scanf_float+0x66>
 800850e:	2507      	movs	r5, #7
 8008510:	e7b4      	b.n	800847c <_scanf_float+0x198>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	0591      	lsls	r1, r2, #22
 8008516:	f57f af18 	bpl.w	800834a <_scanf_float+0x66>
 800851a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800851e:	9702      	str	r7, [sp, #8]
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	e7ab      	b.n	800847c <_scanf_float+0x198>
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800852a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800852e:	d005      	beq.n	800853c <_scanf_float+0x258>
 8008530:	0550      	lsls	r0, r2, #21
 8008532:	f57f af0a 	bpl.w	800834a <_scanf_float+0x66>
 8008536:	2f00      	cmp	r7, #0
 8008538:	f000 80db 	beq.w	80086f2 <_scanf_float+0x40e>
 800853c:	0591      	lsls	r1, r2, #22
 800853e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008542:	bf58      	it	pl
 8008544:	9902      	ldrpl	r1, [sp, #8]
 8008546:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800854a:	bf58      	it	pl
 800854c:	1a79      	subpl	r1, r7, r1
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	f04f 0700 	mov.w	r7, #0
 8008554:	bf58      	it	pl
 8008556:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800855a:	e78f      	b.n	800847c <_scanf_float+0x198>
 800855c:	f04f 0a03 	mov.w	sl, #3
 8008560:	e78c      	b.n	800847c <_scanf_float+0x198>
 8008562:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008566:	4649      	mov	r1, r9
 8008568:	4640      	mov	r0, r8
 800856a:	4798      	blx	r3
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f aede 	beq.w	800832e <_scanf_float+0x4a>
 8008572:	e6ea      	b.n	800834a <_scanf_float+0x66>
 8008574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008578:	464a      	mov	r2, r9
 800857a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800857e:	4640      	mov	r0, r8
 8008580:	4798      	blx	r3
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	3b01      	subs	r3, #1
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	e6ea      	b.n	8008360 <_scanf_float+0x7c>
 800858a:	1e6b      	subs	r3, r5, #1
 800858c:	2b06      	cmp	r3, #6
 800858e:	d824      	bhi.n	80085da <_scanf_float+0x2f6>
 8008590:	2d02      	cmp	r5, #2
 8008592:	d836      	bhi.n	8008602 <_scanf_float+0x31e>
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	429e      	cmp	r6, r3
 8008598:	f67f aee6 	bls.w	8008368 <_scanf_float+0x84>
 800859c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085a0:	464a      	mov	r2, r9
 80085a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085a6:	4640      	mov	r0, r8
 80085a8:	4798      	blx	r3
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	e7f0      	b.n	8008594 <_scanf_float+0x2b0>
 80085b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085b6:	464a      	mov	r2, r9
 80085b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80085bc:	4640      	mov	r0, r8
 80085be:	4798      	blx	r3
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ca:	fa5f fa8a 	uxtb.w	sl, sl
 80085ce:	f1ba 0f02 	cmp.w	sl, #2
 80085d2:	d1ee      	bne.n	80085b2 <_scanf_float+0x2ce>
 80085d4:	3d03      	subs	r5, #3
 80085d6:	b2ed      	uxtb	r5, r5
 80085d8:	1b76      	subs	r6, r6, r5
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	05da      	lsls	r2, r3, #23
 80085de:	d52f      	bpl.n	8008640 <_scanf_float+0x35c>
 80085e0:	055b      	lsls	r3, r3, #21
 80085e2:	d511      	bpl.n	8008608 <_scanf_float+0x324>
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	429e      	cmp	r6, r3
 80085e8:	f67f aebe 	bls.w	8008368 <_scanf_float+0x84>
 80085ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085f0:	464a      	mov	r2, r9
 80085f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085f6:	4640      	mov	r0, r8
 80085f8:	4798      	blx	r3
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	e7f0      	b.n	80085e4 <_scanf_float+0x300>
 8008602:	46aa      	mov	sl, r5
 8008604:	46b3      	mov	fp, r6
 8008606:	e7de      	b.n	80085c6 <_scanf_float+0x2e2>
 8008608:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800860c:	1e75      	subs	r5, r6, #1
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	2965      	cmp	r1, #101	@ 0x65
 8008612:	f103 33ff 	add.w	r3, r3, #4294967295
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	d00c      	beq.n	8008634 <_scanf_float+0x350>
 800861a:	2945      	cmp	r1, #69	@ 0x45
 800861c:	d00a      	beq.n	8008634 <_scanf_float+0x350>
 800861e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008622:	464a      	mov	r2, r9
 8008624:	4640      	mov	r0, r8
 8008626:	1eb5      	subs	r5, r6, #2
 8008628:	4798      	blx	r3
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008630:	3b01      	subs	r3, #1
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	462e      	mov	r6, r5
 8008636:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800863a:	464a      	mov	r2, r9
 800863c:	4640      	mov	r0, r8
 800863e:	4798      	blx	r3
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	f012 0210 	ands.w	r2, r2, #16
 8008646:	d001      	beq.n	800864c <_scanf_float+0x368>
 8008648:	2000      	movs	r0, #0
 800864a:	e68e      	b.n	800836a <_scanf_float+0x86>
 800864c:	7032      	strb	r2, [r6, #0]
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008658:	d125      	bne.n	80086a6 <_scanf_float+0x3c2>
 800865a:	9b02      	ldr	r3, [sp, #8]
 800865c:	429f      	cmp	r7, r3
 800865e:	d00a      	beq.n	8008676 <_scanf_float+0x392>
 8008660:	1bda      	subs	r2, r3, r7
 8008662:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008666:	4924      	ldr	r1, [pc, #144]	@ (80086f8 <_scanf_float+0x414>)
 8008668:	429e      	cmp	r6, r3
 800866a:	bf28      	it	cs
 800866c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008670:	4630      	mov	r0, r6
 8008672:	f000 f907 	bl	8008884 <siprintf>
 8008676:	2200      	movs	r2, #0
 8008678:	9901      	ldr	r1, [sp, #4]
 800867a:	4640      	mov	r0, r8
 800867c:	f002 fb7c 	bl	800ad78 <_strtod_r>
 8008680:	6821      	ldr	r1, [r4, #0]
 8008682:	9b03      	ldr	r3, [sp, #12]
 8008684:	f011 0f02 	tst.w	r1, #2
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	ec57 6b10 	vmov	r6, r7, d0
 800868e:	f103 0204 	add.w	r2, r3, #4
 8008692:	d015      	beq.n	80086c0 <_scanf_float+0x3dc>
 8008694:	9903      	ldr	r1, [sp, #12]
 8008696:	600a      	str	r2, [r1, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	e9c3 6700 	strd	r6, r7, [r3]
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60e3      	str	r3, [r4, #12]
 80086a4:	e7d0      	b.n	8008648 <_scanf_float+0x364>
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0e4      	beq.n	8008676 <_scanf_float+0x392>
 80086ac:	9905      	ldr	r1, [sp, #20]
 80086ae:	230a      	movs	r3, #10
 80086b0:	4640      	mov	r0, r8
 80086b2:	3101      	adds	r1, #1
 80086b4:	f002 fbe0 	bl	800ae78 <_strtol_r>
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	9e05      	ldr	r6, [sp, #20]
 80086bc:	1ac2      	subs	r2, r0, r3
 80086be:	e7d0      	b.n	8008662 <_scanf_float+0x37e>
 80086c0:	f011 0f04 	tst.w	r1, #4
 80086c4:	9903      	ldr	r1, [sp, #12]
 80086c6:	600a      	str	r2, [r1, #0]
 80086c8:	d1e6      	bne.n	8008698 <_scanf_float+0x3b4>
 80086ca:	681d      	ldr	r5, [r3, #0]
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f8 fa2e 	bl	8000b34 <__aeabi_dcmpun>
 80086d8:	b128      	cbz	r0, 80086e6 <_scanf_float+0x402>
 80086da:	4808      	ldr	r0, [pc, #32]	@ (80086fc <_scanf_float+0x418>)
 80086dc:	f000 f9e2 	bl	8008aa4 <nanf>
 80086e0:	ed85 0a00 	vstr	s0, [r5]
 80086e4:	e7db      	b.n	800869e <_scanf_float+0x3ba>
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f8 fa81 	bl	8000bf0 <__aeabi_d2f>
 80086ee:	6028      	str	r0, [r5, #0]
 80086f0:	e7d5      	b.n	800869e <_scanf_float+0x3ba>
 80086f2:	2700      	movs	r7, #0
 80086f4:	e62e      	b.n	8008354 <_scanf_float+0x70>
 80086f6:	bf00      	nop
 80086f8:	0800c42c 	.word	0x0800c42c
 80086fc:	0800c56d 	.word	0x0800c56d

08008700 <std>:
 8008700:	2300      	movs	r3, #0
 8008702:	b510      	push	{r4, lr}
 8008704:	4604      	mov	r4, r0
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	4619      	mov	r1, r3
 800870c:	6643      	str	r3, [r0, #100]	@ 0x64
 800870e:	81c2      	strh	r2, [r0, #14]
 8008710:	2208      	movs	r2, #8
 8008712:	6183      	str	r3, [r0, #24]
 8008714:	e9c0 3300 	strd	r3, r3, [r0]
 8008718:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800871c:	305c      	adds	r0, #92	@ 0x5c
 800871e:	f000 f916 	bl	800894e <memset>
 8008722:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <std+0x58>)
 8008724:	6224      	str	r4, [r4, #32]
 8008726:	6263      	str	r3, [r4, #36]	@ 0x24
 8008728:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <std+0x5c>)
 800872a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800872c:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <std+0x60>)
 800872e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008730:	4b0c      	ldr	r3, [pc, #48]	@ (8008764 <std+0x64>)
 8008732:	6323      	str	r3, [r4, #48]	@ 0x30
 8008734:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <std+0x68>)
 8008736:	429c      	cmp	r4, r3
 8008738:	d006      	beq.n	8008748 <std+0x48>
 800873a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800873e:	4294      	cmp	r4, r2
 8008740:	d002      	beq.n	8008748 <std+0x48>
 8008742:	33d0      	adds	r3, #208	@ 0xd0
 8008744:	429c      	cmp	r4, r3
 8008746:	d105      	bne.n	8008754 <std+0x54>
 8008748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	f000 b98a 	b.w	8008a68 <__retarget_lock_init_recursive>
 8008754:	bd10      	pop	{r4, pc}
 8008756:	bf00      	nop
 8008758:	080088c9 	.word	0x080088c9
 800875c:	080088eb 	.word	0x080088eb
 8008760:	08008923 	.word	0x08008923
 8008764:	08008947 	.word	0x08008947
 8008768:	200006c8 	.word	0x200006c8

0800876c <stdio_exit_handler>:
 800876c:	4a02      	ldr	r2, [pc, #8]	@ (8008778 <stdio_exit_handler+0xc>)
 800876e:	4903      	ldr	r1, [pc, #12]	@ (800877c <stdio_exit_handler+0x10>)
 8008770:	4803      	ldr	r0, [pc, #12]	@ (8008780 <stdio_exit_handler+0x14>)
 8008772:	f000 b869 	b.w	8008848 <_fwalk_sglue>
 8008776:	bf00      	nop
 8008778:	2000000c 	.word	0x2000000c
 800877c:	0800b235 	.word	0x0800b235
 8008780:	2000001c 	.word	0x2000001c

08008784 <cleanup_stdio>:
 8008784:	6841      	ldr	r1, [r0, #4]
 8008786:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <cleanup_stdio+0x34>)
 8008788:	4299      	cmp	r1, r3
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	d001      	beq.n	8008794 <cleanup_stdio+0x10>
 8008790:	f002 fd50 	bl	800b234 <_fflush_r>
 8008794:	68a1      	ldr	r1, [r4, #8]
 8008796:	4b09      	ldr	r3, [pc, #36]	@ (80087bc <cleanup_stdio+0x38>)
 8008798:	4299      	cmp	r1, r3
 800879a:	d002      	beq.n	80087a2 <cleanup_stdio+0x1e>
 800879c:	4620      	mov	r0, r4
 800879e:	f002 fd49 	bl	800b234 <_fflush_r>
 80087a2:	68e1      	ldr	r1, [r4, #12]
 80087a4:	4b06      	ldr	r3, [pc, #24]	@ (80087c0 <cleanup_stdio+0x3c>)
 80087a6:	4299      	cmp	r1, r3
 80087a8:	d004      	beq.n	80087b4 <cleanup_stdio+0x30>
 80087aa:	4620      	mov	r0, r4
 80087ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b0:	f002 bd40 	b.w	800b234 <_fflush_r>
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	bf00      	nop
 80087b8:	200006c8 	.word	0x200006c8
 80087bc:	20000730 	.word	0x20000730
 80087c0:	20000798 	.word	0x20000798

080087c4 <global_stdio_init.part.0>:
 80087c4:	b510      	push	{r4, lr}
 80087c6:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <global_stdio_init.part.0+0x30>)
 80087c8:	2104      	movs	r1, #4
 80087ca:	4c0b      	ldr	r4, [pc, #44]	@ (80087f8 <global_stdio_init.part.0+0x34>)
 80087cc:	4a0b      	ldr	r2, [pc, #44]	@ (80087fc <global_stdio_init.part.0+0x38>)
 80087ce:	4620      	mov	r0, r4
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f7ff ff94 	bl	8008700 <std>
 80087d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087dc:	2201      	movs	r2, #1
 80087de:	2109      	movs	r1, #9
 80087e0:	f7ff ff8e 	bl	8008700 <std>
 80087e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087e8:	2202      	movs	r2, #2
 80087ea:	2112      	movs	r1, #18
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f7ff bf86 	b.w	8008700 <std>
 80087f4:	20000800 	.word	0x20000800
 80087f8:	200006c8 	.word	0x200006c8
 80087fc:	0800876d 	.word	0x0800876d

08008800 <__sfp_lock_acquire>:
 8008800:	4801      	ldr	r0, [pc, #4]	@ (8008808 <__sfp_lock_acquire+0x8>)
 8008802:	f000 b932 	b.w	8008a6a <__retarget_lock_acquire_recursive>
 8008806:	bf00      	nop
 8008808:	20000809 	.word	0x20000809

0800880c <__sfp_lock_release>:
 800880c:	4801      	ldr	r0, [pc, #4]	@ (8008814 <__sfp_lock_release+0x8>)
 800880e:	f000 b92d 	b.w	8008a6c <__retarget_lock_release_recursive>
 8008812:	bf00      	nop
 8008814:	20000809 	.word	0x20000809

08008818 <__sinit>:
 8008818:	b510      	push	{r4, lr}
 800881a:	4604      	mov	r4, r0
 800881c:	f7ff fff0 	bl	8008800 <__sfp_lock_acquire>
 8008820:	6a23      	ldr	r3, [r4, #32]
 8008822:	b11b      	cbz	r3, 800882c <__sinit+0x14>
 8008824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008828:	f7ff bff0 	b.w	800880c <__sfp_lock_release>
 800882c:	4b04      	ldr	r3, [pc, #16]	@ (8008840 <__sinit+0x28>)
 800882e:	6223      	str	r3, [r4, #32]
 8008830:	4b04      	ldr	r3, [pc, #16]	@ (8008844 <__sinit+0x2c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1f5      	bne.n	8008824 <__sinit+0xc>
 8008838:	f7ff ffc4 	bl	80087c4 <global_stdio_init.part.0>
 800883c:	e7f2      	b.n	8008824 <__sinit+0xc>
 800883e:	bf00      	nop
 8008840:	08008785 	.word	0x08008785
 8008844:	20000800 	.word	0x20000800

08008848 <_fwalk_sglue>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	4607      	mov	r7, r0
 800884e:	4688      	mov	r8, r1
 8008850:	4614      	mov	r4, r2
 8008852:	2600      	movs	r6, #0
 8008854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008858:	f1b9 0901 	subs.w	r9, r9, #1
 800885c:	d505      	bpl.n	800886a <_fwalk_sglue+0x22>
 800885e:	6824      	ldr	r4, [r4, #0]
 8008860:	2c00      	cmp	r4, #0
 8008862:	d1f7      	bne.n	8008854 <_fwalk_sglue+0xc>
 8008864:	4630      	mov	r0, r6
 8008866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d907      	bls.n	8008880 <_fwalk_sglue+0x38>
 8008870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008874:	3301      	adds	r3, #1
 8008876:	d003      	beq.n	8008880 <_fwalk_sglue+0x38>
 8008878:	4629      	mov	r1, r5
 800887a:	4638      	mov	r0, r7
 800887c:	47c0      	blx	r8
 800887e:	4306      	orrs	r6, r0
 8008880:	3568      	adds	r5, #104	@ 0x68
 8008882:	e7e9      	b.n	8008858 <_fwalk_sglue+0x10>

08008884 <siprintf>:
 8008884:	b40e      	push	{r1, r2, r3}
 8008886:	b510      	push	{r4, lr}
 8008888:	b09d      	sub	sp, #116	@ 0x74
 800888a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800888e:	2400      	movs	r4, #0
 8008890:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008892:	9002      	str	r0, [sp, #8]
 8008894:	9006      	str	r0, [sp, #24]
 8008896:	9107      	str	r1, [sp, #28]
 8008898:	9104      	str	r1, [sp, #16]
 800889a:	4809      	ldr	r0, [pc, #36]	@ (80088c0 <siprintf+0x3c>)
 800889c:	4909      	ldr	r1, [pc, #36]	@ (80088c4 <siprintf+0x40>)
 800889e:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a2:	9105      	str	r1, [sp, #20]
 80088a4:	a902      	add	r1, sp, #8
 80088a6:	6800      	ldr	r0, [r0, #0]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80088ac:	f002 fb42 	bl	800af34 <_svfiprintf_r>
 80088b0:	9b02      	ldr	r3, [sp, #8]
 80088b2:	701c      	strb	r4, [r3, #0]
 80088b4:	b01d      	add	sp, #116	@ 0x74
 80088b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ba:	b003      	add	sp, #12
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000018 	.word	0x20000018
 80088c4:	ffff0208 	.word	0xffff0208

080088c8 <__sread>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 f86c 	bl	80089ac <_read_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	bfab      	itete	ge
 80088d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088da:	89a3      	ldrhlt	r3, [r4, #12]
 80088dc:	181b      	addge	r3, r3, r0
 80088de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088e2:	bfac      	ite	ge
 80088e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088e6:	81a3      	strhlt	r3, [r4, #12]
 80088e8:	bd10      	pop	{r4, pc}

080088ea <__swrite>:
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	461f      	mov	r7, r3
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	4605      	mov	r5, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	05db      	lsls	r3, r3, #23
 80088f8:	4616      	mov	r6, r2
 80088fa:	d505      	bpl.n	8008908 <__swrite+0x1e>
 80088fc:	2302      	movs	r3, #2
 80088fe:	2200      	movs	r2, #0
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	f000 f840 	bl	8008988 <_lseek_r>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	4632      	mov	r2, r6
 800890c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008910:	4628      	mov	r0, r5
 8008912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	463b      	mov	r3, r7
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f000 b867 	b.w	80089f0 <_write_r>

08008922 <__sseek>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 f82d 	bl	8008988 <_lseek_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	bf15      	itete	ne
 8008934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800893a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800893e:	81a3      	strheq	r3, [r4, #12]
 8008940:	bf18      	it	ne
 8008942:	81a3      	strhne	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__sclose>:
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 b80d 	b.w	8008968 <_close_r>

0800894e <memset>:
 800894e:	4402      	add	r2, r0
 8008950:	4603      	mov	r3, r0
 8008952:	4293      	cmp	r3, r2
 8008954:	d100      	bne.n	8008958 <memset+0xa>
 8008956:	4770      	bx	lr
 8008958:	f803 1b01 	strb.w	r1, [r3], #1
 800895c:	e7f9      	b.n	8008952 <memset+0x4>
	...

08008960 <_localeconv_r>:
 8008960:	4800      	ldr	r0, [pc, #0]	@ (8008964 <_localeconv_r+0x4>)
 8008962:	4770      	bx	lr
 8008964:	20000158 	.word	0x20000158

08008968 <_close_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	2300      	movs	r3, #0
 800896c:	4d05      	ldr	r5, [pc, #20]	@ (8008984 <_close_r+0x1c>)
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7fb f95b 	bl	8003c2e <_close>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_close_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_close_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000804 	.word	0x20000804

08008988 <_lseek_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4604      	mov	r4, r0
 800898c:	4d06      	ldr	r5, [pc, #24]	@ (80089a8 <_lseek_r+0x20>)
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7fb f970 	bl	8003c7c <_lseek>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_lseek_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_lseek_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000804 	.word	0x20000804

080089ac <_read_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4604      	mov	r4, r0
 80089b0:	4d06      	ldr	r5, [pc, #24]	@ (80089cc <_read_r+0x20>)
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	602a      	str	r2, [r5, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7fb f8fe 	bl	8003bbc <_read>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_read_r+0x1e>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_read_r+0x1e>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000804 	.word	0x20000804

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	2300      	movs	r3, #0
 80089d4:	4d05      	ldr	r5, [pc, #20]	@ (80089ec <_sbrk_r+0x1c>)
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7fb f95c 	bl	8003c98 <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000804 	.word	0x20000804

080089f0 <_write_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4604      	mov	r4, r0
 80089f4:	4d06      	ldr	r5, [pc, #24]	@ (8008a10 <_write_r+0x20>)
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7fb f8f9 	bl	8003bf6 <_write>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_write_r+0x1e>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_write_r+0x1e>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20000804 	.word	0x20000804

08008a14 <__errno>:
 8008a14:	4b01      	ldr	r3, [pc, #4]	@ (8008a1c <__errno+0x8>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20000018 	.word	0x20000018

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	@ (8008a58 <__libc_init_array+0x38>)
 8008a24:	2600      	movs	r6, #0
 8008a26:	4c0d      	ldr	r4, [pc, #52]	@ (8008a5c <__libc_init_array+0x3c>)
 8008a28:	1b64      	subs	r4, r4, r5
 8008a2a:	10a4      	asrs	r4, r4, #2
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	@ (8008a60 <__libc_init_array+0x40>)
 8008a32:	2600      	movs	r6, #0
 8008a34:	4c0b      	ldr	r4, [pc, #44]	@ (8008a64 <__libc_init_array+0x44>)
 8008a36:	f003 facd 	bl	800bfd4 <_init>
 8008a3a:	1b64      	subs	r4, r4, r5
 8008a3c:	10a4      	asrs	r4, r4, #2
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	3601      	adds	r6, #1
 8008a4a:	4798      	blx	r3
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	3601      	adds	r6, #1
 8008a54:	4798      	blx	r3
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	0800c82c 	.word	0x0800c82c
 8008a5c:	0800c82c 	.word	0x0800c82c
 8008a60:	0800c82c 	.word	0x0800c82c
 8008a64:	0800c834 	.word	0x0800c834

08008a68 <__retarget_lock_init_recursive>:
 8008a68:	4770      	bx	lr

08008a6a <__retarget_lock_acquire_recursive>:
 8008a6a:	4770      	bx	lr

08008a6c <__retarget_lock_release_recursive>:
 8008a6c:	4770      	bx	lr

08008a6e <memchr>:
 8008a6e:	b2c9      	uxtb	r1, r1
 8008a70:	4603      	mov	r3, r0
 8008a72:	4402      	add	r2, r0
 8008a74:	b510      	push	{r4, lr}
 8008a76:	4293      	cmp	r3, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	d101      	bne.n	8008a80 <memchr+0x12>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e003      	b.n	8008a88 <memchr+0x1a>
 8008a80:	7804      	ldrb	r4, [r0, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	428c      	cmp	r4, r1
 8008a86:	d1f6      	bne.n	8008a76 <memchr+0x8>
 8008a88:	bd10      	pop	{r4, pc}

08008a8a <memcpy>:
 8008a8a:	440a      	add	r2, r1
 8008a8c:	1e43      	subs	r3, r0, #1
 8008a8e:	4291      	cmp	r1, r2
 8008a90:	d100      	bne.n	8008a94 <memcpy+0xa>
 8008a92:	4770      	bx	lr
 8008a94:	b510      	push	{r4, lr}
 8008a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa0:	d1f9      	bne.n	8008a96 <memcpy+0xc>
 8008aa2:	bd10      	pop	{r4, pc}

08008aa4 <nanf>:
 8008aa4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008aac <nanf+0x8>
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	7fc00000 	.word	0x7fc00000

08008ab0 <quorem>:
 8008ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	6903      	ldr	r3, [r0, #16]
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	690c      	ldr	r4, [r1, #16]
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	f2c0 8083 	blt.w	8008bc6 <quorem+0x116>
 8008ac0:	3c01      	subs	r4, #1
 8008ac2:	f100 0514 	add.w	r5, r0, #20
 8008ac6:	f101 0814 	add.w	r8, r1, #20
 8008aca:	00a3      	lsls	r3, r4, #2
 8008acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ae8:	d331      	bcc.n	8008b4e <quorem+0x9e>
 8008aea:	f04f 0a00 	mov.w	sl, #0
 8008aee:	46c4      	mov	ip, r8
 8008af0:	46ae      	mov	lr, r5
 8008af2:	46d3      	mov	fp, sl
 8008af4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008af8:	b298      	uxth	r0, r3
 8008afa:	45e1      	cmp	r9, ip
 8008afc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008b00:	fb06 a000 	mla	r0, r6, r0, sl
 8008b04:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008b08:	b280      	uxth	r0, r0
 8008b0a:	fb06 2303 	mla	r3, r6, r3, r2
 8008b0e:	f8de 2000 	ldr.w	r2, [lr]
 8008b12:	b292      	uxth	r2, r2
 8008b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b18:	eba2 0200 	sub.w	r2, r2, r0
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f8de 0000 	ldr.w	r0, [lr]
 8008b22:	445a      	add	r2, fp
 8008b24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b36:	f84e 2b04 	str.w	r2, [lr], #4
 8008b3a:	d2db      	bcs.n	8008af4 <quorem+0x44>
 8008b3c:	9b00      	ldr	r3, [sp, #0]
 8008b3e:	58eb      	ldr	r3, [r5, r3]
 8008b40:	b92b      	cbnz	r3, 8008b4e <quorem+0x9e>
 8008b42:	9b01      	ldr	r3, [sp, #4]
 8008b44:	3b04      	subs	r3, #4
 8008b46:	429d      	cmp	r5, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	d330      	bcc.n	8008bae <quorem+0xfe>
 8008b4c:	613c      	str	r4, [r7, #16]
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f001 f91a 	bl	8009d88 <__mcmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	db26      	blt.n	8008ba6 <quorem+0xf6>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b60:	f8d1 c000 	ldr.w	ip, [r1]
 8008b64:	fa1f fe82 	uxth.w	lr, r2
 8008b68:	45c1      	cmp	r9, r8
 8008b6a:	fa1f f38c 	uxth.w	r3, ip
 8008b6e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008b72:	eba3 030e 	sub.w	r3, r3, lr
 8008b76:	4403      	add	r3, r0
 8008b78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b8a:	f841 3b04 	str.w	r3, [r1], #4
 8008b8e:	d2e5      	bcs.n	8008b5c <quorem+0xac>
 8008b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b98:	b922      	cbnz	r2, 8008ba4 <quorem+0xf4>
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	d30b      	bcc.n	8008bba <quorem+0x10a>
 8008ba2:	613c      	str	r4, [r7, #16]
 8008ba4:	3601      	adds	r6, #1
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	b003      	add	sp, #12
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	d1ca      	bne.n	8008b4c <quorem+0x9c>
 8008bb6:	3c01      	subs	r4, #1
 8008bb8:	e7c5      	b.n	8008b46 <quorem+0x96>
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	d1ef      	bne.n	8008ba2 <quorem+0xf2>
 8008bc2:	3c01      	subs	r4, #1
 8008bc4:	e7ea      	b.n	8008b9c <quorem+0xec>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e7ee      	b.n	8008ba8 <quorem+0xf8>
 8008bca:	0000      	movs	r0, r0
 8008bcc:	0000      	movs	r0, r0
	...

08008bd0 <_dtoa_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	69c7      	ldr	r7, [r0, #28]
 8008bd6:	b097      	sub	sp, #92	@ 0x5c
 8008bd8:	4681      	mov	r9, r0
 8008bda:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008bdc:	9107      	str	r1, [sp, #28]
 8008bde:	920c      	str	r2, [sp, #48]	@ 0x30
 8008be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008be2:	ec55 4b10 	vmov	r4, r5, d0
 8008be6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008bea:	b97f      	cbnz	r7, 8008c0c <_dtoa_r+0x3c>
 8008bec:	2010      	movs	r0, #16
 8008bee:	f7fe fe63 	bl	80078b8 <malloc>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008bf8:	b920      	cbnz	r0, 8008c04 <_dtoa_r+0x34>
 8008bfa:	4ba9      	ldr	r3, [pc, #676]	@ (8008ea0 <_dtoa_r+0x2d0>)
 8008bfc:	21ef      	movs	r1, #239	@ 0xef
 8008bfe:	48a9      	ldr	r0, [pc, #676]	@ (8008ea4 <_dtoa_r+0x2d4>)
 8008c00:	f002 fb76 	bl	800b2f0 <__assert_func>
 8008c04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c08:	6007      	str	r7, [r0, #0]
 8008c0a:	60c7      	str	r7, [r0, #12]
 8008c0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c10:	6819      	ldr	r1, [r3, #0]
 8008c12:	b159      	cbz	r1, 8008c2c <_dtoa_r+0x5c>
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	4648      	mov	r0, r9
 8008c1a:	4093      	lsls	r3, r2
 8008c1c:	604a      	str	r2, [r1, #4]
 8008c1e:	608b      	str	r3, [r1, #8]
 8008c20:	f000 fe32 	bl	8009888 <_Bfree>
 8008c24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	1e2b      	subs	r3, r5, #0
 8008c2e:	bfb7      	itett	lt
 8008c30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c34:	2300      	movge	r3, #0
 8008c36:	2201      	movlt	r2, #1
 8008c38:	9305      	strlt	r3, [sp, #20]
 8008c3a:	bfa8      	it	ge
 8008c3c:	6033      	strge	r3, [r6, #0]
 8008c3e:	9f05      	ldr	r7, [sp, #20]
 8008c40:	4b99      	ldr	r3, [pc, #612]	@ (8008ea8 <_dtoa_r+0x2d8>)
 8008c42:	bfb8      	it	lt
 8008c44:	6032      	strlt	r2, [r6, #0]
 8008c46:	43bb      	bics	r3, r7
 8008c48:	d112      	bne.n	8008c70 <_dtoa_r+0xa0>
 8008c4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c56:	4323      	orrs	r3, r4
 8008c58:	f000 855a 	beq.w	8009710 <_dtoa_r+0xb40>
 8008c5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c5e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008ebc <_dtoa_r+0x2ec>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 855c 	beq.w	8009720 <_dtoa_r+0xb50>
 8008c68:	f10a 0303 	add.w	r3, sl, #3
 8008c6c:	f000 bd56 	b.w	800971c <_dtoa_r+0xb4c>
 8008c70:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	ec51 0b17 	vmov	r0, r1, d7
 8008c7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008c80:	f7f7 ff26 	bl	8000ad0 <__aeabi_dcmpeq>
 8008c84:	4680      	mov	r8, r0
 8008c86:	b158      	cbz	r0, 8008ca0 <_dtoa_r+0xd0>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c90:	b113      	cbz	r3, 8008c98 <_dtoa_r+0xc8>
 8008c92:	4b86      	ldr	r3, [pc, #536]	@ (8008eac <_dtoa_r+0x2dc>)
 8008c94:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008ec0 <_dtoa_r+0x2f0>
 8008c9c:	f000 bd40 	b.w	8009720 <_dtoa_r+0xb50>
 8008ca0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ca4:	aa14      	add	r2, sp, #80	@ 0x50
 8008ca6:	a915      	add	r1, sp, #84	@ 0x54
 8008ca8:	4648      	mov	r0, r9
 8008caa:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008cae:	f001 f993 	bl	8009fd8 <__d2b>
 8008cb2:	9002      	str	r0, [sp, #8]
 8008cb4:	2e00      	cmp	r6, #0
 8008cb6:	d076      	beq.n	8008da6 <_dtoa_r+0x1d6>
 8008cb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008cbe:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008cca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cce:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4b76      	ldr	r3, [pc, #472]	@ (8008eb0 <_dtoa_r+0x2e0>)
 8008cd8:	f7f7 fada 	bl	8000290 <__aeabi_dsub>
 8008cdc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e88 <_dtoa_r+0x2b8>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fc8d 	bl	8000600 <__aeabi_dmul>
 8008ce6:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e90 <_dtoa_r+0x2c0>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	f7f7 fad2 	bl	8000294 <__adddf3>
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7f7 fc19 	bl	800052c <__aeabi_i2d>
 8008cfa:	a367      	add	r3, pc, #412	@ (adr r3, 8008e98 <_dtoa_r+0x2c8>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fc7e 	bl	8000600 <__aeabi_dmul>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7f7 fac2 	bl	8000294 <__adddf3>
 8008d10:	4604      	mov	r4, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	f7f7 ff24 	bl	8000b60 <__aeabi_d2iz>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fedf 	bl	8000ae4 <__aeabi_dcmplt>
 8008d26:	b140      	cbz	r0, 8008d3a <_dtoa_r+0x16a>
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7f7 fbff 	bl	800052c <__aeabi_i2d>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	462b      	mov	r3, r5
 8008d32:	f7f7 fecd 	bl	8000ad0 <__aeabi_dcmpeq>
 8008d36:	b900      	cbnz	r0, 8008d3a <_dtoa_r+0x16a>
 8008d38:	3f01      	subs	r7, #1
 8008d3a:	2f16      	cmp	r7, #22
 8008d3c:	d852      	bhi.n	8008de4 <_dtoa_r+0x214>
 8008d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8008eb4 <_dtoa_r+0x2e4>)
 8008d40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 feca 	bl	8000ae4 <__aeabi_dcmplt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d049      	beq.n	8008de8 <_dtoa_r+0x218>
 8008d54:	3f01      	subs	r7, #1
 8008d56:	2300      	movs	r3, #0
 8008d58:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d5c:	1b9b      	subs	r3, r3, r6
 8008d5e:	1e5a      	subs	r2, r3, #1
 8008d60:	bf4c      	ite	mi
 8008d62:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d66:	2300      	movpl	r3, #0
 8008d68:	9206      	str	r2, [sp, #24]
 8008d6a:	bf45      	ittet	mi
 8008d6c:	9300      	strmi	r3, [sp, #0]
 8008d6e:	2300      	movmi	r3, #0
 8008d70:	9300      	strpl	r3, [sp, #0]
 8008d72:	9306      	strmi	r3, [sp, #24]
 8008d74:	2f00      	cmp	r7, #0
 8008d76:	db39      	blt.n	8008dec <_dtoa_r+0x21c>
 8008d78:	9b06      	ldr	r3, [sp, #24]
 8008d7a:	970d      	str	r7, [sp, #52]	@ 0x34
 8008d7c:	443b      	add	r3, r7
 8008d7e:	9306      	str	r3, [sp, #24]
 8008d80:	2300      	movs	r3, #0
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d863      	bhi.n	8008e52 <_dtoa_r+0x282>
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	bfc5      	ittet	gt
 8008d8e:	3b04      	subgt	r3, #4
 8008d90:	2400      	movgt	r4, #0
 8008d92:	2401      	movle	r4, #1
 8008d94:	9307      	strgt	r3, [sp, #28]
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	3b02      	subs	r3, #2
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d865      	bhi.n	8008e6a <_dtoa_r+0x29a>
 8008d9e:	e8df f003 	tbb	[pc, r3]
 8008da2:	5654      	.short	0x5654
 8008da4:	2d39      	.short	0x2d39
 8008da6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008daa:	441e      	add	r6, r3
 8008dac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	bfc9      	itett	gt
 8008db4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008db8:	f1c3 0320 	rsble	r3, r3, #32
 8008dbc:	409f      	lslgt	r7, r3
 8008dbe:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008dc2:	bfd8      	it	le
 8008dc4:	fa04 f003 	lslle.w	r0, r4, r3
 8008dc8:	f106 36ff 	add.w	r6, r6, #4294967295
 8008dcc:	bfc4      	itt	gt
 8008dce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008dd2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008dd6:	f7f7 fb99 	bl	800050c <__aeabi_ui2d>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008de0:	9212      	str	r2, [sp, #72]	@ 0x48
 8008de2:	e776      	b.n	8008cd2 <_dtoa_r+0x102>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e7b7      	b.n	8008d58 <_dtoa_r+0x188>
 8008de8:	9010      	str	r0, [sp, #64]	@ 0x40
 8008dea:	e7b6      	b.n	8008d5a <_dtoa_r+0x18a>
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	1bdb      	subs	r3, r3, r7
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	427b      	negs	r3, r7
 8008df4:	9308      	str	r3, [sp, #32]
 8008df6:	2300      	movs	r3, #0
 8008df8:	930d      	str	r3, [sp, #52]	@ 0x34
 8008dfa:	e7c3      	b.n	8008d84 <_dtoa_r+0x1b4>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e02:	eb07 0b03 	add.w	fp, r7, r3
 8008e06:	f10b 0301 	add.w	r3, fp, #1
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	bfb8      	it	lt
 8008e10:	2301      	movlt	r3, #1
 8008e12:	e006      	b.n	8008e22 <_dtoa_r+0x252>
 8008e14:	2301      	movs	r3, #1
 8008e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dd28      	ble.n	8008e70 <_dtoa_r+0x2a0>
 8008e1e:	469b      	mov	fp, r3
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008e26:	2100      	movs	r1, #0
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f102 0514 	add.w	r5, r2, #20
 8008e2e:	429d      	cmp	r5, r3
 8008e30:	d926      	bls.n	8008e80 <_dtoa_r+0x2b0>
 8008e32:	6041      	str	r1, [r0, #4]
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 fce7 	bl	8009808 <_Balloc>
 8008e3a:	4682      	mov	sl, r0
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d141      	bne.n	8008ec4 <_dtoa_r+0x2f4>
 8008e40:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb8 <_dtoa_r+0x2e8>)
 8008e42:	4602      	mov	r2, r0
 8008e44:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e48:	e6d9      	b.n	8008bfe <_dtoa_r+0x2e>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e7e3      	b.n	8008e16 <_dtoa_r+0x246>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e7d5      	b.n	8008dfe <_dtoa_r+0x22e>
 8008e52:	2401      	movs	r4, #1
 8008e54:	2300      	movs	r3, #0
 8008e56:	9409      	str	r4, [sp, #36]	@ 0x24
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	f04f 3bff 	mov.w	fp, #4294967295
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2312      	movs	r3, #18
 8008e62:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e66:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e68:	e7db      	b.n	8008e22 <_dtoa_r+0x252>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e6e:	e7f4      	b.n	8008e5a <_dtoa_r+0x28a>
 8008e70:	f04f 0b01 	mov.w	fp, #1
 8008e74:	465b      	mov	r3, fp
 8008e76:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e7a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008e7e:	e7d0      	b.n	8008e22 <_dtoa_r+0x252>
 8008e80:	3101      	adds	r1, #1
 8008e82:	0052      	lsls	r2, r2, #1
 8008e84:	e7d1      	b.n	8008e2a <_dtoa_r+0x25a>
 8008e86:	bf00      	nop
 8008e88:	636f4361 	.word	0x636f4361
 8008e8c:	3fd287a7 	.word	0x3fd287a7
 8008e90:	8b60c8b3 	.word	0x8b60c8b3
 8008e94:	3fc68a28 	.word	0x3fc68a28
 8008e98:	509f79fb 	.word	0x509f79fb
 8008e9c:	3fd34413 	.word	0x3fd34413
 8008ea0:	0800c43e 	.word	0x0800c43e
 8008ea4:	0800c455 	.word	0x0800c455
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	0800c409 	.word	0x0800c409
 8008eb0:	3ff80000 	.word	0x3ff80000
 8008eb4:	0800c608 	.word	0x0800c608
 8008eb8:	0800c4ad 	.word	0x0800c4ad
 8008ebc:	0800c43a 	.word	0x0800c43a
 8008ec0:	0800c408 	.word	0x0800c408
 8008ec4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ec8:	6018      	str	r0, [r3, #0]
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	2b0e      	cmp	r3, #14
 8008ece:	f200 80a1 	bhi.w	8009014 <_dtoa_r+0x444>
 8008ed2:	2c00      	cmp	r4, #0
 8008ed4:	f000 809e 	beq.w	8009014 <_dtoa_r+0x444>
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	dd33      	ble.n	8008f44 <_dtoa_r+0x374>
 8008edc:	f007 020f 	and.w	r2, r7, #15
 8008ee0:	4b9b      	ldr	r3, [pc, #620]	@ (8009150 <_dtoa_r+0x580>)
 8008ee2:	05f8      	lsls	r0, r7, #23
 8008ee4:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eec:	ed93 7b00 	vldr	d7, [r3]
 8008ef0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ef4:	d516      	bpl.n	8008f24 <_dtoa_r+0x354>
 8008ef6:	4b97      	ldr	r3, [pc, #604]	@ (8009154 <_dtoa_r+0x584>)
 8008ef8:	f004 040f 	and.w	r4, r4, #15
 8008efc:	2603      	movs	r6, #3
 8008efe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f06:	f7f7 fca5 	bl	8000854 <__aeabi_ddiv>
 8008f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f0e:	4d91      	ldr	r5, [pc, #580]	@ (8009154 <_dtoa_r+0x584>)
 8008f10:	b954      	cbnz	r4, 8008f28 <_dtoa_r+0x358>
 8008f12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1a:	f7f7 fc9b 	bl	8000854 <__aeabi_ddiv>
 8008f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f22:	e028      	b.n	8008f76 <_dtoa_r+0x3a6>
 8008f24:	2602      	movs	r6, #2
 8008f26:	e7f2      	b.n	8008f0e <_dtoa_r+0x33e>
 8008f28:	07e1      	lsls	r1, r4, #31
 8008f2a:	d508      	bpl.n	8008f3e <_dtoa_r+0x36e>
 8008f2c:	3601      	adds	r6, #1
 8008f2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f36:	f7f7 fb63 	bl	8000600 <__aeabi_dmul>
 8008f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f3e:	1064      	asrs	r4, r4, #1
 8008f40:	3508      	adds	r5, #8
 8008f42:	e7e5      	b.n	8008f10 <_dtoa_r+0x340>
 8008f44:	f000 80af 	beq.w	80090a6 <_dtoa_r+0x4d6>
 8008f48:	427c      	negs	r4, r7
 8008f4a:	4b81      	ldr	r3, [pc, #516]	@ (8009150 <_dtoa_r+0x580>)
 8008f4c:	4d81      	ldr	r5, [pc, #516]	@ (8009154 <_dtoa_r+0x584>)
 8008f4e:	2602      	movs	r6, #2
 8008f50:	f004 020f 	and.w	r2, r4, #15
 8008f54:	1124      	asrs	r4, r4, #4
 8008f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 fb4d 	bl	8000600 <__aeabi_dmul>
 8008f66:	2300      	movs	r3, #0
 8008f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	f040 808f 	bne.w	8009090 <_dtoa_r+0x4c0>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1d3      	bne.n	8008f1e <_dtoa_r+0x34e>
 8008f76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8094 	beq.w	80090aa <_dtoa_r+0x4da>
 8008f82:	2200      	movs	r2, #0
 8008f84:	4b74      	ldr	r3, [pc, #464]	@ (8009158 <_dtoa_r+0x588>)
 8008f86:	4620      	mov	r0, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fdab 	bl	8000ae4 <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f000 808b 	beq.w	80090aa <_dtoa_r+0x4da>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8087 	beq.w	80090aa <_dtoa_r+0x4da>
 8008f9c:	f1bb 0f00 	cmp.w	fp, #0
 8008fa0:	dd34      	ble.n	800900c <_dtoa_r+0x43c>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f107 38ff 	add.w	r8, r7, #4294967295
 8008fa8:	3601      	adds	r6, #1
 8008faa:	465c      	mov	r4, fp
 8008fac:	2200      	movs	r2, #0
 8008fae:	4b6b      	ldr	r3, [pc, #428]	@ (800915c <_dtoa_r+0x58c>)
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fb25 	bl	8000600 <__aeabi_dmul>
 8008fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7f7 fab6 	bl	800052c <__aeabi_i2d>
 8008fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc4:	f7f7 fb1c 	bl	8000600 <__aeabi_dmul>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4b65      	ldr	r3, [pc, #404]	@ (8009160 <_dtoa_r+0x590>)
 8008fcc:	f7f7 f962 	bl	8000294 <__adddf3>
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d16a      	bne.n	80090b0 <_dtoa_r+0x4e0>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4b61      	ldr	r3, [pc, #388]	@ (8009164 <_dtoa_r+0x594>)
 8008fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fe2:	f7f7 f955 	bl	8000290 <__aeabi_dsub>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4633      	mov	r3, r6
 8008ff2:	f7f7 fd95 	bl	8000b20 <__aeabi_dcmpgt>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f040 8298 	bne.w	800952c <_dtoa_r+0x95c>
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009006:	f7f7 fd6d 	bl	8000ae4 <__aeabi_dcmplt>
 800900a:	bb38      	cbnz	r0, 800905c <_dtoa_r+0x48c>
 800900c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009010:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009014:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009016:	2b00      	cmp	r3, #0
 8009018:	f2c0 8157 	blt.w	80092ca <_dtoa_r+0x6fa>
 800901c:	2f0e      	cmp	r7, #14
 800901e:	f300 8154 	bgt.w	80092ca <_dtoa_r+0x6fa>
 8009022:	4b4b      	ldr	r3, [pc, #300]	@ (8009150 <_dtoa_r+0x580>)
 8009024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009028:	ed93 7b00 	vldr	d7, [r3]
 800902c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800902e:	2b00      	cmp	r3, #0
 8009030:	ed8d 7b00 	vstr	d7, [sp]
 8009034:	f280 80e5 	bge.w	8009202 <_dtoa_r+0x632>
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f300 80e1 	bgt.w	8009202 <_dtoa_r+0x632>
 8009040:	d10c      	bne.n	800905c <_dtoa_r+0x48c>
 8009042:	2200      	movs	r2, #0
 8009044:	4b47      	ldr	r3, [pc, #284]	@ (8009164 <_dtoa_r+0x594>)
 8009046:	ec51 0b17 	vmov	r0, r1, d7
 800904a:	f7f7 fad9 	bl	8000600 <__aeabi_dmul>
 800904e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009052:	f7f7 fd5b 	bl	8000b0c <__aeabi_dcmpge>
 8009056:	2800      	cmp	r0, #0
 8009058:	f000 8266 	beq.w	8009528 <_dtoa_r+0x958>
 800905c:	2400      	movs	r4, #0
 800905e:	4625      	mov	r5, r4
 8009060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009062:	4656      	mov	r6, sl
 8009064:	ea6f 0803 	mvn.w	r8, r3
 8009068:	2700      	movs	r7, #0
 800906a:	4621      	mov	r1, r4
 800906c:	4648      	mov	r0, r9
 800906e:	f000 fc0b 	bl	8009888 <_Bfree>
 8009072:	2d00      	cmp	r5, #0
 8009074:	f000 80bd 	beq.w	80091f2 <_dtoa_r+0x622>
 8009078:	b12f      	cbz	r7, 8009086 <_dtoa_r+0x4b6>
 800907a:	42af      	cmp	r7, r5
 800907c:	d003      	beq.n	8009086 <_dtoa_r+0x4b6>
 800907e:	4639      	mov	r1, r7
 8009080:	4648      	mov	r0, r9
 8009082:	f000 fc01 	bl	8009888 <_Bfree>
 8009086:	4629      	mov	r1, r5
 8009088:	4648      	mov	r0, r9
 800908a:	f000 fbfd 	bl	8009888 <_Bfree>
 800908e:	e0b0      	b.n	80091f2 <_dtoa_r+0x622>
 8009090:	07e2      	lsls	r2, r4, #31
 8009092:	d505      	bpl.n	80090a0 <_dtoa_r+0x4d0>
 8009094:	3601      	adds	r6, #1
 8009096:	e9d5 2300 	ldrd	r2, r3, [r5]
 800909a:	f7f7 fab1 	bl	8000600 <__aeabi_dmul>
 800909e:	2301      	movs	r3, #1
 80090a0:	1064      	asrs	r4, r4, #1
 80090a2:	3508      	adds	r5, #8
 80090a4:	e762      	b.n	8008f6c <_dtoa_r+0x39c>
 80090a6:	2602      	movs	r6, #2
 80090a8:	e765      	b.n	8008f76 <_dtoa_r+0x3a6>
 80090aa:	46b8      	mov	r8, r7
 80090ac:	9c03      	ldr	r4, [sp, #12]
 80090ae:	e784      	b.n	8008fba <_dtoa_r+0x3ea>
 80090b0:	4b27      	ldr	r3, [pc, #156]	@ (8009150 <_dtoa_r+0x580>)
 80090b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090b8:	4454      	add	r4, sl
 80090ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090be:	2900      	cmp	r1, #0
 80090c0:	d054      	beq.n	800916c <_dtoa_r+0x59c>
 80090c2:	2000      	movs	r0, #0
 80090c4:	4928      	ldr	r1, [pc, #160]	@ (8009168 <_dtoa_r+0x598>)
 80090c6:	f7f7 fbc5 	bl	8000854 <__aeabi_ddiv>
 80090ca:	4633      	mov	r3, r6
 80090cc:	4656      	mov	r6, sl
 80090ce:	462a      	mov	r2, r5
 80090d0:	f7f7 f8de 	bl	8000290 <__aeabi_dsub>
 80090d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090dc:	f7f7 fd40 	bl	8000b60 <__aeabi_d2iz>
 80090e0:	4605      	mov	r5, r0
 80090e2:	f7f7 fa23 	bl	800052c <__aeabi_i2d>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	3530      	adds	r5, #48	@ 0x30
 80090ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f0:	f7f7 f8ce 	bl	8000290 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	f806 5b01 	strb.w	r5, [r6], #1
 80090fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009100:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009104:	f7f7 fcee 	bl	8000ae4 <__aeabi_dcmplt>
 8009108:	2800      	cmp	r0, #0
 800910a:	d172      	bne.n	80091f2 <_dtoa_r+0x622>
 800910c:	2000      	movs	r0, #0
 800910e:	4912      	ldr	r1, [pc, #72]	@ (8009158 <_dtoa_r+0x588>)
 8009110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009114:	f7f7 f8bc 	bl	8000290 <__aeabi_dsub>
 8009118:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800911c:	f7f7 fce2 	bl	8000ae4 <__aeabi_dcmplt>
 8009120:	2800      	cmp	r0, #0
 8009122:	f040 80b4 	bne.w	800928e <_dtoa_r+0x6be>
 8009126:	42a6      	cmp	r6, r4
 8009128:	f43f af70 	beq.w	800900c <_dtoa_r+0x43c>
 800912c:	2200      	movs	r2, #0
 800912e:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <_dtoa_r+0x58c>)
 8009130:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009134:	f7f7 fa64 	bl	8000600 <__aeabi_dmul>
 8009138:	2200      	movs	r2, #0
 800913a:	4b08      	ldr	r3, [pc, #32]	@ (800915c <_dtoa_r+0x58c>)
 800913c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009144:	f7f7 fa5c 	bl	8000600 <__aeabi_dmul>
 8009148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800914c:	e7c4      	b.n	80090d8 <_dtoa_r+0x508>
 800914e:	bf00      	nop
 8009150:	0800c608 	.word	0x0800c608
 8009154:	0800c5e0 	.word	0x0800c5e0
 8009158:	3ff00000 	.word	0x3ff00000
 800915c:	40240000 	.word	0x40240000
 8009160:	401c0000 	.word	0x401c0000
 8009164:	40140000 	.word	0x40140000
 8009168:	3fe00000 	.word	0x3fe00000
 800916c:	4631      	mov	r1, r6
 800916e:	4656      	mov	r6, sl
 8009170:	4628      	mov	r0, r5
 8009172:	f7f7 fa45 	bl	8000600 <__aeabi_dmul>
 8009176:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009178:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800917c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009180:	f7f7 fcee 	bl	8000b60 <__aeabi_d2iz>
 8009184:	4605      	mov	r5, r0
 8009186:	f7f7 f9d1 	bl	800052c <__aeabi_i2d>
 800918a:	4602      	mov	r2, r0
 800918c:	3530      	adds	r5, #48	@ 0x30
 800918e:	460b      	mov	r3, r1
 8009190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009194:	f7f7 f87c 	bl	8000290 <__aeabi_dsub>
 8009198:	f806 5b01 	strb.w	r5, [r6], #1
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	d124      	bne.n	80091f6 <_dtoa_r+0x626>
 80091ac:	4baf      	ldr	r3, [pc, #700]	@ (800946c <_dtoa_r+0x89c>)
 80091ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80091b2:	f7f7 f86f 	bl	8000294 <__adddf3>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091be:	f7f7 fcaf 	bl	8000b20 <__aeabi_dcmpgt>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d163      	bne.n	800928e <_dtoa_r+0x6be>
 80091c6:	2000      	movs	r0, #0
 80091c8:	49a8      	ldr	r1, [pc, #672]	@ (800946c <_dtoa_r+0x89c>)
 80091ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091ce:	f7f7 f85f 	bl	8000290 <__aeabi_dsub>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091da:	f7f7 fc83 	bl	8000ae4 <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f43f af14 	beq.w	800900c <_dtoa_r+0x43c>
 80091e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80091e6:	1e73      	subs	r3, r6, #1
 80091e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091ee:	2b30      	cmp	r3, #48	@ 0x30
 80091f0:	d0f8      	beq.n	80091e4 <_dtoa_r+0x614>
 80091f2:	4647      	mov	r7, r8
 80091f4:	e03b      	b.n	800926e <_dtoa_r+0x69e>
 80091f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009470 <_dtoa_r+0x8a0>)
 80091f8:	f7f7 fa02 	bl	8000600 <__aeabi_dmul>
 80091fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009200:	e7bc      	b.n	800917c <_dtoa_r+0x5ac>
 8009202:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009206:	4656      	mov	r6, sl
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009210:	f7f7 fb20 	bl	8000854 <__aeabi_ddiv>
 8009214:	f7f7 fca4 	bl	8000b60 <__aeabi_d2iz>
 8009218:	4680      	mov	r8, r0
 800921a:	f7f7 f987 	bl	800052c <__aeabi_i2d>
 800921e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009222:	f7f7 f9ed 	bl	8000600 <__aeabi_dmul>
 8009226:	4602      	mov	r2, r0
 8009228:	4620      	mov	r0, r4
 800922a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800922e:	460b      	mov	r3, r1
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f82d 	bl	8000290 <__aeabi_dsub>
 8009236:	9d03      	ldr	r5, [sp, #12]
 8009238:	f806 4b01 	strb.w	r4, [r6], #1
 800923c:	eba6 040a 	sub.w	r4, r6, sl
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	42a5      	cmp	r5, r4
 8009246:	d133      	bne.n	80092b0 <_dtoa_r+0x6e0>
 8009248:	f7f7 f824 	bl	8000294 <__adddf3>
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
 8009250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009254:	f7f7 fc64 	bl	8000b20 <__aeabi_dcmpgt>
 8009258:	b9c0      	cbnz	r0, 800928c <_dtoa_r+0x6bc>
 800925a:	4620      	mov	r0, r4
 800925c:	4629      	mov	r1, r5
 800925e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009262:	f7f7 fc35 	bl	8000ad0 <__aeabi_dcmpeq>
 8009266:	b110      	cbz	r0, 800926e <_dtoa_r+0x69e>
 8009268:	f018 0f01 	tst.w	r8, #1
 800926c:	d10e      	bne.n	800928c <_dtoa_r+0x6bc>
 800926e:	9902      	ldr	r1, [sp, #8]
 8009270:	4648      	mov	r0, r9
 8009272:	f000 fb09 	bl	8009888 <_Bfree>
 8009276:	2300      	movs	r3, #0
 8009278:	3701      	adds	r7, #1
 800927a:	7033      	strb	r3, [r6, #0]
 800927c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800927e:	601f      	str	r7, [r3, #0]
 8009280:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 824c 	beq.w	8009720 <_dtoa_r+0xb50>
 8009288:	601e      	str	r6, [r3, #0]
 800928a:	e249      	b.n	8009720 <_dtoa_r+0xb50>
 800928c:	46b8      	mov	r8, r7
 800928e:	4633      	mov	r3, r6
 8009290:	461e      	mov	r6, r3
 8009292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009296:	2a39      	cmp	r2, #57	@ 0x39
 8009298:	d106      	bne.n	80092a8 <_dtoa_r+0x6d8>
 800929a:	459a      	cmp	sl, r3
 800929c:	d1f8      	bne.n	8009290 <_dtoa_r+0x6c0>
 800929e:	2230      	movs	r2, #48	@ 0x30
 80092a0:	f108 0801 	add.w	r8, r8, #1
 80092a4:	f88a 2000 	strb.w	r2, [sl]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	3201      	adds	r2, #1
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e7a0      	b.n	80091f2 <_dtoa_r+0x622>
 80092b0:	2200      	movs	r2, #0
 80092b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009470 <_dtoa_r+0x8a0>)
 80092b4:	f7f7 f9a4 	bl	8000600 <__aeabi_dmul>
 80092b8:	2200      	movs	r2, #0
 80092ba:	2300      	movs	r3, #0
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	f7f7 fc06 	bl	8000ad0 <__aeabi_dcmpeq>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d09f      	beq.n	8009208 <_dtoa_r+0x638>
 80092c8:	e7d1      	b.n	800926e <_dtoa_r+0x69e>
 80092ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092cc:	2a00      	cmp	r2, #0
 80092ce:	f000 80ea 	beq.w	80094a6 <_dtoa_r+0x8d6>
 80092d2:	9a07      	ldr	r2, [sp, #28]
 80092d4:	2a01      	cmp	r2, #1
 80092d6:	f300 80cd 	bgt.w	8009474 <_dtoa_r+0x8a4>
 80092da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092dc:	2a00      	cmp	r2, #0
 80092de:	f000 80c1 	beq.w	8009464 <_dtoa_r+0x894>
 80092e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80092e6:	9c08      	ldr	r4, [sp, #32]
 80092e8:	9e00      	ldr	r6, [sp, #0]
 80092ea:	9a00      	ldr	r2, [sp, #0]
 80092ec:	2101      	movs	r1, #1
 80092ee:	4648      	mov	r0, r9
 80092f0:	441a      	add	r2, r3
 80092f2:	9200      	str	r2, [sp, #0]
 80092f4:	9a06      	ldr	r2, [sp, #24]
 80092f6:	441a      	add	r2, r3
 80092f8:	9206      	str	r2, [sp, #24]
 80092fa:	f000 fbc5 	bl	8009a88 <__i2b>
 80092fe:	4605      	mov	r5, r0
 8009300:	b166      	cbz	r6, 800931c <_dtoa_r+0x74c>
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd09      	ble.n	800931c <_dtoa_r+0x74c>
 8009308:	42b3      	cmp	r3, r6
 800930a:	9a00      	ldr	r2, [sp, #0]
 800930c:	bfa8      	it	ge
 800930e:	4633      	movge	r3, r6
 8009310:	1ad2      	subs	r2, r2, r3
 8009312:	1af6      	subs	r6, r6, r3
 8009314:	9200      	str	r2, [sp, #0]
 8009316:	9a06      	ldr	r2, [sp, #24]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	9306      	str	r3, [sp, #24]
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	b30b      	cbz	r3, 8009364 <_dtoa_r+0x794>
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80c6 	beq.w	80094b4 <_dtoa_r+0x8e4>
 8009328:	2c00      	cmp	r4, #0
 800932a:	f000 80c0 	beq.w	80094ae <_dtoa_r+0x8de>
 800932e:	4629      	mov	r1, r5
 8009330:	4622      	mov	r2, r4
 8009332:	4648      	mov	r0, r9
 8009334:	f000 fc62 	bl	8009bfc <__pow5mult>
 8009338:	9a02      	ldr	r2, [sp, #8]
 800933a:	4601      	mov	r1, r0
 800933c:	4605      	mov	r5, r0
 800933e:	4648      	mov	r0, r9
 8009340:	f000 fbb8 	bl	8009ab4 <__multiply>
 8009344:	9902      	ldr	r1, [sp, #8]
 8009346:	4680      	mov	r8, r0
 8009348:	4648      	mov	r0, r9
 800934a:	f000 fa9d 	bl	8009888 <_Bfree>
 800934e:	9b08      	ldr	r3, [sp, #32]
 8009350:	1b1b      	subs	r3, r3, r4
 8009352:	9308      	str	r3, [sp, #32]
 8009354:	f000 80b1 	beq.w	80094ba <_dtoa_r+0x8ea>
 8009358:	9a08      	ldr	r2, [sp, #32]
 800935a:	4641      	mov	r1, r8
 800935c:	4648      	mov	r0, r9
 800935e:	f000 fc4d 	bl	8009bfc <__pow5mult>
 8009362:	9002      	str	r0, [sp, #8]
 8009364:	2101      	movs	r1, #1
 8009366:	4648      	mov	r0, r9
 8009368:	f000 fb8e 	bl	8009a88 <__i2b>
 800936c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800936e:	4604      	mov	r4, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 81d9 	beq.w	8009728 <_dtoa_r+0xb58>
 8009376:	461a      	mov	r2, r3
 8009378:	4601      	mov	r1, r0
 800937a:	4648      	mov	r0, r9
 800937c:	f000 fc3e 	bl	8009bfc <__pow5mult>
 8009380:	9b07      	ldr	r3, [sp, #28]
 8009382:	4604      	mov	r4, r0
 8009384:	2b01      	cmp	r3, #1
 8009386:	f300 809f 	bgt.w	80094c8 <_dtoa_r+0x8f8>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8097 	bne.w	80094c0 <_dtoa_r+0x8f0>
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 8093 	bne.w	80094c4 <_dtoa_r+0x8f4>
 800939e:	9b05      	ldr	r3, [sp, #20]
 80093a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093a4:	0d1b      	lsrs	r3, r3, #20
 80093a6:	051b      	lsls	r3, r3, #20
 80093a8:	b133      	cbz	r3, 80093b8 <_dtoa_r+0x7e8>
 80093aa:	9b00      	ldr	r3, [sp, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	9b06      	ldr	r3, [sp, #24]
 80093b2:	3301      	adds	r3, #1
 80093b4:	9306      	str	r3, [sp, #24]
 80093b6:	2301      	movs	r3, #1
 80093b8:	9308      	str	r3, [sp, #32]
 80093ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 81b9 	beq.w	8009734 <_dtoa_r+0xb64>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093c8:	6918      	ldr	r0, [r3, #16]
 80093ca:	f000 fb11 	bl	80099f0 <__hi0bits>
 80093ce:	f1c0 0020 	rsb	r0, r0, #32
 80093d2:	9b06      	ldr	r3, [sp, #24]
 80093d4:	4418      	add	r0, r3
 80093d6:	f010 001f 	ands.w	r0, r0, #31
 80093da:	f000 8082 	beq.w	80094e2 <_dtoa_r+0x912>
 80093de:	f1c0 0320 	rsb	r3, r0, #32
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	dd73      	ble.n	80094ce <_dtoa_r+0x8fe>
 80093e6:	f1c0 001c 	rsb	r0, r0, #28
 80093ea:	9b00      	ldr	r3, [sp, #0]
 80093ec:	4403      	add	r3, r0
 80093ee:	4406      	add	r6, r0
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	9b06      	ldr	r3, [sp, #24]
 80093f4:	4403      	add	r3, r0
 80093f6:	9306      	str	r3, [sp, #24]
 80093f8:	9b00      	ldr	r3, [sp, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd05      	ble.n	800940a <_dtoa_r+0x83a>
 80093fe:	461a      	mov	r2, r3
 8009400:	9902      	ldr	r1, [sp, #8]
 8009402:	4648      	mov	r0, r9
 8009404:	f000 fc54 	bl	8009cb0 <__lshift>
 8009408:	9002      	str	r0, [sp, #8]
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd05      	ble.n	800941c <_dtoa_r+0x84c>
 8009410:	4621      	mov	r1, r4
 8009412:	461a      	mov	r2, r3
 8009414:	4648      	mov	r0, r9
 8009416:	f000 fc4b 	bl	8009cb0 <__lshift>
 800941a:	4604      	mov	r4, r0
 800941c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	d061      	beq.n	80094e6 <_dtoa_r+0x916>
 8009422:	4621      	mov	r1, r4
 8009424:	9802      	ldr	r0, [sp, #8]
 8009426:	f000 fcaf 	bl	8009d88 <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	da5b      	bge.n	80094e6 <_dtoa_r+0x916>
 800942e:	2300      	movs	r3, #0
 8009430:	220a      	movs	r2, #10
 8009432:	9902      	ldr	r1, [sp, #8]
 8009434:	4648      	mov	r0, r9
 8009436:	f000 fa49 	bl	80098cc <__multadd>
 800943a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009440:	9002      	str	r0, [sp, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 8178 	beq.w	8009738 <_dtoa_r+0xb68>
 8009448:	4629      	mov	r1, r5
 800944a:	2300      	movs	r3, #0
 800944c:	220a      	movs	r2, #10
 800944e:	4648      	mov	r0, r9
 8009450:	f000 fa3c 	bl	80098cc <__multadd>
 8009454:	f1bb 0f00 	cmp.w	fp, #0
 8009458:	4605      	mov	r5, r0
 800945a:	dc6f      	bgt.n	800953c <_dtoa_r+0x96c>
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	2b02      	cmp	r3, #2
 8009460:	dc49      	bgt.n	80094f6 <_dtoa_r+0x926>
 8009462:	e06b      	b.n	800953c <_dtoa_r+0x96c>
 8009464:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800946a:	e73c      	b.n	80092e6 <_dtoa_r+0x716>
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	40240000 	.word	0x40240000
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	1e5c      	subs	r4, r3, #1
 8009478:	9b08      	ldr	r3, [sp, #32]
 800947a:	42a3      	cmp	r3, r4
 800947c:	db09      	blt.n	8009492 <_dtoa_r+0x8c2>
 800947e:	1b1c      	subs	r4, r3, r4
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f6bf af30 	bge.w	80092e8 <_dtoa_r+0x718>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	1a9e      	subs	r6, r3, r2
 800948e:	2300      	movs	r3, #0
 8009490:	e72b      	b.n	80092ea <_dtoa_r+0x71a>
 8009492:	9b08      	ldr	r3, [sp, #32]
 8009494:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009496:	1ae3      	subs	r3, r4, r3
 8009498:	9408      	str	r4, [sp, #32]
 800949a:	9e00      	ldr	r6, [sp, #0]
 800949c:	2400      	movs	r4, #0
 800949e:	441a      	add	r2, r3
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	920d      	str	r2, [sp, #52]	@ 0x34
 80094a4:	e721      	b.n	80092ea <_dtoa_r+0x71a>
 80094a6:	9c08      	ldr	r4, [sp, #32]
 80094a8:	9e00      	ldr	r6, [sp, #0]
 80094aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80094ac:	e728      	b.n	8009300 <_dtoa_r+0x730>
 80094ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80094b2:	e751      	b.n	8009358 <_dtoa_r+0x788>
 80094b4:	9a08      	ldr	r2, [sp, #32]
 80094b6:	9902      	ldr	r1, [sp, #8]
 80094b8:	e750      	b.n	800935c <_dtoa_r+0x78c>
 80094ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80094be:	e751      	b.n	8009364 <_dtoa_r+0x794>
 80094c0:	2300      	movs	r3, #0
 80094c2:	e779      	b.n	80093b8 <_dtoa_r+0x7e8>
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	e777      	b.n	80093b8 <_dtoa_r+0x7e8>
 80094c8:	2300      	movs	r3, #0
 80094ca:	9308      	str	r3, [sp, #32]
 80094cc:	e779      	b.n	80093c2 <_dtoa_r+0x7f2>
 80094ce:	d093      	beq.n	80093f8 <_dtoa_r+0x828>
 80094d0:	331c      	adds	r3, #28
 80094d2:	9a00      	ldr	r2, [sp, #0]
 80094d4:	441a      	add	r2, r3
 80094d6:	441e      	add	r6, r3
 80094d8:	9200      	str	r2, [sp, #0]
 80094da:	9a06      	ldr	r2, [sp, #24]
 80094dc:	441a      	add	r2, r3
 80094de:	9206      	str	r2, [sp, #24]
 80094e0:	e78a      	b.n	80093f8 <_dtoa_r+0x828>
 80094e2:	4603      	mov	r3, r0
 80094e4:	e7f4      	b.n	80094d0 <_dtoa_r+0x900>
 80094e6:	9b03      	ldr	r3, [sp, #12]
 80094e8:	46b8      	mov	r8, r7
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dc20      	bgt.n	8009530 <_dtoa_r+0x960>
 80094ee:	469b      	mov	fp, r3
 80094f0:	9b07      	ldr	r3, [sp, #28]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	dd1e      	ble.n	8009534 <_dtoa_r+0x964>
 80094f6:	f1bb 0f00 	cmp.w	fp, #0
 80094fa:	f47f adb1 	bne.w	8009060 <_dtoa_r+0x490>
 80094fe:	4621      	mov	r1, r4
 8009500:	465b      	mov	r3, fp
 8009502:	2205      	movs	r2, #5
 8009504:	4648      	mov	r0, r9
 8009506:	f000 f9e1 	bl	80098cc <__multadd>
 800950a:	4601      	mov	r1, r0
 800950c:	4604      	mov	r4, r0
 800950e:	9802      	ldr	r0, [sp, #8]
 8009510:	f000 fc3a 	bl	8009d88 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	f77f ada3 	ble.w	8009060 <_dtoa_r+0x490>
 800951a:	4656      	mov	r6, sl
 800951c:	2331      	movs	r3, #49	@ 0x31
 800951e:	f108 0801 	add.w	r8, r8, #1
 8009522:	f806 3b01 	strb.w	r3, [r6], #1
 8009526:	e59f      	b.n	8009068 <_dtoa_r+0x498>
 8009528:	46b8      	mov	r8, r7
 800952a:	9c03      	ldr	r4, [sp, #12]
 800952c:	4625      	mov	r5, r4
 800952e:	e7f4      	b.n	800951a <_dtoa_r+0x94a>
 8009530:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8102 	beq.w	8009740 <_dtoa_r+0xb70>
 800953c:	2e00      	cmp	r6, #0
 800953e:	dd05      	ble.n	800954c <_dtoa_r+0x97c>
 8009540:	4629      	mov	r1, r5
 8009542:	4632      	mov	r2, r6
 8009544:	4648      	mov	r0, r9
 8009546:	f000 fbb3 	bl	8009cb0 <__lshift>
 800954a:	4605      	mov	r5, r0
 800954c:	9b08      	ldr	r3, [sp, #32]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d05c      	beq.n	800960c <_dtoa_r+0xa3c>
 8009552:	6869      	ldr	r1, [r5, #4]
 8009554:	4648      	mov	r0, r9
 8009556:	f000 f957 	bl	8009808 <_Balloc>
 800955a:	4606      	mov	r6, r0
 800955c:	b928      	cbnz	r0, 800956a <_dtoa_r+0x99a>
 800955e:	4b83      	ldr	r3, [pc, #524]	@ (800976c <_dtoa_r+0xb9c>)
 8009560:	4602      	mov	r2, r0
 8009562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009566:	f7ff bb4a 	b.w	8008bfe <_dtoa_r+0x2e>
 800956a:	692a      	ldr	r2, [r5, #16]
 800956c:	f105 010c 	add.w	r1, r5, #12
 8009570:	300c      	adds	r0, #12
 8009572:	3202      	adds	r2, #2
 8009574:	0092      	lsls	r2, r2, #2
 8009576:	f7ff fa88 	bl	8008a8a <memcpy>
 800957a:	2201      	movs	r2, #1
 800957c:	4631      	mov	r1, r6
 800957e:	4648      	mov	r0, r9
 8009580:	f000 fb96 	bl	8009cb0 <__lshift>
 8009584:	f10a 0301 	add.w	r3, sl, #1
 8009588:	462f      	mov	r7, r5
 800958a:	4605      	mov	r5, r0
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	eb0a 030b 	add.w	r3, sl, fp
 8009592:	9308      	str	r3, [sp, #32]
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	9306      	str	r3, [sp, #24]
 800959c:	9b00      	ldr	r3, [sp, #0]
 800959e:	4621      	mov	r1, r4
 80095a0:	9802      	ldr	r0, [sp, #8]
 80095a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80095a6:	f7ff fa83 	bl	8008ab0 <quorem>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4639      	mov	r1, r7
 80095ae:	9003      	str	r0, [sp, #12]
 80095b0:	3330      	adds	r3, #48	@ 0x30
 80095b2:	9802      	ldr	r0, [sp, #8]
 80095b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b6:	f000 fbe7 	bl	8009d88 <__mcmp>
 80095ba:	462a      	mov	r2, r5
 80095bc:	9004      	str	r0, [sp, #16]
 80095be:	4621      	mov	r1, r4
 80095c0:	4648      	mov	r0, r9
 80095c2:	f000 fbfd 	bl	8009dc0 <__mdiff>
 80095c6:	68c2      	ldr	r2, [r0, #12]
 80095c8:	4606      	mov	r6, r0
 80095ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095cc:	bb02      	cbnz	r2, 8009610 <_dtoa_r+0xa40>
 80095ce:	4601      	mov	r1, r0
 80095d0:	9802      	ldr	r0, [sp, #8]
 80095d2:	f000 fbd9 	bl	8009d88 <__mcmp>
 80095d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d8:	4602      	mov	r2, r0
 80095da:	4631      	mov	r1, r6
 80095dc:	4648      	mov	r0, r9
 80095de:	920c      	str	r2, [sp, #48]	@ 0x30
 80095e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e2:	f000 f951 	bl	8009888 <_Bfree>
 80095e6:	9b07      	ldr	r3, [sp, #28]
 80095e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095ea:	9e00      	ldr	r6, [sp, #0]
 80095ec:	ea42 0103 	orr.w	r1, r2, r3
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	4319      	orrs	r1, r3
 80095f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f6:	d10d      	bne.n	8009614 <_dtoa_r+0xa44>
 80095f8:	2b39      	cmp	r3, #57	@ 0x39
 80095fa:	d027      	beq.n	800964c <_dtoa_r+0xa7c>
 80095fc:	9a04      	ldr	r2, [sp, #16]
 80095fe:	2a00      	cmp	r2, #0
 8009600:	dd01      	ble.n	8009606 <_dtoa_r+0xa36>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	3331      	adds	r3, #49	@ 0x31
 8009606:	f88b 3000 	strb.w	r3, [fp]
 800960a:	e52e      	b.n	800906a <_dtoa_r+0x49a>
 800960c:	4628      	mov	r0, r5
 800960e:	e7b9      	b.n	8009584 <_dtoa_r+0x9b4>
 8009610:	2201      	movs	r2, #1
 8009612:	e7e2      	b.n	80095da <_dtoa_r+0xa0a>
 8009614:	9904      	ldr	r1, [sp, #16]
 8009616:	2900      	cmp	r1, #0
 8009618:	db04      	blt.n	8009624 <_dtoa_r+0xa54>
 800961a:	9807      	ldr	r0, [sp, #28]
 800961c:	4301      	orrs	r1, r0
 800961e:	9806      	ldr	r0, [sp, #24]
 8009620:	4301      	orrs	r1, r0
 8009622:	d120      	bne.n	8009666 <_dtoa_r+0xa96>
 8009624:	2a00      	cmp	r2, #0
 8009626:	ddee      	ble.n	8009606 <_dtoa_r+0xa36>
 8009628:	2201      	movs	r2, #1
 800962a:	9902      	ldr	r1, [sp, #8]
 800962c:	4648      	mov	r0, r9
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	f000 fb3e 	bl	8009cb0 <__lshift>
 8009634:	4621      	mov	r1, r4
 8009636:	9002      	str	r0, [sp, #8]
 8009638:	f000 fba6 	bl	8009d88 <__mcmp>
 800963c:	2800      	cmp	r0, #0
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	dc02      	bgt.n	8009648 <_dtoa_r+0xa78>
 8009642:	d1e0      	bne.n	8009606 <_dtoa_r+0xa36>
 8009644:	07da      	lsls	r2, r3, #31
 8009646:	d5de      	bpl.n	8009606 <_dtoa_r+0xa36>
 8009648:	2b39      	cmp	r3, #57	@ 0x39
 800964a:	d1da      	bne.n	8009602 <_dtoa_r+0xa32>
 800964c:	2339      	movs	r3, #57	@ 0x39
 800964e:	f88b 3000 	strb.w	r3, [fp]
 8009652:	4633      	mov	r3, r6
 8009654:	461e      	mov	r6, r3
 8009656:	3b01      	subs	r3, #1
 8009658:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800965c:	2a39      	cmp	r2, #57	@ 0x39
 800965e:	d04f      	beq.n	8009700 <_dtoa_r+0xb30>
 8009660:	3201      	adds	r2, #1
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e501      	b.n	800906a <_dtoa_r+0x49a>
 8009666:	2a00      	cmp	r2, #0
 8009668:	dd03      	ble.n	8009672 <_dtoa_r+0xaa2>
 800966a:	2b39      	cmp	r3, #57	@ 0x39
 800966c:	d0ee      	beq.n	800964c <_dtoa_r+0xa7c>
 800966e:	3301      	adds	r3, #1
 8009670:	e7c9      	b.n	8009606 <_dtoa_r+0xa36>
 8009672:	9a00      	ldr	r2, [sp, #0]
 8009674:	9908      	ldr	r1, [sp, #32]
 8009676:	f802 3c01 	strb.w	r3, [r2, #-1]
 800967a:	428a      	cmp	r2, r1
 800967c:	d029      	beq.n	80096d2 <_dtoa_r+0xb02>
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	9902      	ldr	r1, [sp, #8]
 8009684:	4648      	mov	r0, r9
 8009686:	f000 f921 	bl	80098cc <__multadd>
 800968a:	42af      	cmp	r7, r5
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	f04f 0300 	mov.w	r3, #0
 8009692:	f04f 020a 	mov.w	r2, #10
 8009696:	4639      	mov	r1, r7
 8009698:	4648      	mov	r0, r9
 800969a:	d107      	bne.n	80096ac <_dtoa_r+0xadc>
 800969c:	f000 f916 	bl	80098cc <__multadd>
 80096a0:	4607      	mov	r7, r0
 80096a2:	4605      	mov	r5, r0
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	e777      	b.n	800959c <_dtoa_r+0x9cc>
 80096ac:	f000 f90e 	bl	80098cc <__multadd>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4607      	mov	r7, r0
 80096b4:	2300      	movs	r3, #0
 80096b6:	220a      	movs	r2, #10
 80096b8:	4648      	mov	r0, r9
 80096ba:	f000 f907 	bl	80098cc <__multadd>
 80096be:	4605      	mov	r5, r0
 80096c0:	e7f0      	b.n	80096a4 <_dtoa_r+0xad4>
 80096c2:	f1bb 0f00 	cmp.w	fp, #0
 80096c6:	f04f 0700 	mov.w	r7, #0
 80096ca:	bfcc      	ite	gt
 80096cc:	465e      	movgt	r6, fp
 80096ce:	2601      	movle	r6, #1
 80096d0:	4456      	add	r6, sl
 80096d2:	2201      	movs	r2, #1
 80096d4:	9902      	ldr	r1, [sp, #8]
 80096d6:	4648      	mov	r0, r9
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	f000 fae9 	bl	8009cb0 <__lshift>
 80096de:	4621      	mov	r1, r4
 80096e0:	9002      	str	r0, [sp, #8]
 80096e2:	f000 fb51 	bl	8009d88 <__mcmp>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	dcb3      	bgt.n	8009652 <_dtoa_r+0xa82>
 80096ea:	d102      	bne.n	80096f2 <_dtoa_r+0xb22>
 80096ec:	9b00      	ldr	r3, [sp, #0]
 80096ee:	07db      	lsls	r3, r3, #31
 80096f0:	d4af      	bmi.n	8009652 <_dtoa_r+0xa82>
 80096f2:	4633      	mov	r3, r6
 80096f4:	461e      	mov	r6, r3
 80096f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096fa:	2a30      	cmp	r2, #48	@ 0x30
 80096fc:	d0fa      	beq.n	80096f4 <_dtoa_r+0xb24>
 80096fe:	e4b4      	b.n	800906a <_dtoa_r+0x49a>
 8009700:	459a      	cmp	sl, r3
 8009702:	d1a7      	bne.n	8009654 <_dtoa_r+0xa84>
 8009704:	2331      	movs	r3, #49	@ 0x31
 8009706:	f108 0801 	add.w	r8, r8, #1
 800970a:	f88a 3000 	strb.w	r3, [sl]
 800970e:	e4ac      	b.n	800906a <_dtoa_r+0x49a>
 8009710:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009712:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009770 <_dtoa_r+0xba0>
 8009716:	b11b      	cbz	r3, 8009720 <_dtoa_r+0xb50>
 8009718:	f10a 0308 	add.w	r3, sl, #8
 800971c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	4650      	mov	r0, sl
 8009722:	b017      	add	sp, #92	@ 0x5c
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	2b01      	cmp	r3, #1
 800972c:	f77f ae2d 	ble.w	800938a <_dtoa_r+0x7ba>
 8009730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009732:	9308      	str	r3, [sp, #32]
 8009734:	2001      	movs	r0, #1
 8009736:	e64c      	b.n	80093d2 <_dtoa_r+0x802>
 8009738:	f1bb 0f00 	cmp.w	fp, #0
 800973c:	f77f aed8 	ble.w	80094f0 <_dtoa_r+0x920>
 8009740:	4656      	mov	r6, sl
 8009742:	4621      	mov	r1, r4
 8009744:	9802      	ldr	r0, [sp, #8]
 8009746:	f7ff f9b3 	bl	8008ab0 <quorem>
 800974a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800974e:	f806 3b01 	strb.w	r3, [r6], #1
 8009752:	eba6 020a 	sub.w	r2, r6, sl
 8009756:	4593      	cmp	fp, r2
 8009758:	ddb3      	ble.n	80096c2 <_dtoa_r+0xaf2>
 800975a:	2300      	movs	r3, #0
 800975c:	220a      	movs	r2, #10
 800975e:	9902      	ldr	r1, [sp, #8]
 8009760:	4648      	mov	r0, r9
 8009762:	f000 f8b3 	bl	80098cc <__multadd>
 8009766:	9002      	str	r0, [sp, #8]
 8009768:	e7eb      	b.n	8009742 <_dtoa_r+0xb72>
 800976a:	bf00      	nop
 800976c:	0800c4ad 	.word	0x0800c4ad
 8009770:	0800c431 	.word	0x0800c431

08009774 <_free_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4605      	mov	r5, r0
 8009778:	2900      	cmp	r1, #0
 800977a:	d041      	beq.n	8009800 <_free_r+0x8c>
 800977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009780:	1f0c      	subs	r4, r1, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfb8      	it	lt
 8009786:	18e4      	addlt	r4, r4, r3
 8009788:	f7fe f948 	bl	8007a1c <__malloc_lock>
 800978c:	4a1d      	ldr	r2, [pc, #116]	@ (8009804 <_free_r+0x90>)
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	b933      	cbnz	r3, 80097a0 <_free_r+0x2c>
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	6014      	str	r4, [r2, #0]
 8009796:	4628      	mov	r0, r5
 8009798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800979c:	f7fe b944 	b.w	8007a28 <__malloc_unlock>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d908      	bls.n	80097b6 <_free_r+0x42>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	1821      	adds	r1, r4, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf01      	itttt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	1809      	addeq	r1, r1, r0
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	e7ed      	b.n	8009792 <_free_r+0x1e>
 80097b6:	461a      	mov	r2, r3
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b10b      	cbz	r3, 80097c0 <_free_r+0x4c>
 80097bc:	42a3      	cmp	r3, r4
 80097be:	d9fa      	bls.n	80097b6 <_free_r+0x42>
 80097c0:	6811      	ldr	r1, [r2, #0]
 80097c2:	1850      	adds	r0, r2, r1
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d10b      	bne.n	80097e0 <_free_r+0x6c>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	4401      	add	r1, r0
 80097cc:	1850      	adds	r0, r2, r1
 80097ce:	6011      	str	r1, [r2, #0]
 80097d0:	4283      	cmp	r3, r0
 80097d2:	d1e0      	bne.n	8009796 <_free_r+0x22>
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4408      	add	r0, r1
 80097da:	6053      	str	r3, [r2, #4]
 80097dc:	6010      	str	r0, [r2, #0]
 80097de:	e7da      	b.n	8009796 <_free_r+0x22>
 80097e0:	d902      	bls.n	80097e8 <_free_r+0x74>
 80097e2:	230c      	movs	r3, #12
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	e7d6      	b.n	8009796 <_free_r+0x22>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	1821      	adds	r1, r4, r0
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf02      	ittt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	1809      	addeq	r1, r1, r0
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	bf08      	it	eq
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	6054      	str	r4, [r2, #4]
 80097fe:	e7ca      	b.n	8009796 <_free_r+0x22>
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	200006c4 	.word	0x200006c4

08009808 <_Balloc>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	69c6      	ldr	r6, [r0, #28]
 800980c:	4604      	mov	r4, r0
 800980e:	460d      	mov	r5, r1
 8009810:	b976      	cbnz	r6, 8009830 <_Balloc+0x28>
 8009812:	2010      	movs	r0, #16
 8009814:	f7fe f850 	bl	80078b8 <malloc>
 8009818:	4602      	mov	r2, r0
 800981a:	61e0      	str	r0, [r4, #28]
 800981c:	b920      	cbnz	r0, 8009828 <_Balloc+0x20>
 800981e:	4b18      	ldr	r3, [pc, #96]	@ (8009880 <_Balloc+0x78>)
 8009820:	216b      	movs	r1, #107	@ 0x6b
 8009822:	4818      	ldr	r0, [pc, #96]	@ (8009884 <_Balloc+0x7c>)
 8009824:	f001 fd64 	bl	800b2f0 <__assert_func>
 8009828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800982c:	6006      	str	r6, [r0, #0]
 800982e:	60c6      	str	r6, [r0, #12]
 8009830:	69e6      	ldr	r6, [r4, #28]
 8009832:	68f3      	ldr	r3, [r6, #12]
 8009834:	b183      	cbz	r3, 8009858 <_Balloc+0x50>
 8009836:	69e3      	ldr	r3, [r4, #28]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800983e:	b9b8      	cbnz	r0, 8009870 <_Balloc+0x68>
 8009840:	2101      	movs	r1, #1
 8009842:	4620      	mov	r0, r4
 8009844:	fa01 f605 	lsl.w	r6, r1, r5
 8009848:	1d72      	adds	r2, r6, #5
 800984a:	0092      	lsls	r2, r2, #2
 800984c:	f001 fd6e 	bl	800b32c <_calloc_r>
 8009850:	b160      	cbz	r0, 800986c <_Balloc+0x64>
 8009852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009856:	e00e      	b.n	8009876 <_Balloc+0x6e>
 8009858:	2221      	movs	r2, #33	@ 0x21
 800985a:	2104      	movs	r1, #4
 800985c:	4620      	mov	r0, r4
 800985e:	f001 fd65 	bl	800b32c <_calloc_r>
 8009862:	69e3      	ldr	r3, [r4, #28]
 8009864:	60f0      	str	r0, [r6, #12]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e4      	bne.n	8009836 <_Balloc+0x2e>
 800986c:	2000      	movs	r0, #0
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	6802      	ldr	r2, [r0, #0]
 8009872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009876:	2300      	movs	r3, #0
 8009878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800987c:	e7f7      	b.n	800986e <_Balloc+0x66>
 800987e:	bf00      	nop
 8009880:	0800c43e 	.word	0x0800c43e
 8009884:	0800c4be 	.word	0x0800c4be

08009888 <_Bfree>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	69c6      	ldr	r6, [r0, #28]
 800988c:	4605      	mov	r5, r0
 800988e:	460c      	mov	r4, r1
 8009890:	b976      	cbnz	r6, 80098b0 <_Bfree+0x28>
 8009892:	2010      	movs	r0, #16
 8009894:	f7fe f810 	bl	80078b8 <malloc>
 8009898:	4602      	mov	r2, r0
 800989a:	61e8      	str	r0, [r5, #28]
 800989c:	b920      	cbnz	r0, 80098a8 <_Bfree+0x20>
 800989e:	4b09      	ldr	r3, [pc, #36]	@ (80098c4 <_Bfree+0x3c>)
 80098a0:	218f      	movs	r1, #143	@ 0x8f
 80098a2:	4809      	ldr	r0, [pc, #36]	@ (80098c8 <_Bfree+0x40>)
 80098a4:	f001 fd24 	bl	800b2f0 <__assert_func>
 80098a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098ac:	6006      	str	r6, [r0, #0]
 80098ae:	60c6      	str	r6, [r0, #12]
 80098b0:	b13c      	cbz	r4, 80098c2 <_Bfree+0x3a>
 80098b2:	69eb      	ldr	r3, [r5, #28]
 80098b4:	6862      	ldr	r2, [r4, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098bc:	6021      	str	r1, [r4, #0]
 80098be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	0800c43e 	.word	0x0800c43e
 80098c8:	0800c4be 	.word	0x0800c4be

080098cc <__multadd>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	f101 0c14 	add.w	ip, r1, #20
 80098d4:	4607      	mov	r7, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	461e      	mov	r6, r3
 80098da:	690d      	ldr	r5, [r1, #16]
 80098dc:	2000      	movs	r0, #0
 80098de:	f8dc 3000 	ldr.w	r3, [ip]
 80098e2:	3001      	adds	r0, #1
 80098e4:	b299      	uxth	r1, r3
 80098e6:	4285      	cmp	r5, r0
 80098e8:	fb02 6101 	mla	r1, r2, r1, r6
 80098ec:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80098f4:	b289      	uxth	r1, r1
 80098f6:	fb02 3306 	mla	r3, r2, r6, r3
 80098fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009902:	f84c 1b04 	str.w	r1, [ip], #4
 8009906:	dcea      	bgt.n	80098de <__multadd+0x12>
 8009908:	b30e      	cbz	r6, 800994e <__multadd+0x82>
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	42ab      	cmp	r3, r5
 800990e:	dc19      	bgt.n	8009944 <__multadd+0x78>
 8009910:	6861      	ldr	r1, [r4, #4]
 8009912:	4638      	mov	r0, r7
 8009914:	3101      	adds	r1, #1
 8009916:	f7ff ff77 	bl	8009808 <_Balloc>
 800991a:	4680      	mov	r8, r0
 800991c:	b928      	cbnz	r0, 800992a <__multadd+0x5e>
 800991e:	4602      	mov	r2, r0
 8009920:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <__multadd+0x88>)
 8009922:	21ba      	movs	r1, #186	@ 0xba
 8009924:	480c      	ldr	r0, [pc, #48]	@ (8009958 <__multadd+0x8c>)
 8009926:	f001 fce3 	bl	800b2f0 <__assert_func>
 800992a:	6922      	ldr	r2, [r4, #16]
 800992c:	f104 010c 	add.w	r1, r4, #12
 8009930:	300c      	adds	r0, #12
 8009932:	3202      	adds	r2, #2
 8009934:	0092      	lsls	r2, r2, #2
 8009936:	f7ff f8a8 	bl	8008a8a <memcpy>
 800993a:	4621      	mov	r1, r4
 800993c:	4644      	mov	r4, r8
 800993e:	4638      	mov	r0, r7
 8009940:	f7ff ffa2 	bl	8009888 <_Bfree>
 8009944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009948:	3501      	adds	r5, #1
 800994a:	615e      	str	r6, [r3, #20]
 800994c:	6125      	str	r5, [r4, #16]
 800994e:	4620      	mov	r0, r4
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	0800c4ad 	.word	0x0800c4ad
 8009958:	0800c4be 	.word	0x0800c4be

0800995c <__s2b>:
 800995c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009960:	4615      	mov	r5, r2
 8009962:	461f      	mov	r7, r3
 8009964:	2209      	movs	r2, #9
 8009966:	3308      	adds	r3, #8
 8009968:	460c      	mov	r4, r1
 800996a:	4606      	mov	r6, r0
 800996c:	2100      	movs	r1, #0
 800996e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009972:	2201      	movs	r2, #1
 8009974:	429a      	cmp	r2, r3
 8009976:	db09      	blt.n	800998c <__s2b+0x30>
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff ff45 	bl	8009808 <_Balloc>
 800997e:	b940      	cbnz	r0, 8009992 <__s2b+0x36>
 8009980:	4602      	mov	r2, r0
 8009982:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <__s2b+0x8c>)
 8009984:	21d3      	movs	r1, #211	@ 0xd3
 8009986:	4819      	ldr	r0, [pc, #100]	@ (80099ec <__s2b+0x90>)
 8009988:	f001 fcb2 	bl	800b2f0 <__assert_func>
 800998c:	0052      	lsls	r2, r2, #1
 800998e:	3101      	adds	r1, #1
 8009990:	e7f0      	b.n	8009974 <__s2b+0x18>
 8009992:	9b08      	ldr	r3, [sp, #32]
 8009994:	2d09      	cmp	r5, #9
 8009996:	6143      	str	r3, [r0, #20]
 8009998:	f04f 0301 	mov.w	r3, #1
 800999c:	6103      	str	r3, [r0, #16]
 800999e:	dd16      	ble.n	80099ce <__s2b+0x72>
 80099a0:	f104 0909 	add.w	r9, r4, #9
 80099a4:	442c      	add	r4, r5
 80099a6:	46c8      	mov	r8, r9
 80099a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099ac:	4601      	mov	r1, r0
 80099ae:	220a      	movs	r2, #10
 80099b0:	4630      	mov	r0, r6
 80099b2:	3b30      	subs	r3, #48	@ 0x30
 80099b4:	f7ff ff8a 	bl	80098cc <__multadd>
 80099b8:	45a0      	cmp	r8, r4
 80099ba:	d1f5      	bne.n	80099a8 <__s2b+0x4c>
 80099bc:	f1a5 0408 	sub.w	r4, r5, #8
 80099c0:	444c      	add	r4, r9
 80099c2:	1b2d      	subs	r5, r5, r4
 80099c4:	1963      	adds	r3, r4, r5
 80099c6:	42bb      	cmp	r3, r7
 80099c8:	db04      	blt.n	80099d4 <__s2b+0x78>
 80099ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ce:	340a      	adds	r4, #10
 80099d0:	2509      	movs	r5, #9
 80099d2:	e7f6      	b.n	80099c2 <__s2b+0x66>
 80099d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099d8:	4601      	mov	r1, r0
 80099da:	220a      	movs	r2, #10
 80099dc:	4630      	mov	r0, r6
 80099de:	3b30      	subs	r3, #48	@ 0x30
 80099e0:	f7ff ff74 	bl	80098cc <__multadd>
 80099e4:	e7ee      	b.n	80099c4 <__s2b+0x68>
 80099e6:	bf00      	nop
 80099e8:	0800c4ad 	.word	0x0800c4ad
 80099ec:	0800c4be 	.word	0x0800c4be

080099f0 <__hi0bits>:
 80099f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099f4:	4603      	mov	r3, r0
 80099f6:	bf36      	itet	cc
 80099f8:	0403      	lslcc	r3, r0, #16
 80099fa:	2000      	movcs	r0, #0
 80099fc:	2010      	movcc	r0, #16
 80099fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a02:	bf3c      	itt	cc
 8009a04:	021b      	lslcc	r3, r3, #8
 8009a06:	3008      	addcc	r0, #8
 8009a08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a0c:	bf3c      	itt	cc
 8009a0e:	011b      	lslcc	r3, r3, #4
 8009a10:	3004      	addcc	r0, #4
 8009a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a16:	bf3c      	itt	cc
 8009a18:	009b      	lslcc	r3, r3, #2
 8009a1a:	3002      	addcc	r0, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db05      	blt.n	8009a2c <__hi0bits+0x3c>
 8009a20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a24:	f100 0001 	add.w	r0, r0, #1
 8009a28:	bf08      	it	eq
 8009a2a:	2020      	moveq	r0, #32
 8009a2c:	4770      	bx	lr

08009a2e <__lo0bits>:
 8009a2e:	6803      	ldr	r3, [r0, #0]
 8009a30:	4602      	mov	r2, r0
 8009a32:	f013 0007 	ands.w	r0, r3, #7
 8009a36:	d00b      	beq.n	8009a50 <__lo0bits+0x22>
 8009a38:	07d9      	lsls	r1, r3, #31
 8009a3a:	d421      	bmi.n	8009a80 <__lo0bits+0x52>
 8009a3c:	0798      	lsls	r0, r3, #30
 8009a3e:	bf47      	ittee	mi
 8009a40:	085b      	lsrmi	r3, r3, #1
 8009a42:	2001      	movmi	r0, #1
 8009a44:	089b      	lsrpl	r3, r3, #2
 8009a46:	2002      	movpl	r0, #2
 8009a48:	bf4c      	ite	mi
 8009a4a:	6013      	strmi	r3, [r2, #0]
 8009a4c:	6013      	strpl	r3, [r2, #0]
 8009a4e:	4770      	bx	lr
 8009a50:	b299      	uxth	r1, r3
 8009a52:	b909      	cbnz	r1, 8009a58 <__lo0bits+0x2a>
 8009a54:	0c1b      	lsrs	r3, r3, #16
 8009a56:	2010      	movs	r0, #16
 8009a58:	b2d9      	uxtb	r1, r3
 8009a5a:	b909      	cbnz	r1, 8009a60 <__lo0bits+0x32>
 8009a5c:	3008      	adds	r0, #8
 8009a5e:	0a1b      	lsrs	r3, r3, #8
 8009a60:	0719      	lsls	r1, r3, #28
 8009a62:	bf04      	itt	eq
 8009a64:	091b      	lsreq	r3, r3, #4
 8009a66:	3004      	addeq	r0, #4
 8009a68:	0799      	lsls	r1, r3, #30
 8009a6a:	bf04      	itt	eq
 8009a6c:	089b      	lsreq	r3, r3, #2
 8009a6e:	3002      	addeq	r0, #2
 8009a70:	07d9      	lsls	r1, r3, #31
 8009a72:	d403      	bmi.n	8009a7c <__lo0bits+0x4e>
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	f100 0001 	add.w	r0, r0, #1
 8009a7a:	d003      	beq.n	8009a84 <__lo0bits+0x56>
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	4770      	bx	lr
 8009a80:	2000      	movs	r0, #0
 8009a82:	4770      	bx	lr
 8009a84:	2020      	movs	r0, #32
 8009a86:	4770      	bx	lr

08009a88 <__i2b>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	f7ff febb 	bl	8009808 <_Balloc>
 8009a92:	4602      	mov	r2, r0
 8009a94:	b928      	cbnz	r0, 8009aa2 <__i2b+0x1a>
 8009a96:	4b05      	ldr	r3, [pc, #20]	@ (8009aac <__i2b+0x24>)
 8009a98:	f240 1145 	movw	r1, #325	@ 0x145
 8009a9c:	4804      	ldr	r0, [pc, #16]	@ (8009ab0 <__i2b+0x28>)
 8009a9e:	f001 fc27 	bl	800b2f0 <__assert_func>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	6144      	str	r4, [r0, #20]
 8009aa6:	6103      	str	r3, [r0, #16]
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800c4ad 	.word	0x0800c4ad
 8009ab0:	0800c4be 	.word	0x0800c4be

08009ab4 <__multiply>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	4617      	mov	r7, r2
 8009aba:	690a      	ldr	r2, [r1, #16]
 8009abc:	4689      	mov	r9, r1
 8009abe:	b085      	sub	sp, #20
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bfa2      	ittt	ge
 8009ac6:	463b      	movge	r3, r7
 8009ac8:	460f      	movge	r7, r1
 8009aca:	4699      	movge	r9, r3
 8009acc:	693d      	ldr	r5, [r7, #16]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	eb05 060a 	add.w	r6, r5, sl
 8009ada:	42b3      	cmp	r3, r6
 8009adc:	bfb8      	it	lt
 8009ade:	3101      	addlt	r1, #1
 8009ae0:	f7ff fe92 	bl	8009808 <_Balloc>
 8009ae4:	b930      	cbnz	r0, 8009af4 <__multiply+0x40>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	4b42      	ldr	r3, [pc, #264]	@ (8009bf4 <__multiply+0x140>)
 8009aea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009aee:	4842      	ldr	r0, [pc, #264]	@ (8009bf8 <__multiply+0x144>)
 8009af0:	f001 fbfe 	bl	800b2f0 <__assert_func>
 8009af4:	f100 0414 	add.w	r4, r0, #20
 8009af8:	2200      	movs	r2, #0
 8009afa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009afe:	4623      	mov	r3, r4
 8009b00:	4573      	cmp	r3, lr
 8009b02:	d320      	bcc.n	8009b46 <__multiply+0x92>
 8009b04:	f107 0814 	add.w	r8, r7, #20
 8009b08:	f109 0114 	add.w	r1, r9, #20
 8009b0c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b10:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	1beb      	subs	r3, r5, r7
 8009b18:	3715      	adds	r7, #21
 8009b1a:	3b15      	subs	r3, #21
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	3304      	adds	r3, #4
 8009b22:	42bd      	cmp	r5, r7
 8009b24:	bf38      	it	cc
 8009b26:	2304      	movcc	r3, #4
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	9103      	str	r1, [sp, #12]
 8009b2e:	428b      	cmp	r3, r1
 8009b30:	d80c      	bhi.n	8009b4c <__multiply+0x98>
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	dd03      	ble.n	8009b3e <__multiply+0x8a>
 8009b36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d057      	beq.n	8009bee <__multiply+0x13a>
 8009b3e:	6106      	str	r6, [r0, #16]
 8009b40:	b005      	add	sp, #20
 8009b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b46:	f843 2b04 	str.w	r2, [r3], #4
 8009b4a:	e7d9      	b.n	8009b00 <__multiply+0x4c>
 8009b4c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b50:	f1ba 0f00 	cmp.w	sl, #0
 8009b54:	d021      	beq.n	8009b9a <__multiply+0xe6>
 8009b56:	46c4      	mov	ip, r8
 8009b58:	46a1      	mov	r9, r4
 8009b5a:	2700      	movs	r7, #0
 8009b5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b60:	f8d9 3000 	ldr.w	r3, [r9]
 8009b64:	fa1f fb82 	uxth.w	fp, r2
 8009b68:	4565      	cmp	r5, ip
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009b70:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b74:	443b      	add	r3, r7
 8009b76:	f8d9 7000 	ldr.w	r7, [r9]
 8009b7a:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8009b7e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b90:	f849 3b04 	str.w	r3, [r9], #4
 8009b94:	d8e2      	bhi.n	8009b5c <__multiply+0xa8>
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	50e7      	str	r7, [r4, r3]
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	3104      	adds	r1, #4
 8009b9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	d020      	beq.n	8009bea <__multiply+0x136>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	4647      	mov	r7, r8
 8009bac:	46a4      	mov	ip, r4
 8009bae:	f04f 0a00 	mov.w	sl, #0
 8009bb2:	f8b7 b000 	ldrh.w	fp, [r7]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8009bc0:	4452      	add	r2, sl
 8009bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8009bca:	f857 3b04 	ldr.w	r3, [r7], #4
 8009bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bd2:	f8bc 3000 	ldrh.w	r3, [ip]
 8009bd6:	42bd      	cmp	r5, r7
 8009bd8:	fb09 330a 	mla	r3, r9, sl, r3
 8009bdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009be4:	d8e5      	bhi.n	8009bb2 <__multiply+0xfe>
 8009be6:	9a01      	ldr	r2, [sp, #4]
 8009be8:	50a3      	str	r3, [r4, r2]
 8009bea:	3404      	adds	r4, #4
 8009bec:	e79d      	b.n	8009b2a <__multiply+0x76>
 8009bee:	3e01      	subs	r6, #1
 8009bf0:	e79f      	b.n	8009b32 <__multiply+0x7e>
 8009bf2:	bf00      	nop
 8009bf4:	0800c4ad 	.word	0x0800c4ad
 8009bf8:	0800c4be 	.word	0x0800c4be

08009bfc <__pow5mult>:
 8009bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c00:	4615      	mov	r5, r2
 8009c02:	f012 0203 	ands.w	r2, r2, #3
 8009c06:	4607      	mov	r7, r0
 8009c08:	460e      	mov	r6, r1
 8009c0a:	d007      	beq.n	8009c1c <__pow5mult+0x20>
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	4c25      	ldr	r4, [pc, #148]	@ (8009ca4 <__pow5mult+0xa8>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c16:	f7ff fe59 	bl	80098cc <__multadd>
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	10ad      	asrs	r5, r5, #2
 8009c1e:	d03d      	beq.n	8009c9c <__pow5mult+0xa0>
 8009c20:	69fc      	ldr	r4, [r7, #28]
 8009c22:	b97c      	cbnz	r4, 8009c44 <__pow5mult+0x48>
 8009c24:	2010      	movs	r0, #16
 8009c26:	f7fd fe47 	bl	80078b8 <malloc>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	61f8      	str	r0, [r7, #28]
 8009c2e:	b928      	cbnz	r0, 8009c3c <__pow5mult+0x40>
 8009c30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca8 <__pow5mult+0xac>)
 8009c32:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c36:	481d      	ldr	r0, [pc, #116]	@ (8009cac <__pow5mult+0xb0>)
 8009c38:	f001 fb5a 	bl	800b2f0 <__assert_func>
 8009c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c40:	6004      	str	r4, [r0, #0]
 8009c42:	60c4      	str	r4, [r0, #12]
 8009c44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c4c:	b94c      	cbnz	r4, 8009c62 <__pow5mult+0x66>
 8009c4e:	f240 2171 	movw	r1, #625	@ 0x271
 8009c52:	4638      	mov	r0, r7
 8009c54:	f7ff ff18 	bl	8009a88 <__i2b>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	f04f 0900 	mov.w	r9, #0
 8009c66:	07eb      	lsls	r3, r5, #31
 8009c68:	d50a      	bpl.n	8009c80 <__pow5mult+0x84>
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	4638      	mov	r0, r7
 8009c70:	f7ff ff20 	bl	8009ab4 <__multiply>
 8009c74:	4680      	mov	r8, r0
 8009c76:	4631      	mov	r1, r6
 8009c78:	4638      	mov	r0, r7
 8009c7a:	4646      	mov	r6, r8
 8009c7c:	f7ff fe04 	bl	8009888 <_Bfree>
 8009c80:	106d      	asrs	r5, r5, #1
 8009c82:	d00b      	beq.n	8009c9c <__pow5mult+0xa0>
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	b938      	cbnz	r0, 8009c98 <__pow5mult+0x9c>
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff ff11 	bl	8009ab4 <__multiply>
 8009c92:	6020      	str	r0, [r4, #0]
 8009c94:	f8c0 9000 	str.w	r9, [r0]
 8009c98:	4604      	mov	r4, r0
 8009c9a:	e7e4      	b.n	8009c66 <__pow5mult+0x6a>
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0800c5d0 	.word	0x0800c5d0
 8009ca8:	0800c43e 	.word	0x0800c43e
 8009cac:	0800c4be 	.word	0x0800c4be

08009cb0 <__lshift>:
 8009cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	4691      	mov	r9, r2
 8009cba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6849      	ldr	r1, [r1, #4]
 8009cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	f108 0601 	add.w	r6, r8, #1
 8009ccc:	42b3      	cmp	r3, r6
 8009cce:	db0b      	blt.n	8009ce8 <__lshift+0x38>
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7ff fd99 	bl	8009808 <_Balloc>
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	b948      	cbnz	r0, 8009cee <__lshift+0x3e>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	4b28      	ldr	r3, [pc, #160]	@ (8009d80 <__lshift+0xd0>)
 8009cde:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ce2:	4828      	ldr	r0, [pc, #160]	@ (8009d84 <__lshift+0xd4>)
 8009ce4:	f001 fb04 	bl	800b2f0 <__assert_func>
 8009ce8:	3101      	adds	r1, #1
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	e7ee      	b.n	8009ccc <__lshift+0x1c>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f100 0114 	add.w	r1, r0, #20
 8009cf4:	f100 0210 	add.w	r2, r0, #16
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	4553      	cmp	r3, sl
 8009cfc:	db33      	blt.n	8009d66 <__lshift+0xb6>
 8009cfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d02:	f104 0314 	add.w	r3, r4, #20
 8009d06:	6920      	ldr	r0, [r4, #16]
 8009d08:	f019 091f 	ands.w	r9, r9, #31
 8009d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d14:	d02b      	beq.n	8009d6e <__lshift+0xbe>
 8009d16:	f1c9 0e20 	rsb	lr, r9, #32
 8009d1a:	468a      	mov	sl, r1
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	fa00 f009 	lsl.w	r0, r0, r9
 8009d24:	4310      	orrs	r0, r2
 8009d26:	f84a 0b04 	str.w	r0, [sl], #4
 8009d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2e:	459c      	cmp	ip, r3
 8009d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d34:	d8f3      	bhi.n	8009d1e <__lshift+0x6e>
 8009d36:	ebac 0304 	sub.w	r3, ip, r4
 8009d3a:	f104 0015 	add.w	r0, r4, #21
 8009d3e:	3b15      	subs	r3, #21
 8009d40:	f023 0303 	bic.w	r3, r3, #3
 8009d44:	3304      	adds	r3, #4
 8009d46:	4560      	cmp	r0, ip
 8009d48:	bf88      	it	hi
 8009d4a:	2304      	movhi	r3, #4
 8009d4c:	50ca      	str	r2, [r1, r3]
 8009d4e:	b10a      	cbz	r2, 8009d54 <__lshift+0xa4>
 8009d50:	f108 0602 	add.w	r6, r8, #2
 8009d54:	3e01      	subs	r6, #1
 8009d56:	4638      	mov	r0, r7
 8009d58:	4621      	mov	r1, r4
 8009d5a:	612e      	str	r6, [r5, #16]
 8009d5c:	f7ff fd94 	bl	8009888 <_Bfree>
 8009d60:	4628      	mov	r0, r5
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	3301      	adds	r3, #1
 8009d68:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d6c:	e7c5      	b.n	8009cfa <__lshift+0x4a>
 8009d6e:	3904      	subs	r1, #4
 8009d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d74:	459c      	cmp	ip, r3
 8009d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d7a:	d8f9      	bhi.n	8009d70 <__lshift+0xc0>
 8009d7c:	e7ea      	b.n	8009d54 <__lshift+0xa4>
 8009d7e:	bf00      	nop
 8009d80:	0800c4ad 	.word	0x0800c4ad
 8009d84:	0800c4be 	.word	0x0800c4be

08009d88 <__mcmp>:
 8009d88:	4603      	mov	r3, r0
 8009d8a:	690a      	ldr	r2, [r1, #16]
 8009d8c:	6900      	ldr	r0, [r0, #16]
 8009d8e:	1a80      	subs	r0, r0, r2
 8009d90:	b530      	push	{r4, r5, lr}
 8009d92:	d10e      	bne.n	8009db2 <__mcmp+0x2a>
 8009d94:	3314      	adds	r3, #20
 8009d96:	3114      	adds	r1, #20
 8009d98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009da8:	4295      	cmp	r5, r2
 8009daa:	d003      	beq.n	8009db4 <__mcmp+0x2c>
 8009dac:	d205      	bcs.n	8009dba <__mcmp+0x32>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	bd30      	pop	{r4, r5, pc}
 8009db4:	42a3      	cmp	r3, r4
 8009db6:	d3f3      	bcc.n	8009da0 <__mcmp+0x18>
 8009db8:	e7fb      	b.n	8009db2 <__mcmp+0x2a>
 8009dba:	2001      	movs	r0, #1
 8009dbc:	e7f9      	b.n	8009db2 <__mcmp+0x2a>
	...

08009dc0 <__mdiff>:
 8009dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4614      	mov	r4, r2
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f7ff ffdb 	bl	8009d88 <__mcmp>
 8009dd2:	1e05      	subs	r5, r0, #0
 8009dd4:	d112      	bne.n	8009dfc <__mdiff+0x3c>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff fd15 	bl	8009808 <_Balloc>
 8009dde:	4602      	mov	r2, r0
 8009de0:	b928      	cbnz	r0, 8009dee <__mdiff+0x2e>
 8009de2:	4b41      	ldr	r3, [pc, #260]	@ (8009ee8 <__mdiff+0x128>)
 8009de4:	f240 2137 	movw	r1, #567	@ 0x237
 8009de8:	4840      	ldr	r0, [pc, #256]	@ (8009eec <__mdiff+0x12c>)
 8009dea:	f001 fa81 	bl	800b2f0 <__assert_func>
 8009dee:	2301      	movs	r3, #1
 8009df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009df4:	4610      	mov	r0, r2
 8009df6:	b003      	add	sp, #12
 8009df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfc:	bfbc      	itt	lt
 8009dfe:	464b      	movlt	r3, r9
 8009e00:	46a1      	movlt	r9, r4
 8009e02:	4630      	mov	r0, r6
 8009e04:	bfb8      	it	lt
 8009e06:	2501      	movlt	r5, #1
 8009e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e0c:	bfb4      	ite	lt
 8009e0e:	461c      	movlt	r4, r3
 8009e10:	2500      	movge	r5, #0
 8009e12:	f7ff fcf9 	bl	8009808 <_Balloc>
 8009e16:	4602      	mov	r2, r0
 8009e18:	b918      	cbnz	r0, 8009e22 <__mdiff+0x62>
 8009e1a:	4b33      	ldr	r3, [pc, #204]	@ (8009ee8 <__mdiff+0x128>)
 8009e1c:	f240 2145 	movw	r1, #581	@ 0x245
 8009e20:	e7e2      	b.n	8009de8 <__mdiff+0x28>
 8009e22:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e26:	f104 0e14 	add.w	lr, r4, #20
 8009e2a:	6926      	ldr	r6, [r4, #16]
 8009e2c:	f100 0b14 	add.w	fp, r0, #20
 8009e30:	60c5      	str	r5, [r0, #12]
 8009e32:	f109 0514 	add.w	r5, r9, #20
 8009e36:	f109 0310 	add.w	r3, r9, #16
 8009e3a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e42:	46d9      	mov	r9, fp
 8009e44:	f04f 0c00 	mov.w	ip, #0
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e50:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e54:	4576      	cmp	r6, lr
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	fa1f f38a 	uxth.w	r3, sl
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	b283      	uxth	r3, r0
 8009e60:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009e64:	eba1 0303 	sub.w	r3, r1, r3
 8009e68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e6c:	4463      	add	r3, ip
 8009e6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e7c:	f849 3b04 	str.w	r3, [r9], #4
 8009e80:	d8e3      	bhi.n	8009e4a <__mdiff+0x8a>
 8009e82:	1b33      	subs	r3, r6, r4
 8009e84:	3415      	adds	r4, #21
 8009e86:	3b15      	subs	r3, #21
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	42a6      	cmp	r6, r4
 8009e90:	bf38      	it	cc
 8009e92:	2304      	movcc	r3, #4
 8009e94:	441d      	add	r5, r3
 8009e96:	445b      	add	r3, fp
 8009e98:	462c      	mov	r4, r5
 8009e9a:	461e      	mov	r6, r3
 8009e9c:	4544      	cmp	r4, r8
 8009e9e:	d30e      	bcc.n	8009ebe <__mdiff+0xfe>
 8009ea0:	f108 0103 	add.w	r1, r8, #3
 8009ea4:	1b49      	subs	r1, r1, r5
 8009ea6:	3d03      	subs	r5, #3
 8009ea8:	f021 0103 	bic.w	r1, r1, #3
 8009eac:	45a8      	cmp	r8, r5
 8009eae:	bf38      	it	cc
 8009eb0:	2100      	movcc	r1, #0
 8009eb2:	440b      	add	r3, r1
 8009eb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eb8:	b199      	cbz	r1, 8009ee2 <__mdiff+0x122>
 8009eba:	6117      	str	r7, [r2, #16]
 8009ebc:	e79a      	b.n	8009df4 <__mdiff+0x34>
 8009ebe:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ec2:	46e6      	mov	lr, ip
 8009ec4:	fa1f fc81 	uxth.w	ip, r1
 8009ec8:	0c08      	lsrs	r0, r1, #16
 8009eca:	4471      	add	r1, lr
 8009ecc:	44f4      	add	ip, lr
 8009ece:	b289      	uxth	r1, r1
 8009ed0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009edc:	f846 1b04 	str.w	r1, [r6], #4
 8009ee0:	e7dc      	b.n	8009e9c <__mdiff+0xdc>
 8009ee2:	3f01      	subs	r7, #1
 8009ee4:	e7e6      	b.n	8009eb4 <__mdiff+0xf4>
 8009ee6:	bf00      	nop
 8009ee8:	0800c4ad 	.word	0x0800c4ad
 8009eec:	0800c4be 	.word	0x0800c4be

08009ef0 <__ulp>:
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	4b11      	ldr	r3, [pc, #68]	@ (8009f38 <__ulp+0x48>)
 8009ef4:	ed8d 0b00 	vstr	d0, [sp]
 8009ef8:	9a01      	ldr	r2, [sp, #4]
 8009efa:	4013      	ands	r3, r2
 8009efc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc08      	bgt.n	8009f16 <__ulp+0x26>
 8009f04:	425b      	negs	r3, r3
 8009f06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f0e:	da04      	bge.n	8009f1a <__ulp+0x2a>
 8009f10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f14:	4113      	asrs	r3, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	e008      	b.n	8009f2c <__ulp+0x3c>
 8009f1a:	f1a2 0314 	sub.w	r3, r2, #20
 8009f1e:	2b1e      	cmp	r3, #30
 8009f20:	bfd6      	itet	le
 8009f22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f26:	2201      	movgt	r2, #1
 8009f28:	40da      	lsrle	r2, r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	ec41 0b10 	vmov	d0, r0, r1
 8009f34:	b002      	add	sp, #8
 8009f36:	4770      	bx	lr
 8009f38:	7ff00000 	.word	0x7ff00000

08009f3c <__b2d>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	6906      	ldr	r6, [r0, #16]
 8009f42:	f100 0814 	add.w	r8, r0, #20
 8009f46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f4a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f4e:	1f37      	subs	r7, r6, #4
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7ff fd4d 	bl	80099f0 <__hi0bits>
 8009f56:	f1c0 0320 	rsb	r3, r0, #32
 8009f5a:	280a      	cmp	r0, #10
 8009f5c:	600b      	str	r3, [r1, #0]
 8009f5e:	491d      	ldr	r1, [pc, #116]	@ (8009fd4 <__b2d+0x98>)
 8009f60:	dc16      	bgt.n	8009f90 <__b2d+0x54>
 8009f62:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f66:	45b8      	cmp	r8, r7
 8009f68:	f100 0015 	add.w	r0, r0, #21
 8009f6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f70:	fa02 f000 	lsl.w	r0, r2, r0
 8009f74:	ea43 0501 	orr.w	r5, r3, r1
 8009f78:	bf34      	ite	cc
 8009f7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f7e:	2300      	movcs	r3, #0
 8009f80:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f84:	4303      	orrs	r3, r0
 8009f86:	461c      	mov	r4, r3
 8009f88:	ec45 4b10 	vmov	d0, r4, r5
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	45b8      	cmp	r8, r7
 8009f92:	bf3a      	itte	cc
 8009f94:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f98:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f9c:	2300      	movcs	r3, #0
 8009f9e:	380b      	subs	r0, #11
 8009fa0:	d014      	beq.n	8009fcc <__b2d+0x90>
 8009fa2:	f1c0 0120 	rsb	r1, r0, #32
 8009fa6:	4082      	lsls	r2, r0
 8009fa8:	4547      	cmp	r7, r8
 8009faa:	fa23 f401 	lsr.w	r4, r3, r1
 8009fae:	fa03 f300 	lsl.w	r3, r3, r0
 8009fb2:	ea42 0204 	orr.w	r2, r2, r4
 8009fb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009fba:	bf8c      	ite	hi
 8009fbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fc0:	2200      	movls	r2, #0
 8009fc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fc6:	40ca      	lsrs	r2, r1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	e7dc      	b.n	8009f86 <__b2d+0x4a>
 8009fcc:	ea42 0501 	orr.w	r5, r2, r1
 8009fd0:	e7d9      	b.n	8009f86 <__b2d+0x4a>
 8009fd2:	bf00      	nop
 8009fd4:	3ff00000 	.word	0x3ff00000

08009fd8 <__d2b>:
 8009fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	460f      	mov	r7, r1
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	ec59 8b10 	vmov	r8, r9, d0
 8009fe6:	f7ff fc0f 	bl	8009808 <_Balloc>
 8009fea:	4604      	mov	r4, r0
 8009fec:	b930      	cbnz	r0, 8009ffc <__d2b+0x24>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b23      	ldr	r3, [pc, #140]	@ (800a080 <__d2b+0xa8>)
 8009ff2:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ff6:	4823      	ldr	r0, [pc, #140]	@ (800a084 <__d2b+0xac>)
 8009ff8:	f001 f97a 	bl	800b2f0 <__assert_func>
 8009ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a004:	b10d      	cbz	r5, 800a00a <__d2b+0x32>
 800a006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	f1b8 0300 	subs.w	r3, r8, #0
 800a010:	d023      	beq.n	800a05a <__d2b+0x82>
 800a012:	4668      	mov	r0, sp
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	f7ff fd0a 	bl	8009a2e <__lo0bits>
 800a01a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a01e:	b1d0      	cbz	r0, 800a056 <__d2b+0x7e>
 800a020:	f1c0 0320 	rsb	r3, r0, #32
 800a024:	fa02 f303 	lsl.w	r3, r2, r3
 800a028:	40c2      	lsrs	r2, r0
 800a02a:	430b      	orrs	r3, r1
 800a02c:	9201      	str	r2, [sp, #4]
 800a02e:	6163      	str	r3, [r4, #20]
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	61a3      	str	r3, [r4, #24]
 800a036:	bf0c      	ite	eq
 800a038:	2201      	moveq	r2, #1
 800a03a:	2202      	movne	r2, #2
 800a03c:	6122      	str	r2, [r4, #16]
 800a03e:	b1a5      	cbz	r5, 800a06a <__d2b+0x92>
 800a040:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a044:	4405      	add	r5, r0
 800a046:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a04a:	603d      	str	r5, [r7, #0]
 800a04c:	6030      	str	r0, [r6, #0]
 800a04e:	4620      	mov	r0, r4
 800a050:	b003      	add	sp, #12
 800a052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a056:	6161      	str	r1, [r4, #20]
 800a058:	e7ea      	b.n	800a030 <__d2b+0x58>
 800a05a:	a801      	add	r0, sp, #4
 800a05c:	f7ff fce7 	bl	8009a2e <__lo0bits>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	3020      	adds	r0, #32
 800a064:	2201      	movs	r2, #1
 800a066:	6163      	str	r3, [r4, #20]
 800a068:	e7e8      	b.n	800a03c <__d2b+0x64>
 800a06a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a06e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a072:	6038      	str	r0, [r7, #0]
 800a074:	6918      	ldr	r0, [r3, #16]
 800a076:	f7ff fcbb 	bl	80099f0 <__hi0bits>
 800a07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a07e:	e7e5      	b.n	800a04c <__d2b+0x74>
 800a080:	0800c4ad 	.word	0x0800c4ad
 800a084:	0800c4be 	.word	0x0800c4be

0800a088 <__ratio>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	b085      	sub	sp, #20
 800a08e:	e9cd 1000 	strd	r1, r0, [sp]
 800a092:	a902      	add	r1, sp, #8
 800a094:	f7ff ff52 	bl	8009f3c <__b2d>
 800a098:	a903      	add	r1, sp, #12
 800a09a:	9800      	ldr	r0, [sp, #0]
 800a09c:	ec55 4b10 	vmov	r4, r5, d0
 800a0a0:	f7ff ff4c 	bl	8009f3c <__b2d>
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	462f      	mov	r7, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	6919      	ldr	r1, [r3, #16]
 800a0ac:	9b00      	ldr	r3, [sp, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	1ac9      	subs	r1, r1, r3
 800a0b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0b6:	ec5b ab10 	vmov	sl, fp, d0
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	46d9      	mov	r9, fp
 800a0be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfcd      	iteet	gt
 800a0c6:	462a      	movgt	r2, r5
 800a0c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0cc:	465a      	movle	r2, fp
 800a0ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0d2:	bfd8      	it	le
 800a0d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0d8:	4652      	mov	r2, sl
 800a0da:	4639      	mov	r1, r7
 800a0dc:	464b      	mov	r3, r9
 800a0de:	f7f6 fbb9 	bl	8000854 <__aeabi_ddiv>
 800a0e2:	ec41 0b10 	vmov	d0, r0, r1
 800a0e6:	b005      	add	sp, #20
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0ec <__copybits>:
 800a0ec:	3901      	subs	r1, #1
 800a0ee:	f102 0314 	add.w	r3, r2, #20
 800a0f2:	1149      	asrs	r1, r1, #5
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	3101      	adds	r1, #1
 800a0f8:	6914      	ldr	r4, [r2, #16]
 800a0fa:	1f05      	subs	r5, r0, #4
 800a0fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a104:	42a3      	cmp	r3, r4
 800a106:	d30c      	bcc.n	800a122 <__copybits+0x36>
 800a108:	1aa3      	subs	r3, r4, r2
 800a10a:	3211      	adds	r2, #17
 800a10c:	3b11      	subs	r3, #17
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	42a2      	cmp	r2, r4
 800a114:	bf88      	it	hi
 800a116:	2300      	movhi	r3, #0
 800a118:	4418      	add	r0, r3
 800a11a:	2300      	movs	r3, #0
 800a11c:	4288      	cmp	r0, r1
 800a11e:	d305      	bcc.n	800a12c <__copybits+0x40>
 800a120:	bd70      	pop	{r4, r5, r6, pc}
 800a122:	f853 6b04 	ldr.w	r6, [r3], #4
 800a126:	f845 6f04 	str.w	r6, [r5, #4]!
 800a12a:	e7eb      	b.n	800a104 <__copybits+0x18>
 800a12c:	f840 3b04 	str.w	r3, [r0], #4
 800a130:	e7f4      	b.n	800a11c <__copybits+0x30>

0800a132 <__any_on>:
 800a132:	f100 0214 	add.w	r2, r0, #20
 800a136:	114b      	asrs	r3, r1, #5
 800a138:	6900      	ldr	r0, [r0, #16]
 800a13a:	4298      	cmp	r0, r3
 800a13c:	b510      	push	{r4, lr}
 800a13e:	db11      	blt.n	800a164 <__any_on+0x32>
 800a140:	dd0a      	ble.n	800a158 <__any_on+0x26>
 800a142:	f011 011f 	ands.w	r1, r1, #31
 800a146:	d007      	beq.n	800a158 <__any_on+0x26>
 800a148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a14c:	fa24 f001 	lsr.w	r0, r4, r1
 800a150:	fa00 f101 	lsl.w	r1, r0, r1
 800a154:	428c      	cmp	r4, r1
 800a156:	d10b      	bne.n	800a170 <__any_on+0x3e>
 800a158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d803      	bhi.n	800a168 <__any_on+0x36>
 800a160:	2000      	movs	r0, #0
 800a162:	bd10      	pop	{r4, pc}
 800a164:	4603      	mov	r3, r0
 800a166:	e7f7      	b.n	800a158 <__any_on+0x26>
 800a168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a16c:	2900      	cmp	r1, #0
 800a16e:	d0f5      	beq.n	800a15c <__any_on+0x2a>
 800a170:	2001      	movs	r0, #1
 800a172:	e7f6      	b.n	800a162 <__any_on+0x30>

0800a174 <sulp>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	460d      	mov	r5, r1
 800a17a:	4616      	mov	r6, r2
 800a17c:	ec45 4b10 	vmov	d0, r4, r5
 800a180:	f7ff feb6 	bl	8009ef0 <__ulp>
 800a184:	ec51 0b10 	vmov	r0, r1, d0
 800a188:	b17e      	cbz	r6, 800a1aa <sulp+0x36>
 800a18a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a18e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a192:	2b00      	cmp	r3, #0
 800a194:	dd09      	ble.n	800a1aa <sulp+0x36>
 800a196:	051b      	lsls	r3, r3, #20
 800a198:	2400      	movs	r4, #0
 800a19a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a19e:	4622      	mov	r2, r4
 800a1a0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	f7f6 fa2b 	bl	8000600 <__aeabi_dmul>
 800a1aa:	ec41 0b10 	vmov	d0, r0, r1
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}

0800a1b0 <_strtod_l>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	b09f      	sub	sp, #124	@ 0x7c
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	f04f 0b00 	mov.w	fp, #0
 800a1c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	9005      	str	r0, [sp, #20]
 800a1c6:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1c8:	460a      	mov	r2, r1
 800a1ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1cc:	7811      	ldrb	r1, [r2, #0]
 800a1ce:	292b      	cmp	r1, #43	@ 0x2b
 800a1d0:	d04a      	beq.n	800a268 <_strtod_l+0xb8>
 800a1d2:	d838      	bhi.n	800a246 <_strtod_l+0x96>
 800a1d4:	290d      	cmp	r1, #13
 800a1d6:	d832      	bhi.n	800a23e <_strtod_l+0x8e>
 800a1d8:	2908      	cmp	r1, #8
 800a1da:	d832      	bhi.n	800a242 <_strtod_l+0x92>
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	d03b      	beq.n	800a258 <_strtod_l+0xa8>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1e6:	782a      	ldrb	r2, [r5, #0]
 800a1e8:	2a30      	cmp	r2, #48	@ 0x30
 800a1ea:	f040 80b2 	bne.w	800a352 <_strtod_l+0x1a2>
 800a1ee:	786a      	ldrb	r2, [r5, #1]
 800a1f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1f4:	2a58      	cmp	r2, #88	@ 0x58
 800a1f6:	d16e      	bne.n	800a2d6 <_strtod_l+0x126>
 800a1f8:	9302      	str	r3, [sp, #8]
 800a1fa:	a919      	add	r1, sp, #100	@ 0x64
 800a1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1fe:	4a90      	ldr	r2, [pc, #576]	@ (800a440 <_strtod_l+0x290>)
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	ab1a      	add	r3, sp, #104	@ 0x68
 800a204:	9805      	ldr	r0, [sp, #20]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a20a:	f001 f909 	bl	800b420 <__gethex>
 800a20e:	f010 060f 	ands.w	r6, r0, #15
 800a212:	4604      	mov	r4, r0
 800a214:	d005      	beq.n	800a222 <_strtod_l+0x72>
 800a216:	2e06      	cmp	r6, #6
 800a218:	d128      	bne.n	800a26c <_strtod_l+0xbc>
 800a21a:	3501      	adds	r5, #1
 800a21c:	2300      	movs	r3, #0
 800a21e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a220:	930e      	str	r3, [sp, #56]	@ 0x38
 800a222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a224:	2b00      	cmp	r3, #0
 800a226:	f040 858e 	bne.w	800ad46 <_strtod_l+0xb96>
 800a22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a22c:	b1cb      	cbz	r3, 800a262 <_strtod_l+0xb2>
 800a22e:	4652      	mov	r2, sl
 800a230:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a234:	ec43 2b10 	vmov	d0, r2, r3
 800a238:	b01f      	add	sp, #124	@ 0x7c
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	2920      	cmp	r1, #32
 800a240:	d1ce      	bne.n	800a1e0 <_strtod_l+0x30>
 800a242:	3201      	adds	r2, #1
 800a244:	e7c1      	b.n	800a1ca <_strtod_l+0x1a>
 800a246:	292d      	cmp	r1, #45	@ 0x2d
 800a248:	d1ca      	bne.n	800a1e0 <_strtod_l+0x30>
 800a24a:	2101      	movs	r1, #1
 800a24c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a24e:	1c51      	adds	r1, r2, #1
 800a250:	9119      	str	r1, [sp, #100]	@ 0x64
 800a252:	7852      	ldrb	r2, [r2, #1]
 800a254:	2a00      	cmp	r2, #0
 800a256:	d1c5      	bne.n	800a1e4 <_strtod_l+0x34>
 800a258:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a25a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f040 8570 	bne.w	800ad42 <_strtod_l+0xb92>
 800a262:	4652      	mov	r2, sl
 800a264:	465b      	mov	r3, fp
 800a266:	e7e5      	b.n	800a234 <_strtod_l+0x84>
 800a268:	2100      	movs	r1, #0
 800a26a:	e7ef      	b.n	800a24c <_strtod_l+0x9c>
 800a26c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a26e:	b13a      	cbz	r2, 800a280 <_strtod_l+0xd0>
 800a270:	2135      	movs	r1, #53	@ 0x35
 800a272:	a81c      	add	r0, sp, #112	@ 0x70
 800a274:	f7ff ff3a 	bl	800a0ec <__copybits>
 800a278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a27a:	9805      	ldr	r0, [sp, #20]
 800a27c:	f7ff fb04 	bl	8009888 <_Bfree>
 800a280:	3e01      	subs	r6, #1
 800a282:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a284:	2e04      	cmp	r6, #4
 800a286:	d806      	bhi.n	800a296 <_strtod_l+0xe6>
 800a288:	e8df f006 	tbb	[pc, r6]
 800a28c:	201d0314 	.word	0x201d0314
 800a290:	14          	.byte	0x14
 800a291:	00          	.byte	0x00
 800a292:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a296:	05e1      	lsls	r1, r4, #23
 800a298:	bf48      	it	mi
 800a29a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a29e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2a2:	0d1b      	lsrs	r3, r3, #20
 800a2a4:	051b      	lsls	r3, r3, #20
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1bb      	bne.n	800a222 <_strtod_l+0x72>
 800a2aa:	f7fe fbb3 	bl	8008a14 <__errno>
 800a2ae:	2322      	movs	r3, #34	@ 0x22
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	e7b6      	b.n	800a222 <_strtod_l+0x72>
 800a2b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2c4:	e7e7      	b.n	800a296 <_strtod_l+0xe6>
 800a2c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a448 <_strtod_l+0x298>
 800a2ca:	e7e4      	b.n	800a296 <_strtod_l+0xe6>
 800a2cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2d0:	f04f 3aff 	mov.w	sl, #4294967295
 800a2d4:	e7df      	b.n	800a296 <_strtod_l+0xe6>
 800a2d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	2b30      	cmp	r3, #48	@ 0x30
 800a2e0:	d0f9      	beq.n	800a2d6 <_strtod_l+0x126>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d09d      	beq.n	800a222 <_strtod_l+0x72>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	2700      	movs	r7, #0
 800a2ea:	9308      	str	r3, [sp, #32]
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2f0:	46b9      	mov	r9, r7
 800a2f2:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a2f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a2f8:	7805      	ldrb	r5, [r0, #0]
 800a2fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2fe:	b2d9      	uxtb	r1, r3
 800a300:	2909      	cmp	r1, #9
 800a302:	d928      	bls.n	800a356 <_strtod_l+0x1a6>
 800a304:	2201      	movs	r2, #1
 800a306:	494f      	ldr	r1, [pc, #316]	@ (800a444 <_strtod_l+0x294>)
 800a308:	f000 ffd6 	bl	800b2b8 <strncmp>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d032      	beq.n	800a376 <_strtod_l+0x1c6>
 800a310:	2000      	movs	r0, #0
 800a312:	462a      	mov	r2, r5
 800a314:	464d      	mov	r5, r9
 800a316:	4603      	mov	r3, r0
 800a318:	900a      	str	r0, [sp, #40]	@ 0x28
 800a31a:	2a65      	cmp	r2, #101	@ 0x65
 800a31c:	d001      	beq.n	800a322 <_strtod_l+0x172>
 800a31e:	2a45      	cmp	r2, #69	@ 0x45
 800a320:	d114      	bne.n	800a34c <_strtod_l+0x19c>
 800a322:	b91d      	cbnz	r5, 800a32c <_strtod_l+0x17c>
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	4302      	orrs	r2, r0
 800a328:	d096      	beq.n	800a258 <_strtod_l+0xa8>
 800a32a:	2500      	movs	r5, #0
 800a32c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a32e:	1c62      	adds	r2, r4, #1
 800a330:	9219      	str	r2, [sp, #100]	@ 0x64
 800a332:	7862      	ldrb	r2, [r4, #1]
 800a334:	2a2b      	cmp	r2, #43	@ 0x2b
 800a336:	d079      	beq.n	800a42c <_strtod_l+0x27c>
 800a338:	2a2d      	cmp	r2, #45	@ 0x2d
 800a33a:	d07d      	beq.n	800a438 <_strtod_l+0x288>
 800a33c:	f04f 0c00 	mov.w	ip, #0
 800a340:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a344:	2909      	cmp	r1, #9
 800a346:	f240 8085 	bls.w	800a454 <_strtod_l+0x2a4>
 800a34a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	e0a5      	b.n	800a49e <_strtod_l+0x2ee>
 800a352:	2300      	movs	r3, #0
 800a354:	e7c8      	b.n	800a2e8 <_strtod_l+0x138>
 800a356:	f1b9 0f08 	cmp.w	r9, #8
 800a35a:	f100 0001 	add.w	r0, r0, #1
 800a35e:	f109 0901 	add.w	r9, r9, #1
 800a362:	bfd4      	ite	le
 800a364:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a366:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a36a:	9019      	str	r0, [sp, #100]	@ 0x64
 800a36c:	bfdc      	itt	le
 800a36e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a372:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a374:	e7bf      	b.n	800a2f6 <_strtod_l+0x146>
 800a376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a37c:	785a      	ldrb	r2, [r3, #1]
 800a37e:	f1b9 0f00 	cmp.w	r9, #0
 800a382:	d03a      	beq.n	800a3fa <_strtod_l+0x24a>
 800a384:	464d      	mov	r5, r9
 800a386:	900a      	str	r0, [sp, #40]	@ 0x28
 800a388:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d912      	bls.n	800a3b6 <_strtod_l+0x206>
 800a390:	2301      	movs	r3, #1
 800a392:	e7c2      	b.n	800a31a <_strtod_l+0x16a>
 800a394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a396:	3001      	adds	r0, #1
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a39c:	785a      	ldrb	r2, [r3, #1]
 800a39e:	2a30      	cmp	r2, #48	@ 0x30
 800a3a0:	d0f8      	beq.n	800a394 <_strtod_l+0x1e4>
 800a3a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a3a6:	2b08      	cmp	r3, #8
 800a3a8:	f200 84d2 	bhi.w	800ad50 <_strtod_l+0xba0>
 800a3ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3b6:	3a30      	subs	r2, #48	@ 0x30
 800a3b8:	f100 0301 	add.w	r3, r0, #1
 800a3bc:	d017      	beq.n	800a3ee <_strtod_l+0x23e>
 800a3be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3c0:	462e      	mov	r6, r5
 800a3c2:	f04f 0e0a 	mov.w	lr, #10
 800a3c6:	4419      	add	r1, r3
 800a3c8:	910a      	str	r1, [sp, #40]	@ 0x28
 800a3ca:	1c71      	adds	r1, r6, #1
 800a3cc:	eba1 0c05 	sub.w	ip, r1, r5
 800a3d0:	4563      	cmp	r3, ip
 800a3d2:	dc14      	bgt.n	800a3fe <_strtod_l+0x24e>
 800a3d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a3d8:	182b      	adds	r3, r5, r0
 800a3da:	3501      	adds	r5, #1
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	4405      	add	r5, r0
 800a3e0:	dc1a      	bgt.n	800a418 <_strtod_l+0x268>
 800a3e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3e4:	230a      	movs	r3, #10
 800a3e6:	fb03 2301 	mla	r3, r3, r1, r2
 800a3ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	1c51      	adds	r1, r2, #1
 800a3f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3f6:	7852      	ldrb	r2, [r2, #1]
 800a3f8:	e7c6      	b.n	800a388 <_strtod_l+0x1d8>
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	e7cf      	b.n	800a39e <_strtod_l+0x1ee>
 800a3fe:	2e08      	cmp	r6, #8
 800a400:	dc05      	bgt.n	800a40e <_strtod_l+0x25e>
 800a402:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a404:	fb0e f606 	mul.w	r6, lr, r6
 800a408:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a40a:	460e      	mov	r6, r1
 800a40c:	e7dd      	b.n	800a3ca <_strtod_l+0x21a>
 800a40e:	2910      	cmp	r1, #16
 800a410:	bfd8      	it	le
 800a412:	fb0e f707 	mulle.w	r7, lr, r7
 800a416:	e7f8      	b.n	800a40a <_strtod_l+0x25a>
 800a418:	2b0f      	cmp	r3, #15
 800a41a:	bfdc      	itt	le
 800a41c:	230a      	movle	r3, #10
 800a41e:	fb03 2707 	mlale	r7, r3, r7, r2
 800a422:	e7e3      	b.n	800a3ec <_strtod_l+0x23c>
 800a424:	2300      	movs	r3, #0
 800a426:	930a      	str	r3, [sp, #40]	@ 0x28
 800a428:	2301      	movs	r3, #1
 800a42a:	e77b      	b.n	800a324 <_strtod_l+0x174>
 800a42c:	f04f 0c00 	mov.w	ip, #0
 800a430:	1ca2      	adds	r2, r4, #2
 800a432:	9219      	str	r2, [sp, #100]	@ 0x64
 800a434:	78a2      	ldrb	r2, [r4, #2]
 800a436:	e783      	b.n	800a340 <_strtod_l+0x190>
 800a438:	f04f 0c01 	mov.w	ip, #1
 800a43c:	e7f8      	b.n	800a430 <_strtod_l+0x280>
 800a43e:	bf00      	nop
 800a440:	0800c6e4 	.word	0x0800c6e4
 800a444:	0800c517 	.word	0x0800c517
 800a448:	7ff00000 	.word	0x7ff00000
 800a44c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a44e:	1c51      	adds	r1, r2, #1
 800a450:	9119      	str	r1, [sp, #100]	@ 0x64
 800a452:	7852      	ldrb	r2, [r2, #1]
 800a454:	2a30      	cmp	r2, #48	@ 0x30
 800a456:	d0f9      	beq.n	800a44c <_strtod_l+0x29c>
 800a458:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a45c:	2908      	cmp	r1, #8
 800a45e:	f63f af75 	bhi.w	800a34c <_strtod_l+0x19c>
 800a462:	3a30      	subs	r2, #48	@ 0x30
 800a464:	f04f 080a 	mov.w	r8, #10
 800a468:	9209      	str	r2, [sp, #36]	@ 0x24
 800a46a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a46c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a46e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a470:	1c56      	adds	r6, r2, #1
 800a472:	9619      	str	r6, [sp, #100]	@ 0x64
 800a474:	7852      	ldrb	r2, [r2, #1]
 800a476:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a47a:	f1be 0f09 	cmp.w	lr, #9
 800a47e:	d939      	bls.n	800a4f4 <_strtod_l+0x344>
 800a480:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a482:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a486:	1a76      	subs	r6, r6, r1
 800a488:	2e08      	cmp	r6, #8
 800a48a:	dc03      	bgt.n	800a494 <_strtod_l+0x2e4>
 800a48c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a48e:	4588      	cmp	r8, r1
 800a490:	bfa8      	it	ge
 800a492:	4688      	movge	r8, r1
 800a494:	f1bc 0f00 	cmp.w	ip, #0
 800a498:	d001      	beq.n	800a49e <_strtod_l+0x2ee>
 800a49a:	f1c8 0800 	rsb	r8, r8, #0
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	d14e      	bne.n	800a540 <_strtod_l+0x390>
 800a4a2:	9908      	ldr	r1, [sp, #32]
 800a4a4:	4308      	orrs	r0, r1
 800a4a6:	f47f aebc 	bne.w	800a222 <_strtod_l+0x72>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f47f aed4 	bne.w	800a258 <_strtod_l+0xa8>
 800a4b0:	2a69      	cmp	r2, #105	@ 0x69
 800a4b2:	d028      	beq.n	800a506 <_strtod_l+0x356>
 800a4b4:	dc25      	bgt.n	800a502 <_strtod_l+0x352>
 800a4b6:	2a49      	cmp	r2, #73	@ 0x49
 800a4b8:	d025      	beq.n	800a506 <_strtod_l+0x356>
 800a4ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4bc:	f47f aecc 	bne.w	800a258 <_strtod_l+0xa8>
 800a4c0:	499a      	ldr	r1, [pc, #616]	@ (800a72c <_strtod_l+0x57c>)
 800a4c2:	a819      	add	r0, sp, #100	@ 0x64
 800a4c4:	f001 f9cc 	bl	800b860 <__match>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	f43f aec5 	beq.w	800a258 <_strtod_l+0xa8>
 800a4ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b28      	cmp	r3, #40	@ 0x28
 800a4d4:	d12e      	bne.n	800a534 <_strtod_l+0x384>
 800a4d6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4d8:	4995      	ldr	r1, [pc, #596]	@ (800a730 <_strtod_l+0x580>)
 800a4da:	a819      	add	r0, sp, #100	@ 0x64
 800a4dc:	f001 f9d4 	bl	800b888 <__hexnan>
 800a4e0:	2805      	cmp	r0, #5
 800a4e2:	d127      	bne.n	800a534 <_strtod_l+0x384>
 800a4e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a4f2:	e696      	b.n	800a222 <_strtod_l+0x72>
 800a4f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4f6:	fb08 2101 	mla	r1, r8, r1, r2
 800a4fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a4fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a500:	e7b5      	b.n	800a46e <_strtod_l+0x2be>
 800a502:	2a6e      	cmp	r2, #110	@ 0x6e
 800a504:	e7da      	b.n	800a4bc <_strtod_l+0x30c>
 800a506:	498b      	ldr	r1, [pc, #556]	@ (800a734 <_strtod_l+0x584>)
 800a508:	a819      	add	r0, sp, #100	@ 0x64
 800a50a:	f001 f9a9 	bl	800b860 <__match>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f aea2 	beq.w	800a258 <_strtod_l+0xa8>
 800a514:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a516:	a819      	add	r0, sp, #100	@ 0x64
 800a518:	4987      	ldr	r1, [pc, #540]	@ (800a738 <_strtod_l+0x588>)
 800a51a:	3b01      	subs	r3, #1
 800a51c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a51e:	f001 f99f 	bl	800b860 <__match>
 800a522:	b910      	cbnz	r0, 800a52a <_strtod_l+0x37a>
 800a524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a526:	3301      	adds	r3, #1
 800a528:	9319      	str	r3, [sp, #100]	@ 0x64
 800a52a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a748 <_strtod_l+0x598>
 800a52e:	f04f 0a00 	mov.w	sl, #0
 800a532:	e676      	b.n	800a222 <_strtod_l+0x72>
 800a534:	4881      	ldr	r0, [pc, #516]	@ (800a73c <_strtod_l+0x58c>)
 800a536:	f000 fed3 	bl	800b2e0 <nan>
 800a53a:	ec5b ab10 	vmov	sl, fp, d0
 800a53e:	e670      	b.n	800a222 <_strtod_l+0x72>
 800a540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a542:	f1b9 0f00 	cmp.w	r9, #0
 800a546:	bf08      	it	eq
 800a548:	46a9      	moveq	r9, r5
 800a54a:	2d10      	cmp	r5, #16
 800a54c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a54e:	eba8 0303 	sub.w	r3, r8, r3
 800a552:	462c      	mov	r4, r5
 800a554:	bfa8      	it	ge
 800a556:	2410      	movge	r4, #16
 800a558:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55a:	f7f5 ffd7 	bl	800050c <__aeabi_ui2d>
 800a55e:	2d09      	cmp	r5, #9
 800a560:	4682      	mov	sl, r0
 800a562:	468b      	mov	fp, r1
 800a564:	dc13      	bgt.n	800a58e <_strtod_l+0x3de>
 800a566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f43f ae5a 	beq.w	800a222 <_strtod_l+0x72>
 800a56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a570:	dd78      	ble.n	800a664 <_strtod_l+0x4b4>
 800a572:	2b16      	cmp	r3, #22
 800a574:	dc5f      	bgt.n	800a636 <_strtod_l+0x486>
 800a576:	4972      	ldr	r1, [pc, #456]	@ (800a740 <_strtod_l+0x590>)
 800a578:	4652      	mov	r2, sl
 800a57a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a57e:	465b      	mov	r3, fp
 800a580:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a584:	f7f6 f83c 	bl	8000600 <__aeabi_dmul>
 800a588:	4682      	mov	sl, r0
 800a58a:	468b      	mov	fp, r1
 800a58c:	e649      	b.n	800a222 <_strtod_l+0x72>
 800a58e:	4b6c      	ldr	r3, [pc, #432]	@ (800a740 <_strtod_l+0x590>)
 800a590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a594:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a598:	f7f6 f832 	bl	8000600 <__aeabi_dmul>
 800a59c:	4682      	mov	sl, r0
 800a59e:	468b      	mov	fp, r1
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7f5 ffb3 	bl	800050c <__aeabi_ui2d>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	f7f5 fe71 	bl	8000294 <__adddf3>
 800a5b2:	2d0f      	cmp	r5, #15
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	468b      	mov	fp, r1
 800a5b8:	ddd5      	ble.n	800a566 <_strtod_l+0x3b6>
 800a5ba:	1b2c      	subs	r4, r5, r4
 800a5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5be:	441c      	add	r4, r3
 800a5c0:	2c00      	cmp	r4, #0
 800a5c2:	f340 8093 	ble.w	800a6ec <_strtod_l+0x53c>
 800a5c6:	f014 030f 	ands.w	r3, r4, #15
 800a5ca:	d00a      	beq.n	800a5e2 <_strtod_l+0x432>
 800a5cc:	495c      	ldr	r1, [pc, #368]	@ (800a740 <_strtod_l+0x590>)
 800a5ce:	4652      	mov	r2, sl
 800a5d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5d4:	465b      	mov	r3, fp
 800a5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5da:	f7f6 f811 	bl	8000600 <__aeabi_dmul>
 800a5de:	4682      	mov	sl, r0
 800a5e0:	468b      	mov	fp, r1
 800a5e2:	f034 040f 	bics.w	r4, r4, #15
 800a5e6:	d073      	beq.n	800a6d0 <_strtod_l+0x520>
 800a5e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5ec:	dd49      	ble.n	800a682 <_strtod_l+0x4d2>
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	46a0      	mov	r8, r4
 800a5f2:	46a1      	mov	r9, r4
 800a5f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5f6:	2322      	movs	r3, #34	@ 0x22
 800a5f8:	9a05      	ldr	r2, [sp, #20]
 800a5fa:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a748 <_strtod_l+0x598>
 800a5fe:	f04f 0a00 	mov.w	sl, #0
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	f43f ae0b 	beq.w	800a222 <_strtod_l+0x72>
 800a60c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7ff f93a 	bl	8009888 <_Bfree>
 800a614:	4649      	mov	r1, r9
 800a616:	9805      	ldr	r0, [sp, #20]
 800a618:	f7ff f936 	bl	8009888 <_Bfree>
 800a61c:	4641      	mov	r1, r8
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	f7ff f932 	bl	8009888 <_Bfree>
 800a624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a626:	9805      	ldr	r0, [sp, #20]
 800a628:	f7ff f92e 	bl	8009888 <_Bfree>
 800a62c:	4621      	mov	r1, r4
 800a62e:	9805      	ldr	r0, [sp, #20]
 800a630:	f7ff f92a 	bl	8009888 <_Bfree>
 800a634:	e5f5      	b.n	800a222 <_strtod_l+0x72>
 800a636:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a63a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a63c:	4293      	cmp	r3, r2
 800a63e:	dbbc      	blt.n	800a5ba <_strtod_l+0x40a>
 800a640:	f1c5 050f 	rsb	r5, r5, #15
 800a644:	4c3e      	ldr	r4, [pc, #248]	@ (800a740 <_strtod_l+0x590>)
 800a646:	4652      	mov	r2, sl
 800a648:	465b      	mov	r3, fp
 800a64a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a652:	f7f5 ffd5 	bl	8000600 <__aeabi_dmul>
 800a656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a658:	1b5d      	subs	r5, r3, r5
 800a65a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a65e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a662:	e78f      	b.n	800a584 <_strtod_l+0x3d4>
 800a664:	3316      	adds	r3, #22
 800a666:	dba8      	blt.n	800a5ba <_strtod_l+0x40a>
 800a668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a66a:	4650      	mov	r0, sl
 800a66c:	4659      	mov	r1, fp
 800a66e:	eba3 0808 	sub.w	r8, r3, r8
 800a672:	4b33      	ldr	r3, [pc, #204]	@ (800a740 <_strtod_l+0x590>)
 800a674:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a678:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a67c:	f7f6 f8ea 	bl	8000854 <__aeabi_ddiv>
 800a680:	e782      	b.n	800a588 <_strtod_l+0x3d8>
 800a682:	2300      	movs	r3, #0
 800a684:	1124      	asrs	r4, r4, #4
 800a686:	4650      	mov	r0, sl
 800a688:	4659      	mov	r1, fp
 800a68a:	4f2e      	ldr	r7, [pc, #184]	@ (800a744 <_strtod_l+0x594>)
 800a68c:	461e      	mov	r6, r3
 800a68e:	2c01      	cmp	r4, #1
 800a690:	dc21      	bgt.n	800a6d6 <_strtod_l+0x526>
 800a692:	b10b      	cbz	r3, 800a698 <_strtod_l+0x4e8>
 800a694:	4682      	mov	sl, r0
 800a696:	468b      	mov	fp, r1
 800a698:	492a      	ldr	r1, [pc, #168]	@ (800a744 <_strtod_l+0x594>)
 800a69a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a69e:	4652      	mov	r2, sl
 800a6a0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6aa:	f7f5 ffa9 	bl	8000600 <__aeabi_dmul>
 800a6ae:	4b26      	ldr	r3, [pc, #152]	@ (800a748 <_strtod_l+0x598>)
 800a6b0:	460a      	mov	r2, r1
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	400b      	ands	r3, r1
 800a6b6:	4925      	ldr	r1, [pc, #148]	@ (800a74c <_strtod_l+0x59c>)
 800a6b8:	428b      	cmp	r3, r1
 800a6ba:	d898      	bhi.n	800a5ee <_strtod_l+0x43e>
 800a6bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf86      	itte	hi
 800a6c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a750 <_strtod_l+0x5a0>
 800a6c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a6cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9308      	str	r3, [sp, #32]
 800a6d4:	e076      	b.n	800a7c4 <_strtod_l+0x614>
 800a6d6:	07e2      	lsls	r2, r4, #31
 800a6d8:	d504      	bpl.n	800a6e4 <_strtod_l+0x534>
 800a6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6de:	f7f5 ff8f 	bl	8000600 <__aeabi_dmul>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	3601      	adds	r6, #1
 800a6e6:	1064      	asrs	r4, r4, #1
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	e7d0      	b.n	800a68e <_strtod_l+0x4de>
 800a6ec:	d0f0      	beq.n	800a6d0 <_strtod_l+0x520>
 800a6ee:	4264      	negs	r4, r4
 800a6f0:	f014 020f 	ands.w	r2, r4, #15
 800a6f4:	d00a      	beq.n	800a70c <_strtod_l+0x55c>
 800a6f6:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <_strtod_l+0x590>)
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	4659      	mov	r1, fp
 800a6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f6 f8a6 	bl	8000854 <__aeabi_ddiv>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	1124      	asrs	r4, r4, #4
 800a70e:	d0df      	beq.n	800a6d0 <_strtod_l+0x520>
 800a710:	2c1f      	cmp	r4, #31
 800a712:	dd1f      	ble.n	800a754 <_strtod_l+0x5a4>
 800a714:	2400      	movs	r4, #0
 800a716:	46a0      	mov	r8, r4
 800a718:	46a1      	mov	r9, r4
 800a71a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a71c:	2322      	movs	r3, #34	@ 0x22
 800a71e:	9a05      	ldr	r2, [sp, #20]
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	f04f 0b00 	mov.w	fp, #0
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	e76b      	b.n	800a604 <_strtod_l+0x454>
 800a72c:	0800c405 	.word	0x0800c405
 800a730:	0800c6d0 	.word	0x0800c6d0
 800a734:	0800c3fd 	.word	0x0800c3fd
 800a738:	0800c434 	.word	0x0800c434
 800a73c:	0800c56d 	.word	0x0800c56d
 800a740:	0800c608 	.word	0x0800c608
 800a744:	0800c5e0 	.word	0x0800c5e0
 800a748:	7ff00000 	.word	0x7ff00000
 800a74c:	7ca00000 	.word	0x7ca00000
 800a750:	7fefffff 	.word	0x7fefffff
 800a754:	f014 0310 	ands.w	r3, r4, #16
 800a758:	4650      	mov	r0, sl
 800a75a:	4659      	mov	r1, fp
 800a75c:	4ea9      	ldr	r6, [pc, #676]	@ (800aa04 <_strtod_l+0x854>)
 800a75e:	bf18      	it	ne
 800a760:	236a      	movne	r3, #106	@ 0x6a
 800a762:	9308      	str	r3, [sp, #32]
 800a764:	2300      	movs	r3, #0
 800a766:	07e7      	lsls	r7, r4, #31
 800a768:	d504      	bpl.n	800a774 <_strtod_l+0x5c4>
 800a76a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a76e:	f7f5 ff47 	bl	8000600 <__aeabi_dmul>
 800a772:	2301      	movs	r3, #1
 800a774:	1064      	asrs	r4, r4, #1
 800a776:	f106 0608 	add.w	r6, r6, #8
 800a77a:	d1f4      	bne.n	800a766 <_strtod_l+0x5b6>
 800a77c:	b10b      	cbz	r3, 800a782 <_strtod_l+0x5d2>
 800a77e:	4682      	mov	sl, r0
 800a780:	468b      	mov	fp, r1
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	b1b3      	cbz	r3, 800a7b4 <_strtod_l+0x604>
 800a786:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a78a:	4659      	mov	r1, fp
 800a78c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd0f      	ble.n	800a7b4 <_strtod_l+0x604>
 800a794:	2b1f      	cmp	r3, #31
 800a796:	dd56      	ble.n	800a846 <_strtod_l+0x696>
 800a798:	2b34      	cmp	r3, #52	@ 0x34
 800a79a:	f04f 0a00 	mov.w	sl, #0
 800a79e:	bfdb      	ittet	le
 800a7a0:	f04f 33ff 	movle.w	r3, #4294967295
 800a7a4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a7a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a7ac:	4093      	lslle	r3, r2
 800a7ae:	bfd8      	it	le
 800a7b0:	ea03 0b01 	andle.w	fp, r3, r1
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4650      	mov	r0, sl
 800a7ba:	4659      	mov	r1, fp
 800a7bc:	f7f6 f988 	bl	8000ad0 <__aeabi_dcmpeq>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d1a7      	bne.n	800a714 <_strtod_l+0x564>
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c6:	464a      	mov	r2, r9
 800a7c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	9805      	ldr	r0, [sp, #20]
 800a7d0:	f7ff f8c4 	bl	800995c <__s2b>
 800a7d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f43f af09 	beq.w	800a5ee <_strtod_l+0x43e>
 800a7dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7de:	2400      	movs	r4, #0
 800a7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	eba3 0308 	sub.w	r3, r3, r8
 800a7e8:	46a0      	mov	r8, r4
 800a7ea:	bfa8      	it	ge
 800a7ec:	2300      	movge	r3, #0
 800a7ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7f4:	9316      	str	r3, [sp, #88]	@ 0x58
 800a7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7f8:	9805      	ldr	r0, [sp, #20]
 800a7fa:	6859      	ldr	r1, [r3, #4]
 800a7fc:	f7ff f804 	bl	8009808 <_Balloc>
 800a800:	4681      	mov	r9, r0
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f aef7 	beq.w	800a5f6 <_strtod_l+0x446>
 800a808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a80a:	300c      	adds	r0, #12
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	f103 010c 	add.w	r1, r3, #12
 800a812:	3202      	adds	r2, #2
 800a814:	0092      	lsls	r2, r2, #2
 800a816:	f7fe f938 	bl	8008a8a <memcpy>
 800a81a:	aa1c      	add	r2, sp, #112	@ 0x70
 800a81c:	a91b      	add	r1, sp, #108	@ 0x6c
 800a81e:	9805      	ldr	r0, [sp, #20]
 800a820:	ec4b ab10 	vmov	d0, sl, fp
 800a824:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a828:	f7ff fbd6 	bl	8009fd8 <__d2b>
 800a82c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a82e:	2800      	cmp	r0, #0
 800a830:	f43f aee1 	beq.w	800a5f6 <_strtod_l+0x446>
 800a834:	2101      	movs	r1, #1
 800a836:	9805      	ldr	r0, [sp, #20]
 800a838:	f7ff f926 	bl	8009a88 <__i2b>
 800a83c:	4680      	mov	r8, r0
 800a83e:	b948      	cbnz	r0, 800a854 <_strtod_l+0x6a4>
 800a840:	f04f 0800 	mov.w	r8, #0
 800a844:	e6d7      	b.n	800a5f6 <_strtod_l+0x446>
 800a846:	f04f 32ff 	mov.w	r2, #4294967295
 800a84a:	fa02 f303 	lsl.w	r3, r2, r3
 800a84e:	ea03 0a0a 	and.w	sl, r3, sl
 800a852:	e7af      	b.n	800a7b4 <_strtod_l+0x604>
 800a854:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a856:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a858:	2d00      	cmp	r5, #0
 800a85a:	bfa9      	itett	ge
 800a85c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a85e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a860:	18ef      	addge	r7, r5, r3
 800a862:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a864:	bfb8      	it	lt
 800a866:	1b5e      	sublt	r6, r3, r5
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	bfb8      	it	lt
 800a86c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a86e:	1aed      	subs	r5, r5, r3
 800a870:	4b65      	ldr	r3, [pc, #404]	@ (800aa08 <_strtod_l+0x858>)
 800a872:	4415      	add	r5, r2
 800a874:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a878:	3d01      	subs	r5, #1
 800a87a:	429d      	cmp	r5, r3
 800a87c:	da4f      	bge.n	800a91e <_strtod_l+0x76e>
 800a87e:	1b5b      	subs	r3, r3, r5
 800a880:	2101      	movs	r1, #1
 800a882:	2b1f      	cmp	r3, #31
 800a884:	eba2 0203 	sub.w	r2, r2, r3
 800a888:	dc3d      	bgt.n	800a906 <_strtod_l+0x756>
 800a88a:	fa01 f303 	lsl.w	r3, r1, r3
 800a88e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a890:	2300      	movs	r3, #0
 800a892:	9310      	str	r3, [sp, #64]	@ 0x40
 800a894:	18bd      	adds	r5, r7, r2
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	4416      	add	r6, r2
 800a89a:	42af      	cmp	r7, r5
 800a89c:	441e      	add	r6, r3
 800a89e:	463b      	mov	r3, r7
 800a8a0:	bfa8      	it	ge
 800a8a2:	462b      	movge	r3, r5
 800a8a4:	42b3      	cmp	r3, r6
 800a8a6:	bfa8      	it	ge
 800a8a8:	4633      	movge	r3, r6
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bfc2      	ittt	gt
 800a8ae:	1aed      	subgt	r5, r5, r3
 800a8b0:	1af6      	subgt	r6, r6, r3
 800a8b2:	1aff      	subgt	r7, r7, r3
 800a8b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dd16      	ble.n	800a8e8 <_strtod_l+0x738>
 800a8ba:	4641      	mov	r1, r8
 800a8bc:	461a      	mov	r2, r3
 800a8be:	9805      	ldr	r0, [sp, #20]
 800a8c0:	f7ff f99c 	bl	8009bfc <__pow5mult>
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d0ba      	beq.n	800a840 <_strtod_l+0x690>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8ce:	9805      	ldr	r0, [sp, #20]
 800a8d0:	f7ff f8f0 	bl	8009ab4 <__multiply>
 800a8d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f43f ae8d 	beq.w	800a5f6 <_strtod_l+0x446>
 800a8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f7fe ffd2 	bl	8009888 <_Bfree>
 800a8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	dc1d      	bgt.n	800a928 <_strtod_l+0x778>
 800a8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd23      	ble.n	800a93a <_strtod_l+0x78a>
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8f6:	9805      	ldr	r0, [sp, #20]
 800a8f8:	f7ff f980 	bl	8009bfc <__pow5mult>
 800a8fc:	4681      	mov	r9, r0
 800a8fe:	b9e0      	cbnz	r0, 800a93a <_strtod_l+0x78a>
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e677      	b.n	800a5f6 <_strtod_l+0x446>
 800a906:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a90a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a90c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a910:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a914:	35e2      	adds	r5, #226	@ 0xe2
 800a916:	fa01 f305 	lsl.w	r3, r1, r5
 800a91a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a91c:	e7ba      	b.n	800a894 <_strtod_l+0x6e4>
 800a91e:	2300      	movs	r3, #0
 800a920:	9310      	str	r3, [sp, #64]	@ 0x40
 800a922:	2301      	movs	r3, #1
 800a924:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a926:	e7b5      	b.n	800a894 <_strtod_l+0x6e4>
 800a928:	462a      	mov	r2, r5
 800a92a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a92c:	9805      	ldr	r0, [sp, #20]
 800a92e:	f7ff f9bf 	bl	8009cb0 <__lshift>
 800a932:	901a      	str	r0, [sp, #104]	@ 0x68
 800a934:	2800      	cmp	r0, #0
 800a936:	d1d9      	bne.n	800a8ec <_strtod_l+0x73c>
 800a938:	e65d      	b.n	800a5f6 <_strtod_l+0x446>
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	dd07      	ble.n	800a94e <_strtod_l+0x79e>
 800a93e:	4649      	mov	r1, r9
 800a940:	4632      	mov	r2, r6
 800a942:	9805      	ldr	r0, [sp, #20]
 800a944:	f7ff f9b4 	bl	8009cb0 <__lshift>
 800a948:	4681      	mov	r9, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0d8      	beq.n	800a900 <_strtod_l+0x750>
 800a94e:	2f00      	cmp	r7, #0
 800a950:	dd08      	ble.n	800a964 <_strtod_l+0x7b4>
 800a952:	4641      	mov	r1, r8
 800a954:	463a      	mov	r2, r7
 800a956:	9805      	ldr	r0, [sp, #20]
 800a958:	f7ff f9aa 	bl	8009cb0 <__lshift>
 800a95c:	4680      	mov	r8, r0
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f ae49 	beq.w	800a5f6 <_strtod_l+0x446>
 800a964:	464a      	mov	r2, r9
 800a966:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	f7ff fa29 	bl	8009dc0 <__mdiff>
 800a96e:	4604      	mov	r4, r0
 800a970:	2800      	cmp	r0, #0
 800a972:	f43f ae40 	beq.w	800a5f6 <_strtod_l+0x446>
 800a976:	68c3      	ldr	r3, [r0, #12]
 800a978:	4641      	mov	r1, r8
 800a97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a97c:	2300      	movs	r3, #0
 800a97e:	60c3      	str	r3, [r0, #12]
 800a980:	f7ff fa02 	bl	8009d88 <__mcmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	da45      	bge.n	800aa14 <_strtod_l+0x864>
 800a988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98a:	ea53 030a 	orrs.w	r3, r3, sl
 800a98e:	d16b      	bne.n	800aa68 <_strtod_l+0x8b8>
 800a990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a994:	2b00      	cmp	r3, #0
 800a996:	d167      	bne.n	800aa68 <_strtod_l+0x8b8>
 800a998:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	051b      	lsls	r3, r3, #20
 800a9a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9a4:	d960      	bls.n	800aa68 <_strtod_l+0x8b8>
 800a9a6:	6963      	ldr	r3, [r4, #20]
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_strtod_l+0x800>
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	dd5b      	ble.n	800aa68 <_strtod_l+0x8b8>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	9805      	ldr	r0, [sp, #20]
 800a9b6:	f7ff f97b 	bl	8009cb0 <__lshift>
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	4604      	mov	r4, r0
 800a9be:	f7ff f9e3 	bl	8009d88 <__mcmp>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	dd50      	ble.n	800aa68 <_strtod_l+0x8b8>
 800a9c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9ca:	9a08      	ldr	r2, [sp, #32]
 800a9cc:	0d1b      	lsrs	r3, r3, #20
 800a9ce:	051b      	lsls	r3, r3, #20
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d06a      	beq.n	800aaaa <_strtod_l+0x8fa>
 800a9d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9d8:	d867      	bhi.n	800aaaa <_strtod_l+0x8fa>
 800a9da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9de:	f67f ae9d 	bls.w	800a71c <_strtod_l+0x56c>
 800a9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800aa0c <_strtod_l+0x85c>)
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	4659      	mov	r1, fp
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f7f5 fe09 	bl	8000600 <__aeabi_dmul>
 800a9ee:	4b08      	ldr	r3, [pc, #32]	@ (800aa10 <_strtod_l+0x860>)
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	468b      	mov	fp, r1
 800a9f4:	400b      	ands	r3, r1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f47f ae08 	bne.w	800a60c <_strtod_l+0x45c>
 800a9fc:	2322      	movs	r3, #34	@ 0x22
 800a9fe:	9a05      	ldr	r2, [sp, #20]
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	e603      	b.n	800a60c <_strtod_l+0x45c>
 800aa04:	0800c6f8 	.word	0x0800c6f8
 800aa08:	fffffc02 	.word	0xfffffc02
 800aa0c:	39500000 	.word	0x39500000
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aa18:	d165      	bne.n	800aae6 <_strtod_l+0x936>
 800aa1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa20:	b35a      	cbz	r2, 800aa7a <_strtod_l+0x8ca>
 800aa22:	4a9f      	ldr	r2, [pc, #636]	@ (800aca0 <_strtod_l+0xaf0>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d12b      	bne.n	800aa80 <_strtod_l+0x8d0>
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	4651      	mov	r1, sl
 800aa2c:	b303      	cbz	r3, 800aa70 <_strtod_l+0x8c0>
 800aa2e:	465a      	mov	r2, fp
 800aa30:	4b9c      	ldr	r3, [pc, #624]	@ (800aca4 <_strtod_l+0xaf4>)
 800aa32:	4013      	ands	r3, r2
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa3c:	d81b      	bhi.n	800aa76 <_strtod_l+0x8c6>
 800aa3e:	0d1b      	lsrs	r3, r3, #20
 800aa40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d119      	bne.n	800aa80 <_strtod_l+0x8d0>
 800aa4c:	4b96      	ldr	r3, [pc, #600]	@ (800aca8 <_strtod_l+0xaf8>)
 800aa4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d102      	bne.n	800aa5a <_strtod_l+0x8aa>
 800aa54:	3101      	adds	r1, #1
 800aa56:	f43f adce 	beq.w	800a5f6 <_strtod_l+0x446>
 800aa5a:	4b92      	ldr	r3, [pc, #584]	@ (800aca4 <_strtod_l+0xaf4>)
 800aa5c:	f04f 0a00 	mov.w	sl, #0
 800aa60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa62:	401a      	ands	r2, r3
 800aa64:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1b9      	bne.n	800a9e2 <_strtod_l+0x832>
 800aa6e:	e5cd      	b.n	800a60c <_strtod_l+0x45c>
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295
 800aa74:	e7e8      	b.n	800aa48 <_strtod_l+0x898>
 800aa76:	4613      	mov	r3, r2
 800aa78:	e7e6      	b.n	800aa48 <_strtod_l+0x898>
 800aa7a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa7e:	d0a2      	beq.n	800a9c6 <_strtod_l+0x816>
 800aa80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa82:	b1db      	cbz	r3, 800aabc <_strtod_l+0x90c>
 800aa84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa86:	4213      	tst	r3, r2
 800aa88:	d0ee      	beq.n	800aa68 <_strtod_l+0x8b8>
 800aa8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	9a08      	ldr	r2, [sp, #32]
 800aa90:	4659      	mov	r1, fp
 800aa92:	b1bb      	cbz	r3, 800aac4 <_strtod_l+0x914>
 800aa94:	f7ff fb6e 	bl	800a174 <sulp>
 800aa98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa9c:	ec53 2b10 	vmov	r2, r3, d0
 800aaa0:	f7f5 fbf8 	bl	8000294 <__adddf3>
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	e7de      	b.n	800aa68 <_strtod_l+0x8b8>
 800aaaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aaae:	f04f 3aff 	mov.w	sl, #4294967295
 800aab2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aab6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aaba:	e7d5      	b.n	800aa68 <_strtod_l+0x8b8>
 800aabc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aabe:	ea13 0f0a 	tst.w	r3, sl
 800aac2:	e7e1      	b.n	800aa88 <_strtod_l+0x8d8>
 800aac4:	f7ff fb56 	bl	800a174 <sulp>
 800aac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aacc:	ec53 2b10 	vmov	r2, r3, d0
 800aad0:	f7f5 fbde 	bl	8000290 <__aeabi_dsub>
 800aad4:	2200      	movs	r2, #0
 800aad6:	2300      	movs	r3, #0
 800aad8:	4682      	mov	sl, r0
 800aada:	468b      	mov	fp, r1
 800aadc:	f7f5 fff8 	bl	8000ad0 <__aeabi_dcmpeq>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0c1      	beq.n	800aa68 <_strtod_l+0x8b8>
 800aae4:	e61a      	b.n	800a71c <_strtod_l+0x56c>
 800aae6:	4641      	mov	r1, r8
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7ff facd 	bl	800a088 <__ratio>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aaf4:	ec57 6b10 	vmov	r6, r7, d0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 fffc 	bl	8000af8 <__aeabi_dcmple>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d06f      	beq.n	800abe4 <_strtod_l+0xa34>
 800ab04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d17a      	bne.n	800ac00 <_strtod_l+0xa50>
 800ab0a:	f1ba 0f00 	cmp.w	sl, #0
 800ab0e:	d158      	bne.n	800abc2 <_strtod_l+0xa12>
 800ab10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d15a      	bne.n	800abd0 <_strtod_l+0xa20>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4b63      	ldr	r3, [pc, #396]	@ (800acac <_strtod_l+0xafc>)
 800ab1e:	4630      	mov	r0, r6
 800ab20:	4639      	mov	r1, r7
 800ab22:	f7f5 ffdf 	bl	8000ae4 <__aeabi_dcmplt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d159      	bne.n	800abde <_strtod_l+0xa2e>
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4b5f      	ldr	r3, [pc, #380]	@ (800acb0 <_strtod_l+0xb00>)
 800ab32:	f7f5 fd65 	bl	8000600 <__aeabi_dmul>
 800ab36:	4606      	mov	r6, r0
 800ab38:	460f      	mov	r7, r1
 800ab3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab3e:	9606      	str	r6, [sp, #24]
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	4d58      	ldr	r5, [pc, #352]	@ (800aca4 <_strtod_l+0xaf4>)
 800ab44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4e:	401d      	ands	r5, r3
 800ab50:	4b58      	ldr	r3, [pc, #352]	@ (800acb4 <_strtod_l+0xb04>)
 800ab52:	429d      	cmp	r5, r3
 800ab54:	f040 80b2 	bne.w	800acbc <_strtod_l+0xb0c>
 800ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab5e:	ec4b ab10 	vmov	d0, sl, fp
 800ab62:	f7ff f9c5 	bl	8009ef0 <__ulp>
 800ab66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab6a:	ec51 0b10 	vmov	r0, r1, d0
 800ab6e:	f7f5 fd47 	bl	8000600 <__aeabi_dmul>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 fb8d 	bl	8000294 <__adddf3>
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4949      	ldr	r1, [pc, #292]	@ (800aca4 <_strtod_l+0xaf4>)
 800ab7e:	4682      	mov	sl, r0
 800ab80:	4a4d      	ldr	r2, [pc, #308]	@ (800acb8 <_strtod_l+0xb08>)
 800ab82:	4019      	ands	r1, r3
 800ab84:	4291      	cmp	r1, r2
 800ab86:	d942      	bls.n	800ac0e <_strtod_l+0xa5e>
 800ab88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab8a:	4b47      	ldr	r3, [pc, #284]	@ (800aca8 <_strtod_l+0xaf8>)
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d103      	bne.n	800ab98 <_strtod_l+0x9e8>
 800ab90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab92:	3301      	adds	r3, #1
 800ab94:	f43f ad2f 	beq.w	800a5f6 <_strtod_l+0x446>
 800ab98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aca8 <_strtod_l+0xaf8>
 800ab9c:	f04f 3aff 	mov.w	sl, #4294967295
 800aba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aba2:	9805      	ldr	r0, [sp, #20]
 800aba4:	f7fe fe70 	bl	8009888 <_Bfree>
 800aba8:	4649      	mov	r1, r9
 800abaa:	9805      	ldr	r0, [sp, #20]
 800abac:	f7fe fe6c 	bl	8009888 <_Bfree>
 800abb0:	4641      	mov	r1, r8
 800abb2:	9805      	ldr	r0, [sp, #20]
 800abb4:	f7fe fe68 	bl	8009888 <_Bfree>
 800abb8:	4621      	mov	r1, r4
 800abba:	9805      	ldr	r0, [sp, #20]
 800abbc:	f7fe fe64 	bl	8009888 <_Bfree>
 800abc0:	e619      	b.n	800a7f6 <_strtod_l+0x646>
 800abc2:	f1ba 0f01 	cmp.w	sl, #1
 800abc6:	d103      	bne.n	800abd0 <_strtod_l+0xa20>
 800abc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f43f ada6 	beq.w	800a71c <_strtod_l+0x56c>
 800abd0:	2600      	movs	r6, #0
 800abd2:	4f36      	ldr	r7, [pc, #216]	@ (800acac <_strtod_l+0xafc>)
 800abd4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ac80 <_strtod_l+0xad0>
 800abd8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abdc:	e7b1      	b.n	800ab42 <_strtod_l+0x992>
 800abde:	2600      	movs	r6, #0
 800abe0:	4f33      	ldr	r7, [pc, #204]	@ (800acb0 <_strtod_l+0xb00>)
 800abe2:	e7aa      	b.n	800ab3a <_strtod_l+0x98a>
 800abe4:	4b32      	ldr	r3, [pc, #200]	@ (800acb0 <_strtod_l+0xb00>)
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	2200      	movs	r2, #0
 800abec:	f7f5 fd08 	bl	8000600 <__aeabi_dmul>
 800abf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abf2:	4606      	mov	r6, r0
 800abf4:	460f      	mov	r7, r1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d09f      	beq.n	800ab3a <_strtod_l+0x98a>
 800abfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abfe:	e7a0      	b.n	800ab42 <_strtod_l+0x992>
 800ac00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac88 <_strtod_l+0xad8>
 800ac04:	ec57 6b17 	vmov	r6, r7, d7
 800ac08:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac0c:	e799      	b.n	800ab42 <_strtod_l+0x992>
 800ac0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac12:	9b08      	ldr	r3, [sp, #32]
 800ac14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1c1      	bne.n	800aba0 <_strtod_l+0x9f0>
 800ac1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac20:	0d1b      	lsrs	r3, r3, #20
 800ac22:	051b      	lsls	r3, r3, #20
 800ac24:	429d      	cmp	r5, r3
 800ac26:	d1bb      	bne.n	800aba0 <_strtod_l+0x9f0>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f6 f848 	bl	8000cc0 <__aeabi_d2lz>
 800ac30:	f7f5 fcb8 	bl	80005a4 <__aeabi_l2d>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac40:	f7f5 fb26 	bl	8000290 <__aeabi_dsub>
 800ac44:	460b      	mov	r3, r1
 800ac46:	4602      	mov	r2, r0
 800ac48:	ea46 060a 	orr.w	r6, r6, sl
 800ac4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac52:	431e      	orrs	r6, r3
 800ac54:	d06f      	beq.n	800ad36 <_strtod_l+0xb86>
 800ac56:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac90 <_strtod_l+0xae0>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 ff42 	bl	8000ae4 <__aeabi_dcmplt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f47f acd3 	bne.w	800a60c <_strtod_l+0x45c>
 800ac66:	a30c      	add	r3, pc, #48	@ (adr r3, 800ac98 <_strtod_l+0xae8>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac70:	f7f5 ff56 	bl	8000b20 <__aeabi_dcmpgt>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d093      	beq.n	800aba0 <_strtod_l+0x9f0>
 800ac78:	e4c8      	b.n	800a60c <_strtod_l+0x45c>
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	00000000 	.word	0x00000000
 800ac84:	bff00000 	.word	0xbff00000
 800ac88:	00000000 	.word	0x00000000
 800ac8c:	3ff00000 	.word	0x3ff00000
 800ac90:	94a03595 	.word	0x94a03595
 800ac94:	3fdfffff 	.word	0x3fdfffff
 800ac98:	35afe535 	.word	0x35afe535
 800ac9c:	3fe00000 	.word	0x3fe00000
 800aca0:	000fffff 	.word	0x000fffff
 800aca4:	7ff00000 	.word	0x7ff00000
 800aca8:	7fefffff 	.word	0x7fefffff
 800acac:	3ff00000 	.word	0x3ff00000
 800acb0:	3fe00000 	.word	0x3fe00000
 800acb4:	7fe00000 	.word	0x7fe00000
 800acb8:	7c9fffff 	.word	0x7c9fffff
 800acbc:	9b08      	ldr	r3, [sp, #32]
 800acbe:	b323      	cbz	r3, 800ad0a <_strtod_l+0xb5a>
 800acc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800acc4:	d821      	bhi.n	800ad0a <_strtod_l+0xb5a>
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	a327      	add	r3, pc, #156	@ (adr r3, 800ad68 <_strtod_l+0xbb8>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 ff12 	bl	8000af8 <__aeabi_dcmple>
 800acd4:	b1a0      	cbz	r0, 800ad00 <_strtod_l+0xb50>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4630      	mov	r0, r6
 800acda:	f7f5 ff69 	bl	8000bb0 <__aeabi_d2uiz>
 800acde:	2801      	cmp	r0, #1
 800ace0:	bf38      	it	cc
 800ace2:	2001      	movcc	r0, #1
 800ace4:	f7f5 fc12 	bl	800050c <__aeabi_ui2d>
 800ace8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	b9fb      	cbnz	r3, 800ad30 <_strtod_l+0xb80>
 800acf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acf4:	9014      	str	r0, [sp, #80]	@ 0x50
 800acf6:	9315      	str	r3, [sp, #84]	@ 0x54
 800acf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800acfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ad06:	1b5b      	subs	r3, r3, r5
 800ad08:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad0a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ad0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad12:	f7ff f8ed 	bl	8009ef0 <__ulp>
 800ad16:	4650      	mov	r0, sl
 800ad18:	4659      	mov	r1, fp
 800ad1a:	ec53 2b10 	vmov	r2, r3, d0
 800ad1e:	f7f5 fc6f 	bl	8000600 <__aeabi_dmul>
 800ad22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad26:	f7f5 fab5 	bl	8000294 <__adddf3>
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	468b      	mov	fp, r1
 800ad2e:	e770      	b.n	800ac12 <_strtod_l+0xa62>
 800ad30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad34:	e7e0      	b.n	800acf8 <_strtod_l+0xb48>
 800ad36:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad70 <_strtod_l+0xbc0>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7f5 fed2 	bl	8000ae4 <__aeabi_dcmplt>
 800ad40:	e798      	b.n	800ac74 <_strtod_l+0xac4>
 800ad42:	2300      	movs	r3, #0
 800ad44:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad48:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	f7ff ba6d 	b.w	800a22a <_strtod_l+0x7a>
 800ad50:	2a65      	cmp	r2, #101	@ 0x65
 800ad52:	f43f ab67 	beq.w	800a424 <_strtod_l+0x274>
 800ad56:	2a45      	cmp	r2, #69	@ 0x45
 800ad58:	f43f ab64 	beq.w	800a424 <_strtod_l+0x274>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f7ff bba0 	b.w	800a4a2 <_strtod_l+0x2f2>
 800ad62:	bf00      	nop
 800ad64:	f3af 8000 	nop.w
 800ad68:	ffc00000 	.word	0xffc00000
 800ad6c:	41dfffff 	.word	0x41dfffff
 800ad70:	94a03595 	.word	0x94a03595
 800ad74:	3fcfffff 	.word	0x3fcfffff

0800ad78 <_strtod_r>:
 800ad78:	4b01      	ldr	r3, [pc, #4]	@ (800ad80 <_strtod_r+0x8>)
 800ad7a:	f7ff ba19 	b.w	800a1b0 <_strtod_l>
 800ad7e:	bf00      	nop
 800ad80:	20000068 	.word	0x20000068

0800ad84 <_strtol_l.isra.0>:
 800ad84:	2b24      	cmp	r3, #36	@ 0x24
 800ad86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8a:	4686      	mov	lr, r0
 800ad8c:	4690      	mov	r8, r2
 800ad8e:	d801      	bhi.n	800ad94 <_strtol_l.isra.0+0x10>
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d106      	bne.n	800ada2 <_strtol_l.isra.0+0x1e>
 800ad94:	f7fd fe3e 	bl	8008a14 <__errno>
 800ad98:	2316      	movs	r3, #22
 800ad9a:	6003      	str	r3, [r0, #0]
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada2:	460d      	mov	r5, r1
 800ada4:	4833      	ldr	r0, [pc, #204]	@ (800ae74 <_strtol_l.isra.0+0xf0>)
 800ada6:	462a      	mov	r2, r5
 800ada8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adac:	5d06      	ldrb	r6, [r0, r4]
 800adae:	f016 0608 	ands.w	r6, r6, #8
 800adb2:	d1f8      	bne.n	800ada6 <_strtol_l.isra.0+0x22>
 800adb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800adb6:	d110      	bne.n	800adda <_strtol_l.isra.0+0x56>
 800adb8:	782c      	ldrb	r4, [r5, #0]
 800adba:	2601      	movs	r6, #1
 800adbc:	1c95      	adds	r5, r2, #2
 800adbe:	f033 0210 	bics.w	r2, r3, #16
 800adc2:	d115      	bne.n	800adf0 <_strtol_l.isra.0+0x6c>
 800adc4:	2c30      	cmp	r4, #48	@ 0x30
 800adc6:	d10d      	bne.n	800ade4 <_strtol_l.isra.0+0x60>
 800adc8:	782a      	ldrb	r2, [r5, #0]
 800adca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adce:	2a58      	cmp	r2, #88	@ 0x58
 800add0:	d108      	bne.n	800ade4 <_strtol_l.isra.0+0x60>
 800add2:	786c      	ldrb	r4, [r5, #1]
 800add4:	3502      	adds	r5, #2
 800add6:	2310      	movs	r3, #16
 800add8:	e00a      	b.n	800adf0 <_strtol_l.isra.0+0x6c>
 800adda:	2c2b      	cmp	r4, #43	@ 0x2b
 800addc:	bf04      	itt	eq
 800adde:	782c      	ldrbeq	r4, [r5, #0]
 800ade0:	1c95      	addeq	r5, r2, #2
 800ade2:	e7ec      	b.n	800adbe <_strtol_l.isra.0+0x3a>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f6      	bne.n	800add6 <_strtol_l.isra.0+0x52>
 800ade8:	2c30      	cmp	r4, #48	@ 0x30
 800adea:	bf14      	ite	ne
 800adec:	230a      	movne	r3, #10
 800adee:	2308      	moveq	r3, #8
 800adf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800adf4:	2200      	movs	r2, #0
 800adf6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800adfa:	4610      	mov	r0, r2
 800adfc:	fbbc f9f3 	udiv	r9, ip, r3
 800ae00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae08:	2f09      	cmp	r7, #9
 800ae0a:	d80f      	bhi.n	800ae2c <_strtol_l.isra.0+0xa8>
 800ae0c:	463c      	mov	r4, r7
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	dd1b      	ble.n	800ae4a <_strtol_l.isra.0+0xc6>
 800ae12:	1c57      	adds	r7, r2, #1
 800ae14:	d007      	beq.n	800ae26 <_strtol_l.isra.0+0xa2>
 800ae16:	4581      	cmp	r9, r0
 800ae18:	d314      	bcc.n	800ae44 <_strtol_l.isra.0+0xc0>
 800ae1a:	d101      	bne.n	800ae20 <_strtol_l.isra.0+0x9c>
 800ae1c:	45a2      	cmp	sl, r4
 800ae1e:	db11      	blt.n	800ae44 <_strtol_l.isra.0+0xc0>
 800ae20:	fb00 4003 	mla	r0, r0, r3, r4
 800ae24:	2201      	movs	r2, #1
 800ae26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae2a:	e7eb      	b.n	800ae04 <_strtol_l.isra.0+0x80>
 800ae2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae30:	2f19      	cmp	r7, #25
 800ae32:	d801      	bhi.n	800ae38 <_strtol_l.isra.0+0xb4>
 800ae34:	3c37      	subs	r4, #55	@ 0x37
 800ae36:	e7ea      	b.n	800ae0e <_strtol_l.isra.0+0x8a>
 800ae38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae3c:	2f19      	cmp	r7, #25
 800ae3e:	d804      	bhi.n	800ae4a <_strtol_l.isra.0+0xc6>
 800ae40:	3c57      	subs	r4, #87	@ 0x57
 800ae42:	e7e4      	b.n	800ae0e <_strtol_l.isra.0+0x8a>
 800ae44:	f04f 32ff 	mov.w	r2, #4294967295
 800ae48:	e7ed      	b.n	800ae26 <_strtol_l.isra.0+0xa2>
 800ae4a:	1c53      	adds	r3, r2, #1
 800ae4c:	d108      	bne.n	800ae60 <_strtol_l.isra.0+0xdc>
 800ae4e:	2322      	movs	r3, #34	@ 0x22
 800ae50:	4660      	mov	r0, ip
 800ae52:	f8ce 3000 	str.w	r3, [lr]
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	d0a0      	beq.n	800ad9e <_strtol_l.isra.0+0x1a>
 800ae5c:	1e69      	subs	r1, r5, #1
 800ae5e:	e006      	b.n	800ae6e <_strtol_l.isra.0+0xea>
 800ae60:	b106      	cbz	r6, 800ae64 <_strtol_l.isra.0+0xe0>
 800ae62:	4240      	negs	r0, r0
 800ae64:	f1b8 0f00 	cmp.w	r8, #0
 800ae68:	d099      	beq.n	800ad9e <_strtol_l.isra.0+0x1a>
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	d1f6      	bne.n	800ae5c <_strtol_l.isra.0+0xd8>
 800ae6e:	f8c8 1000 	str.w	r1, [r8]
 800ae72:	e794      	b.n	800ad9e <_strtol_l.isra.0+0x1a>
 800ae74:	0800c721 	.word	0x0800c721

0800ae78 <_strtol_r>:
 800ae78:	f7ff bf84 	b.w	800ad84 <_strtol_l.isra.0>

0800ae7c <__ssputs_r>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	461f      	mov	r7, r3
 800ae82:	688e      	ldr	r6, [r1, #8]
 800ae84:	4682      	mov	sl, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	42be      	cmp	r6, r7
 800ae8a:	4690      	mov	r8, r2
 800ae8c:	680b      	ldr	r3, [r1, #0]
 800ae8e:	d82d      	bhi.n	800aeec <__ssputs_r+0x70>
 800ae90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae98:	d026      	beq.n	800aee8 <__ssputs_r+0x6c>
 800ae9a:	6965      	ldr	r5, [r4, #20]
 800ae9c:	6909      	ldr	r1, [r1, #16]
 800ae9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aea2:	eba3 0901 	sub.w	r9, r3, r1
 800aea6:	1c7b      	adds	r3, r7, #1
 800aea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeac:	444b      	add	r3, r9
 800aeae:	106d      	asrs	r5, r5, #1
 800aeb0:	429d      	cmp	r5, r3
 800aeb2:	bf38      	it	cc
 800aeb4:	461d      	movcc	r5, r3
 800aeb6:	0553      	lsls	r3, r2, #21
 800aeb8:	d527      	bpl.n	800af0a <__ssputs_r+0x8e>
 800aeba:	4629      	mov	r1, r5
 800aebc:	f7fc fd2e 	bl	800791c <_malloc_r>
 800aec0:	4606      	mov	r6, r0
 800aec2:	b360      	cbz	r0, 800af1e <__ssputs_r+0xa2>
 800aec4:	464a      	mov	r2, r9
 800aec6:	6921      	ldr	r1, [r4, #16]
 800aec8:	f7fd fddf 	bl	8008a8a <memcpy>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	6126      	str	r6, [r4, #16]
 800aeda:	444e      	add	r6, r9
 800aedc:	6165      	str	r5, [r4, #20]
 800aede:	eba5 0509 	sub.w	r5, r5, r9
 800aee2:	6026      	str	r6, [r4, #0]
 800aee4:	463e      	mov	r6, r7
 800aee6:	60a5      	str	r5, [r4, #8]
 800aee8:	42be      	cmp	r6, r7
 800aeea:	d900      	bls.n	800aeee <__ssputs_r+0x72>
 800aeec:	463e      	mov	r6, r7
 800aeee:	4632      	mov	r2, r6
 800aef0:	4641      	mov	r1, r8
 800aef2:	6820      	ldr	r0, [r4, #0]
 800aef4:	f000 f9c6 	bl	800b284 <memmove>
 800aef8:	68a3      	ldr	r3, [r4, #8]
 800aefa:	2000      	movs	r0, #0
 800aefc:	1b9b      	subs	r3, r3, r6
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	4433      	add	r3, r6
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0a:	462a      	mov	r2, r5
 800af0c:	f000 fd69 	bl	800b9e2 <_realloc_r>
 800af10:	4606      	mov	r6, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	d1e0      	bne.n	800aed8 <__ssputs_r+0x5c>
 800af16:	6921      	ldr	r1, [r4, #16]
 800af18:	4650      	mov	r0, sl
 800af1a:	f7fe fc2b 	bl	8009774 <_free_r>
 800af1e:	230c      	movs	r3, #12
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	f8ca 3000 	str.w	r3, [sl]
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af2e:	81a3      	strh	r3, [r4, #12]
 800af30:	e7e9      	b.n	800af06 <__ssputs_r+0x8a>
	...

0800af34 <_svfiprintf_r>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	4698      	mov	r8, r3
 800af3a:	898b      	ldrh	r3, [r1, #12]
 800af3c:	b09d      	sub	sp, #116	@ 0x74
 800af3e:	4607      	mov	r7, r0
 800af40:	061b      	lsls	r3, r3, #24
 800af42:	460d      	mov	r5, r1
 800af44:	4614      	mov	r4, r2
 800af46:	d510      	bpl.n	800af6a <_svfiprintf_r+0x36>
 800af48:	690b      	ldr	r3, [r1, #16]
 800af4a:	b973      	cbnz	r3, 800af6a <_svfiprintf_r+0x36>
 800af4c:	2140      	movs	r1, #64	@ 0x40
 800af4e:	f7fc fce5 	bl	800791c <_malloc_r>
 800af52:	6028      	str	r0, [r5, #0]
 800af54:	6128      	str	r0, [r5, #16]
 800af56:	b930      	cbnz	r0, 800af66 <_svfiprintf_r+0x32>
 800af58:	230c      	movs	r3, #12
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	f04f 30ff 	mov.w	r0, #4294967295
 800af60:	b01d      	add	sp, #116	@ 0x74
 800af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af66:	2340      	movs	r3, #64	@ 0x40
 800af68:	616b      	str	r3, [r5, #20]
 800af6a:	2300      	movs	r3, #0
 800af6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af70:	f04f 0901 	mov.w	r9, #1
 800af74:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b118 <_svfiprintf_r+0x1e4>
 800af78:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7a:	2320      	movs	r3, #32
 800af7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af80:	2330      	movs	r3, #48	@ 0x30
 800af82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af86:	4623      	mov	r3, r4
 800af88:	469a      	mov	sl, r3
 800af8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af8e:	b10a      	cbz	r2, 800af94 <_svfiprintf_r+0x60>
 800af90:	2a25      	cmp	r2, #37	@ 0x25
 800af92:	d1f9      	bne.n	800af88 <_svfiprintf_r+0x54>
 800af94:	ebba 0b04 	subs.w	fp, sl, r4
 800af98:	d00b      	beq.n	800afb2 <_svfiprintf_r+0x7e>
 800af9a:	465b      	mov	r3, fp
 800af9c:	4622      	mov	r2, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	4638      	mov	r0, r7
 800afa2:	f7ff ff6b 	bl	800ae7c <__ssputs_r>
 800afa6:	3001      	adds	r0, #1
 800afa8:	f000 80a7 	beq.w	800b0fa <_svfiprintf_r+0x1c6>
 800afac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afae:	445a      	add	r2, fp
 800afb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afb2:	f89a 3000 	ldrb.w	r3, [sl]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 809f 	beq.w	800b0fa <_svfiprintf_r+0x1c6>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295
 800afc2:	f10a 0a01 	add.w	sl, sl, #1
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afce:	931a      	str	r3, [sp, #104]	@ 0x68
 800afd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd4:	4654      	mov	r4, sl
 800afd6:	2205      	movs	r2, #5
 800afd8:	484f      	ldr	r0, [pc, #316]	@ (800b118 <_svfiprintf_r+0x1e4>)
 800afda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afde:	f7fd fd46 	bl	8008a6e <memchr>
 800afe2:	9a04      	ldr	r2, [sp, #16]
 800afe4:	b9d8      	cbnz	r0, 800b01e <_svfiprintf_r+0xea>
 800afe6:	06d0      	lsls	r0, r2, #27
 800afe8:	bf44      	itt	mi
 800afea:	2320      	movmi	r3, #32
 800afec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aff0:	0711      	lsls	r1, r2, #28
 800aff2:	bf44      	itt	mi
 800aff4:	232b      	movmi	r3, #43	@ 0x2b
 800aff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800affa:	f89a 3000 	ldrb.w	r3, [sl]
 800affe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b000:	d015      	beq.n	800b02e <_svfiprintf_r+0xfa>
 800b002:	9a07      	ldr	r2, [sp, #28]
 800b004:	4654      	mov	r4, sl
 800b006:	2000      	movs	r0, #0
 800b008:	f04f 0c0a 	mov.w	ip, #10
 800b00c:	4621      	mov	r1, r4
 800b00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b012:	3b30      	subs	r3, #48	@ 0x30
 800b014:	2b09      	cmp	r3, #9
 800b016:	d94b      	bls.n	800b0b0 <_svfiprintf_r+0x17c>
 800b018:	b1b0      	cbz	r0, 800b048 <_svfiprintf_r+0x114>
 800b01a:	9207      	str	r2, [sp, #28]
 800b01c:	e014      	b.n	800b048 <_svfiprintf_r+0x114>
 800b01e:	eba0 0308 	sub.w	r3, r0, r8
 800b022:	46a2      	mov	sl, r4
 800b024:	fa09 f303 	lsl.w	r3, r9, r3
 800b028:	4313      	orrs	r3, r2
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	e7d2      	b.n	800afd4 <_svfiprintf_r+0xa0>
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	1d19      	adds	r1, r3, #4
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	9103      	str	r1, [sp, #12]
 800b038:	bfbb      	ittet	lt
 800b03a:	425b      	neglt	r3, r3
 800b03c:	f042 0202 	orrlt.w	r2, r2, #2
 800b040:	9307      	strge	r3, [sp, #28]
 800b042:	9307      	strlt	r3, [sp, #28]
 800b044:	bfb8      	it	lt
 800b046:	9204      	strlt	r2, [sp, #16]
 800b048:	7823      	ldrb	r3, [r4, #0]
 800b04a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b04c:	d10a      	bne.n	800b064 <_svfiprintf_r+0x130>
 800b04e:	7863      	ldrb	r3, [r4, #1]
 800b050:	2b2a      	cmp	r3, #42	@ 0x2a
 800b052:	d132      	bne.n	800b0ba <_svfiprintf_r+0x186>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	3402      	adds	r4, #2
 800b058:	1d1a      	adds	r2, r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b060:	9203      	str	r2, [sp, #12]
 800b062:	9305      	str	r3, [sp, #20]
 800b064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b128 <_svfiprintf_r+0x1f4>
 800b068:	2203      	movs	r2, #3
 800b06a:	7821      	ldrb	r1, [r4, #0]
 800b06c:	4650      	mov	r0, sl
 800b06e:	f7fd fcfe 	bl	8008a6e <memchr>
 800b072:	b138      	cbz	r0, 800b084 <_svfiprintf_r+0x150>
 800b074:	eba0 000a 	sub.w	r0, r0, sl
 800b078:	2240      	movs	r2, #64	@ 0x40
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	3401      	adds	r4, #1
 800b07e:	4082      	lsls	r2, r0
 800b080:	4313      	orrs	r3, r2
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	2206      	movs	r2, #6
 800b08a:	4824      	ldr	r0, [pc, #144]	@ (800b11c <_svfiprintf_r+0x1e8>)
 800b08c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b090:	f7fd fced 	bl	8008a6e <memchr>
 800b094:	2800      	cmp	r0, #0
 800b096:	d036      	beq.n	800b106 <_svfiprintf_r+0x1d2>
 800b098:	4b21      	ldr	r3, [pc, #132]	@ (800b120 <_svfiprintf_r+0x1ec>)
 800b09a:	bb1b      	cbnz	r3, 800b0e4 <_svfiprintf_r+0x1b0>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	3307      	adds	r3, #7
 800b0a0:	f023 0307 	bic.w	r3, r3, #7
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0aa:	4433      	add	r3, r6
 800b0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ae:	e76a      	b.n	800af86 <_svfiprintf_r+0x52>
 800b0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	e7a8      	b.n	800b00c <_svfiprintf_r+0xd8>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	3401      	adds	r4, #1
 800b0be:	f04f 0c0a 	mov.w	ip, #10
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0cc:	3a30      	subs	r2, #48	@ 0x30
 800b0ce:	2a09      	cmp	r2, #9
 800b0d0:	d903      	bls.n	800b0da <_svfiprintf_r+0x1a6>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0c6      	beq.n	800b064 <_svfiprintf_r+0x130>
 800b0d6:	9105      	str	r1, [sp, #20]
 800b0d8:	e7c4      	b.n	800b064 <_svfiprintf_r+0x130>
 800b0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0de:	4604      	mov	r4, r0
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7f0      	b.n	800b0c6 <_svfiprintf_r+0x192>
 800b0e4:	ab03      	add	r3, sp, #12
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	a904      	add	r1, sp, #16
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <_svfiprintf_r+0x1f0>)
 800b0f0:	f7fc fd3e 	bl	8007b70 <_printf_float>
 800b0f4:	1c42      	adds	r2, r0, #1
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	d1d6      	bne.n	800b0a8 <_svfiprintf_r+0x174>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	065b      	lsls	r3, r3, #25
 800b0fe:	f53f af2d 	bmi.w	800af5c <_svfiprintf_r+0x28>
 800b102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b104:	e72c      	b.n	800af60 <_svfiprintf_r+0x2c>
 800b106:	ab03      	add	r3, sp, #12
 800b108:	462a      	mov	r2, r5
 800b10a:	a904      	add	r1, sp, #16
 800b10c:	4638      	mov	r0, r7
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4b04      	ldr	r3, [pc, #16]	@ (800b124 <_svfiprintf_r+0x1f0>)
 800b112:	f7fc ffc9 	bl	80080a8 <_printf_i>
 800b116:	e7ed      	b.n	800b0f4 <_svfiprintf_r+0x1c0>
 800b118:	0800c519 	.word	0x0800c519
 800b11c:	0800c523 	.word	0x0800c523
 800b120:	08007b71 	.word	0x08007b71
 800b124:	0800ae7d 	.word	0x0800ae7d
 800b128:	0800c51f 	.word	0x0800c51f

0800b12c <__sflush_r>:
 800b12c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	0716      	lsls	r6, r2, #28
 800b136:	4605      	mov	r5, r0
 800b138:	460c      	mov	r4, r1
 800b13a:	d454      	bmi.n	800b1e6 <__sflush_r+0xba>
 800b13c:	684b      	ldr	r3, [r1, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dc02      	bgt.n	800b148 <__sflush_r+0x1c>
 800b142:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd48      	ble.n	800b1da <__sflush_r+0xae>
 800b148:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	d045      	beq.n	800b1da <__sflush_r+0xae>
 800b14e:	2300      	movs	r3, #0
 800b150:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b154:	682f      	ldr	r7, [r5, #0]
 800b156:	6a21      	ldr	r1, [r4, #32]
 800b158:	602b      	str	r3, [r5, #0]
 800b15a:	d030      	beq.n	800b1be <__sflush_r+0x92>
 800b15c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	0759      	lsls	r1, r3, #29
 800b162:	d505      	bpl.n	800b170 <__sflush_r+0x44>
 800b164:	6863      	ldr	r3, [r4, #4]
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b16a:	b10b      	cbz	r3, 800b170 <__sflush_r+0x44>
 800b16c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	2300      	movs	r3, #0
 800b172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	4628      	mov	r0, r5
 800b178:	47b0      	blx	r6
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	d106      	bne.n	800b18e <__sflush_r+0x62>
 800b180:	6829      	ldr	r1, [r5, #0]
 800b182:	291d      	cmp	r1, #29
 800b184:	d82b      	bhi.n	800b1de <__sflush_r+0xb2>
 800b186:	4a2a      	ldr	r2, [pc, #168]	@ (800b230 <__sflush_r+0x104>)
 800b188:	40ca      	lsrs	r2, r1
 800b18a:	07d6      	lsls	r6, r2, #31
 800b18c:	d527      	bpl.n	800b1de <__sflush_r+0xb2>
 800b18e:	2200      	movs	r2, #0
 800b190:	04d9      	lsls	r1, r3, #19
 800b192:	6062      	str	r2, [r4, #4]
 800b194:	6922      	ldr	r2, [r4, #16]
 800b196:	6022      	str	r2, [r4, #0]
 800b198:	d504      	bpl.n	800b1a4 <__sflush_r+0x78>
 800b19a:	1c42      	adds	r2, r0, #1
 800b19c:	d101      	bne.n	800b1a2 <__sflush_r+0x76>
 800b19e:	682b      	ldr	r3, [r5, #0]
 800b1a0:	b903      	cbnz	r3, 800b1a4 <__sflush_r+0x78>
 800b1a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1a6:	602f      	str	r7, [r5, #0]
 800b1a8:	b1b9      	cbz	r1, 800b1da <__sflush_r+0xae>
 800b1aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	d002      	beq.n	800b1b8 <__sflush_r+0x8c>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f7fe fade 	bl	8009774 <_free_r>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1bc:	e00d      	b.n	800b1da <__sflush_r+0xae>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b0      	blx	r6
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	1c50      	adds	r0, r2, #1
 800b1c8:	d1c9      	bne.n	800b15e <__sflush_r+0x32>
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0c6      	beq.n	800b15e <__sflush_r+0x32>
 800b1d0:	2b1d      	cmp	r3, #29
 800b1d2:	d001      	beq.n	800b1d8 <__sflush_r+0xac>
 800b1d4:	2b16      	cmp	r3, #22
 800b1d6:	d11d      	bne.n	800b214 <__sflush_r+0xe8>
 800b1d8:	602f      	str	r7, [r5, #0]
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e021      	b.n	800b222 <__sflush_r+0xf6>
 800b1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1e2:	b21b      	sxth	r3, r3
 800b1e4:	e01a      	b.n	800b21c <__sflush_r+0xf0>
 800b1e6:	690f      	ldr	r7, [r1, #16]
 800b1e8:	2f00      	cmp	r7, #0
 800b1ea:	d0f6      	beq.n	800b1da <__sflush_r+0xae>
 800b1ec:	0793      	lsls	r3, r2, #30
 800b1ee:	680e      	ldr	r6, [r1, #0]
 800b1f0:	600f      	str	r7, [r1, #0]
 800b1f2:	bf0c      	ite	eq
 800b1f4:	694b      	ldreq	r3, [r1, #20]
 800b1f6:	2300      	movne	r3, #0
 800b1f8:	eba6 0807 	sub.w	r8, r6, r7
 800b1fc:	608b      	str	r3, [r1, #8]
 800b1fe:	f1b8 0f00 	cmp.w	r8, #0
 800b202:	ddea      	ble.n	800b1da <__sflush_r+0xae>
 800b204:	4643      	mov	r3, r8
 800b206:	463a      	mov	r2, r7
 800b208:	6a21      	ldr	r1, [r4, #32]
 800b20a:	4628      	mov	r0, r5
 800b20c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b20e:	47b0      	blx	r6
 800b210:	2800      	cmp	r0, #0
 800b212:	dc08      	bgt.n	800b226 <__sflush_r+0xfa>
 800b214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b226:	4407      	add	r7, r0
 800b228:	eba8 0800 	sub.w	r8, r8, r0
 800b22c:	e7e7      	b.n	800b1fe <__sflush_r+0xd2>
 800b22e:	bf00      	nop
 800b230:	20400001 	.word	0x20400001

0800b234 <_fflush_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	690b      	ldr	r3, [r1, #16]
 800b238:	4605      	mov	r5, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	b913      	cbnz	r3, 800b244 <_fflush_r+0x10>
 800b23e:	2500      	movs	r5, #0
 800b240:	4628      	mov	r0, r5
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	b118      	cbz	r0, 800b24e <_fflush_r+0x1a>
 800b246:	6a03      	ldr	r3, [r0, #32]
 800b248:	b90b      	cbnz	r3, 800b24e <_fflush_r+0x1a>
 800b24a:	f7fd fae5 	bl	8008818 <__sinit>
 800b24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0f3      	beq.n	800b23e <_fflush_r+0xa>
 800b256:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b258:	07d0      	lsls	r0, r2, #31
 800b25a:	d404      	bmi.n	800b266 <_fflush_r+0x32>
 800b25c:	0599      	lsls	r1, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_fflush_r+0x32>
 800b260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b262:	f7fd fc02 	bl	8008a6a <__retarget_lock_acquire_recursive>
 800b266:	4628      	mov	r0, r5
 800b268:	4621      	mov	r1, r4
 800b26a:	f7ff ff5f 	bl	800b12c <__sflush_r>
 800b26e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b270:	4605      	mov	r5, r0
 800b272:	07da      	lsls	r2, r3, #31
 800b274:	d4e4      	bmi.n	800b240 <_fflush_r+0xc>
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	059b      	lsls	r3, r3, #22
 800b27a:	d4e1      	bmi.n	800b240 <_fflush_r+0xc>
 800b27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b27e:	f7fd fbf5 	bl	8008a6c <__retarget_lock_release_recursive>
 800b282:	e7dd      	b.n	800b240 <_fflush_r+0xc>

0800b284 <memmove>:
 800b284:	4288      	cmp	r0, r1
 800b286:	b510      	push	{r4, lr}
 800b288:	eb01 0402 	add.w	r4, r1, r2
 800b28c:	d902      	bls.n	800b294 <memmove+0x10>
 800b28e:	4284      	cmp	r4, r0
 800b290:	4623      	mov	r3, r4
 800b292:	d807      	bhi.n	800b2a4 <memmove+0x20>
 800b294:	1e43      	subs	r3, r0, #1
 800b296:	42a1      	cmp	r1, r4
 800b298:	d008      	beq.n	800b2ac <memmove+0x28>
 800b29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a2:	e7f8      	b.n	800b296 <memmove+0x12>
 800b2a4:	4402      	add	r2, r0
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	428a      	cmp	r2, r1
 800b2aa:	d100      	bne.n	800b2ae <memmove+0x2a>
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2b6:	e7f7      	b.n	800b2a8 <memmove+0x24>

0800b2b8 <strncmp>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	b16a      	cbz	r2, 800b2d8 <strncmp+0x20>
 800b2bc:	3901      	subs	r1, #1
 800b2be:	1884      	adds	r4, r0, r2
 800b2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d103      	bne.n	800b2d4 <strncmp+0x1c>
 800b2cc:	42a0      	cmp	r0, r4
 800b2ce:	d001      	beq.n	800b2d4 <strncmp+0x1c>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d1f5      	bne.n	800b2c0 <strncmp+0x8>
 800b2d4:	1ad0      	subs	r0, r2, r3
 800b2d6:	bd10      	pop	{r4, pc}
 800b2d8:	4610      	mov	r0, r2
 800b2da:	e7fc      	b.n	800b2d6 <strncmp+0x1e>
 800b2dc:	0000      	movs	r0, r0
	...

0800b2e0 <nan>:
 800b2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b2e8 <nan+0x8>
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	7ff80000 	.word	0x7ff80000

0800b2f0 <__assert_func>:
 800b2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2f2:	4614      	mov	r4, r2
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4b09      	ldr	r3, [pc, #36]	@ (800b31c <__assert_func+0x2c>)
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68d8      	ldr	r0, [r3, #12]
 800b2fe:	b14c      	cbz	r4, 800b314 <__assert_func+0x24>
 800b300:	4b07      	ldr	r3, [pc, #28]	@ (800b320 <__assert_func+0x30>)
 800b302:	9100      	str	r1, [sp, #0]
 800b304:	4907      	ldr	r1, [pc, #28]	@ (800b324 <__assert_func+0x34>)
 800b306:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b30a:	462b      	mov	r3, r5
 800b30c:	f000 fba4 	bl	800ba58 <fiprintf>
 800b310:	f000 fbb4 	bl	800ba7c <abort>
 800b314:	4b04      	ldr	r3, [pc, #16]	@ (800b328 <__assert_func+0x38>)
 800b316:	461c      	mov	r4, r3
 800b318:	e7f3      	b.n	800b302 <__assert_func+0x12>
 800b31a:	bf00      	nop
 800b31c:	20000018 	.word	0x20000018
 800b320:	0800c532 	.word	0x0800c532
 800b324:	0800c53f 	.word	0x0800c53f
 800b328:	0800c56d 	.word	0x0800c56d

0800b32c <_calloc_r>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	fba1 5402 	umull	r5, r4, r1, r2
 800b332:	b934      	cbnz	r4, 800b342 <_calloc_r+0x16>
 800b334:	4629      	mov	r1, r5
 800b336:	f7fc faf1 	bl	800791c <_malloc_r>
 800b33a:	4606      	mov	r6, r0
 800b33c:	b928      	cbnz	r0, 800b34a <_calloc_r+0x1e>
 800b33e:	4630      	mov	r0, r6
 800b340:	bd70      	pop	{r4, r5, r6, pc}
 800b342:	220c      	movs	r2, #12
 800b344:	2600      	movs	r6, #0
 800b346:	6002      	str	r2, [r0, #0]
 800b348:	e7f9      	b.n	800b33e <_calloc_r+0x12>
 800b34a:	462a      	mov	r2, r5
 800b34c:	4621      	mov	r1, r4
 800b34e:	f7fd fafe 	bl	800894e <memset>
 800b352:	e7f4      	b.n	800b33e <_calloc_r+0x12>

0800b354 <rshift>:
 800b354:	6903      	ldr	r3, [r0, #16]
 800b356:	114a      	asrs	r2, r1, #5
 800b358:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b360:	f100 0414 	add.w	r4, r0, #20
 800b364:	dd45      	ble.n	800b3f2 <rshift+0x9e>
 800b366:	f011 011f 	ands.w	r1, r1, #31
 800b36a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b36e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b372:	d10c      	bne.n	800b38e <rshift+0x3a>
 800b374:	f100 0710 	add.w	r7, r0, #16
 800b378:	4629      	mov	r1, r5
 800b37a:	42b1      	cmp	r1, r6
 800b37c:	d334      	bcc.n	800b3e8 <rshift+0x94>
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	1eea      	subs	r2, r5, #3
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4296      	cmp	r6, r2
 800b386:	bf38      	it	cc
 800b388:	2300      	movcc	r3, #0
 800b38a:	4423      	add	r3, r4
 800b38c:	e015      	b.n	800b3ba <rshift+0x66>
 800b38e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b392:	f1c1 0820 	rsb	r8, r1, #32
 800b396:	f105 0e04 	add.w	lr, r5, #4
 800b39a:	46a1      	mov	r9, r4
 800b39c:	40cf      	lsrs	r7, r1
 800b39e:	4576      	cmp	r6, lr
 800b3a0:	46f4      	mov	ip, lr
 800b3a2:	d815      	bhi.n	800b3d0 <rshift+0x7c>
 800b3a4:	1a9a      	subs	r2, r3, r2
 800b3a6:	3501      	adds	r5, #1
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	3a04      	subs	r2, #4
 800b3ac:	42ae      	cmp	r6, r5
 800b3ae:	bf38      	it	cc
 800b3b0:	2200      	movcc	r2, #0
 800b3b2:	18a3      	adds	r3, r4, r2
 800b3b4:	50a7      	str	r7, [r4, r2]
 800b3b6:	b107      	cbz	r7, 800b3ba <rshift+0x66>
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	1b1a      	subs	r2, r3, r4
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3c2:	bf08      	it	eq
 800b3c4:	2300      	moveq	r3, #0
 800b3c6:	6102      	str	r2, [r0, #16]
 800b3c8:	bf08      	it	eq
 800b3ca:	6143      	streq	r3, [r0, #20]
 800b3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3d0:	f8dc c000 	ldr.w	ip, [ip]
 800b3d4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3d8:	ea4c 0707 	orr.w	r7, ip, r7
 800b3dc:	f849 7b04 	str.w	r7, [r9], #4
 800b3e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3e4:	40cf      	lsrs	r7, r1
 800b3e6:	e7da      	b.n	800b39e <rshift+0x4a>
 800b3e8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3ec:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3f0:	e7c3      	b.n	800b37a <rshift+0x26>
 800b3f2:	4623      	mov	r3, r4
 800b3f4:	e7e1      	b.n	800b3ba <rshift+0x66>

0800b3f6 <__hexdig_fun>:
 800b3f6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3fa:	2b09      	cmp	r3, #9
 800b3fc:	d802      	bhi.n	800b404 <__hexdig_fun+0xe>
 800b3fe:	3820      	subs	r0, #32
 800b400:	b2c0      	uxtb	r0, r0
 800b402:	4770      	bx	lr
 800b404:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b408:	2b05      	cmp	r3, #5
 800b40a:	d801      	bhi.n	800b410 <__hexdig_fun+0x1a>
 800b40c:	3847      	subs	r0, #71	@ 0x47
 800b40e:	e7f7      	b.n	800b400 <__hexdig_fun+0xa>
 800b410:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b414:	2b05      	cmp	r3, #5
 800b416:	d801      	bhi.n	800b41c <__hexdig_fun+0x26>
 800b418:	3827      	subs	r0, #39	@ 0x27
 800b41a:	e7f1      	b.n	800b400 <__hexdig_fun+0xa>
 800b41c:	2000      	movs	r0, #0
 800b41e:	4770      	bx	lr

0800b420 <__gethex>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b085      	sub	sp, #20
 800b426:	468a      	mov	sl, r1
 800b428:	4690      	mov	r8, r2
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	680b      	ldr	r3, [r1, #0]
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	1c9c      	adds	r4, r3, #2
 800b432:	46a1      	mov	r9, r4
 800b434:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b438:	2830      	cmp	r0, #48	@ 0x30
 800b43a:	d0fa      	beq.n	800b432 <__gethex+0x12>
 800b43c:	eba9 0303 	sub.w	r3, r9, r3
 800b440:	f1a3 0b02 	sub.w	fp, r3, #2
 800b444:	f7ff ffd7 	bl	800b3f6 <__hexdig_fun>
 800b448:	4605      	mov	r5, r0
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d166      	bne.n	800b51c <__gethex+0xfc>
 800b44e:	2201      	movs	r2, #1
 800b450:	499e      	ldr	r1, [pc, #632]	@ (800b6cc <__gethex+0x2ac>)
 800b452:	4648      	mov	r0, r9
 800b454:	f7ff ff30 	bl	800b2b8 <strncmp>
 800b458:	4607      	mov	r7, r0
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d165      	bne.n	800b52a <__gethex+0x10a>
 800b45e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b462:	4626      	mov	r6, r4
 800b464:	f7ff ffc7 	bl	800b3f6 <__hexdig_fun>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d060      	beq.n	800b52e <__gethex+0x10e>
 800b46c:	4623      	mov	r3, r4
 800b46e:	7818      	ldrb	r0, [r3, #0]
 800b470:	4699      	mov	r9, r3
 800b472:	3301      	adds	r3, #1
 800b474:	2830      	cmp	r0, #48	@ 0x30
 800b476:	d0fa      	beq.n	800b46e <__gethex+0x4e>
 800b478:	f7ff ffbd 	bl	800b3f6 <__hexdig_fun>
 800b47c:	fab0 f580 	clz	r5, r0
 800b480:	f04f 0b01 	mov.w	fp, #1
 800b484:	096d      	lsrs	r5, r5, #5
 800b486:	464a      	mov	r2, r9
 800b488:	4616      	mov	r6, r2
 800b48a:	3201      	adds	r2, #1
 800b48c:	7830      	ldrb	r0, [r6, #0]
 800b48e:	f7ff ffb2 	bl	800b3f6 <__hexdig_fun>
 800b492:	2800      	cmp	r0, #0
 800b494:	d1f8      	bne.n	800b488 <__gethex+0x68>
 800b496:	2201      	movs	r2, #1
 800b498:	498c      	ldr	r1, [pc, #560]	@ (800b6cc <__gethex+0x2ac>)
 800b49a:	4630      	mov	r0, r6
 800b49c:	f7ff ff0c 	bl	800b2b8 <strncmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d13e      	bne.n	800b522 <__gethex+0x102>
 800b4a4:	b944      	cbnz	r4, 800b4b8 <__gethex+0x98>
 800b4a6:	1c74      	adds	r4, r6, #1
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	3201      	adds	r2, #1
 800b4ae:	7830      	ldrb	r0, [r6, #0]
 800b4b0:	f7ff ffa1 	bl	800b3f6 <__hexdig_fun>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1f8      	bne.n	800b4aa <__gethex+0x8a>
 800b4b8:	1ba4      	subs	r4, r4, r6
 800b4ba:	00a7      	lsls	r7, r4, #2
 800b4bc:	7833      	ldrb	r3, [r6, #0]
 800b4be:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4c2:	2b50      	cmp	r3, #80	@ 0x50
 800b4c4:	d13d      	bne.n	800b542 <__gethex+0x122>
 800b4c6:	7873      	ldrb	r3, [r6, #1]
 800b4c8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4ca:	d032      	beq.n	800b532 <__gethex+0x112>
 800b4cc:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4ce:	d033      	beq.n	800b538 <__gethex+0x118>
 800b4d0:	1c71      	adds	r1, r6, #1
 800b4d2:	2400      	movs	r4, #0
 800b4d4:	7808      	ldrb	r0, [r1, #0]
 800b4d6:	f7ff ff8e 	bl	800b3f6 <__hexdig_fun>
 800b4da:	1e43      	subs	r3, r0, #1
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b18      	cmp	r3, #24
 800b4e0:	d82f      	bhi.n	800b542 <__gethex+0x122>
 800b4e2:	f1a0 0210 	sub.w	r2, r0, #16
 800b4e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4ea:	f7ff ff84 	bl	800b3f6 <__hexdig_fun>
 800b4ee:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4f2:	230a      	movs	r3, #10
 800b4f4:	fa5f fc8c 	uxtb.w	ip, ip
 800b4f8:	f1bc 0f18 	cmp.w	ip, #24
 800b4fc:	d91e      	bls.n	800b53c <__gethex+0x11c>
 800b4fe:	b104      	cbz	r4, 800b502 <__gethex+0xe2>
 800b500:	4252      	negs	r2, r2
 800b502:	4417      	add	r7, r2
 800b504:	f8ca 1000 	str.w	r1, [sl]
 800b508:	b1ed      	cbz	r5, 800b546 <__gethex+0x126>
 800b50a:	f1bb 0f00 	cmp.w	fp, #0
 800b50e:	bf0c      	ite	eq
 800b510:	2506      	moveq	r5, #6
 800b512:	2500      	movne	r5, #0
 800b514:	4628      	mov	r0, r5
 800b516:	b005      	add	sp, #20
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	2500      	movs	r5, #0
 800b51e:	462c      	mov	r4, r5
 800b520:	e7b1      	b.n	800b486 <__gethex+0x66>
 800b522:	2c00      	cmp	r4, #0
 800b524:	d1c8      	bne.n	800b4b8 <__gethex+0x98>
 800b526:	4627      	mov	r7, r4
 800b528:	e7c8      	b.n	800b4bc <__gethex+0x9c>
 800b52a:	464e      	mov	r6, r9
 800b52c:	462f      	mov	r7, r5
 800b52e:	2501      	movs	r5, #1
 800b530:	e7c4      	b.n	800b4bc <__gethex+0x9c>
 800b532:	2400      	movs	r4, #0
 800b534:	1cb1      	adds	r1, r6, #2
 800b536:	e7cd      	b.n	800b4d4 <__gethex+0xb4>
 800b538:	2401      	movs	r4, #1
 800b53a:	e7fb      	b.n	800b534 <__gethex+0x114>
 800b53c:	fb03 0002 	mla	r0, r3, r2, r0
 800b540:	e7cf      	b.n	800b4e2 <__gethex+0xc2>
 800b542:	4631      	mov	r1, r6
 800b544:	e7de      	b.n	800b504 <__gethex+0xe4>
 800b546:	eba6 0309 	sub.w	r3, r6, r9
 800b54a:	4629      	mov	r1, r5
 800b54c:	3b01      	subs	r3, #1
 800b54e:	2b07      	cmp	r3, #7
 800b550:	dc0a      	bgt.n	800b568 <__gethex+0x148>
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	f7fe f958 	bl	8009808 <_Balloc>
 800b558:	4604      	mov	r4, r0
 800b55a:	b940      	cbnz	r0, 800b56e <__gethex+0x14e>
 800b55c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6d0 <__gethex+0x2b0>)
 800b55e:	4602      	mov	r2, r0
 800b560:	21e4      	movs	r1, #228	@ 0xe4
 800b562:	485c      	ldr	r0, [pc, #368]	@ (800b6d4 <__gethex+0x2b4>)
 800b564:	f7ff fec4 	bl	800b2f0 <__assert_func>
 800b568:	3101      	adds	r1, #1
 800b56a:	105b      	asrs	r3, r3, #1
 800b56c:	e7ef      	b.n	800b54e <__gethex+0x12e>
 800b56e:	f100 0a14 	add.w	sl, r0, #20
 800b572:	2300      	movs	r3, #0
 800b574:	4655      	mov	r5, sl
 800b576:	469b      	mov	fp, r3
 800b578:	45b1      	cmp	r9, r6
 800b57a:	d337      	bcc.n	800b5ec <__gethex+0x1cc>
 800b57c:	f845 bb04 	str.w	fp, [r5], #4
 800b580:	eba5 050a 	sub.w	r5, r5, sl
 800b584:	4658      	mov	r0, fp
 800b586:	10ad      	asrs	r5, r5, #2
 800b588:	6125      	str	r5, [r4, #16]
 800b58a:	016d      	lsls	r5, r5, #5
 800b58c:	f7fe fa30 	bl	80099f0 <__hi0bits>
 800b590:	f8d8 6000 	ldr.w	r6, [r8]
 800b594:	1a2d      	subs	r5, r5, r0
 800b596:	42b5      	cmp	r5, r6
 800b598:	dd54      	ble.n	800b644 <__gethex+0x224>
 800b59a:	1bad      	subs	r5, r5, r6
 800b59c:	4620      	mov	r0, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7fe fdc7 	bl	800a132 <__any_on>
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	b178      	cbz	r0, 800b5c8 <__gethex+0x1a8>
 800b5a8:	1e6b      	subs	r3, r5, #1
 800b5aa:	f04f 0901 	mov.w	r9, #1
 800b5ae:	1159      	asrs	r1, r3, #5
 800b5b0:	f003 021f 	and.w	r2, r3, #31
 800b5b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5b8:	fa09 f202 	lsl.w	r2, r9, r2
 800b5bc:	420a      	tst	r2, r1
 800b5be:	d003      	beq.n	800b5c8 <__gethex+0x1a8>
 800b5c0:	454b      	cmp	r3, r9
 800b5c2:	dc36      	bgt.n	800b632 <__gethex+0x212>
 800b5c4:	f04f 0902 	mov.w	r9, #2
 800b5c8:	442f      	add	r7, r5
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f7ff fec1 	bl	800b354 <rshift>
 800b5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5d6:	42bb      	cmp	r3, r7
 800b5d8:	da42      	bge.n	800b660 <__gethex+0x240>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	9801      	ldr	r0, [sp, #4]
 800b5de:	f7fe f953 	bl	8009888 <_Bfree>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5e6:	25a3      	movs	r5, #163	@ 0xa3
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	e793      	b.n	800b514 <__gethex+0xf4>
 800b5ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5f2:	d012      	beq.n	800b61a <__gethex+0x1fa>
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d104      	bne.n	800b602 <__gethex+0x1e2>
 800b5f8:	f845 bb04 	str.w	fp, [r5], #4
 800b5fc:	f04f 0b00 	mov.w	fp, #0
 800b600:	465b      	mov	r3, fp
 800b602:	7830      	ldrb	r0, [r6, #0]
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	f7ff fef6 	bl	800b3f6 <__hexdig_fun>
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	f000 000f 	and.w	r0, r0, #15
 800b610:	4098      	lsls	r0, r3
 800b612:	3304      	adds	r3, #4
 800b614:	ea4b 0b00 	orr.w	fp, fp, r0
 800b618:	e7ae      	b.n	800b578 <__gethex+0x158>
 800b61a:	45b1      	cmp	r9, r6
 800b61c:	d8ea      	bhi.n	800b5f4 <__gethex+0x1d4>
 800b61e:	2201      	movs	r2, #1
 800b620:	492a      	ldr	r1, [pc, #168]	@ (800b6cc <__gethex+0x2ac>)
 800b622:	4630      	mov	r0, r6
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	f7ff fe47 	bl	800b2b8 <strncmp>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1e1      	bne.n	800b5f4 <__gethex+0x1d4>
 800b630:	e7a2      	b.n	800b578 <__gethex+0x158>
 800b632:	1ea9      	subs	r1, r5, #2
 800b634:	4620      	mov	r0, r4
 800b636:	f7fe fd7c 	bl	800a132 <__any_on>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d0c2      	beq.n	800b5c4 <__gethex+0x1a4>
 800b63e:	f04f 0903 	mov.w	r9, #3
 800b642:	e7c1      	b.n	800b5c8 <__gethex+0x1a8>
 800b644:	da09      	bge.n	800b65a <__gethex+0x23a>
 800b646:	1b75      	subs	r5, r6, r5
 800b648:	4621      	mov	r1, r4
 800b64a:	9801      	ldr	r0, [sp, #4]
 800b64c:	462a      	mov	r2, r5
 800b64e:	1b7f      	subs	r7, r7, r5
 800b650:	f7fe fb2e 	bl	8009cb0 <__lshift>
 800b654:	4604      	mov	r4, r0
 800b656:	f100 0a14 	add.w	sl, r0, #20
 800b65a:	f04f 0900 	mov.w	r9, #0
 800b65e:	e7b8      	b.n	800b5d2 <__gethex+0x1b2>
 800b660:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b664:	42bd      	cmp	r5, r7
 800b666:	dd6f      	ble.n	800b748 <__gethex+0x328>
 800b668:	1bed      	subs	r5, r5, r7
 800b66a:	42ae      	cmp	r6, r5
 800b66c:	dc34      	bgt.n	800b6d8 <__gethex+0x2b8>
 800b66e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b672:	2b02      	cmp	r3, #2
 800b674:	d022      	beq.n	800b6bc <__gethex+0x29c>
 800b676:	2b03      	cmp	r3, #3
 800b678:	d024      	beq.n	800b6c4 <__gethex+0x2a4>
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d115      	bne.n	800b6aa <__gethex+0x28a>
 800b67e:	42ae      	cmp	r6, r5
 800b680:	d113      	bne.n	800b6aa <__gethex+0x28a>
 800b682:	2e01      	cmp	r6, #1
 800b684:	d10b      	bne.n	800b69e <__gethex+0x27e>
 800b686:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b68a:	2562      	movs	r5, #98	@ 0x62
 800b68c:	9a02      	ldr	r2, [sp, #8]
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	2301      	movs	r3, #1
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f8ca 3000 	str.w	r3, [sl]
 800b698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b69a:	601c      	str	r4, [r3, #0]
 800b69c:	e73a      	b.n	800b514 <__gethex+0xf4>
 800b69e:	1e71      	subs	r1, r6, #1
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7fe fd46 	bl	800a132 <__any_on>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1ed      	bne.n	800b686 <__gethex+0x266>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	9801      	ldr	r0, [sp, #4]
 800b6ae:	f7fe f8eb 	bl	8009888 <_Bfree>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6b6:	2550      	movs	r5, #80	@ 0x50
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e72b      	b.n	800b514 <__gethex+0xf4>
 800b6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1f3      	bne.n	800b6aa <__gethex+0x28a>
 800b6c2:	e7e0      	b.n	800b686 <__gethex+0x266>
 800b6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1dd      	bne.n	800b686 <__gethex+0x266>
 800b6ca:	e7ee      	b.n	800b6aa <__gethex+0x28a>
 800b6cc:	0800c517 	.word	0x0800c517
 800b6d0:	0800c4ad 	.word	0x0800c4ad
 800b6d4:	0800c56e 	.word	0x0800c56e
 800b6d8:	1e6f      	subs	r7, r5, #1
 800b6da:	f1b9 0f00 	cmp.w	r9, #0
 800b6de:	d130      	bne.n	800b742 <__gethex+0x322>
 800b6e0:	b127      	cbz	r7, 800b6ec <__gethex+0x2cc>
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7fe fd24 	bl	800a132 <__any_on>
 800b6ea:	4681      	mov	r9, r0
 800b6ec:	117a      	asrs	r2, r7, #5
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f007 071f 	and.w	r7, r7, #31
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	40bb      	lsls	r3, r7
 800b6fe:	1b76      	subs	r6, r6, r5
 800b700:	2502      	movs	r5, #2
 800b702:	4213      	tst	r3, r2
 800b704:	bf18      	it	ne
 800b706:	f049 0902 	orrne.w	r9, r9, #2
 800b70a:	f7ff fe23 	bl	800b354 <rshift>
 800b70e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d047      	beq.n	800b7a8 <__gethex+0x388>
 800b718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d015      	beq.n	800b74c <__gethex+0x32c>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d017      	beq.n	800b754 <__gethex+0x334>
 800b724:	2b01      	cmp	r3, #1
 800b726:	d109      	bne.n	800b73c <__gethex+0x31c>
 800b728:	f019 0f02 	tst.w	r9, #2
 800b72c:	d006      	beq.n	800b73c <__gethex+0x31c>
 800b72e:	f8da 3000 	ldr.w	r3, [sl]
 800b732:	ea49 0903 	orr.w	r9, r9, r3
 800b736:	f019 0f01 	tst.w	r9, #1
 800b73a:	d10e      	bne.n	800b75a <__gethex+0x33a>
 800b73c:	f045 0510 	orr.w	r5, r5, #16
 800b740:	e032      	b.n	800b7a8 <__gethex+0x388>
 800b742:	f04f 0901 	mov.w	r9, #1
 800b746:	e7d1      	b.n	800b6ec <__gethex+0x2cc>
 800b748:	2501      	movs	r5, #1
 800b74a:	e7e2      	b.n	800b712 <__gethex+0x2f2>
 800b74c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74e:	f1c3 0301 	rsb	r3, r3, #1
 800b752:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d0f0      	beq.n	800b73c <__gethex+0x31c>
 800b75a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b75e:	f104 0314 	add.w	r3, r4, #20
 800b762:	f04f 0c00 	mov.w	ip, #0
 800b766:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b76a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b76e:	4618      	mov	r0, r3
 800b770:	f853 2b04 	ldr.w	r2, [r3], #4
 800b774:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b778:	d01b      	beq.n	800b7b2 <__gethex+0x392>
 800b77a:	3201      	adds	r2, #1
 800b77c:	6002      	str	r2, [r0, #0]
 800b77e:	2d02      	cmp	r5, #2
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	d13c      	bne.n	800b800 <__gethex+0x3e0>
 800b786:	f8d8 2000 	ldr.w	r2, [r8]
 800b78a:	3a01      	subs	r2, #1
 800b78c:	42b2      	cmp	r2, r6
 800b78e:	d109      	bne.n	800b7a4 <__gethex+0x384>
 800b790:	1171      	asrs	r1, r6, #5
 800b792:	2201      	movs	r2, #1
 800b794:	f006 061f 	and.w	r6, r6, #31
 800b798:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b79c:	fa02 f606 	lsl.w	r6, r2, r6
 800b7a0:	421e      	tst	r6, r3
 800b7a2:	d13a      	bne.n	800b81a <__gethex+0x3fa>
 800b7a4:	f045 0520 	orr.w	r5, r5, #32
 800b7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7aa:	601c      	str	r4, [r3, #0]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	601f      	str	r7, [r3, #0]
 800b7b0:	e6b0      	b.n	800b514 <__gethex+0xf4>
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7b8:	d8d9      	bhi.n	800b76e <__gethex+0x34e>
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	459b      	cmp	fp, r3
 800b7be:	db17      	blt.n	800b7f0 <__gethex+0x3d0>
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	9801      	ldr	r0, [sp, #4]
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	f7fe f81f 	bl	8009808 <_Balloc>
 800b7ca:	4681      	mov	r9, r0
 800b7cc:	b918      	cbnz	r0, 800b7d6 <__gethex+0x3b6>
 800b7ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b838 <__gethex+0x418>)
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	2184      	movs	r1, #132	@ 0x84
 800b7d4:	e6c5      	b.n	800b562 <__gethex+0x142>
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	f104 010c 	add.w	r1, r4, #12
 800b7dc:	300c      	adds	r0, #12
 800b7de:	3202      	adds	r2, #2
 800b7e0:	0092      	lsls	r2, r2, #2
 800b7e2:	f7fd f952 	bl	8008a8a <memcpy>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	464c      	mov	r4, r9
 800b7ea:	9801      	ldr	r0, [sp, #4]
 800b7ec:	f7fe f84c 	bl	8009888 <_Bfree>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7f8:	6122      	str	r2, [r4, #16]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	615a      	str	r2, [r3, #20]
 800b7fe:	e7be      	b.n	800b77e <__gethex+0x35e>
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	455a      	cmp	r2, fp
 800b804:	dd0b      	ble.n	800b81e <__gethex+0x3fe>
 800b806:	2101      	movs	r1, #1
 800b808:	4620      	mov	r0, r4
 800b80a:	f7ff fda3 	bl	800b354 <rshift>
 800b80e:	3701      	adds	r7, #1
 800b810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b814:	42bb      	cmp	r3, r7
 800b816:	f6ff aee0 	blt.w	800b5da <__gethex+0x1ba>
 800b81a:	2501      	movs	r5, #1
 800b81c:	e7c2      	b.n	800b7a4 <__gethex+0x384>
 800b81e:	f016 061f 	ands.w	r6, r6, #31
 800b822:	d0fa      	beq.n	800b81a <__gethex+0x3fa>
 800b824:	4453      	add	r3, sl
 800b826:	f1c6 0620 	rsb	r6, r6, #32
 800b82a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b82e:	f7fe f8df 	bl	80099f0 <__hi0bits>
 800b832:	42b0      	cmp	r0, r6
 800b834:	dbe7      	blt.n	800b806 <__gethex+0x3e6>
 800b836:	e7f0      	b.n	800b81a <__gethex+0x3fa>
 800b838:	0800c4ad 	.word	0x0800c4ad

0800b83c <L_shift>:
 800b83c:	f1c2 0208 	rsb	r2, r2, #8
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	b570      	push	{r4, r5, r6, lr}
 800b844:	f1c2 0620 	rsb	r6, r2, #32
 800b848:	6843      	ldr	r3, [r0, #4]
 800b84a:	6804      	ldr	r4, [r0, #0]
 800b84c:	fa03 f506 	lsl.w	r5, r3, r6
 800b850:	40d3      	lsrs	r3, r2
 800b852:	432c      	orrs	r4, r5
 800b854:	6004      	str	r4, [r0, #0]
 800b856:	f840 3f04 	str.w	r3, [r0, #4]!
 800b85a:	4288      	cmp	r0, r1
 800b85c:	d3f4      	bcc.n	800b848 <L_shift+0xc>
 800b85e:	bd70      	pop	{r4, r5, r6, pc}

0800b860 <__match>:
 800b860:	6803      	ldr	r3, [r0, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	b530      	push	{r4, r5, lr}
 800b866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86a:	b914      	cbnz	r4, 800b872 <__match+0x12>
 800b86c:	6003      	str	r3, [r0, #0]
 800b86e:	2001      	movs	r0, #1
 800b870:	bd30      	pop	{r4, r5, pc}
 800b872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b876:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b87a:	2d19      	cmp	r5, #25
 800b87c:	bf98      	it	ls
 800b87e:	3220      	addls	r2, #32
 800b880:	42a2      	cmp	r2, r4
 800b882:	d0f0      	beq.n	800b866 <__match+0x6>
 800b884:	2000      	movs	r0, #0
 800b886:	e7f3      	b.n	800b870 <__match+0x10>

0800b888 <__hexnan>:
 800b888:	680b      	ldr	r3, [r1, #0]
 800b88a:	6801      	ldr	r1, [r0, #0]
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	115e      	asrs	r6, r3, #5
 800b892:	f013 031f 	ands.w	r3, r3, #31
 800b896:	f04f 0500 	mov.w	r5, #0
 800b89a:	b087      	sub	sp, #28
 800b89c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8a0:	4682      	mov	sl, r0
 800b8a2:	4690      	mov	r8, r2
 800b8a4:	46ab      	mov	fp, r5
 800b8a6:	bf18      	it	ne
 800b8a8:	3604      	addne	r6, #4
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	9502      	str	r5, [sp, #8]
 800b8ae:	1f37      	subs	r7, r6, #4
 800b8b0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8b4:	46b9      	mov	r9, r7
 800b8b6:	463c      	mov	r4, r7
 800b8b8:	1c4b      	adds	r3, r1, #1
 800b8ba:	784a      	ldrb	r2, [r1, #1]
 800b8bc:	9303      	str	r3, [sp, #12]
 800b8be:	b342      	cbz	r2, 800b912 <__hexnan+0x8a>
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	9105      	str	r1, [sp, #20]
 800b8c4:	9204      	str	r2, [sp, #16]
 800b8c6:	f7ff fd96 	bl	800b3f6 <__hexdig_fun>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d151      	bne.n	800b972 <__hexnan+0xea>
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	9905      	ldr	r1, [sp, #20]
 800b8d2:	2a20      	cmp	r2, #32
 800b8d4:	d818      	bhi.n	800b908 <__hexnan+0x80>
 800b8d6:	9b02      	ldr	r3, [sp, #8]
 800b8d8:	459b      	cmp	fp, r3
 800b8da:	dd13      	ble.n	800b904 <__hexnan+0x7c>
 800b8dc:	454c      	cmp	r4, r9
 800b8de:	d206      	bcs.n	800b8ee <__hexnan+0x66>
 800b8e0:	2d07      	cmp	r5, #7
 800b8e2:	dc04      	bgt.n	800b8ee <__hexnan+0x66>
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f7ff ffa7 	bl	800b83c <L_shift>
 800b8ee:	4544      	cmp	r4, r8
 800b8f0:	d951      	bls.n	800b996 <__hexnan+0x10e>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f1a4 0904 	sub.w	r9, r4, #4
 800b8f8:	f8cd b008 	str.w	fp, [sp, #8]
 800b8fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b900:	461d      	mov	r5, r3
 800b902:	464c      	mov	r4, r9
 800b904:	9903      	ldr	r1, [sp, #12]
 800b906:	e7d7      	b.n	800b8b8 <__hexnan+0x30>
 800b908:	2a29      	cmp	r2, #41	@ 0x29
 800b90a:	d156      	bne.n	800b9ba <__hexnan+0x132>
 800b90c:	3102      	adds	r1, #2
 800b90e:	f8ca 1000 	str.w	r1, [sl]
 800b912:	f1bb 0f00 	cmp.w	fp, #0
 800b916:	d050      	beq.n	800b9ba <__hexnan+0x132>
 800b918:	454c      	cmp	r4, r9
 800b91a:	d206      	bcs.n	800b92a <__hexnan+0xa2>
 800b91c:	2d07      	cmp	r5, #7
 800b91e:	dc04      	bgt.n	800b92a <__hexnan+0xa2>
 800b920:	462a      	mov	r2, r5
 800b922:	4649      	mov	r1, r9
 800b924:	4620      	mov	r0, r4
 800b926:	f7ff ff89 	bl	800b83c <L_shift>
 800b92a:	4544      	cmp	r4, r8
 800b92c:	d935      	bls.n	800b99a <__hexnan+0x112>
 800b92e:	f1a8 0204 	sub.w	r2, r8, #4
 800b932:	4623      	mov	r3, r4
 800b934:	f853 1b04 	ldr.w	r1, [r3], #4
 800b938:	429f      	cmp	r7, r3
 800b93a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b93e:	d2f9      	bcs.n	800b934 <__hexnan+0xac>
 800b940:	1b3b      	subs	r3, r7, r4
 800b942:	3e03      	subs	r6, #3
 800b944:	3401      	adds	r4, #1
 800b946:	2200      	movs	r2, #0
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	3304      	adds	r3, #4
 800b94e:	42b4      	cmp	r4, r6
 800b950:	bf88      	it	hi
 800b952:	2304      	movhi	r3, #4
 800b954:	4443      	add	r3, r8
 800b956:	f843 2b04 	str.w	r2, [r3], #4
 800b95a:	429f      	cmp	r7, r3
 800b95c:	d2fb      	bcs.n	800b956 <__hexnan+0xce>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	b91b      	cbnz	r3, 800b96a <__hexnan+0xe2>
 800b962:	4547      	cmp	r7, r8
 800b964:	d127      	bne.n	800b9b6 <__hexnan+0x12e>
 800b966:	2301      	movs	r3, #1
 800b968:	603b      	str	r3, [r7, #0]
 800b96a:	2005      	movs	r0, #5
 800b96c:	b007      	add	sp, #28
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	3501      	adds	r5, #1
 800b974:	f10b 0b01 	add.w	fp, fp, #1
 800b978:	2d08      	cmp	r5, #8
 800b97a:	dd05      	ble.n	800b988 <__hexnan+0x100>
 800b97c:	4544      	cmp	r4, r8
 800b97e:	d9c1      	bls.n	800b904 <__hexnan+0x7c>
 800b980:	2300      	movs	r3, #0
 800b982:	3c04      	subs	r4, #4
 800b984:	2501      	movs	r5, #1
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	f000 000f 	and.w	r0, r0, #15
 800b98e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b992:	6020      	str	r0, [r4, #0]
 800b994:	e7b6      	b.n	800b904 <__hexnan+0x7c>
 800b996:	2508      	movs	r5, #8
 800b998:	e7b4      	b.n	800b904 <__hexnan+0x7c>
 800b99a:	9b01      	ldr	r3, [sp, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0de      	beq.n	800b95e <__hexnan+0xd6>
 800b9a0:	f1c3 0320 	rsb	r3, r3, #32
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	40da      	lsrs	r2, r3
 800b9aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9b4:	e7d3      	b.n	800b95e <__hexnan+0xd6>
 800b9b6:	3f04      	subs	r7, #4
 800b9b8:	e7d1      	b.n	800b95e <__hexnan+0xd6>
 800b9ba:	2004      	movs	r0, #4
 800b9bc:	e7d6      	b.n	800b96c <__hexnan+0xe4>

0800b9be <__ascii_mbtowc>:
 800b9be:	b082      	sub	sp, #8
 800b9c0:	b901      	cbnz	r1, 800b9c4 <__ascii_mbtowc+0x6>
 800b9c2:	a901      	add	r1, sp, #4
 800b9c4:	b142      	cbz	r2, 800b9d8 <__ascii_mbtowc+0x1a>
 800b9c6:	b14b      	cbz	r3, 800b9dc <__ascii_mbtowc+0x1e>
 800b9c8:	7813      	ldrb	r3, [r2, #0]
 800b9ca:	600b      	str	r3, [r1, #0]
 800b9cc:	7812      	ldrb	r2, [r2, #0]
 800b9ce:	1e10      	subs	r0, r2, #0
 800b9d0:	bf18      	it	ne
 800b9d2:	2001      	movne	r0, #1
 800b9d4:	b002      	add	sp, #8
 800b9d6:	4770      	bx	lr
 800b9d8:	4610      	mov	r0, r2
 800b9da:	e7fb      	b.n	800b9d4 <__ascii_mbtowc+0x16>
 800b9dc:	f06f 0001 	mvn.w	r0, #1
 800b9e0:	e7f8      	b.n	800b9d4 <__ascii_mbtowc+0x16>

0800b9e2 <_realloc_r>:
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	b921      	cbnz	r1, 800b9f8 <_realloc_r+0x16>
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f4:	f7fb bf92 	b.w	800791c <_malloc_r>
 800b9f8:	b92a      	cbnz	r2, 800ba06 <_realloc_r+0x24>
 800b9fa:	4625      	mov	r5, r4
 800b9fc:	f7fd feba 	bl	8009774 <_free_r>
 800ba00:	4628      	mov	r0, r5
 800ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba06:	f000 f840 	bl	800ba8a <_malloc_usable_size_r>
 800ba0a:	4284      	cmp	r4, r0
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	d802      	bhi.n	800ba16 <_realloc_r+0x34>
 800ba10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba14:	d8f4      	bhi.n	800ba00 <_realloc_r+0x1e>
 800ba16:	4621      	mov	r1, r4
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f7fb ff7f 	bl	800791c <_malloc_r>
 800ba1e:	4680      	mov	r8, r0
 800ba20:	b908      	cbnz	r0, 800ba26 <_realloc_r+0x44>
 800ba22:	4645      	mov	r5, r8
 800ba24:	e7ec      	b.n	800ba00 <_realloc_r+0x1e>
 800ba26:	42b4      	cmp	r4, r6
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	bf28      	it	cs
 800ba2e:	4632      	movcs	r2, r6
 800ba30:	f7fd f82b 	bl	8008a8a <memcpy>
 800ba34:	4629      	mov	r1, r5
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7fd fe9c 	bl	8009774 <_free_r>
 800ba3c:	e7f1      	b.n	800ba22 <_realloc_r+0x40>

0800ba3e <__ascii_wctomb>:
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	b141      	cbz	r1, 800ba56 <__ascii_wctomb+0x18>
 800ba44:	2aff      	cmp	r2, #255	@ 0xff
 800ba46:	d904      	bls.n	800ba52 <__ascii_wctomb+0x14>
 800ba48:	228a      	movs	r2, #138	@ 0x8a
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	2001      	movs	r0, #1
 800ba54:	700a      	strb	r2, [r1, #0]
 800ba56:	4770      	bx	lr

0800ba58 <fiprintf>:
 800ba58:	b40e      	push	{r1, r2, r3}
 800ba5a:	b503      	push	{r0, r1, lr}
 800ba5c:	ab03      	add	r3, sp, #12
 800ba5e:	4601      	mov	r1, r0
 800ba60:	4805      	ldr	r0, [pc, #20]	@ (800ba78 <fiprintf+0x20>)
 800ba62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba66:	6800      	ldr	r0, [r0, #0]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	f000 f83f 	bl	800baec <_vfiprintf_r>
 800ba6e:	b002      	add	sp, #8
 800ba70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba74:	b003      	add	sp, #12
 800ba76:	4770      	bx	lr
 800ba78:	20000018 	.word	0x20000018

0800ba7c <abort>:
 800ba7c:	2006      	movs	r0, #6
 800ba7e:	b508      	push	{r3, lr}
 800ba80:	f000 fa08 	bl	800be94 <raise>
 800ba84:	2001      	movs	r0, #1
 800ba86:	f7f8 f88e 	bl	8003ba6 <_exit>

0800ba8a <_malloc_usable_size_r>:
 800ba8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba8e:	1f18      	subs	r0, r3, #4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfbc      	itt	lt
 800ba94:	580b      	ldrlt	r3, [r1, r0]
 800ba96:	18c0      	addlt	r0, r0, r3
 800ba98:	4770      	bx	lr

0800ba9a <__sfputc_r>:
 800ba9a:	6893      	ldr	r3, [r2, #8]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	b410      	push	{r4}
 800baa2:	6093      	str	r3, [r2, #8]
 800baa4:	da08      	bge.n	800bab8 <__sfputc_r+0x1e>
 800baa6:	6994      	ldr	r4, [r2, #24]
 800baa8:	42a3      	cmp	r3, r4
 800baaa:	db01      	blt.n	800bab0 <__sfputc_r+0x16>
 800baac:	290a      	cmp	r1, #10
 800baae:	d103      	bne.n	800bab8 <__sfputc_r+0x1e>
 800bab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab4:	f000 b932 	b.w	800bd1c <__swbuf_r>
 800bab8:	6813      	ldr	r3, [r2, #0]
 800baba:	1c58      	adds	r0, r3, #1
 800babc:	6010      	str	r0, [r2, #0]
 800babe:	4608      	mov	r0, r1
 800bac0:	7019      	strb	r1, [r3, #0]
 800bac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <__sfputs_r>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	4614      	mov	r4, r2
 800bad0:	18d5      	adds	r5, r2, r3
 800bad2:	42ac      	cmp	r4, r5
 800bad4:	d101      	bne.n	800bada <__sfputs_r+0x12>
 800bad6:	2000      	movs	r0, #0
 800bad8:	e007      	b.n	800baea <__sfputs_r+0x22>
 800bada:	463a      	mov	r2, r7
 800badc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff ffda 	bl	800ba9a <__sfputc_r>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d1f3      	bne.n	800bad2 <__sfputs_r+0xa>
 800baea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baec <_vfiprintf_r>:
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	460d      	mov	r5, r1
 800baf2:	b09d      	sub	sp, #116	@ 0x74
 800baf4:	4614      	mov	r4, r2
 800baf6:	4698      	mov	r8, r3
 800baf8:	4606      	mov	r6, r0
 800bafa:	b118      	cbz	r0, 800bb04 <_vfiprintf_r+0x18>
 800bafc:	6a03      	ldr	r3, [r0, #32]
 800bafe:	b90b      	cbnz	r3, 800bb04 <_vfiprintf_r+0x18>
 800bb00:	f7fc fe8a 	bl	8008818 <__sinit>
 800bb04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb06:	07d9      	lsls	r1, r3, #31
 800bb08:	d405      	bmi.n	800bb16 <_vfiprintf_r+0x2a>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	059a      	lsls	r2, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_vfiprintf_r+0x2a>
 800bb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb12:	f7fc ffaa 	bl	8008a6a <__retarget_lock_acquire_recursive>
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	071b      	lsls	r3, r3, #28
 800bb1a:	d501      	bpl.n	800bb20 <_vfiprintf_r+0x34>
 800bb1c:	692b      	ldr	r3, [r5, #16]
 800bb1e:	b99b      	cbnz	r3, 800bb48 <_vfiprintf_r+0x5c>
 800bb20:	4629      	mov	r1, r5
 800bb22:	4630      	mov	r0, r6
 800bb24:	f000 f938 	bl	800bd98 <__swsetup_r>
 800bb28:	b170      	cbz	r0, 800bb48 <_vfiprintf_r+0x5c>
 800bb2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb2c:	07dc      	lsls	r4, r3, #31
 800bb2e:	d504      	bpl.n	800bb3a <_vfiprintf_r+0x4e>
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	b01d      	add	sp, #116	@ 0x74
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	89ab      	ldrh	r3, [r5, #12]
 800bb3c:	0598      	lsls	r0, r3, #22
 800bb3e:	d4f7      	bmi.n	800bb30 <_vfiprintf_r+0x44>
 800bb40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb42:	f7fc ff93 	bl	8008a6c <__retarget_lock_release_recursive>
 800bb46:	e7f3      	b.n	800bb30 <_vfiprintf_r+0x44>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb4e:	f04f 0901 	mov.w	r9, #1
 800bb52:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bd08 <_vfiprintf_r+0x21c>
 800bb56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb58:	2320      	movs	r3, #32
 800bb5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb5e:	2330      	movs	r3, #48	@ 0x30
 800bb60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb64:	4623      	mov	r3, r4
 800bb66:	469a      	mov	sl, r3
 800bb68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb6c:	b10a      	cbz	r2, 800bb72 <_vfiprintf_r+0x86>
 800bb6e:	2a25      	cmp	r2, #37	@ 0x25
 800bb70:	d1f9      	bne.n	800bb66 <_vfiprintf_r+0x7a>
 800bb72:	ebba 0b04 	subs.w	fp, sl, r4
 800bb76:	d00b      	beq.n	800bb90 <_vfiprintf_r+0xa4>
 800bb78:	465b      	mov	r3, fp
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ffa2 	bl	800bac8 <__sfputs_r>
 800bb84:	3001      	adds	r0, #1
 800bb86:	f000 80a7 	beq.w	800bcd8 <_vfiprintf_r+0x1ec>
 800bb8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb8c:	445a      	add	r2, fp
 800bb8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb90:	f89a 3000 	ldrb.w	r3, [sl]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 809f 	beq.w	800bcd8 <_vfiprintf_r+0x1ec>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	f10a 0a01 	add.w	sl, sl, #1
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	9307      	str	r3, [sp, #28]
 800bba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbac:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb2:	4654      	mov	r4, sl
 800bbb4:	2205      	movs	r2, #5
 800bbb6:	4854      	ldr	r0, [pc, #336]	@ (800bd08 <_vfiprintf_r+0x21c>)
 800bbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbc:	f7fc ff57 	bl	8008a6e <memchr>
 800bbc0:	9a04      	ldr	r2, [sp, #16]
 800bbc2:	b9d8      	cbnz	r0, 800bbfc <_vfiprintf_r+0x110>
 800bbc4:	06d1      	lsls	r1, r2, #27
 800bbc6:	bf44      	itt	mi
 800bbc8:	2320      	movmi	r3, #32
 800bbca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbce:	0713      	lsls	r3, r2, #28
 800bbd0:	bf44      	itt	mi
 800bbd2:	232b      	movmi	r3, #43	@ 0x2b
 800bbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbde:	d015      	beq.n	800bc0c <_vfiprintf_r+0x120>
 800bbe0:	9a07      	ldr	r2, [sp, #28]
 800bbe2:	4654      	mov	r4, sl
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	f04f 0c0a 	mov.w	ip, #10
 800bbea:	4621      	mov	r1, r4
 800bbec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf0:	3b30      	subs	r3, #48	@ 0x30
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	d94b      	bls.n	800bc8e <_vfiprintf_r+0x1a2>
 800bbf6:	b1b0      	cbz	r0, 800bc26 <_vfiprintf_r+0x13a>
 800bbf8:	9207      	str	r2, [sp, #28]
 800bbfa:	e014      	b.n	800bc26 <_vfiprintf_r+0x13a>
 800bbfc:	eba0 0308 	sub.w	r3, r0, r8
 800bc00:	46a2      	mov	sl, r4
 800bc02:	fa09 f303 	lsl.w	r3, r9, r3
 800bc06:	4313      	orrs	r3, r2
 800bc08:	9304      	str	r3, [sp, #16]
 800bc0a:	e7d2      	b.n	800bbb2 <_vfiprintf_r+0xc6>
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	1d19      	adds	r1, r3, #4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	9103      	str	r1, [sp, #12]
 800bc16:	bfbb      	ittet	lt
 800bc18:	425b      	neglt	r3, r3
 800bc1a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc1e:	9307      	strge	r3, [sp, #28]
 800bc20:	9307      	strlt	r3, [sp, #28]
 800bc22:	bfb8      	it	lt
 800bc24:	9204      	strlt	r2, [sp, #16]
 800bc26:	7823      	ldrb	r3, [r4, #0]
 800bc28:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc2a:	d10a      	bne.n	800bc42 <_vfiprintf_r+0x156>
 800bc2c:	7863      	ldrb	r3, [r4, #1]
 800bc2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc30:	d132      	bne.n	800bc98 <_vfiprintf_r+0x1ac>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	3402      	adds	r4, #2
 800bc36:	1d1a      	adds	r2, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc3e:	9203      	str	r2, [sp, #12]
 800bc40:	9305      	str	r3, [sp, #20]
 800bc42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd18 <_vfiprintf_r+0x22c>
 800bc46:	2203      	movs	r2, #3
 800bc48:	7821      	ldrb	r1, [r4, #0]
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f7fc ff0f 	bl	8008a6e <memchr>
 800bc50:	b138      	cbz	r0, 800bc62 <_vfiprintf_r+0x176>
 800bc52:	eba0 000a 	sub.w	r0, r0, sl
 800bc56:	2240      	movs	r2, #64	@ 0x40
 800bc58:	9b04      	ldr	r3, [sp, #16]
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	4082      	lsls	r2, r0
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc66:	2206      	movs	r2, #6
 800bc68:	4828      	ldr	r0, [pc, #160]	@ (800bd0c <_vfiprintf_r+0x220>)
 800bc6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc6e:	f7fc fefe 	bl	8008a6e <memchr>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d03f      	beq.n	800bcf6 <_vfiprintf_r+0x20a>
 800bc76:	4b26      	ldr	r3, [pc, #152]	@ (800bd10 <_vfiprintf_r+0x224>)
 800bc78:	bb1b      	cbnz	r3, 800bcc2 <_vfiprintf_r+0x1d6>
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	3307      	adds	r3, #7
 800bc7e:	f023 0307 	bic.w	r3, r3, #7
 800bc82:	3308      	adds	r3, #8
 800bc84:	9303      	str	r3, [sp, #12]
 800bc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc88:	443b      	add	r3, r7
 800bc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8c:	e76a      	b.n	800bb64 <_vfiprintf_r+0x78>
 800bc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc92:	460c      	mov	r4, r1
 800bc94:	2001      	movs	r0, #1
 800bc96:	e7a8      	b.n	800bbea <_vfiprintf_r+0xfe>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	3401      	adds	r4, #1
 800bc9c:	f04f 0c0a 	mov.w	ip, #10
 800bca0:	4619      	mov	r1, r3
 800bca2:	9305      	str	r3, [sp, #20]
 800bca4:	4620      	mov	r0, r4
 800bca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcaa:	3a30      	subs	r2, #48	@ 0x30
 800bcac:	2a09      	cmp	r2, #9
 800bcae:	d903      	bls.n	800bcb8 <_vfiprintf_r+0x1cc>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0c6      	beq.n	800bc42 <_vfiprintf_r+0x156>
 800bcb4:	9105      	str	r1, [sp, #20]
 800bcb6:	e7c4      	b.n	800bc42 <_vfiprintf_r+0x156>
 800bcb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e7f0      	b.n	800bca4 <_vfiprintf_r+0x1b8>
 800bcc2:	ab03      	add	r3, sp, #12
 800bcc4:	462a      	mov	r2, r5
 800bcc6:	a904      	add	r1, sp, #16
 800bcc8:	4630      	mov	r0, r6
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	4b11      	ldr	r3, [pc, #68]	@ (800bd14 <_vfiprintf_r+0x228>)
 800bcce:	f7fb ff4f 	bl	8007b70 <_printf_float>
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	1c78      	adds	r0, r7, #1
 800bcd6:	d1d6      	bne.n	800bc86 <_vfiprintf_r+0x19a>
 800bcd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcda:	07d9      	lsls	r1, r3, #31
 800bcdc:	d405      	bmi.n	800bcea <_vfiprintf_r+0x1fe>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	059a      	lsls	r2, r3, #22
 800bce2:	d402      	bmi.n	800bcea <_vfiprintf_r+0x1fe>
 800bce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bce6:	f7fc fec1 	bl	8008a6c <__retarget_lock_release_recursive>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	065b      	lsls	r3, r3, #25
 800bcee:	f53f af1f 	bmi.w	800bb30 <_vfiprintf_r+0x44>
 800bcf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf4:	e71e      	b.n	800bb34 <_vfiprintf_r+0x48>
 800bcf6:	ab03      	add	r3, sp, #12
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	a904      	add	r1, sp, #16
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	4b04      	ldr	r3, [pc, #16]	@ (800bd14 <_vfiprintf_r+0x228>)
 800bd02:	f7fc f9d1 	bl	80080a8 <_printf_i>
 800bd06:	e7e4      	b.n	800bcd2 <_vfiprintf_r+0x1e6>
 800bd08:	0800c519 	.word	0x0800c519
 800bd0c:	0800c523 	.word	0x0800c523
 800bd10:	08007b71 	.word	0x08007b71
 800bd14:	0800bac9 	.word	0x0800bac9
 800bd18:	0800c51f 	.word	0x0800c51f

0800bd1c <__swbuf_r>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	460e      	mov	r6, r1
 800bd20:	4614      	mov	r4, r2
 800bd22:	4605      	mov	r5, r0
 800bd24:	b118      	cbz	r0, 800bd2e <__swbuf_r+0x12>
 800bd26:	6a03      	ldr	r3, [r0, #32]
 800bd28:	b90b      	cbnz	r3, 800bd2e <__swbuf_r+0x12>
 800bd2a:	f7fc fd75 	bl	8008818 <__sinit>
 800bd2e:	69a3      	ldr	r3, [r4, #24]
 800bd30:	60a3      	str	r3, [r4, #8]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	071a      	lsls	r2, r3, #28
 800bd36:	d501      	bpl.n	800bd3c <__swbuf_r+0x20>
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	b943      	cbnz	r3, 800bd4e <__swbuf_r+0x32>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 f82a 	bl	800bd98 <__swsetup_r>
 800bd44:	b118      	cbz	r0, 800bd4e <__swbuf_r+0x32>
 800bd46:	f04f 37ff 	mov.w	r7, #4294967295
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	b2f6      	uxtb	r6, r6
 800bd52:	6922      	ldr	r2, [r4, #16]
 800bd54:	4637      	mov	r7, r6
 800bd56:	1a98      	subs	r0, r3, r2
 800bd58:	6963      	ldr	r3, [r4, #20]
 800bd5a:	4283      	cmp	r3, r0
 800bd5c:	dc05      	bgt.n	800bd6a <__swbuf_r+0x4e>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f7ff fa67 	bl	800b234 <_fflush_r>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d1ed      	bne.n	800bd46 <__swbuf_r+0x2a>
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	60a3      	str	r3, [r4, #8]
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	6022      	str	r2, [r4, #0]
 800bd76:	701e      	strb	r6, [r3, #0]
 800bd78:	1c43      	adds	r3, r0, #1
 800bd7a:	6962      	ldr	r2, [r4, #20]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d004      	beq.n	800bd8a <__swbuf_r+0x6e>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	07db      	lsls	r3, r3, #31
 800bd84:	d5e1      	bpl.n	800bd4a <__swbuf_r+0x2e>
 800bd86:	2e0a      	cmp	r6, #10
 800bd88:	d1df      	bne.n	800bd4a <__swbuf_r+0x2e>
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f7ff fa51 	bl	800b234 <_fflush_r>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d0d9      	beq.n	800bd4a <__swbuf_r+0x2e>
 800bd96:	e7d6      	b.n	800bd46 <__swbuf_r+0x2a>

0800bd98 <__swsetup_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4b29      	ldr	r3, [pc, #164]	@ (800be40 <__swsetup_r+0xa8>)
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	b118      	cbz	r0, 800bdac <__swsetup_r+0x14>
 800bda4:	6a03      	ldr	r3, [r0, #32]
 800bda6:	b90b      	cbnz	r3, 800bdac <__swsetup_r+0x14>
 800bda8:	f7fc fd36 	bl	8008818 <__sinit>
 800bdac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb0:	0719      	lsls	r1, r3, #28
 800bdb2:	d422      	bmi.n	800bdfa <__swsetup_r+0x62>
 800bdb4:	06da      	lsls	r2, r3, #27
 800bdb6:	d407      	bmi.n	800bdc8 <__swsetup_r+0x30>
 800bdb8:	2209      	movs	r2, #9
 800bdba:	602a      	str	r2, [r5, #0]
 800bdbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e033      	b.n	800be30 <__swsetup_r+0x98>
 800bdc8:	0758      	lsls	r0, r3, #29
 800bdca:	d512      	bpl.n	800bdf2 <__swsetup_r+0x5a>
 800bdcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdce:	b141      	cbz	r1, 800bde2 <__swsetup_r+0x4a>
 800bdd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d002      	beq.n	800bdde <__swsetup_r+0x46>
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7fd fccb 	bl	8009774 <_free_r>
 800bdde:	2300      	movs	r3, #0
 800bde0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	2300      	movs	r3, #0
 800bdec:	6063      	str	r3, [r4, #4]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f043 0308 	orr.w	r3, r3, #8
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	b94b      	cbnz	r3, 800be12 <__swsetup_r+0x7a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be08:	d003      	beq.n	800be12 <__swsetup_r+0x7a>
 800be0a:	4621      	mov	r1, r4
 800be0c:	4628      	mov	r0, r5
 800be0e:	f000 f882 	bl	800bf16 <__smakebuf_r>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	f013 0201 	ands.w	r2, r3, #1
 800be1a:	d00a      	beq.n	800be32 <__swsetup_r+0x9a>
 800be1c:	2200      	movs	r2, #0
 800be1e:	60a2      	str	r2, [r4, #8]
 800be20:	6962      	ldr	r2, [r4, #20]
 800be22:	4252      	negs	r2, r2
 800be24:	61a2      	str	r2, [r4, #24]
 800be26:	6922      	ldr	r2, [r4, #16]
 800be28:	b942      	cbnz	r2, 800be3c <__swsetup_r+0xa4>
 800be2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be2e:	d1c5      	bne.n	800bdbc <__swsetup_r+0x24>
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	0799      	lsls	r1, r3, #30
 800be34:	bf58      	it	pl
 800be36:	6962      	ldrpl	r2, [r4, #20]
 800be38:	60a2      	str	r2, [r4, #8]
 800be3a:	e7f4      	b.n	800be26 <__swsetup_r+0x8e>
 800be3c:	2000      	movs	r0, #0
 800be3e:	e7f7      	b.n	800be30 <__swsetup_r+0x98>
 800be40:	20000018 	.word	0x20000018

0800be44 <_raise_r>:
 800be44:	291f      	cmp	r1, #31
 800be46:	b538      	push	{r3, r4, r5, lr}
 800be48:	4605      	mov	r5, r0
 800be4a:	460c      	mov	r4, r1
 800be4c:	d904      	bls.n	800be58 <_raise_r+0x14>
 800be4e:	2316      	movs	r3, #22
 800be50:	6003      	str	r3, [r0, #0]
 800be52:	f04f 30ff 	mov.w	r0, #4294967295
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be5a:	b112      	cbz	r2, 800be62 <_raise_r+0x1e>
 800be5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be60:	b94b      	cbnz	r3, 800be76 <_raise_r+0x32>
 800be62:	4628      	mov	r0, r5
 800be64:	f000 f830 	bl	800bec8 <_getpid_r>
 800be68:	4622      	mov	r2, r4
 800be6a:	4601      	mov	r1, r0
 800be6c:	4628      	mov	r0, r5
 800be6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be72:	f000 b817 	b.w	800bea4 <_kill_r>
 800be76:	2b01      	cmp	r3, #1
 800be78:	d00a      	beq.n	800be90 <_raise_r+0x4c>
 800be7a:	1c59      	adds	r1, r3, #1
 800be7c:	d103      	bne.n	800be86 <_raise_r+0x42>
 800be7e:	2316      	movs	r3, #22
 800be80:	6003      	str	r3, [r0, #0]
 800be82:	2001      	movs	r0, #1
 800be84:	e7e7      	b.n	800be56 <_raise_r+0x12>
 800be86:	2100      	movs	r1, #0
 800be88:	4620      	mov	r0, r4
 800be8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be8e:	4798      	blx	r3
 800be90:	2000      	movs	r0, #0
 800be92:	e7e0      	b.n	800be56 <_raise_r+0x12>

0800be94 <raise>:
 800be94:	4b02      	ldr	r3, [pc, #8]	@ (800bea0 <raise+0xc>)
 800be96:	4601      	mov	r1, r0
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	f7ff bfd3 	b.w	800be44 <_raise_r>
 800be9e:	bf00      	nop
 800bea0:	20000018 	.word	0x20000018

0800bea4 <_kill_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	2300      	movs	r3, #0
 800bea8:	4d06      	ldr	r5, [pc, #24]	@ (800bec4 <_kill_r+0x20>)
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	602b      	str	r3, [r5, #0]
 800beb2:	f7f7 fe68 	bl	8003b86 <_kill>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	d102      	bne.n	800bec0 <_kill_r+0x1c>
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	b103      	cbz	r3, 800bec0 <_kill_r+0x1c>
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	bf00      	nop
 800bec4:	20000804 	.word	0x20000804

0800bec8 <_getpid_r>:
 800bec8:	f7f7 be55 	b.w	8003b76 <_getpid>

0800becc <__swhatbuf_r>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	460c      	mov	r4, r1
 800bed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed4:	b096      	sub	sp, #88	@ 0x58
 800bed6:	4615      	mov	r5, r2
 800bed8:	2900      	cmp	r1, #0
 800beda:	461e      	mov	r6, r3
 800bedc:	da0c      	bge.n	800bef8 <__swhatbuf_r+0x2c>
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	2100      	movs	r1, #0
 800bee2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bee6:	bf14      	ite	ne
 800bee8:	2340      	movne	r3, #64	@ 0x40
 800beea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beee:	2000      	movs	r0, #0
 800bef0:	6031      	str	r1, [r6, #0]
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	b016      	add	sp, #88	@ 0x58
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	466a      	mov	r2, sp
 800befa:	f000 f849 	bl	800bf90 <_fstat_r>
 800befe:	2800      	cmp	r0, #0
 800bf00:	dbed      	blt.n	800bede <__swhatbuf_r+0x12>
 800bf02:	9901      	ldr	r1, [sp, #4]
 800bf04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf0c:	4259      	negs	r1, r3
 800bf0e:	4159      	adcs	r1, r3
 800bf10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf14:	e7eb      	b.n	800beee <__swhatbuf_r+0x22>

0800bf16 <__smakebuf_r>:
 800bf16:	898b      	ldrh	r3, [r1, #12]
 800bf18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf1a:	079d      	lsls	r5, r3, #30
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	d507      	bpl.n	800bf32 <__smakebuf_r+0x1c>
 800bf22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf26:	6023      	str	r3, [r4, #0]
 800bf28:	6123      	str	r3, [r4, #16]
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	6163      	str	r3, [r4, #20]
 800bf2e:	b003      	add	sp, #12
 800bf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf32:	ab01      	add	r3, sp, #4
 800bf34:	466a      	mov	r2, sp
 800bf36:	f7ff ffc9 	bl	800becc <__swhatbuf_r>
 800bf3a:	9f00      	ldr	r7, [sp, #0]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7fb fceb 	bl	800791c <_malloc_r>
 800bf46:	b948      	cbnz	r0, 800bf5c <__smakebuf_r+0x46>
 800bf48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf4c:	059a      	lsls	r2, r3, #22
 800bf4e:	d4ee      	bmi.n	800bf2e <__smakebuf_r+0x18>
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	f043 0302 	orr.w	r3, r3, #2
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	e7e2      	b.n	800bf22 <__smakebuf_r+0xc>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	6020      	str	r0, [r4, #0]
 800bf60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf64:	81a3      	strh	r3, [r4, #12]
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf6c:	b15b      	cbz	r3, 800bf86 <__smakebuf_r+0x70>
 800bf6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 f81e 	bl	800bfb4 <_isatty_r>
 800bf78:	b128      	cbz	r0, 800bf86 <__smakebuf_r+0x70>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f023 0303 	bic.w	r3, r3, #3
 800bf80:	f043 0301 	orr.w	r3, r3, #1
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	431d      	orrs	r5, r3
 800bf8a:	81a5      	strh	r5, [r4, #12]
 800bf8c:	e7cf      	b.n	800bf2e <__smakebuf_r+0x18>
	...

0800bf90 <_fstat_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	2300      	movs	r3, #0
 800bf94:	4d06      	ldr	r5, [pc, #24]	@ (800bfb0 <_fstat_r+0x20>)
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	602b      	str	r3, [r5, #0]
 800bf9e:	f7f7 fe52 	bl	8003c46 <_fstat>
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	d102      	bne.n	800bfac <_fstat_r+0x1c>
 800bfa6:	682b      	ldr	r3, [r5, #0]
 800bfa8:	b103      	cbz	r3, 800bfac <_fstat_r+0x1c>
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	bd38      	pop	{r3, r4, r5, pc}
 800bfae:	bf00      	nop
 800bfb0:	20000804 	.word	0x20000804

0800bfb4 <_isatty_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4d05      	ldr	r5, [pc, #20]	@ (800bfd0 <_isatty_r+0x1c>)
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f7 fe51 	bl	8003c66 <_isatty>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_isatty_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_isatty_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000804 	.word	0x20000804

0800bfd4 <_init>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	bf00      	nop
 800bfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfda:	bc08      	pop	{r3}
 800bfdc:	469e      	mov	lr, r3
 800bfde:	4770      	bx	lr

0800bfe0 <_fini>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	bf00      	nop
 800bfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe6:	bc08      	pop	{r3}
 800bfe8:	469e      	mov	lr, r3
 800bfea:	4770      	bx	lr
