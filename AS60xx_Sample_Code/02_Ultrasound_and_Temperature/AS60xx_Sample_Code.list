
AS60xx_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c504  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800c740  0800c740  0000d740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe4  0800cfe4  0000e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cfe4  0800cfe4  0000dfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfec  0800cfec  0000e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cfec  0800cfec  0000dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800cff4  0800cff4  0000dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800cffc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000214  0800d210  0000e214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800d210  0000e8ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b228  00000000  00000000  0000e24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e33  00000000  00000000  00029472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0002d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a8f  00000000  00000000  0002def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014244  00000000  00000000  00060986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001369da  00000000  00000000  00074bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab5a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  001ab5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001b0eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000214 	.word	0x20000214
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c724 	.word	0x0800c724

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000218 	.word	0x20000218
 8000274:	0800c724 	.word	0x0800c724

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <AS60xx_Example_Setup>:
static AS60xx as60xx;

static Result SerialPrint(const char str[]);

extern "C" void AS60xx_Example_Setup(UART_HandleTypeDef *uart, SPI_HandleTypeDef *spi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	@ 0x58
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    huart = *uart;
 8001082:	4a41      	ldr	r2, [pc, #260]	@ (8001188 <AS60xx_Example_Setup+0x110>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	2394      	movs	r3, #148	@ 0x94
 800108c:	461a      	mov	r2, r3
 800108e:	f008 f8a4 	bl	80091da <memcpy>
    // Wait to allow terminal software to capture the output
    HAL_Delay(2000);
 8001092:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001096:	f003 fb3f 	bl	8004718 <HAL_Delay>

    SerialPrint("Starting AS60xx 02_AS60xx_Example_Ultrasound_and_Temperature demo on STM32...\n");
 800109a:	483c      	ldr	r0, [pc, #240]	@ (800118c <AS60xx_Example_Setup+0x114>)
 800109c:	f000 f99e 	bl	80013dc <_ZL11SerialPrintPKc>

    HAL_Delay(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 80010a0:	205e      	movs	r0, #94	@ 0x5e
 80010a2:	f003 fb39 	bl	8004718 <HAL_Delay>

    as60xx.begin(spi, SSN_Pin, SSN_GPIO_Port);
 80010a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <AS60xx_Example_Setup+0x118>)
 80010a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	4839      	ldr	r0, [pc, #228]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 80010b0:	f002 fce0 	bl	8003a74 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>

    if( as60xx.init() )
 80010b4:	4837      	ldr	r0, [pc, #220]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 80010b6:	f002 fd87 	bl	8003bc8 <_ZN6AS60xx4initEv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <AS60xx_Example_Setup+0x50>
    {
        SerialPrint("AS60xx initialized properly\n");
 80010c0:	4835      	ldr	r0, [pc, #212]	@ (8001198 <AS60xx_Example_Setup+0x120>)
 80010c2:	f000 f98b 	bl	80013dc <_ZL11SerialPrintPKc>
 80010c6:	e002      	b.n	80010ce <AS60xx_Example_Setup+0x56>
    }
    else
    {
        SerialPrint("AS60xx initialization failed\n");
 80010c8:	4834      	ldr	r0, [pc, #208]	@ (800119c <AS60xx_Example_Setup+0x124>)
 80010ca:	f000 f987 	bl	80013dc <_ZL11SerialPrintPKc>
    }

    sprintf(messageBuffer, "High Speed Clock Frequency: %0.3f MHz\n", as60xx.getHighSpeedClockFrequencyHz() / 1000000.0);
 80010ce:	4831      	ldr	r0, [pc, #196]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 80010d0:	f002 fd30 	bl	8003b34 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>
 80010d4:	ee10 3a10 	vmov	r3, s0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa39 	bl	8000550 <__aeabi_f2d>
 80010de:	a328      	add	r3, pc, #160	@ (adr r3, 8001180 <AS60xx_Example_Setup+0x108>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fbb6 	bl	8000854 <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	492c      	ldr	r1, [pc, #176]	@ (80011a0 <AS60xx_Example_Setup+0x128>)
 80010ee:	482d      	ldr	r0, [pc, #180]	@ (80011a4 <AS60xx_Example_Setup+0x12c>)
 80010f0:	f007 ff70 	bl	8008fd4 <siprintf>
    SerialPrint(messageBuffer);
 80010f4:	482b      	ldr	r0, [pc, #172]	@ (80011a4 <AS60xx_Example_Setup+0x12c>)
 80010f6:	f000 f971 	bl	80013dc <_ZL11SerialPrintPKc>

    sprintf(messageBuffer, "Supply Voltage: %ld mV\n", as60xx.getSupplyVoltageMv() );
 80010fa:	4826      	ldr	r0, [pc, #152]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 80010fc:	f002 fd0c 	bl	8003b18 <_ZN6AS60xx18getSupplyVoltageMvEv>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4928      	ldr	r1, [pc, #160]	@ (80011a8 <AS60xx_Example_Setup+0x130>)
 8001106:	4827      	ldr	r0, [pc, #156]	@ (80011a4 <AS60xx_Example_Setup+0x12c>)
 8001108:	f007 ff64 	bl	8008fd4 <siprintf>
    SerialPrint(messageBuffer);
 800110c:	4825      	ldr	r0, [pc, #148]	@ (80011a4 <AS60xx_Example_Setup+0x12c>)
 800110e:	f000 f965 	bl	80013dc <_ZL11SerialPrintPKc>

    uint32_t configurationRegistersUsAndT[] = {
 8001112:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <AS60xx_Example_Setup+0x134>)
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4611      	mov	r1, r2
 800111a:	2250      	movs	r2, #80	@ 0x50
 800111c:	4618      	mov	r0, r3
 800111e:	f008 f85c 	bl	80091da <memcpy>
        0x000015E0,     // 0x0D1
        0x000015E0,     // 0x0D2
        0x00000023,     // 0x0DA
        0x00000023      // 0x0DB
    };
    as60xx.setConfigurationRegisters(configurationRegistersUsAndT);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	481a      	ldr	r0, [pc, #104]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 800112a:	f002 fdf4 	bl	8003d16 <_ZN6AS60xx25setConfigurationRegistersEPm>

    if( as60xx.writeConfig() == RESULT_OK )
 800112e:	4819      	ldr	r0, [pc, #100]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 8001130:	f002 fcd6 	bl	8003ae0 <_ZN6AS60xx11writeConfigEv>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <AS60xx_Example_Setup+0xd4>
    {
        SerialPrint("Configuration properly written\n");
 8001144:	481a      	ldr	r0, [pc, #104]	@ (80011b0 <AS60xx_Example_Setup+0x138>)
 8001146:	f000 f949 	bl	80013dc <_ZL11SerialPrintPKc>
 800114a:	e002      	b.n	8001152 <AS60xx_Example_Setup+0xda>
    }
    else
    {
        SerialPrint("Error! Configuration read doesn't match the values written\n");
 800114c:	4819      	ldr	r0, [pc, #100]	@ (80011b4 <AS60xx_Example_Setup+0x13c>)
 800114e:	f000 f945 	bl	80013dc <_ZL11SerialPrintPKc>
    }
    
    if( as60xx.startMeasurement() == RESULT_OK )
 8001152:	4810      	ldr	r0, [pc, #64]	@ (8001194 <AS60xx_Example_Setup+0x11c>)
 8001154:	f002 fcd2 	bl	8003afc <_ZN6AS60xx16startMeasurementEv>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <AS60xx_Example_Setup+0xf8>
    {
        SerialPrint("Measurements started\n");
 8001168:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <AS60xx_Example_Setup+0x140>)
 800116a:	f000 f937 	bl	80013dc <_ZL11SerialPrintPKc>
    }
    else
    {
        SerialPrint("Error! Measurements didn't start properly\n");
    }
}
 800116e:	e002      	b.n	8001176 <AS60xx_Example_Setup+0xfe>
        SerialPrint("Error! Measurements didn't start properly\n");
 8001170:	4812      	ldr	r0, [pc, #72]	@ (80011bc <AS60xx_Example_Setup+0x144>)
 8001172:	f000 f933 	bl	80013dc <_ZL11SerialPrintPKc>
}
 8001176:	bf00      	nop
 8001178:	3758      	adds	r7, #88	@ 0x58
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	412e8480 	.word	0x412e8480
 8001188:	200002b0 	.word	0x200002b0
 800118c:	0800c740 	.word	0x0800c740
 8001190:	42020800 	.word	0x42020800
 8001194:	20000344 	.word	0x20000344
 8001198:	0800c790 	.word	0x0800c790
 800119c:	0800c7b0 	.word	0x0800c7b0
 80011a0:	0800c7d0 	.word	0x0800c7d0
 80011a4:	20000230 	.word	0x20000230
 80011a8:	0800c7f8 	.word	0x0800c7f8
 80011ac:	0800c8b0 	.word	0x0800c8b0
 80011b0:	0800c810 	.word	0x0800c810
 80011b4:	0800c830 	.word	0x0800c830
 80011b8:	0800c86c 	.word	0x0800c86c
 80011bc:	0800c884 	.word	0x0800c884

080011c0 <AS60xx_Example_Loop>:

extern "C" void AS60xx_Example_Loop()
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af02      	add	r7, sp, #8
    float measuredTemperatures[2];
    AS60xx_Measure_Type measurementsReady = AS60XX_NO_MEASUREMENT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    As60xx_ErrorFlag errorsToCheck[] = {ERR_TOF_TMO, ERR_TM_OC_ERR, ERR_TM_SC_ERR, ERR_TM_SQC_TMO, ERR_CHP_ERR};
 80011cc:	4a78      	ldr	r2, [pc, #480]	@ (80013b0 <AS60xx_Example_Loop+0x1f0>)
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	6018      	str	r0, [r3, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	7019      	strb	r1, [r3, #0]
    uint8_t amountErrorsToCheck = (uint8_t)( sizeof(errorsToCheck) / sizeof(errorsToCheck[0]) );
 80011dc:	2305      	movs	r3, #5
 80011de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    while( 1 )
    {
        if( !HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) )
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	4873      	ldr	r0, [pc, #460]	@ (80013b4 <AS60xx_Example_Loop+0x1f4>)
 80011e6:	f003 fd73 	bl	8004cd0 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80d5 	beq.w	80013a6 <AS60xx_Example_Loop+0x1e6>
        {
            measurementsReady |= as60xx.update();
 80011fc:	486e      	ldr	r0, [pc, #440]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 80011fe:	f002 fd0a 	bl	8003c16 <_ZN6AS60xx6updateEv>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120a:	4313      	orrs	r3, r2
 800120c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            
            if( (measurementsReady & AS60XX_TEMPERATURE_MEASUREMENT) && (measurementsReady & AS60XX_TOF_MEASUREMENT) )
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 8094 	beq.w	8001346 <AS60xx_Example_Loop+0x186>
 800121e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 808d 	beq.w	8001346 <AS60xx_Example_Loop+0x186>
            {
                // Print the timestamp
                As60xx_Timestamp timestamp = as60xx.getTimestamp();
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4962      	ldr	r1, [pc, #392]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fc8f 	bl	8003b54 <_ZN6AS60xx12getTimestampEv>
                sprintf(messageBuffer, "Timestamp[hh:mm:ss]:%ld:%02d:%02d\t", timestamp.hours, timestamp.minutes, timestamp.seconds);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	7a3b      	ldrb	r3, [r7, #8]
 800123a:	4619      	mov	r1, r3
 800123c:	7a7b      	ldrb	r3, [r7, #9]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	460b      	mov	r3, r1
 8001242:	495e      	ldr	r1, [pc, #376]	@ (80013bc <AS60xx_Example_Loop+0x1fc>)
 8001244:	485e      	ldr	r0, [pc, #376]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 8001246:	f007 fec5 	bl	8008fd4 <siprintf>
                SerialPrint(messageBuffer);
 800124a:	485d      	ldr	r0, [pc, #372]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 800124c:	f000 f8c6 	bl	80013dc <_ZL11SerialPrintPKc>

                // Print the ToF sum upstream and downstream
                uint32_t avgTofUp = as60xx.getSumTofUp() / as60xx.getAmountHitsForSumToF();
 8001250:	4859      	ldr	r0, [pc, #356]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001252:	f002 fcee 	bl	8003c32 <_ZN6AS60xx11getSumTofUpEv>
 8001256:	4604      	mov	r4, r0
 8001258:	4857      	ldr	r0, [pc, #348]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 800125a:	f002 fd06 	bl	8003c6a <_ZN6AS60xx22getAmountHitsForSumToFEv>
 800125e:	4603      	mov	r3, r0
 8001260:	fbb4 f3f3 	udiv	r3, r4, r3
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint32_t avgTofDn = as60xx.getSumTofDown() / as60xx.getAmountHitsForSumToF();
 8001266:	4854      	ldr	r0, [pc, #336]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001268:	f002 fcf1 	bl	8003c4e <_ZN6AS60xx13getSumTofDownEv>
 800126c:	4604      	mov	r4, r0
 800126e:	4852      	ldr	r0, [pc, #328]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001270:	f002 fcfb 	bl	8003c6a <_ZN6AS60xx22getAmountHitsForSumToFEv>
 8001274:	4603      	mov	r3, r0
 8001276:	fbb4 f3f3 	udiv	r3, r4, r3
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
                float avgTofUp_ns = as60xx.calculateTimeNs(avgTofUp);
 800127c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800127e:	484e      	ldr	r0, [pc, #312]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001280:	f002 fd02 	bl	8003c88 <_ZN6AS60xx15calculateTimeNsEm>
 8001284:	ed87 0a08 	vstr	s0, [r7, #32]
                float avgTofDn_ns = as60xx.calculateTimeNs(avgTofDn);
 8001288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800128a:	484b      	ldr	r0, [pc, #300]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 800128c:	f002 fcfc 	bl	8003c88 <_ZN6AS60xx15calculateTimeNsEm>
 8001290:	ed87 0a07 	vstr	s0, [r7, #28]

                sprintf(messageBuffer, "AvgTofSumUp[ns]:%0.2f\tAvgTofSumDn[ns]:%0.2f\t", avgTofUp_ns, avgTofDn_ns);
 8001294:	6a38      	ldr	r0, [r7, #32]
 8001296:	f7ff f95b 	bl	8000550 <__aeabi_f2d>
 800129a:	4604      	mov	r4, r0
 800129c:	460d      	mov	r5, r1
 800129e:	69f8      	ldr	r0, [r7, #28]
 80012a0:	f7ff f956 	bl	8000550 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9cd 2300 	strd	r2, r3, [sp]
 80012ac:	4622      	mov	r2, r4
 80012ae:	462b      	mov	r3, r5
 80012b0:	4944      	ldr	r1, [pc, #272]	@ (80013c4 <AS60xx_Example_Loop+0x204>)
 80012b2:	4843      	ldr	r0, [pc, #268]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 80012b4:	f007 fe8e 	bl	8008fd4 <siprintf>
                SerialPrint(messageBuffer);
 80012b8:	4841      	ldr	r0, [pc, #260]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 80012ba:	f000 f88f 	bl	80013dc <_ZL11SerialPrintPKc>

                // Print the ToF difference
                sprintf(messageBuffer, "TofDiff[ns]:%0.2f\t", avgTofUp_ns - avgTofDn_ns );
 80012be:	ed97 7a08 	vldr	s14, [r7, #32]
 80012c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ca:	ee17 0a90 	vmov	r0, s15
 80012ce:	f7ff f93f 	bl	8000550 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	493c      	ldr	r1, [pc, #240]	@ (80013c8 <AS60xx_Example_Loop+0x208>)
 80012d8:	4839      	ldr	r0, [pc, #228]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 80012da:	f007 fe7b 	bl	8008fd4 <siprintf>
                SerialPrint(messageBuffer);
 80012de:	4838      	ldr	r0, [pc, #224]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 80012e0:	f000 f87c 	bl	80013dc <_ZL11SerialPrintPKc>

                // Print the temperatures measured with the 2-wire RTD
                as60xx.getTemperatures2WireDegC(measuredTemperatures);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4833      	ldr	r0, [pc, #204]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 80012ec:	f002 fcf4 	bl	8003cd8 <_ZN6AS60xx24getTemperatures2WireDegCEPf>
                sprintf(messageBuffer, "TempH[degC]:%0.3f\tTempC[degC]:%0.3f\t", measuredTemperatures[1], measuredTemperatures[0]);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f92c 	bl	8000550 <__aeabi_f2d>
 80012f8:	4604      	mov	r4, r0
 80012fa:	460d      	mov	r5, r1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f926 	bl	8000550 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	e9cd 2300 	strd	r2, r3, [sp]
 800130c:	4622      	mov	r2, r4
 800130e:	462b      	mov	r3, r5
 8001310:	492e      	ldr	r1, [pc, #184]	@ (80013cc <AS60xx_Example_Loop+0x20c>)
 8001312:	482b      	ldr	r0, [pc, #172]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 8001314:	f007 fe5e 	bl	8008fd4 <siprintf>
                SerialPrint(messageBuffer);
 8001318:	4829      	ldr	r0, [pc, #164]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 800131a:	f000 f85f 	bl	80013dc <_ZL11SerialPrintPKc>

                // Print the internal temperature of the AS60xx sensor
                sprintf(messageBuffer, "TempInt[degC]:%0.3f\t", as60xx.getInternalTemperatureDegC());
 800131e:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 8001320:	f002 fce9 	bl	8003cf6 <_ZN6AS60xx26getInternalTemperatureDegCEv>
 8001324:	ee10 3a10 	vmov	r3, s0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f911 	bl	8000550 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4927      	ldr	r1, [pc, #156]	@ (80013d0 <AS60xx_Example_Loop+0x210>)
 8001334:	4822      	ldr	r0, [pc, #136]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 8001336:	f007 fe4d 	bl	8008fd4 <siprintf>
                SerialPrint(messageBuffer);
 800133a:	4821      	ldr	r0, [pc, #132]	@ (80013c0 <AS60xx_Example_Loop+0x200>)
 800133c:	f000 f84e 	bl	80013dc <_ZL11SerialPrintPKc>

                SerialPrint("\n");
 8001340:	4824      	ldr	r0, [pc, #144]	@ (80013d4 <AS60xx_Example_Loop+0x214>)
 8001342:	f000 f84b 	bl	80013dc <_ZL11SerialPrintPKc>
            }

            for( uint8_t errorIdx = 0; errorIdx < amountErrorsToCheck; errorIdx++ )
 8001346:	2300      	movs	r3, #0
 8001348:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800134c:	e025      	b.n	800139a <AS60xx_Example_Loop+0x1da>
            {
                if( as60xx.hasErrorFlag(errorsToCheck[errorIdx]) )
 800134e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001352:	3330      	adds	r3, #48	@ 0x30
 8001354:	443b      	add	r3, r7
 8001356:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800135a:	4619      	mov	r1, r3
 800135c:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 800135e:	f002 fc0a 	bl	8003b76 <_ZN6AS60xx12hasErrorFlagE16As60xx_ErrorFlag>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <AS60xx_Example_Loop+0x1d0>
                {
                    SerialPrint("Error detected: ");
 8001368:	481b      	ldr	r0, [pc, #108]	@ (80013d8 <AS60xx_Example_Loop+0x218>)
 800136a:	f000 f837 	bl	80013dc <_ZL11SerialPrintPKc>
                    SerialPrint( as60xx.errorToString(errorsToCheck[errorIdx]) );
 800136e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	443b      	add	r3, r7
 8001376:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800137a:	4619      	mov	r1, r3
 800137c:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <AS60xx_Example_Loop+0x1f8>)
 800137e:	f002 fc11 	bl	8003ba4 <_ZN6AS60xx13errorToStringE16As60xx_ErrorFlag>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f829 	bl	80013dc <_ZL11SerialPrintPKc>
                    SerialPrint("\n");
 800138a:	4812      	ldr	r0, [pc, #72]	@ (80013d4 <AS60xx_Example_Loop+0x214>)
 800138c:	f000 f826 	bl	80013dc <_ZL11SerialPrintPKc>
            for( uint8_t errorIdx = 0; errorIdx < amountErrorsToCheck; errorIdx++ )
 8001390:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001394:	3301      	adds	r3, #1
 8001396:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800139a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800139e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3d3      	bcc.n	800134e <AS60xx_Example_Loop+0x18e>
                }
            }
            
        }
        HAL_Delay(20);
 80013a6:	2014      	movs	r0, #20
 80013a8:	f003 f9b6 	bl	8004718 <HAL_Delay>
    }
 80013ac:	e719      	b.n	80011e2 <AS60xx_Example_Loop+0x22>
 80013ae:	bf00      	nop
 80013b0:	0800c9c0 	.word	0x0800c9c0
 80013b4:	42020800 	.word	0x42020800
 80013b8:	20000344 	.word	0x20000344
 80013bc:	0800c900 	.word	0x0800c900
 80013c0:	20000230 	.word	0x20000230
 80013c4:	0800c924 	.word	0x0800c924
 80013c8:	0800c954 	.word	0x0800c954
 80013cc:	0800c968 	.word	0x0800c968
 80013d0:	0800c990 	.word	0x0800c990
 80013d4:	0800c9a8 	.word	0x0800c9a8
 80013d8:	0800c9ac 	.word	0x0800c9ac

080013dc <_ZL11SerialPrintPKc>:
}

static Result SerialPrint(const char str[])
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint8_t result = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef stmResult = HAL_UART_Transmit(&huart, (uint8_t*)str, strlen(str), 10);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7fe ff45 	bl	8000278 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	230a      	movs	r3, #10
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4813      	ldr	r0, [pc, #76]	@ (8001444 <_ZL11SerialPrintPKc+0x68>)
 80013f8:	f006 f8de 	bl	80075b8 <HAL_UART_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73bb      	strb	r3, [r7, #14]
               
  switch( stmResult)
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d816      	bhi.n	8001434 <_ZL11SerialPrintPKc+0x58>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <_ZL11SerialPrintPKc+0x30>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001423 	.word	0x08001423
 8001414:	08001429 	.word	0x08001429
 8001418:	0800142f 	.word	0x0800142f
  {
    case HAL_OK:
      result = RESULT_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
      break;
 8001420:	e00a      	b.n	8001438 <_ZL11SerialPrintPKc+0x5c>
    case HAL_ERROR:
      result = RESULT_IO_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
      break;
 8001426:	e007      	b.n	8001438 <_ZL11SerialPrintPKc+0x5c>
    case HAL_BUSY:
      result = RESULT_IO_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
      break;
 800142c:	e004      	b.n	8001438 <_ZL11SerialPrintPKc+0x5c>
    case HAL_TIMEOUT:
      result = RESULT_TIMEOUT;
 800142e:	2305      	movs	r3, #5
 8001430:	73fb      	strb	r3, [r7, #15]
      break;
 8001432:	e001      	b.n	8001438 <_ZL11SerialPrintPKc+0x5c>
    default:
      result = RESULT_INVALID;
 8001434:	2302      	movs	r3, #2
 8001436:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002b0 	.word	0x200002b0

08001448 <_Z41__static_initialization_and_destruction_0v>:
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800144e:	f002 fafd 	bl	8003a4c <_ZN6AS60xxC1Ev>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000344 	.word	0x20000344

0800145c <_Z41__static_initialization_and_destruction_1v>:
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
static AS60xx as60xx;
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <_Z41__static_initialization_and_destruction_1v+0x10>)
 8001462:	f002 fad1 	bl	8003a08 <_ZN6AS60xxD1Ev>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000344 	.word	0x20000344

08001470 <_GLOBAL__sub_I_AS60xx_Example_Setup>:
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
 8001474:	f7ff ffe8 	bl	8001448 <_Z41__static_initialization_and_destruction_0v>
 8001478:	bd80      	pop	{r7, pc}

0800147a <_GLOBAL__sub_D_AS60xx_Example_Setup>:
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
 800147e:	f7ff ffed 	bl	800145c <_Z41__static_initialization_and_destruction_1v>
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZL41As60xx_Get_Amount_Configuration_Registersv>:
{
    as60xx->State = newState;
}

static inline uint8_t As60xx_Get_Amount_Configuration_Registers()
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
    return AS60XX_AMOUNT_CONFIGURATION_REGISTERS;
 8001488:	2314      	movs	r3, #20
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>:

static inline uint16_t As60xx_Get_Configuration_Register_Address(ScioSense_As60xx* as60xx, uint8_t idx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b13      	cmp	r3, #19
 80014a4:	d901      	bls.n	80014aa <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x16>
    {
        return 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e004      	b.n	80014b4 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh+0x20>
    }
    return as60xx->Addresses[idx];
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3230      	adds	r2, #48	@ 0x30
 80014b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>:

static inline uint32_t As60xx_Get_Configuration_Register_Setting(ScioSense_As60xx* as60xx, uint8_t idx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
    if ( idx >= AS60XX_AMOUNT_CONFIGURATION_REGISTERS)
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b13      	cmp	r3, #19
 80014d0:	d901      	bls.n	80014d6 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x16>
    {
        return 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e004      	b.n	80014e0 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh+0x20>
    }
    return as60xx->CR[idx];
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3204      	adds	r2, #4
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>:
    
    return(uint32_t)( thresholdMv / AS60XX_ZERO_CROSS_DETECTION_LSB_TO_MV );
}

static inline Result As60xx_Write_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
    uint8_t valuesToWrite[1];
    valuesToWrite[0] = opcode;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	733b      	strb	r3, [r7, #12]

    return (Result)write(&valuesToWrite, 1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68d0      	ldr	r0, [r2, #12]
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	2201      	movs	r2, #1
 800150a:	4798      	blx	r3
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>:

static inline Result As60xx_Write_Extended_Opcode(ScioSense_As60xx* as60xx, uint8_t opcode, uint8_t extendedOpcode)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	4613      	mov	r3, r2
 8001524:	70bb      	strb	r3, [r7, #2]
    uint8_t valuesToWrite[2];
    valuesToWrite[0] = opcode;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	733b      	strb	r3, [r7, #12]
    valuesToWrite[1] = extendedOpcode;
 800152a:	78bb      	ldrb	r3, [r7, #2]
 800152c:	737b      	strb	r3, [r7, #13]

    return (Result)write(valuesToWrite, 2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68d0      	ldr	r0, [r2, #12]
 8001536:	f107 010c 	add.w	r1, r7, #12
 800153a:	2202      	movs	r2, #2
 800153c:	4798      	blx	r3
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>:

static inline Result As60xx_Write_8_Bit_Address_Register(ScioSense_As60xx* as60xx, uint8_t address, uint32_t dataToWrite)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	460b      	mov	r3, r1
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	72fb      	strb	r3, [r7, #11]
    uint8_t opcode = RC_RAA_WR;
 8001556:	235a      	movs	r3, #90	@ 0x5a
 8001558:	75fb      	strb	r3, [r7, #23]
    uint8_t valuesToWrite[6];
    valuesToWrite[0] = opcode;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	743b      	strb	r3, [r7, #16]
    valuesToWrite[1] = address;
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	747b      	strb	r3, [r7, #17]
    valuesToWrite[2] = (uint8_t)(dataToWrite>>24);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0e1b      	lsrs	r3, r3, #24
 8001566:	b2db      	uxtb	r3, r3
 8001568:	74bb      	strb	r3, [r7, #18]
    valuesToWrite[3] = (uint8_t)(dataToWrite>>16);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	b2db      	uxtb	r3, r3
 8001570:	74fb      	strb	r3, [r7, #19]
    valuesToWrite[4] = (uint8_t)(dataToWrite>>8);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b2db      	uxtb	r3, r3
 8001578:	753b      	strb	r3, [r7, #20]
    valuesToWrite[5] = (uint8_t)(dataToWrite);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	757b      	strb	r3, [r7, #21]

    return (Result)write(valuesToWrite, 6);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	68d0      	ldr	r0, [r2, #12]
 8001588:	f107 0110 	add.w	r1, r7, #16
 800158c:	2206      	movs	r2, #6
 800158e:	4798      	blx	r3
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>:

    return result;
}

static inline uint8_t As60xx_Read_1_Byte(ScioSense_As60xx* as60xx, uint8_t opcode)
{
 800159a:	b590      	push	{r4, r7, lr}
 800159c:	b087      	sub	sp, #28
 800159e:	af02      	add	r7, sp, #8
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
    uint8_t dataToWrite[1];
    uint8_t dataRead[1];

    dataToWrite[0] = opcode;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	733b      	strb	r3, [r7, #12]

    Result result = (Result)read(dataToWrite, 1, dataRead, 1);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681c      	ldr	r4, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68d8      	ldr	r0, [r3, #12]
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	2201      	movs	r2, #1
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	47a0      	blx	r4
 80015c2:	4603      	mov	r3, r0
 80015c4:	73bb      	strb	r3, [r7, #14]

    uint8_t readValue = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]

    if ( result == RESULT_OK )
 80015ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh+0x3c>
    {
        readValue = dataRead[0];
 80015d2:	7a3b      	ldrb	r3, [r7, #8]
 80015d4:	73fb      	strb	r3, [r7, #15]
    }

    return readValue;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>:

    return readValue;
}

static inline uint32_t As60xx_Read_Register_1_Dword(ScioSense_As60xx* as60xx, uint16_t address)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
    uint8_t dataToWrite[2];
    uint8_t dataRead[4];

    uint8_t opcode = RC_RAA_RD;
 80015ec:	237a      	movs	r3, #122	@ 0x7a
 80015ee:	75fb      	strb	r3, [r7, #23]
    if( address >= 0x100 )
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d904      	bls.n	8001600 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x20>
    {
        // The request is to read from the NVRAM
        opcode  = RC_RAA_RD_NVRAM;
 80015f6:	237b      	movs	r3, #123	@ 0x7b
 80015f8:	75fb      	strb	r3, [r7, #23]
        address = address & 0x00FF;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	807b      	strh	r3, [r7, #2]
    }

    dataToWrite[0] = opcode;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	733b      	strb	r3, [r7, #12]
    dataToWrite[1] = (uint8_t)address;
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	737b      	strb	r3, [r7, #13]

    Result result = (Result)read(dataToWrite, 2, dataRead, 4);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681c      	ldr	r4, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68d8      	ldr	r0, [r3, #12]
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	f107 010c 	add.w	r1, r7, #12
 800161a:	2204      	movs	r2, #4
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	2202      	movs	r2, #2
 8001620:	47a0      	blx	r4
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]

    uint32_t readValue = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]

    if ( result == RESULT_OK )
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x68>
    {
        readValue = (dataRead[0]<<24) + (dataRead[1]<<16) + (dataRead[2]<<8) + (dataRead[3]);
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	7a7b      	ldrb	r3, [r7, #9]
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	441a      	add	r2, r3
 800163c:	7abb      	ldrb	r3, [r7, #10]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4413      	add	r3, r2
 8001642:	7afa      	ldrb	r2, [r7, #11]
 8001644:	4413      	add	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
    }

    return readValue;
 8001648:	693b      	ldr	r3, [r7, #16]
}
 800164a:	4618      	mov	r0, r3
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>:

static inline void As60xx_Read_Register_N_Dword(ScioSense_As60xx* as60xx, uint16_t address, uint32_t* outputData, uint16_t amountRegistersToRead)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b087      	sub	sp, #28
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	817b      	strh	r3, [r7, #10]
 8001662:	4613      	mov	r3, r2
 8001664:	813b      	strh	r3, [r7, #8]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001666:	2300      	movs	r3, #0
 8001668:	82fb      	strh	r3, [r7, #22]
 800166a:	e00f      	b.n	800168c <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x3a>
    {
        outputData[i] = As60xx_Read_Register_1_Dword(as60xx, address+i);
 800166c:	897a      	ldrh	r2, [r7, #10]
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	4413      	add	r3, r2
 8001672:	b299      	uxth	r1, r3
 8001674:	8afb      	ldrh	r3, [r7, #22]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	18d4      	adds	r4, r2, r3
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff ffaf 	bl	80015e0 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001682:	4603      	mov	r3, r0
 8001684:	6023      	str	r3, [r4, #0]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	3301      	adds	r3, #1
 800168a:	82fb      	strh	r3, [r7, #22]
 800168c:	8afa      	ldrh	r2, [r7, #22]
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3eb      	bcc.n	800166c <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x1a>
    }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <_ZL12As60xx_ResetP16ScioSense_As60xx>:

static inline Result As60xx_Reset(ScioSense_As60xx* as60xx)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 80016aa:	2188      	movs	r1, #136	@ 0x88
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff1d 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2019      	movs	r0, #25
 80016b8:	4798      	blx	r3
    
    As60xx_Write_Opcode(as60xx, RC_SYS_RST);
 80016ba:	2199      	movs	r1, #153	@ 0x99
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff15 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2019      	movs	r0, #25
 80016c8:	4798      	blx	r3

    As60xx_Write_8_Bit_Address_Register(as60xx, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_IF_CLR_CLEAR | AS60XX_DD_EF_CLR_CLEAR );
 80016ca:	2203      	movs	r2, #3
 80016cc:	21dd      	movs	r1, #221	@ 0xdd
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff3a 	bl	8001548 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    wait(25);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2019      	movs	r0, #25
 80016da:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 80016dc:	2187      	movs	r1, #135	@ 0x87
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff04 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	205e      	movs	r0, #94	@ 0x5e
 80016ea:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 80016ec:	218f      	movs	r1, #143	@ 0x8f
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff53 	bl	800159a <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_RST_FLAG_Msk )
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <_ZL12As60xx_ResetP16ScioSense_As60xx+0x70>
    {
        as60xx->State = AS60XX_STATE_RESET;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        result = RESULT_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
    }
    
    return result;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZL11As60xx_InitP16ScioSense_As60xx>:

static inline Result As60xx_Init(ScioSense_As60xx* as60xx)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
    As6xx_Initialize_Configuration(as60xx);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f001 fea4 	bl	8003470 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>
    return As60xx_Reset(as60xx);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffb8 	bl	800169e <_ZL12As60xx_ResetP16ScioSense_As60xx>
 800172e:	4603      	mov	r3, r0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZL18As60xx_isConnectedP16ScioSense_As60xx>:

uint8_t As60xx_isConnected(ScioSense_As60xx* as60xx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    return (as60xx->State != AS60XX_STATE_NOT_CONNECTED);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 8001746:	2bff      	cmp	r3, #255	@ 0xff
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>:

static inline Result As60xx_Write_Config(ScioSense_As60xx* as60xx)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]

    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 8001768:	2188      	movs	r1, #136	@ 0x88
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff febe 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_OFF);
 8001770:	218a      	movs	r1, #138	@ 0x8a
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff feba 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001778:	218d      	movs	r1, #141	@ 0x8d
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff feb6 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    // Write Configuration (0xC0 - 0xCE, 0xD0 - 0xD2, 0xDA - 0xDB)
    uint8_t registersToWrite = As60xx_Get_Amount_Configuration_Registers();
 8001780:	f7ff fe80 	bl	8001484 <_ZL41As60xx_Get_Amount_Configuration_Registersv>
 8001784:	4603      	mov	r3, r0
 8001786:	72fb      	strb	r3, [r7, #11]
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 8001788:	2300      	movs	r3, #0
 800178a:	73bb      	strb	r3, [r7, #14]
 800178c:	e014      	b.n	80017b8 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x5c>
    {
	As60xx_Write_8_Bit_Address_Register(as60xx, As60xx_Get_Configuration_Register_Address(as60xx, idx), As60xx_Get_Configuration_Register_Setting(as60xx, idx));
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe7e 	bl	8001494 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 8001798:	4603      	mov	r3, r0
 800179a:	b2dc      	uxtb	r4, r3
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fe8d 	bl	80014c0 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4621      	mov	r1, r4
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fecb 	bl	8001548 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    for ( uint8_t idx=0; idx<registersToWrite; idx++ )
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	3301      	adds	r3, #1
 80017b6:	73bb      	strb	r3, [r7, #14]
 80017b8:	7bba      	ldrb	r2, [r7, #14]
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3e6      	bcc.n	800178e <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x32>
    }

    uint8_t configurationCorrect = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 80017c4:	2301      	movs	r3, #1
 80017c6:	733b      	strb	r3, [r7, #12]
 80017c8:	e01c      	b.n	8001804 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xa8>
    {
        configurationCorrect &= ( As60xx_Get_Configuration_Register_Setting(as60xx, idx) == As60xx_Read_Register_1_Dword(as60xx, As60xx_Get_Configuration_Register_Address(as60xx, idx)) );
 80017ca:	7b3b      	ldrb	r3, [r7, #12]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe76 	bl	80014c0 <_ZL41As60xx_Get_Configuration_Register_SettingP16ScioSense_As60xxh>
 80017d4:	4604      	mov	r4, r0
 80017d6:	7b3b      	ldrb	r3, [r7, #12]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fe5a 	bl	8001494 <_ZL41As60xx_Get_Configuration_Register_AddressP16ScioSense_As60xxh>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fefb 	bl	80015e0 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 80017ea:	4603      	mov	r3, r0
 80017ec:	429c      	cmp	r4, r3
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	4013      	ands	r3, r2
 80017fc:	737b      	strb	r3, [r7, #13]
    for ( uint8_t idx=1; idx<registersToWrite; idx++ )
 80017fe:	7b3b      	ldrb	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	733b      	strb	r3, [r7, #12]
 8001804:	7b3a      	ldrb	r2, [r7, #12]
 8001806:	7afb      	ldrb	r3, [r7, #11]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3de      	bcc.n	80017ca <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0x6e>
    }

    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 800180c:	218d      	movs	r1, #141	@ 0x8d
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fe6c 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001814:	2187      	movs	r1, #135	@ 0x87
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fe68 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 800181c:	219a      	movs	r1, #154	@ 0x9a
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fe64 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2014      	movs	r0, #20
 800182a:	4798      	blx	r3
    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 800182c:	2189      	movs	r1, #137	@ 0x89
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fe5c 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    if( configurationCorrect )
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx+0xea>
    {
        as60xx->State = AS60XX_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        result = RESULT_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>:

static inline Result As60xx_Start_Measurements(ScioSense_As60xx* as60xx)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 800185e:	218d      	movs	r1, #141	@ 0x8d
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fe43 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_SYS_INIT);
 8001866:	219a      	movs	r1, #154	@ 0x9a
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fe3f 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_CHARGE_PUMP_UPLOADING);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2014      	movs	r0, #20
 8001874:	4798      	blx	r3

    As60xx_Write_Opcode(as60xx, RC_RF_CLR);
 8001876:	2189      	movs	r1, #137	@ 0x89
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe37 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    As60xx_Write_Opcode(as60xx, RC_MCT_ON);
 800187e:	218b      	movs	r1, #139	@ 0x8b
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fe33 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    wait(120);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2078      	movs	r0, #120	@ 0x78
 800188c:	4798      	blx	r3

    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 800188e:	218f      	movs	r1, #143	@ 0x8f
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fe82 	bl	800159a <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001896:	4603      	mov	r3, r0
 8001898:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_MCT_STATE_Msk )
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx+0x56>
    {
        result = RESULT_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>:
    }
    return result;
}

static inline uint32_t As60xx_GetSupplyVoltageMv(ScioSense_As60xx* as60xx)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_VCC_VOLTAGE_MEASUREMENT);
 80018bc:	2201      	movs	r2, #1
 80018be:	21da      	movs	r1, #218	@ 0xda
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fe28 	bl	8001516 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
    wait(110);     // Wait for the measurement to complete
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	206e      	movs	r0, #110	@ 0x6e
 80018cc:	4798      	blx	r3
  
    uint32_t measurement = As60xx_Read_Register_1_Dword(as60xx, AS60XX_SRR_VCC_VAL_ADDRESS);
 80018ce:	21e5      	movs	r1, #229	@ 0xe5
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fe85 	bl	80015e0 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 80018d6:	60f8      	str	r0, [r7, #12]
  
    return (2150 + measurement * 25);
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	f603 0366 	addw	r3, r3, #2150	@ 0x866
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>:

static inline float As60xx_GetHsClkFreqHz(ScioSense_As60xx* as60xx)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    As60xx_Write_Extended_Opcode(as60xx, RC_MT_REQ, AS60XX_EC_MT_REQ_HIGH_SPEED_CLOCK_CAL);
 80018f8:	2240      	movs	r2, #64	@ 0x40
 80018fa:	21da      	movs	r1, #218	@ 0xda
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fe0a 	bl	8001516 <_ZL28As60xx_Write_Extended_OpcodeP16ScioSense_As60xxhh>
  
    wait(110);     // Wait for the measurement to complete
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	206e      	movs	r0, #110	@ 0x6e
 8001908:	4798      	blx	r3
  
    float highSpeedClockCalibration = (float)As60xx_Read_Register_1_Dword(as60xx, AS60XX_SRR_HCC_VAL_ADDRESS);
 800190a:	21e4      	movs	r1, #228	@ 0xe4
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fe67 	bl	80015e0 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001912:	ee07 0a90 	vmov	s15, r0
 8001916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]
  
    return (highSpeedClockCalibration / 8.0);
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800192a:	eef0 7a66 	vmov.f32	s15, s13
}
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>:

static inline As60xx_Timestamp As60xx_GetTimestamp(ScioSense_As60xx* as60xx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    As60xx_Timestamp timestamp;
    timestamp.hours   =           (as60xx->Status[AS60XX_STATUS_SRR_TS_HOUR_INDEX]     & AS60XX_E6_TS_HOUR_Msk)   >> AS60XX_E6_TS_HOUR_Pos;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001948:	f3c3 0215 	ubfx	r2, r3, #0, #22
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
    timestamp.minutes = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_MIN_Msk)    >> AS60XX_E7_TS_MIN_Pos);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b2da      	uxtb	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	711a      	strb	r2, [r3, #4]
    timestamp.seconds = (uint8_t)((as60xx->Status[AS60XX_STATUS_SRR_TS_MIN_SEC_INDEX]  & AS60XX_E7_TS_SEC_Msk)    >> AS60XX_E6_TS_HOUR_Pos);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8001964:	b2da      	uxtb	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	715a      	strb	r2, [r3, #5]
  
    return timestamp;
 800196a:	bf00      	nop
}
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_ZL19As60xx_HasErrorFlagP16ScioSense_As60xx16As60xx_ErrorFlag>:
{
    return as60xx->Status[AS60XX_STATUS_SRR_ERR_FLAG_INDEX];
}

static inline uint8_t As60xx_HasErrorFlag(ScioSense_As60xx* as60xx, As60xx_ErrorFlag errorFlag)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
    return (as60xx->Status[AS60XX_STATUS_SRR_ERR_FLAG_INDEX]  >> errorFlag ) & 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_ZL13As60xx_UpdateP16ScioSense_As60xx>:

    return result;
}

AS60xx_Measure_Type As60xx_Update(ScioSense_As60xx* as60xx)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    uint8_t newData = AS60XX_NO_MEASUREMENT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]

    As60xx_Read_Register_N_Dword(as60xx, AS60XX_SRR_IRQ_FLAG_ADDRESS, as60xx->Status, AS60XX_AMOUNT_STATUS_REGISTERS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80019b6:	230f      	movs	r3, #15
 80019b8:	21e0      	movs	r1, #224	@ 0xe0
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fe49 	bl	8001652 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
    
    if( 1 )	// !(as60xx->Status[AS60XX_STATUS_SRR_ERR_FLAG_INDEX])
    {
        if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & AS60XX_E2_TM_UPD_Msk )
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00a      	beq.n	80019e4 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x40>
        {
            As60xx_Read_Register_N_Dword(as60xx, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferTemperature, AS60XX_AMOUNT_FDB_REGISTERS);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80019d4:	231c      	movs	r3, #28
 80019d6:	2180      	movs	r1, #128	@ 0x80
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fe3a 	bl	8001652 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
            newData = AS60XX_TEMPERATURE_MEASUREMENT;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e010      	b.n	8001a06 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x62>
        }
        else if( as60xx->Status[AS60XX_STATUS_SRR_FEP_STF_INDEX] & (AS60XX_E2_US_U_UPD_Msk | AS60XX_E2_US_D_UPD_Msk | AS60XX_E2_US_TOF_UPD_Msk) )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80019ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <_ZL13As60xx_UpdateP16ScioSense_As60xx+0x62>
        {
            As60xx_Read_Register_N_Dword(as60xx, AS60XX_FDB_ADDRESS, as60xx->FrontendDataBufferUltrasound, AS60XX_AMOUNT_FDB_REGISTERS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80019f8:	231c      	movs	r3, #28
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fe28 	bl	8001652 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
            newData = AS60XX_TOF_MEASUREMENT;
 8001a02:	2302      	movs	r3, #2
 8001a04:	73fb      	strb	r3, [r7, #15]
        }    
    }

    As60xx_Write_8_Bit_Address_Register(as60xx, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_FES_CLR_CLEAR);
 8001a06:	2204      	movs	r2, #4
 8001a08:	21dd      	movs	r1, #221	@ 0xdd
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fd9c 	bl	8001548 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    As60xx_Write_Opcode(as60xx, RC_IF_CLR);
 8001a10:	218d      	movs	r1, #141	@ 0x8d
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fd6a 	bl	80014ec <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>

    return newData;
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofUp(ScioSense_As60xx* as60xx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_U_INDEX];
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetSumTofDown(ScioSense_As60xx* as60xx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
    return as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_SUM_OF_ALL_D_INDEX];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>:

static inline uint32_t As60xx_GetAmountHitsForSumTof(ScioSense_As60xx* as60xx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    return ( (as60xx->CR[AS60XX_CR_ARRAY_CR_USM_TOF_INDEX] & AS60XX_CA_TOF_HIT_SUM_NO_Msk) >> AS60XX_CA_TOF_HIT_SUM_NO_Pos );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 031f 	and.w	r3, r3, #31
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>:

static inline uint32_t As60xx_CalculateTDCTimePs(ScioSense_As60xx* as60xx, uint32_t contentTDCRegister)
{
 8001a76:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    uint8_t frequencyTDC = ( (as60xx->CR[AS60XX_CR_ARRAY_CR_CPM_INDEX] & AS60XX_C5_HSC_DIV_MODE_Msk) >> AS60XX_C5_HSC_DIV_MODE_Pos );
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8001a86:	b2c9      	uxtb	r1, r1
 8001a88:	f001 0101 	and.w	r1, r1, #1
 8001a8c:	73f9      	strb	r1, [r7, #15]
    uint64_t tPeriodHSO;
    if( frequencyTDC == AS60XX_C5_HSC_DIV_MODE_4MHZ )
 8001a8e:	7bf9      	ldrb	r1, [r7, #15]
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d106      	bne.n	8001aa2 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x2c>
    {
        tPeriodHSO = 250;
 8001a94:	f04f 00fa 	mov.w	r0, #250	@ 0xfa
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001aa0:	e005      	b.n	8001aae <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm+0x38>
    }
    else
    {
        tPeriodHSO = 125;
 8001aa2:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	e9c7 0104 	strd	r0, r1, [r7, #16]
    }
    return (uint32_t)( (((uint64_t)contentTDCRegister) * tPeriodHSO * 1000) / (1<<16) );
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	468a      	mov	sl, r1
 8001ab4:	4683      	mov	fp, r0
 8001ab6:	6939      	ldr	r1, [r7, #16]
 8001ab8:	fb0b f001 	mul.w	r0, fp, r1
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	fb0a f101 	mul.w	r1, sl, r1
 8001ac2:	4401      	add	r1, r0
 8001ac4:	6938      	ldr	r0, [r7, #16]
 8001ac6:	fba0 230a 	umull	r2, r3, r0, sl
 8001aca:	4419      	add	r1, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0a00 	mov.w	sl, #0
 8001ad6:	f04f 0b00 	mov.w	fp, #0
 8001ada:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001ade:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001ae2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001ae6:	4650      	mov	r0, sl
 8001ae8:	4659      	mov	r1, fp
 8001aea:	1a84      	subs	r4, r0, r2
 8001aec:	eb61 0503 	sbc.w	r5, r1, r3
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	00a9      	lsls	r1, r5, #2
 8001afa:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 8001afe:	00a0      	lsls	r0, r4, #2
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	eb14 0802 	adds.w	r8, r4, r2
 8001b08:	eb45 0903 	adc.w	r9, r5, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b20:	4690      	mov	r8, r2
 8001b22:	4699      	mov	r9, r3
 8001b24:	4640      	mov	r0, r8
 8001b26:	4649      	mov	r1, r9
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	0c02      	lsrs	r2, r0, #16
 8001b32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b36:	0c0b      	lsrs	r3, r1, #16
 8001b38:	4613      	mov	r3, r2
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b44:	4770      	bx	lr

08001b46 <_ZL42AS60xx_CalculateTemperatureResistance2WireP16ScioSense_As60xxPf>:

static inline void AS60xx_CalculateTemperatureResistance2Wire(ScioSense_As60xx* as60xx, float* temperatureResistancesRatiosOut)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b08d      	sub	sp, #52	@ 0x34
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
    float t_gain_1  = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_M1AB_RAB_G12_INDEX]);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float t_RAB_1   = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_RAB_G12_INDEX]);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float t_M1A_1   = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_M1A_G12_INDEX]);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float t_M2A_1   = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_M2A_G12_INDEX]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	edc7 7a08 	vstr	s15, [r7, #32]
    float t_Rdson_1 = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_RA_G12_INDEX]);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba6:	edc7 7a07 	vstr	s15, [r7, #28]
    float t_RO_1 = t_Rdson_1 - t_RAB_1;
 8001baa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a06 	vstr	s15, [r7, #24]
    float deltaT_1 = 2.0 * ( t_gain_1 - (t_M1A_1 * t_RAB_1)/(t_M1A_1 + t_RAB_1) );
 8001bba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bbe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bc2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bc6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001be2:	edc7 7a05 	vstr	s15, [r7, #20]
    float t_R_1 = t_RAB_1 - t_RO_1 - deltaT_1;
 8001be6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfa:	edc7 7a04 	vstr	s15, [r7, #16]
    float t_C_1 = t_M1A_1 - t_RO_1 - deltaT_1;
 8001bfe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c12:	edc7 7a03 	vstr	s15, [r7, #12]
    float t_H_1 = t_M2A_1 - t_RO_1 - deltaT_1;
 8001c16:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	edc7 7a02 	vstr	s15, [r7, #8]
    temperatureResistancesRatiosOut[0] = t_C_1 / t_R_1;     // Cold temperature sensor resistance
 8001c2e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
    temperatureResistancesRatiosOut[1] = t_H_1 / t_R_1;     // Hot temperature sensor resistance
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3304      	adds	r3, #4
 8001c44:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c48:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
}
 8001c54:	bf00      	nop
 8001c56:	3734      	adds	r7, #52	@ 0x34
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf>:

static inline void AS60xx_CalculateTemperature2Wire(ScioSense_As60xx* as60xx, float* temperaturesOut)
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    float tempResistanceRatios[2];
    AS60xx_CalculateTemperatureResistance2Wire(as60xx, tempResistanceRatios);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff68 	bl	8001b46 <_ZL42AS60xx_CalculateTemperatureResistance2WireP16ScioSense_As60xxPf>

    for( uint8_t idx=0; idx<2; idx++ )
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
 8001c7a:	e050      	b.n	8001d1e <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf+0xbe>
    {
        temperaturesOut[idx] = 10.115 * tempResistanceRatios[idx] * tempResistanceRatios[idx] + 235.57 * tempResistanceRatios[idx] - 245.683;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3318      	adds	r3, #24
 8001c82:	443b      	add	r3, r7
 8001c84:	3b0c      	subs	r3, #12
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc61 	bl	8000550 <__aeabi_f2d>
 8001c8e:	a328      	add	r3, pc, #160	@ (adr r3, 8001d30 <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf+0xd0>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb4 	bl	8000600 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	443b      	add	r3, r7
 8001ca8:	3b0c      	subs	r3, #12
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc4f 	bl	8000550 <__aeabi_f2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fca1 	bl	8000600 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3318      	adds	r3, #24
 8001ccc:	443b      	add	r3, r7
 8001cce:	3b0c      	subs	r3, #12
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc3c 	bl	8000550 <__aeabi_f2d>
 8001cd8:	a317      	add	r3, pc, #92	@ (adr r3, 8001d38 <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf+0xd8>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fc8f 	bl	8000600 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fad3 	bl	8000294 <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	a312      	add	r3, pc, #72	@ (adr r3, 8001d40 <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf+0xe0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fac8 	bl	8000290 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	18d4      	adds	r4, r2, r3
 8001d10:	f7fe ff6e 	bl	8000bf0 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	6023      	str	r3, [r4, #0]
    for( uint8_t idx=0; idx<2; idx++ )
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d9ab      	bls.n	8001c7c <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf+0x1c>
    }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	47ae147b 	.word	0x47ae147b
 8001d34:	40243ae1 	.word	0x40243ae1
 8001d38:	70a3d70a 	.word	0x70a3d70a
 8001d3c:	406d723d 	.word	0x406d723d
 8001d40:	22d0e560 	.word	0x22d0e560
 8001d44:	406eb5db 	.word	0x406eb5db

08001d48 <_ZL35AS60xx_CalculateInternalTemperatureP16ScioSense_As60xx>:

static inline float AS60xx_CalculateInternalTemperature(ScioSense_As60xx* as60xx)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    float t_MI_R_1  = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_MI_R_G12_INDEX]);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5e:	edc7 7a03 	vstr	s15, [r7, #12]
    float t_MI_M_1  = (float)(as60xx->FrontendDataBufferTemperature[AS60XX_FDB_TPM1_MI_M_G12_INDEX]);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d70:	edc7 7a02 	vstr	s15, [r7, #8]

    return ( (t_MI_M_1 / t_MI_R_1) - 1 ) * 1235 / 3.8;
 8001d74:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d88:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001dc8 <_ZL35AS60xx_CalculateInternalTemperatureP16ScioSense_As60xx+0x80>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	ee17 0a90 	vmov	r0, s15
 8001d94:	f7fe fbdc 	bl	8000550 <__aeabi_f2d>
 8001d98:	a309      	add	r3, pc, #36	@ (adr r3, 8001dc0 <_ZL35AS60xx_CalculateInternalTemperatureP16ScioSense_As60xx+0x78>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fd59 	bl	8000854 <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff21 	bl	8000bf0 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	ee07 3a90 	vmov	s15, r3
}
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	66666666 	.word	0x66666666
 8001dc4:	400e6666 	.word	0x400e6666
 8001dc8:	449a6000 	.word	0x449a6000

08001dcc <_ZL34As60xx_Set_Configuration_RegistersP16ScioSense_As60xxPm>:
    
    return speedSound1 + (speedSound2 - speedSound1) * (temperature - temp1) / (temp2 - temp1);
}

static inline void As60xx_Set_Configuration_Registers(ScioSense_As60xx* as60xx, uint32_t* registerConfiguration)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
    for( uint8_t registerIdx=0; registerIdx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; registerIdx++ )
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e00c      	b.n	8001df6 <_ZL34As60xx_Set_Configuration_RegistersP16ScioSense_As60xxPm+0x2a>
    {
        as60xx->CR[registerIdx] = registerConfiguration[registerIdx];
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3204      	adds	r2, #4
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( uint8_t registerIdx=0; registerIdx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; registerIdx++ )
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b13      	cmp	r3, #19
 8001dfa:	d9ef      	bls.n	8001ddc <_ZL34As60xx_Set_Configuration_RegistersP16ScioSense_As60xxPm+0x10>
    }
    As60xx_Update_Parameters(as60xx);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f804 	bl	8001e0a <_ZL24As60xx_Update_ParametersP16ScioSense_As60xx>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_ZL24As60xx_Update_ParametersP16ScioSense_As60xx>:

static inline void As60xx_Update_Parameters(ScioSense_As60xx* as60xx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
    /* Read all content from CR[] and write into every parameter
     * Update for each parameter */
    /* Parameter of CR[0] */
    as60xx->Param.CR0.WS_DIS                = ( (as60xx->CR[0]) & AS60XX_C0_WS_DIS_Msk )                >> AS60XX_C0_WS_DIS_Pos;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    /* Parameter of CR[1] */
    as60xx->Param.CR1.PI_TPW                = ( (as60xx->CR[1]) & AS60XX_C1_PI_TPW_Msk )                >> AS60XX_C1_PI_TPW_Pos;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
    as60xx->Param.CR1.PI_EN                 = ( (as60xx->CR[1]) & AS60XX_C1_PI_EN_Msk )                 >> AS60XX_C1_PI_EN_Pos;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
    as60xx->Param.CR1.PI_OUT_MODE           = ( (as60xx->CR[1]) & AS60XX_C1_PI_OUT_MODE_Msk )           >> AS60XX_C1_PI_OUT_MODE_Pos;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	0a5b      	lsrs	r3, r3, #9
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f883 224a 	strb.w	r2, [r3, #586]	@ 0x24a
    as60xx->Param.CR1.PI_UPD_MODE           = ( (as60xx->CR[1]) & AS60XX_C1_PI_UPD_MODE_Msk )           >> AS60XX_C1_PI_UPD_MODE_Pos;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	0a9b      	lsrs	r3, r3, #10
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f883 224b 	strb.w	r2, [r3, #587]	@ 0x24b
    as60xx->Param.CR1.NOT_USED_11           = ( (as60xx->CR[1]) & AS60XX_C1_NOT_USED_11_Msk )           >> AS60XX_C1_NOT_USED_11_Pos;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	0adb      	lsrs	r3, r3, #11
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c
    as60xx->Param.CR1.I2C_MODE              = ( (as60xx->CR[1]) & AS60XX_C1_I2C_MODE_Msk )              >> AS60XX_C1_I2C_MODE_Pos;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	0b1b      	lsrs	r3, r3, #12
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
    as60xx->Param.CR1.I2C_ADR               = ( (as60xx->CR[1]) & AS60XX_C1_I2C_ADR_Msk )               >> AS60XX_C1_I2C_ADR_Pos;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	0b9b      	lsrs	r3, r3, #14
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e
    as60xx->Param.CR1.NOT_USED_21           = ( (as60xx->CR[1]) & AS60XX_C1_NOT_USED_21_Msk )           >> AS60XX_C1_NOT_USED_21_Pos;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	0d5b      	lsrs	r3, r3, #21
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f
    as60xx->Param.CR1.SPI_INPORT_CFG        = ( (as60xx->CR[1]) & AS60XX_C1_SPI_INPORT_CFG_Msk )        >> AS60XX_C1_SPI_INPORT_CFG_Pos;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	0d9b      	lsrs	r3, r3, #22
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250
    as60xx->Param.CR1.NOT_USED_31_24        = ( (as60xx->CR[1]) & AS60XX_C1_NOT_USED_31_24_Msk )        >> AS60XX_C1_NOT_USED_31_24_Pos;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	0e1b      	lsrs	r3, r3, #24
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251
    /* Parameter of CR[2] */
    as60xx->Param.CR2.GP0_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP0_DIR_Msk )               >> AS60XX_C2_GP0_DIR_Pos;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
    as60xx->Param.CR2.GP0_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP0_SEL_Msk )               >> AS60XX_C2_GP0_SEL_Pos;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253
    as60xx->Param.CR2.GP1_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP1_DIR_Msk )               >> AS60XX_C2_GP1_DIR_Pos;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    as60xx->Param.CR2.GP1_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP1_SEL_Msk )               >> AS60XX_C2_GP1_SEL_Pos;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    as60xx->Param.CR2.GP2_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP2_DIR_Msk )               >> AS60XX_C2_GP2_DIR_Pos;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f883 2256 	strb.w	r2, [r3, #598]	@ 0x256
    as60xx->Param.CR2.GP2_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP2_SEL_Msk )               >> AS60XX_C2_GP2_SEL_Pos;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	0a9b      	lsrs	r3, r3, #10
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
    as60xx->Param.CR2.GP3_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP3_DIR_Msk )               >> AS60XX_C2_GP3_DIR_Pos;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	0b1b      	lsrs	r3, r3, #12
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    as60xx->Param.CR2.GP3_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP3_SEL_Msk )               >> AS60XX_C2_GP3_SEL_Pos;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	0b9b      	lsrs	r3, r3, #14
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
    as60xx->Param.CR2.GP4_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP4_DIR_Msk )               >> AS60XX_C2_GP4_DIR_Pos;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
    as60xx->Param.CR2.GP4_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP4_SEL_Msk )               >> AS60XX_C2_GP4_SEL_Pos;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
    as60xx->Param.CR2.GP5_DIR               = ( (as60xx->CR[2]) & AS60XX_C2_GP5_DIR_Msk )               >> AS60XX_C2_GP5_DIR_Pos;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	0d1b      	lsrs	r3, r3, #20
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    as60xx->Param.CR2.GP5_SEL               = ( (as60xx->CR[2]) & AS60XX_C2_GP5_SEL_Msk )               >> AS60XX_C2_GP5_SEL_Pos;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0d9b      	lsrs	r3, r3, #22
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    as60xx->Param.CR2.NOT_USED_31_24        = ( (as60xx->CR[2]) & AS60XX_C2_NOT_USED_31_24_Msk )        >> AS60XX_C2_NOT_USED_31_24_Pos;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	0e1b      	lsrs	r3, r3, #24
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    /* Parameter of CR[3] */
    as60xx->Param.CR3.USM_OPT               = ( (as60xx->CR[3]) & AS60XX_C3_USM_OPT_Msk )               >> AS60XX_C3_USM_OPT_Pos;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    as60xx->Param.CR3.NOT_USED_31_5         = ( (as60xx->CR[3]) & AS60XX_C3_NOT_USED_31_5_Msk )         >> AS60XX_C3_NOT_USED_31_5_Pos;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	095a      	lsrs	r2, r3, #5
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
    /* Parameter of CR[4] */
    as60xx->Param.CR4.EF_EN_TDC_TMO         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TDC_TMO_Msk )         >> AS60XX_C4_EF_EN_TDC_TMO_Pos;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
    as60xx->Param.CR4.EF_EN_TOF_TMO         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TOF_TMO_Msk )         >> AS60XX_C4_EF_EN_TOF_TMO_Pos;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f883 2269 	strb.w	r2, [r3, #617]	@ 0x269
    as60xx->Param.CR4.EF_EN_AM_TMO          = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_AM_TMO_Msk )          >> AS60XX_C4_EF_EN_AM_TMO_Pos;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
    as60xx->Param.CR4.EF_EN_TM_OC           = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TM_OC_Msk )           >> AS60XX_C4_EF_EN_TM_OC_Pos;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
    as60xx->Param.CR4.EF_EN_TM_SC           = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TM_SC_Msk )           >> AS60XX_C4_EF_EN_TM_SC_Pos;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f883 226c 	strb.w	r2, [r3, #620]	@ 0x26c
    as60xx->Param.CR4.EF_EN_ZCC_ERR         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_ZCC_ERR_Msk )         >> AS60XX_C4_EF_EN_ZCC_ERR_Pos;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f883 226d 	strb.w	r2, [r3, #621]	@ 0x26d
    as60xx->Param.CR4.EF_EN_LBD_ERR         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_LBD_ERR_Msk )         >> AS60XX_C4_EF_EN_LBD_ERR_Pos;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
    as60xx->Param.CR4.EF_EN_USM_SQC_TMO     = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_USM_SQC_TMO_Msk )     >> AS60XX_C4_EF_EN_USM_SQC_TMO_Pos;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	09db      	lsrs	r3, r3, #7
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f883 226f 	strb.w	r2, [r3, #623]	@ 0x26f
    as60xx->Param.CR4.EF_EN_TM_SQC_TMO      = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TM_SQC_TMO_Msk )      >> AS60XX_C4_EF_EN_TM_SQC_TMO_Pos;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
    as60xx->Param.CR4.EF_EN_TSQ_TMO         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_TSQ_TMO_Msk )         >> AS60XX_C4_EF_EN_TSQ_TMO_Pos;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
    as60xx->Param.CR4.EF_EN_I2C_ACK_ERR     = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_I2C_ACK_ERR_Msk )     >> AS60XX_C4_EF_EN_I2C_ACK_ERR_Pos;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f883 2272 	strb.w	r2, [r3, #626]	@ 0x272
    as60xx->Param.CR4.EF_EN_CHP_ERR         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_CHP_ERR_Msk )         >> AS60XX_C4_EF_EN_CHP_ERR_Pos;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	0adb      	lsrs	r3, r3, #11
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f883 2273 	strb.w	r2, [r3, #627]	@ 0x273
    as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR    = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_NVM_FWCU_ERR_Msk )    >> AS60XX_C4_EF_EN_NVM_FWCU_ERR_Pos;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	0b1b      	lsrs	r3, r3, #12
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f883 2274 	strb.w	r2, [r3, #628]	@ 0x274
    as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR    = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_NVM_FWDU_ERR_Msk )    >> AS60XX_C4_EF_EN_NVM_FWDU_ERR_Pos;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	0b5b      	lsrs	r3, r3, #13
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f883 2275 	strb.w	r2, [r3, #629]	@ 0x275
    as60xx->Param.CR4.EF_EN_NVM_FWA_ERR     = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_NVM_FWA_ERR_Msk )     >> AS60XX_C4_EF_EN_NVM_FWA_ERR_Pos;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	0b9b      	lsrs	r3, r3, #14
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f883 2276 	strb.w	r2, [r3, #630]	@ 0x276
    as60xx->Param.CR4.EF_EN_CPU_ERR         = ( (as60xx->CR[4]) & AS60XX_C4_EF_EN_CPU_ERR_Msk )         >> AS60XX_C4_EF_EN_CPU_ERR_Pos;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	0bdb      	lsrs	r3, r3, #15
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f883 2277 	strb.w	r2, [r3, #631]	@ 0x277
    as60xx->Param.CR4.IRQ_EN_TSQ_FNS        = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_TSQ_FNS_Msk )        >> AS60XX_C4_IRQ_EN_TSQ_FNS_Pos;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
    as60xx->Param.CR4.IRQ_EN_TRANS_FNS      = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_TRANS_FNS_Msk )      >> AS60XX_C4_IRQ_EN_TRANS_FNS_Pos;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	0c5b      	lsrs	r3, r3, #17
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f883 2279 	strb.w	r2, [r3, #633]	@ 0x279
    as60xx->Param.CR4.IRQ_EN_BLD_FNS        = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_BLD_FNS_Msk )        >> AS60XX_C4_IRQ_EN_BLD_FNS_Pos;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	0c9b      	lsrs	r3, r3, #18
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f883 227a 	strb.w	r2, [r3, #634]	@ 0x27a
    as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS     = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_CHKSUM_FNS_Msk )     >> AS60XX_C4_IRQ_EN_CHKSUM_FNS_Pos;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	0cdb      	lsrs	r3, r3, #19
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f883 227b 	strb.w	r2, [r3, #635]	@ 0x27b
    as60xx->Param.CR4.IRQ_EN_FW_S           = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_FW_S_Msk )           >> AS60XX_C4_IRQ_EN_FW_S_Pos;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	0d1b      	lsrs	r3, r3, #20
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
    as60xx->Param.CR4.IRQ_EN_TSQ_TO         = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_TSQ_TO_Msk )         >> AS60XX_C4_IRQ_EN_TSQ_TO_Pos;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    as60xx->Param.CR4.NOT_USED_22           = ( (as60xx->CR[4]) & AS60XX_C4_NOT_USED_22_Msk )           >> AS60XX_C4_NOT_USED_22_Pos;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	0d9b      	lsrs	r3, r3, #22
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f883 227e 	strb.w	r2, [r3, #638]	@ 0x27e
    as60xx->Param.CR4.IRQ_EN_ERR_FLAG       = ( (as60xx->CR[4]) & AS60XX_C4_IRQ_EN_ERR_FLAG_Msk )       >> AS60XX_C4_IRQ_EN_ERR_FLAG_Pos;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	0ddb      	lsrs	r3, r3, #23
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f883 227f 	strb.w	r2, [r3, #639]	@ 0x27f
    as60xx->Param.CR4.NOT_USED_26_24        = ( (as60xx->CR[4]) & AS60XX_C4_NOT_USED_26_24_Msk )        >> AS60XX_C4_NOT_USED_26_24_Pos;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	0e1b      	lsrs	r3, r3, #24
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    as60xx->Param.CR4.CPU_REQ_EN_GPH        = ( (as60xx->CR[4]) & AS60XX_C4_CPU_REQ_EN_GPH_Msk )        >> AS60XX_C4_CPU_REQ_EN_GPH_Pos;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	0edb      	lsrs	r3, r3, #27
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
    as60xx->Param.CR4.TS_GPT_RATE           = ( (as60xx->CR[4]) & AS60XX_C4_TS_GPT_RATE_Msk )           >> AS60XX_C4_TS_GPT_RATE_Pos;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282
    /* Parameter of CR[5] */
    as60xx->Param.CR5.HSC_DIV_MODE          = ( (as60xx->CR[5]) & AS60XX_C5_HSC_DIV_MODE_Msk )          >> AS60XX_C5_HSC_DIV_MODE_Pos;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f883 2283 	strb.w	r2, [r3, #643]	@ 0x283
    as60xx->Param.CR5.NOT_USED_1            = ( (as60xx->CR[5]) & AS60XX_C5_NOT_USED_1_Msk )            >> AS60XX_C5_NOT_USED_1_Pos;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    as60xx->Param.CR5.HSC_CLK_ST            = ( (as60xx->CR[5]) & AS60XX_C5_HSC_CLK_ST_Msk )            >> AS60XX_C5_HSC_CLK_ST_Pos;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	b2da      	uxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
    as60xx->Param.CR5.NOT_USED_7_5          = ( (as60xx->CR[5]) & AS60XX_C5_NOT_USED_7_5_Msk )          >> AS60XX_C5_NOT_USED_7_5_Pos;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	b2da      	uxtb	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
    as60xx->Param.CR5.HSC_DIV               = ( (as60xx->CR[5]) & AS60XX_C5_HSC_DIV_Msk )               >> AS60XX_C5_HSC_DIV_Pos;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
    as60xx->Param.CR5.HSC_RATE              = ( (as60xx->CR[5]) & AS60XX_C5_HSC_RATE_Msk )              >> AS60XX_C5_HSC_RATE_Pos;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f883 2288 	strb.w	r2, [r3, #648]	@ 0x288
    as60xx->Param.CR5.HSC_MODE_CPU          = ( (as60xx->CR[5]) & AS60XX_C5_HSC_MODE_CPU_Msk )          >> AS60XX_C5_HSC_MODE_CPU_Pos;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	0b1b      	lsrs	r3, r3, #12
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
    as60xx->Param.CR5.VM_RATE               = ( (as60xx->CR[5]) & AS60XX_C5_VM_RATE_Msk )               >> AS60XX_C5_VM_RATE_Pos;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	0b5b      	lsrs	r3, r3, #13
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2da      	uxtb	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f883 228a 	strb.w	r2, [r3, #650]	@ 0x28a
    as60xx->Param.CR5.LBD_TH                = ( (as60xx->CR[5]) & AS60XX_C5_LBD_TH_Msk )                >> AS60XX_C5_LBD_TH_Pos;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f883 228b 	strb.w	r2, [r3, #651]	@ 0x28b
    as60xx->Param.CR5.TSV_UPD_MODE          = ( (as60xx->CR[5]) & AS60XX_C5_TSV_UPD_MODE_Msk )          >> AS60XX_C5_TSV_UPD_MODE_Pos;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	0d9b      	lsrs	r3, r3, #22
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f883 228c 	strb.w	r2, [r3, #652]	@ 0x28c
    as60xx->Param.CR5.BF_SEL                = ( (as60xx->CR[5]) & AS60XX_C5_BF_SEL_Msk )                >> AS60XX_C5_BF_SEL_Pos;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	0ddb      	lsrs	r3, r3, #23
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f883 228d 	strb.w	r2, [r3, #653]	@ 0x28d
    as60xx->Param.CR5.CHP_HV_SEL            = ( (as60xx->CR[5]) & AS60XX_C5_CHP_HV_SEL_Msk )            >> AS60XX_C5_CHP_HV_SEL_Pos;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	0e1b      	lsrs	r3, r3, #24
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f883 228e 	strb.w	r2, [r3, #654]	@ 0x28e
    as60xx->Param.CR5.NOT_USED_28           = ( (as60xx->CR[5]) & AS60XX_C5_NOT_USED_28_Msk )           >> AS60XX_C5_NOT_USED_28_Pos;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	0f1b      	lsrs	r3, r3, #28
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 228f 	strb.w	r2, [r3, #655]	@ 0x28f
    as60xx->Param.CR5.TI_PATH_SEL           = ( (as60xx->CR[5]) & AS60XX_C5_TI_PATH_SEL_Msk )           >> AS60XX_C5_TI_PATH_SEL_Pos;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	0f5b      	lsrs	r3, r3, #29
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	b2da      	uxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
    as60xx->Param.CR5.NOT_USED_31           = ( (as60xx->CR[5]) & AS60XX_C5_NOT_USED_31_Msk )           >> AS60XX_C5_NOT_USED_31_Pos;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	0fdb      	lsrs	r3, r3, #31
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    /* Parameter of CR[6] */
    as60xx->Param.CR6.MR_CT                 = ( (as60xx->CR[6]) & AS60XX_C6_MR_CT_Msk )                 >> AS60XX_C6_MR_CT_Pos;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    as60xx->Param.CR6.TS_MCM                = ( (as60xx->CR[6]) & AS60XX_C6_TS_MCM_Msk )                >> AS60XX_C6_TS_MCM_Pos;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	0b5b      	lsrs	r3, r3, #13
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
    as60xx->Param.CR6.TS_PP_T_EN            = ( (as60xx->CR[6]) & AS60XX_C6_TS_PP_T_EN_Msk )            >> AS60XX_C6_TS_PP_T_EN_Pos;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	0b9b      	lsrs	r3, r3, #14
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
    as60xx->Param.CR6.TS_PP_F_EN            = ( (as60xx->CR[6]) & AS60XX_C6_TS_PP_F_EN_Msk )            >> AS60XX_C6_TS_PP_F_EN_Pos;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	0bdb      	lsrs	r3, r3, #15
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
    as60xx->Param.CR6.TS_PP_MODE            = ( (as60xx->CR[6]) & AS60XX_C6_TS_PP_MODE_Msk )            >> AS60XX_C6_TS_PP_MODE_Pos;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
    as60xx->Param.CR6.TS_CST_RATE           = ( (as60xx->CR[6]) & AS60XX_C6_TS_CST_RATE_Msk )           >> AS60XX_C6_TS_CST_RATE_Pos;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	0c5b      	lsrs	r3, r3, #17
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    as60xx->Param.CR6.TS_NVR_RATE           = ( (as60xx->CR[6]) & AS60XX_C6_TS_NVR_RATE_Msk )           >> AS60XX_C6_TS_NVR_RATE_Pos;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	0d1b      	lsrs	r3, r3, #20
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
    as60xx->Param.CR6.NOT_USED_25_24        = ( (as60xx->CR[6]) & AS60XX_C6_NOT_USED_25_24_Msk )        >> AS60XX_C6_NOT_USED_25_24_Pos;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
    as60xx->Param.CR6.TS_CHP_MODE           = ( (as60xx->CR[6]) & AS60XX_C6_TS_CHP_MODE_Msk )           >> AS60XX_C6_TS_CHP_MODE_Pos;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f883 229f 	strb.w	r2, [r3, #671]	@ 0x29f
    as60xx->Param.CR6.TS_CHP_WT             = ( (as60xx->CR[6]) & AS60XX_C6_TS_CHP_WT_Msk )             >> AS60XX_C6_TS_CHP_WT_Pos;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	0f1b      	lsrs	r3, r3, #28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    as60xx->Param.CR6.NOT_USED_30           = ( (as60xx->CR[6]) & AS60XX_C6_NOT_USED_30_Msk )           >> AS60XX_C6_NOT_USED_30_Pos;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	0f9b      	lsrs	r3, r3, #30
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
    as60xx->Param.CR6.TS_CST_MODE           = ( (as60xx->CR[6]) & AS60XX_C6_TS_CST_MODE_Msk )           >> AS60XX_C6_TS_CST_MODE_Pos;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	0fdb      	lsrs	r3, r3, #31
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f883 22a2 	strb.w	r2, [r3, #674]	@ 0x2a2
    /* Parameter of CR[7] */
    as60xx->Param.CR7.TM_RATE               = ( (as60xx->CR[7]) & AS60XX_C7_TM_RATE_Msk )               >> AS60XX_C7_TM_RATE_Pos;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    as60xx->Param.CR7.TPM_PAUSE             = ( (as60xx->CR[7]) & AS60XX_C7_TPM_PAUSE_Msk )             >> AS60XX_C7_TPM_PAUSE_Pos;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	b2da      	uxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
    as60xx->Param.CR7.TM_MODE               = ( (as60xx->CR[7]) & AS60XX_C7_TM_MODE_Msk )               >> AS60XX_C7_TM_MODE_Pos;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	0b5b      	lsrs	r3, r3, #13
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	b2da      	uxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    as60xx->Param.CR7.NOT_USED_16           = ( (as60xx->CR[7]) & AS60XX_C7_NOT_USED_16_Msk )           >> AS60XX_C7_NOT_USED_16_Pos;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
    as60xx->Param.CR7.TPM_PORT_MODE         = ( (as60xx->CR[7]) & AS60XX_C7_TPM_PORT_MODE_Msk )         >> AS60XX_C7_TPM_PORT_MODE_Pos;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab
    as60xx->Param.CR7.TM_PORT_ORDER         = ( (as60xx->CR[7]) & AS60XX_C7_TM_PORT_ORDER_Msk )         >> AS60XX_C7_TM_PORT_ORDER_Pos;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	0c9b      	lsrs	r3, r3, #18
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	b2da      	uxtb	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
    as60xx->Param.CR7.TPM_CLOAD_TRIM        = ( (as60xx->CR[7]) & AS60XX_C7_TPM_CLOAD_TRIM_Msk )        >> AS60XX_C7_TPM_CLOAD_TRIM_Pos;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	0d1b      	lsrs	r3, r3, #20
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f883 22ad 	strb.w	r2, [r3, #685]	@ 0x2ad
    as60xx->Param.CR7.TPM_CYCLE_SEL         = ( (as60xx->CR[7]) & AS60XX_C7_TPM_CYCLE_SEL_Msk )         >> AS60XX_C7_TPM_CYCLE_SEL_Pos;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	0d9b      	lsrs	r3, r3, #22
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
    as60xx->Param.CR7.TPM_FAKE_NO           = ( (as60xx->CR[7]) & AS60XX_C7_TPM_FAKE_NO_Msk )           >> AS60XX_C7_TPM_FAKE_NO_Pos;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	0ddb      	lsrs	r3, r3, #23
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
    as60xx->Param.CR7.NOT_USED_31_24        = ( (as60xx->CR[7]) & AS60XX_C7_NOT_USED_31_24_Msk )        >> AS60XX_C7_NOT_USED_31_24_Pos;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	0e1b      	lsrs	r3, r3, #24
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
    /* Parameter of CR[8] */
    as60xx->Param.CR8.USM_PAUSE             = ( (as60xx->CR[8]) & AS60XX_C8_USM_PAUSE_Msk )             >> AS60XX_C8_USM_PAUSE_Pos;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4
    as60xx->Param.CR8.TI_PGA_AZ_DIS         = ( (as60xx->CR[8]) & AS60XX_C8_TI_PGA_AZ_DIS_Msk )         >> AS60XX_C8_TI_PGA_AZ_DIS_Pos;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	08db      	lsrs	r3, r3, #3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f883 22b5 	strb.w	r2, [r3, #693]	@ 0x2b5
    as60xx->Param.CR8.USM_DIR_MODE          = ( (as60xx->CR[8]) & AS60XX_C8_USM_DIR_MODE_Msk )          >> AS60XX_C8_USM_DIR_MODE_Pos;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
    as60xx->Param.CR8.USM_NOISE_MASK_WIN    = ( (as60xx->CR[8]) & AS60XX_C8_USM_NOISE_MASK_WIN_Msk )    >> AS60XX_C8_USM_NOISE_MASK_WIN_Pos;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    as60xx->Param.CR8.USM_TO                = ( (as60xx->CR[8]) & AS60XX_C8_USM_TO_Msk )                >> AS60XX_C8_USM_TO_Pos;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	b2da      	uxtb	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f883 22bc 	strb.w	r2, [r3, #700]	@ 0x2bc
    as60xx->Param.CR8.NOT_USED_18           = ( (as60xx->CR[8]) & AS60XX_C8_NOT_USED_18_Msk )           >> AS60XX_C8_NOT_USED_18_Pos;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	0c9b      	lsrs	r3, r3, #18
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f883 22bd 	strb.w	r2, [r3, #701]	@ 0x2bd
    as60xx->Param.CR8.USM_RLS_MODE          = ( (as60xx->CR[8]) & AS60XX_C8_USM_RLS_MODE_Msk )          >> AS60XX_C8_USM_RLS_MODE_Pos;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	0cdb      	lsrs	r3, r3, #19
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f883 22be 	strb.w	r2, [r3, #702]	@ 0x2be
    as60xx->Param.CR8.ZCC_RATE              = ( (as60xx->CR[8]) & AS60XX_C8_ZCC_RATE_Msk )              >> AS60XX_C8_ZCC_RATE_Pos;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	0d1b      	lsrs	r3, r3, #20
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
    as60xx->Param.CR8.NOT_USED_29_23        = ( (as60xx->CR[8]) & AS60XX_C8_NOT_USED_29_23_Msk )        >> AS60XX_C8_NOT_USED_29_23_Pos;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	0dda      	lsrs	r2, r3, #23
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
    as60xx->Param.CR8.TI_PGA_CON_MODE       = ( (as60xx->CR[8]) & AS60XX_C8_TI_PGA_CON_MODE_Msk )       >> AS60XX_C8_TI_PGA_CON_MODE_Pos;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	0f9b      	lsrs	r3, r3, #30
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8a3 22c4 	strh.w	r2, [r3, #708]	@ 0x2c4
    /* Parameter of CR[9] */
    as60xx->Param.CR9.FBG_CLK_DIV           = ( (as60xx->CR[9]) & AS60XX_C9_FBG_CLK_DIV_Msk )           >> AS60XX_C9_FBG_CLK_DIV_Pos;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800257a:	b2da      	uxtb	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
    as60xx->Param.CR9.FBG_MODE              = ( (as60xx->CR[9]) & AS60XX_C9_FBG_MODE_Msk )              >> AS60XX_C9_FBG_MODE_Pos;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002586:	09db      	lsrs	r3, r3, #7
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
    as60xx->Param.CR9.FBG_PHASE_INS         = ( (as60xx->CR[9]) & AS60XX_C9_FBG_PHASE_INS_Msk )         >> AS60XX_C9_FBG_PHASE_INS_Pos;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b2da      	uxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
    as60xx->Param.CR9.FBG_BURST_PRE         = ( (as60xx->CR[9]) & AS60XX_C9_FBG_BURST_PRE_Msk )         >> AS60XX_C9_FBG_BURST_PRE_Pos;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
    as60xx->Param.CR9.FBG_BURST_POST        = ( (as60xx->CR[9]) & AS60XX_C9_FBG_BURST_POST_Msk )        >> AS60XX_C9_FBG_BURST_POST_Pos;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025bc:	0d9b      	lsrs	r3, r3, #22
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
    as60xx->Param.CR9.NOT_USED_28           = ( (as60xx->CR[9]) & AS60XX_C9_NOT_USED_28_Msk )           >> AS60XX_C9_NOT_USED_28_Pos;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d0:	0f1b      	lsrs	r3, r3, #28
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
    as60xx->Param.CR9.NOT_USED_29           = ( (as60xx->CR[9]) & AS60XX_C9_NOT_USED_29_Msk )           >> AS60XX_C9_NOT_USED_29_Pos;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	0f5b      	lsrs	r3, r3, #29
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f883 22ce 	strb.w	r2, [r3, #718]	@ 0x2ce
    as60xx->Param.CR9.TOF_HIT_MODE          = ( (as60xx->CR[9]) & AS60XX_C9_TOF_HIT_MODE_Msk )          >> AS60XX_C9_TOF_HIT_MODE_Pos;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	0f9b      	lsrs	r3, r3, #30
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f883 22cf 	strb.w	r2, [r3, #719]	@ 0x2cf
    as60xx->Param.CR9.NOT_USED_31           = ( (as60xx->CR[9]) & AS60XX_C9_NOT_USED_31_Msk )           >> AS60XX_C9_NOT_USED_31_Pos;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	0fdb      	lsrs	r3, r3, #31
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
    /* Parameter of CR[10] */
    as60xx->Param.CR10.NOT_USED_0           = ( (as60xx->CR[10]) & AS60XX_CA_NOT_USED_0_Msk )           >> AS60XX_CA_NOT_USED_0_Pos;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
    as60xx->Param.CR10.TOF_HIT_START        = ( (as60xx->CR[10]) & AS60XX_CA_TOF_HIT_START_Msk )        >> AS60XX_CA_TOF_HIT_START_Pos;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2
    as60xx->Param.CR10.TOF_HIT_IGN          = ( (as60xx->CR[10]) & AS60XX_CA_TOF_HIT_IGN_Msk )          >> AS60XX_CA_TOF_HIT_IGN_Pos;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f883 22d3 	strb.w	r2, [r3, #723]	@ 0x2d3
    as60xx->Param.CR10.TOF_HIT_SUM_NO       = ( (as60xx->CR[10]) & AS60XX_CA_TOF_HIT_SUM_NO_Msk )       >> AS60XX_CA_TOF_HIT_SUM_NO_Pos;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f883 22d4 	strb.w	r2, [r3, #724]	@ 0x2d4
    as60xx->Param.CR10.TOF_HIT_END          = ( (as60xx->CR[10]) & AS60XX_CA_TOF_HIT_END_Msk )          >> AS60XX_CA_TOF_HIT_END_Pos;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	0b5b      	lsrs	r3, r3, #13
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002670:	b2da      	uxtb	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f883 22d5 	strb.w	r2, [r3, #725]	@ 0x2d5
    as60xx->Param.CR10.NOT_USED_21_20       = ( (as60xx->CR[10]) & AS60XX_CA_NOT_USED_21_20_Msk )       >> AS60XX_CA_NOT_USED_21_20_Pos;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
    as60xx->Param.CR10.TOF_EDGE_MODE        = ( (as60xx->CR[10]) & AS60XX_CA_TOF_EDGE_MODE_Msk )        >> AS60XX_CA_TOF_EDGE_MODE_Pos;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	0d9b      	lsrs	r3, r3, #22
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	b2da      	uxtb	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
    as60xx->Param.CR10.TOF_RATE_INIT        = ( (as60xx->CR[10]) & AS60XX_CA_TOF_RATE_INIT_Msk )        >> AS60XX_CA_TOF_RATE_INIT_Pos;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	0e1b      	lsrs	r3, r3, #24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f883 22d8 	strb.w	r2, [r3, #728]	@ 0x2d8
    as60xx->Param.CR10.NOT_USED_31_30       = ( (as60xx->CR[10]) & AS60XX_CA_NOT_USED_31_30_Msk )       >> AS60XX_CA_NOT_USED_31_30_Pos;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b8:	0f9b      	lsrs	r3, r3, #30
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f883 22d9 	strb.w	r2, [r3, #729]	@ 0x2d9
    /* Parameter of CR[11] */
    as60xx->Param.CR11.AM_RATE              = ( (as60xx->CR[11]) & AS60XX_CB_AM_RATE_Msk )              >> AS60XX_CB_AM_RATE_Pos;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
    as60xx->Param.CR11.NOT_USED_3           = ( (as60xx->CR[11]) & AS60XX_CB_NOT_USED_3_Msk )           >> AS60XX_CB_NOT_USED_3_Pos;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f883 22db 	strb.w	r2, [r3, #731]	@ 0x2db
    as60xx->Param.CR11.AM_PD_END            = ( (as60xx->CR[11]) & AS60XX_CB_AM_PD_END_Msk )            >> AS60XX_CB_AM_PD_END_Pos;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
    as60xx->Param.CR11.NOT_USED_11_9        = ( (as60xx->CR[11]) & AS60XX_CB_NOT_USED_11_9_Msk )        >> AS60XX_CB_NOT_USED_11_9_Pos;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	0a5b      	lsrs	r3, r3, #9
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 22dd 	strb.w	r2, [r3, #733]	@ 0x2dd
    as60xx->Param.CR11.AMC_RATE             = ( (as60xx->CR[11]) & AS60XX_CB_AMC_RATE_Msk )             >> AS60XX_CB_AMC_RATE_Pos;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	0b1b      	lsrs	r3, r3, #12
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	b2da      	uxtb	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f883 22de 	strb.w	r2, [r3, #734]	@ 0x2de
    as60xx->Param.CR11.PWD_EN               = ( (as60xx->CR[11]) & AS60XX_CB_PWD_EN_Msk )               >> AS60XX_CB_PWD_EN_Pos;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	0bdb      	lsrs	r3, r3, #15
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f883 22df 	strb.w	r2, [r3, #735]	@ 0x2df
    as60xx->Param.CR11.PGA_TRIM             = ( (as60xx->CR[11]) & AS60XX_CB_PGA_TRIM_Msk )             >> AS60XX_CB_PGA_TRIM_Pos;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	b2da      	uxtb	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
    as60xx->Param.CR11.PGA_EN_MODE          = ( (as60xx->CR[11]) & AS60XX_CB_PGA_EN_MODE_Msk )          >> AS60XX_CB_PGA_EN_MODE_Pos;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	0d1b      	lsrs	r3, r3, #20
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
    as60xx->Param.CR11.PGA_MODE             = ( (as60xx->CR[11]) & AS60XX_CB_PGA_MODE_Msk )             >> AS60XX_CB_PGA_MODE_Pos;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	0d5b      	lsrs	r3, r3, #21
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
    as60xx->Param.CR11.NOT_USED_22          = ( (as60xx->CR[11]) & AS60XX_CB_NOT_USED_22_Msk )          >> AS60XX_CB_NOT_USED_22_Pos;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	0d9b      	lsrs	r3, r3, #22
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
    as60xx->Param.CR11.AM_PD_START_MODE     = ( (as60xx->CR[11]) & AS60XX_CB_AM_PD_START_MODE_Msk )     >> AS60XX_CB_AM_PD_START_MODE_Pos;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	0ddb      	lsrs	r3, r3, #23
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
    as60xx->Param.CR11.ZCD_FHL_INIT         = ( (as60xx->CR[11]) & AS60XX_CB_ZCD_FHL_INIT_Msk )         >> AS60XX_CB_ZCD_FHL_INIT_Pos;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
    /* Parameter of CR[12] */
    as60xx->Param.CR12.TRIM1                = ( (as60xx->CR[12]) & AS60XX_CC_TRIM1_Msk )                >> AS60XX_CC_TRIM1_Pos;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
    /* Parameter of CR[13] */
    as60xx->Param.CR13.TRIM2                = ( (as60xx->CR[13]) & AS60XX_CD_TRIM2_Msk )                >> AS60XX_CD_TRIM2_Pos;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
    /* Parameter of CR[14] */
    as60xx->Param.CR14.TRIM3                = ( (as60xx->CR[14]) & AS60XX_CE_TRIM3_Msk )                >> AS60XX_CE_TRIM3_Pos;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
    /* Parameter of CR[15] */
    as60xx->Param.CR15.TOF_RATE             = ( (as60xx->CR[15]) & AS60XX_D0_TOF_RATE_Msk )             >> AS60XX_D0_TOF_RATE_Pos;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f883 22f4 	strb.w	r2, [r3, #756]	@ 0x2f4
    as60xx->Param.CR15.NOT_USED_31_6        = ( (as60xx->CR[15]) & AS60XX_D0_NOT_USED_31_6_Msk )        >> AS60XX_D0_NOT_USED_31_6_Pos;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	099a      	lsrs	r2, r3, #6
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    /* Parameter of CR[16] */
    as60xx->Param.CR16.USM_RLS_DLY_U        = ( (as60xx->CR[16]) & AS60XX_D1_USM_RLS_DLY_U_Msk )        >> AS60XX_D1_USM_RLS_DLY_U_Pos;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ea:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
    as60xx->Param.CR16.NOT_USED_31_19       = ( (as60xx->CR[16]) & AS60XX_D1_NOT_USED_31_19_Msk )       >> AS60XX_D1_NOT_USED_31_19_Pos;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	0cda      	lsrs	r2, r3, #19
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    /* Parameter of CR[17] */
    as60xx->Param.CR17.USM_RLS_DLY_D        = ( (as60xx->CR[17]) & AS60XX_D2_USM_RLS_DLY_D_Msk )        >> AS60XX_D2_USM_RLS_DLY_D_Pos;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
    as60xx->Param.CR17.NOT_USED_31_19       = ( (as60xx->CR[17]) & AS60XX_D2_NOT_USED_31_19_Msk )       >> AS60XX_D2_NOT_USED_31_19_Pos;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	0cda      	lsrs	r2, r3, #19
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
    /* Parameter of CR[18] */
    as60xx->Param.CR18.ZCD_FHL_U            = ( (as60xx->CR[18]) & AS60XX_DA_ZCD_FHL_U_Msk )            >> AS60XX_DA_ZCD_FHL_U_Pos;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	b2da      	uxtb	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c
    as60xx->Param.CR18.NOT_USED_31_8        = ( (as60xx->CR[18]) & AS60XX_DA_NOT_USED_31_8_Msk )        >> AS60XX_DA_NOT_USED_31_8_Pos;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	0a1a      	lsrs	r2, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    /* Parameter of CR[19] */
    as60xx->Param.CR19.ZCD_FHL_D            = ( (as60xx->CR[19]) & AS60XX_DB_ZCD_FHL_D_Msk )            >> AS60XX_DB_ZCD_FHL_D_Pos;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002836:	b2da      	uxtb	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
    as60xx->Param.CR19.NOT_USED_31_8        = ( (as60xx->CR[19]) & AS60XX_DB_NOT_USED_31_8_Msk )        >> AS60XX_DB_NOT_USED_31_8_Pos;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	0a1a      	lsrs	r2, r3, #8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>:

static inline void As60xx_Update_Configuration(ScioSense_As60xx* as60xx)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
    /* Writes all parameters into every configuration register */
    /* Parameter for CR[0] */
    as60xx->CR[0]   = 0;// Clearing the register
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
    as60xx->CR[0]   |= AS60XX_C0_WS_DIS_SET             (as60xx->Param.CR0.WS_DIS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	611a      	str	r2, [r3, #16]
    /* Parameter for CR[1] */
    as60xx->CR[1]   = 0;// Clearing the register
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_TPW_SET             (as60xx->Param.CR1.PI_TPW);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	f892 2248 	ldrb.w	r2, [r2, #584]	@ 0x248
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_EN_SET              (as60xx->Param.CR1.PI_EN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_OUT_MODE_SET        (as60xx->Param.CR1.PI_OUT_MODE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 324a 	ldrb.w	r3, [r3, #586]	@ 0x24a
 80028aa:	025b      	lsls	r3, r3, #9
 80028ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_PI_UPD_MODE_SET        (as60xx->Param.CR1.PI_UPD_MODE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 324b 	ldrb.w	r3, [r3, #587]	@ 0x24b
 80028c0:	029b      	lsls	r3, r3, #10
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_11_SET        (as60xx->Param.CR1.NOT_USED_11);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 80028d6:	02db      	lsls	r3, r3, #11
 80028d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_MODE_SET           (as60xx->Param.CR1.I2C_MODE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_I2C_ADR_SET            (as60xx->Param.CR1.I2C_ADR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	f403 13fe 	and.w	r3, r3, #2080768	@ 0x1fc000
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_21_SET        (as60xx->Param.CR1.NOT_USED_21);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 8002918:	055b      	lsls	r3, r3, #21
 800291a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_SPI_INPORT_CFG_SET     (as60xx->Param.CR1.SPI_INPORT_CFG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 800292e:	059b      	lsls	r3, r3, #22
 8002930:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	615a      	str	r2, [r3, #20]
    as60xx->CR[1]   |= AS60XX_C1_NOT_USED_31_24_SET     (as60xx->Param.CR1.NOT_USED_31_24);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	615a      	str	r2, [r3, #20]
    /* Parameter for CR[2] */
    as60xx->CR[2]   = 0;// Clearing the register
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_DIR_SET            (as60xx->Param.CR2.GP0_DIR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP0_SEL_SET            (as60xx->Param.CR2.GP0_SEL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_DIR_SET            (as60xx->Param.CR2.GP1_DIR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP1_SEL_SET            (as60xx->Param.CR2.GP1_SEL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3255 	ldrb.w	r3, [r3, #597]	@ 0x255
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_DIR_SET            (as60xx->Param.CR2.GP2_DIR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3256 	ldrb.w	r3, [r3, #598]	@ 0x256
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP2_SEL_SET            (as60xx->Param.CR2.GP2_SEL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_DIR_SET            (as60xx->Param.CR2.GP3_DIR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3258 	ldrb.w	r3, [r3, #600]	@ 0x258
 80029dc:	031b      	lsls	r3, r3, #12
 80029de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP3_SEL_SET            (as60xx->Param.CR2.GP3_SEL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 80029f2:	039b      	lsls	r3, r3, #14
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_DIR_SET            (as60xx->Param.CR2.GP4_DIR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 325a 	ldrb.w	r3, [r3, #602]	@ 0x25a
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP4_SEL_SET            (as60xx->Param.CR2.GP4_SEL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 325b 	ldrb.w	r3, [r3, #603]	@ 0x25b
 8002a1c:	049b      	lsls	r3, r3, #18
 8002a1e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_DIR_SET            (as60xx->Param.CR2.GP5_DIR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8002a32:	051b      	lsls	r3, r3, #20
 8002a34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_GP5_SEL_SET            (as60xx->Param.CR2.GP5_SEL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8002a48:	059b      	lsls	r3, r3, #22
 8002a4a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
    as60xx->CR[2]   |= AS60XX_C2_NOT_USED_31_24_SET     (as60xx->Param.CR2.NOT_USED_31_24);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
    /* Parameter for CR[3] */
    as60xx->CR[3]   = 0;// Clearing the register
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_USM_OPT_SET            (as60xx->Param.CR3.USM_OPT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	61da      	str	r2, [r3, #28]
    as60xx->CR[3]   |= AS60XX_C3_NOT_USED_31_5_SET      (as60xx->Param.CR3.NOT_USED_31_5);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a8a:	015b      	lsls	r3, r3, #5
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	61da      	str	r2, [r3, #28]
    /* Parameter for CR[4] */
    as60xx->CR[4]   = 0;// Clearing the register
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TDC_TMO_SET      (as60xx->Param.CR4.EF_EN_TDC_TMO);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3268 	ldrb.w	r3, [r3, #616]	@ 0x268
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TOF_TMO_SET      (as60xx->Param.CR4.EF_EN_TOF_TMO);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3269 	ldrb.w	r3, [r3, #617]	@ 0x269
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_AM_TMO_SET       (as60xx->Param.CR4.EF_EN_AM_TMO);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 326a 	ldrb.w	r3, [r3, #618]	@ 0x26a
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_OC_SET        (as60xx->Param.CR4.EF_EN_TM_OC);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 326b 	ldrb.w	r3, [r3, #619]	@ 0x26b
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SC_SET        (as60xx->Param.CR4.EF_EN_TM_SC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 326c 	ldrb.w	r3, [r3, #620]	@ 0x26c
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_ZCC_ERR_SET      (as60xx->Param.CR4.EF_EN_ZCC_ERR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 326d 	ldrb.w	r3, [r3, #621]	@ 0x26d
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_LBD_ERR_SET      (as60xx->Param.CR4.EF_EN_LBD_ERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 326e 	ldrb.w	r3, [r3, #622]	@ 0x26e
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_USM_SQC_TMO_SET  (as60xx->Param.CR4.EF_EN_USM_SQC_TMO);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 326f 	ldrb.w	r3, [r3, #623]	@ 0x26f
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TM_SQC_TMO_SET   (as60xx->Param.CR4.EF_EN_TM_SQC_TMO);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_TSQ_TMO_SET      (as60xx->Param.CR4.EF_EN_TSQ_TMO);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_I2C_ACK_ERR_SET  (as60xx->Param.CR4.EF_EN_I2C_ACK_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CHP_ERR_SET      (as60xx->Param.CR4.EF_EN_CHP_ERR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3273 	ldrb.w	r3, [r3, #627]	@ 0x273
 8002b90:	02db      	lsls	r3, r3, #11
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWCU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3274 	ldrb.w	r3, [r3, #628]	@ 0x274
 8002ba6:	031b      	lsls	r3, r3, #12
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWDU_ERR_SET (as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3275 	ldrb.w	r3, [r3, #629]	@ 0x275
 8002bbc:	035b      	lsls	r3, r3, #13
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_NVM_FWA_ERR_SET  (as60xx->Param.CR4.EF_EN_NVM_FWA_ERR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3276 	ldrb.w	r3, [r3, #630]	@ 0x276
 8002bd2:	039b      	lsls	r3, r3, #14
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_EF_EN_CPU_ERR_SET      (as60xx->Param.CR4.EF_EN_CPU_ERR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3277 	ldrb.w	r3, [r3, #631]	@ 0x277
 8002be8:	03db      	lsls	r3, r3, #15
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_FNS_SET     (as60xx->Param.CR4.IRQ_EN_TSQ_FNS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TRANS_FNS_SET   (as60xx->Param.CR4.IRQ_EN_TRANS_FNS);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3279 	ldrb.w	r3, [r3, #633]	@ 0x279
 8002c12:	045b      	lsls	r3, r3, #17
 8002c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_BLD_FNS_SET     (as60xx->Param.CR4.IRQ_EN_BLD_FNS);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 327a 	ldrb.w	r3, [r3, #634]	@ 0x27a
 8002c28:	049b      	lsls	r3, r3, #18
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_CHKSUM_FNS_SET  (as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 327b 	ldrb.w	r3, [r3, #635]	@ 0x27b
 8002c3e:	04db      	lsls	r3, r3, #19
 8002c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_FW_S_SET        (as60xx->Param.CR4.IRQ_EN_FW_S);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 327c 	ldrb.w	r3, [r3, #636]	@ 0x27c
 8002c54:	051b      	lsls	r3, r3, #20
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_TSQ_TO_SET      (as60xx->Param.CR4.IRQ_EN_TSQ_TO);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 327d 	ldrb.w	r3, [r3, #637]	@ 0x27d
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_22_SET        (as60xx->Param.CR4.NOT_USED_22);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 327e 	ldrb.w	r3, [r3, #638]	@ 0x27e
 8002c80:	059b      	lsls	r3, r3, #22
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_IRQ_EN_ERR_FLAG_SET    (as60xx->Param.CR4.IRQ_EN_ERR_FLAG);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 327f 	ldrb.w	r3, [r3, #639]	@ 0x27f
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_NOT_USED_26_24_SET     (as60xx->Param.CR4.NOT_USED_26_24);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3280 	ldrb.w	r3, [r3, #640]	@ 0x280
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_CPU_REQ_EN_GPH_SET     (as60xx->Param.CR4.CPU_REQ_EN_GPH);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8002cc2:	06db      	lsls	r3, r3, #27
 8002cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]
    as60xx->CR[4]   |= AS60XX_C4_TS_GPT_RATE_SET        (as60xx->Param.CR4.TS_GPT_RATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]
    /* Parameter for CR[5] */
    as60xx->CR[5]   = 0;// Clearing the register
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_MODE_SET       (as60xx->Param.CR5.HSC_DIV_MODE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3283 	ldrb.w	r3, [r3, #643]	@ 0x283
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_1_SET         (as60xx->Param.CR5.NOT_USED_1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_CLK_ST_SET         (as60xx->Param.CR5.HSC_CLK_ST);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3285 	ldrb.w	r3, [r3, #645]	@ 0x285
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f003 031c 	and.w	r3, r3, #28
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_7_5_SET       (as60xx->Param.CR5.NOT_USED_7_5);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3286 	ldrb.w	r3, [r3, #646]	@ 0x286
 8002d30:	015b      	lsls	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_DIV_SET            (as60xx->Param.CR5.HSC_DIV);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3287 	ldrb.w	r3, [r3, #647]	@ 0x287
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_RATE_SET           (as60xx->Param.CR5.HSC_RATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3288 	ldrb.w	r3, [r3, #648]	@ 0x288
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_HSC_MODE_CPU_SET       (as60xx->Param.CR5.HSC_MODE_CPU);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3289 	ldrb.w	r3, [r3, #649]	@ 0x289
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_VM_RATE_SET            (as60xx->Param.CR5.VM_RATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 328a 	ldrb.w	r3, [r3, #650]	@ 0x28a
 8002d86:	035b      	lsls	r3, r3, #13
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_LBD_TH_SET             (as60xx->Param.CR5.LBD_TH);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 328b 	ldrb.w	r3, [r3, #651]	@ 0x28b
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TSV_UPD_MODE_SET       (as60xx->Param.CR5.TSV_UPD_MODE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 328c 	ldrb.w	r3, [r3, #652]	@ 0x28c
 8002db0:	059b      	lsls	r3, r3, #22
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_BF_SEL_SET             (as60xx->Param.CR5.BF_SEL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 328d 	ldrb.w	r3, [r3, #653]	@ 0x28d
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_CHP_HV_SEL_SET         (as60xx->Param.CR5.CHP_HV_SEL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 328e 	ldrb.w	r3, [r3, #654]	@ 0x28e
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_28_SET        (as60xx->Param.CR5.NOT_USED_28);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 328f 	ldrb.w	r3, [r3, #655]	@ 0x28f
 8002df2:	071b      	lsls	r3, r3, #28
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_TI_PATH_SEL_SET        (as60xx->Param.CR5.TI_PATH_SEL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e08:	075b      	lsls	r3, r3, #29
 8002e0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24
    as60xx->CR[5]   |= AS60XX_C5_NOT_USED_31_SET        (as60xx->Param.CR5.NOT_USED_31);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002e1e:	07db      	lsls	r3, r3, #31
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Parameter for CR[6] */
    as60xx->CR[6]   = 0;// Clearing the register
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_MR_CT_SET              (as60xx->Param.CR6.MR_CT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8002e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_MCM_SET             (as60xx->Param.CR6.TS_MCM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 8002e4a:	035b      	lsls	r3, r3, #13
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_T_EN_SET         (as60xx->Param.CR6.TS_PP_T_EN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3299 	ldrb.w	r3, [r3, #665]	@ 0x299
 8002e60:	039b      	lsls	r3, r3, #14
 8002e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_F_EN_SET         (as60xx->Param.CR6.TS_PP_F_EN);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 329a 	ldrb.w	r3, [r3, #666]	@ 0x29a
 8002e76:	03db      	lsls	r3, r3, #15
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_PP_MODE_SET         (as60xx->Param.CR6.TS_PP_MODE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 329b 	ldrb.w	r3, [r3, #667]	@ 0x29b
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_RATE_SET        (as60xx->Param.CR6.TS_CST_RATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8002ea0:	045b      	lsls	r3, r3, #17
 8002ea2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_NVR_RATE_SET        (as60xx->Param.CR6.TS_NVR_RATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8002eb6:	051b      	lsls	r3, r3, #20
 8002eb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_NOT_USED_25_24_SET     (as60xx->Param.CR6.NOT_USED_25_24);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 329e 	ldrb.w	r3, [r3, #670]	@ 0x29e
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_MODE_SET        (as60xx->Param.CR6.TS_CHP_MODE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 329f 	ldrb.w	r3, [r3, #671]	@ 0x29f
 8002ee2:	069b      	lsls	r3, r3, #26
 8002ee4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CHP_WT_SET          (as60xx->Param.CR6.TS_CHP_WT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8002ef8:	071b      	lsls	r3, r3, #28
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
    as60xx->CR[6]   |= AS60XX_C6_TS_CST_MODE_SET        (as60xx->Param.CR6.TS_CST_MODE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Parameter for CR[7] */
    as60xx->CR[7]   = 0;// Clearing the register
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_RATE_SET            (as60xx->Param.CR7.TM_RATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8002f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PAUSE_SET          (as60xx->Param.CR7.TPM_PAUSE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_MODE_SET            (as60xx->Param.CR7.TM_MODE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002f4c:	035b      	lsls	r3, r3, #13
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_16_SET        (as60xx->Param.CR7.NOT_USED_16);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_PORT_MODE_SET      (as60xx->Param.CR7.TPM_PORT_MODE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 32ab 	ldrb.w	r3, [r3, #683]	@ 0x2ab
 8002f76:	045b      	lsls	r3, r3, #17
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TM_PORT_ORDER_SET      (as60xx->Param.CR7.TM_PORT_ORDER);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 32ac 	ldrb.w	r3, [r3, #684]	@ 0x2ac
 8002f8c:	049b      	lsls	r3, r3, #18
 8002f8e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CLOAD_TRIM_SET     (as60xx->Param.CR7.TPM_CLOAD_TRIM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 32ad 	ldrb.w	r3, [r3, #685]	@ 0x2ad
 8002fa2:	051b      	lsls	r3, r3, #20
 8002fa4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_CYCLE_SEL_SET      (as60xx->Param.CR7.TPM_CYCLE_SEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 32ae 	ldrb.w	r3, [r3, #686]	@ 0x2ae
 8002fb8:	059b      	lsls	r3, r3, #22
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_TPM_FAKE_NO_SET        (as60xx->Param.CR7.TPM_FAKE_NO);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 32af 	ldrb.w	r3, [r3, #687]	@ 0x2af
 8002fce:	05db      	lsls	r3, r3, #23
 8002fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    as60xx->CR[7]   |= AS60XX_C7_NOT_USED_31_24_SET     (as60xx->Param.CR7.NOT_USED_31_24);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 32b0 	ldrb.w	r3, [r3, #688]	@ 0x2b0
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Parameter for CR[8] */
    as60xx->CR[8]   = 0;// Clearing the register
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_PAUSE_SET          (as60xx->Param.CR8.USM_PAUSE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_AZ_DIS_SET      (as60xx->Param.CR8.TI_PGA_AZ_DIS);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 32b5 	ldrb.w	r3, [r3, #693]	@ 0x2b5
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_DIR_MODE_SET       (as60xx->Param.CR8.USM_DIR_MODE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_NOISE_MASK_WIN_SET (as60xx->Param.CR8.USM_NOISE_MASK_WIN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800303c:	019b      	lsls	r3, r3, #6
 800303e:	b29b      	uxth	r3, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_TO_SET             (as60xx->Param.CR8.USM_TO);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32bc 	ldrb.w	r3, [r3, #700]	@ 0x2bc
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_18_SET        (as60xx->Param.CR8.NOT_USED_18);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 32bd 	ldrb.w	r3, [r3, #701]	@ 0x2bd
 8003066:	049b      	lsls	r3, r3, #18
 8003068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_USM_RLS_MODE_SET       (as60xx->Param.CR8.USM_RLS_MODE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 32be 	ldrb.w	r3, [r3, #702]	@ 0x2be
 800307c:	04db      	lsls	r3, r3, #19
 800307e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_ZCC_RATE_SET           (as60xx->Param.CR8.ZCC_RATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 32bf 	ldrb.w	r3, [r3, #703]	@ 0x2bf
 8003092:	051b      	lsls	r3, r3, #20
 8003094:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_NOT_USED_29_23_SET     (as60xx->Param.CR8.NOT_USED_29_23);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80030a8:	05db      	lsls	r3, r3, #23
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
    as60xx->CR[8]   |= AS60XX_C8_TI_PGA_CON_MODE_SET    (as60xx->Param.CR8.TI_PGA_CON_MODE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 80030ba:	079b      	lsls	r3, r3, #30
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Parameter for CR[9] */
    as60xx->CR[9]   = 0;// Clearing the register
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_CLK_DIV_SET        (as60xx->Param.CR9.FBG_CLK_DIV);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80030d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_MODE_SET           (as60xx->Param.CR9.FBG_MODE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 32c9 	ldrb.w	r3, [r3, #713]	@ 0x2c9
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_PHASE_INS_SET      (as60xx->Param.CR9.FBG_PHASE_INS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 32ca 	ldrb.w	r3, [r3, #714]	@ 0x2ca
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_PRE_SET      (as60xx->Param.CR9.FBG_BURST_PRE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_FBG_BURST_POST_SET     (as60xx->Param.CR9.FBG_BURST_POST);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003124:	059b      	lsls	r3, r3, #22
 8003126:	f003 637c 	and.w	r3, r3, #264241152	@ 0xfc00000
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_28_SET        (as60xx->Param.CR9.NOT_USED_28);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 32cd 	ldrb.w	r3, [r3, #717]	@ 0x2cd
 800313a:	071b      	lsls	r3, r3, #28
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_29_SET        (as60xx->Param.CR9.NOT_USED_29);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 32ce 	ldrb.w	r3, [r3, #718]	@ 0x2ce
 8003150:	075b      	lsls	r3, r3, #29
 8003152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_TOF_HIT_MODE_SET       (as60xx->Param.CR9.TOF_HIT_MODE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 32cf 	ldrb.w	r3, [r3, #719]	@ 0x2cf
 8003166:	079b      	lsls	r3, r3, #30
 8003168:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
    as60xx->CR[9]   |= AS60XX_C9_NOT_USED_31_SET        (as60xx->Param.CR9.NOT_USED_31);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
 800317c:	07db      	lsls	r3, r3, #31
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	635a      	str	r2, [r3, #52]	@ 0x34
    /* Parameter for CR[10] */
    as60xx->CR[10]  = 0;// Clearing the register
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_0_SET         (as60xx->Param.CR10.NOT_USED_0);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 32d1 	ldrb.w	r3, [r3, #721]	@ 0x2d1
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_START_SET      (as60xx->Param.CR10.TOF_HIT_START);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 32d2 	ldrb.w	r3, [r3, #722]	@ 0x2d2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_IGN_SET        (as60xx->Param.CR10.TOF_HIT_IGN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 32d3 	ldrb.w	r3, [r3, #723]	@ 0x2d3
 80031be:	019b      	lsls	r3, r3, #6
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_SUM_NO_SET     (as60xx->Param.CR10.TOF_HIT_SUM_NO);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 32d4 	ldrb.w	r3, [r3, #724]	@ 0x2d4
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_HIT_END_SET        (as60xx->Param.CR10.TOF_HIT_END);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 32d5 	ldrb.w	r3, [r3, #725]	@ 0x2d5
 80031e8:	035b      	lsls	r3, r3, #13
 80031ea:	f403 237e 	and.w	r3, r3, #1040384	@ 0xfe000
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_21_20_SET     (as60xx->Param.CR10.NOT_USED_21_20);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 32d6 	ldrb.w	r3, [r3, #726]	@ 0x2d6
 80031fe:	051b      	lsls	r3, r3, #20
 8003200:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_EDGE_MODE_SET      (as60xx->Param.CR10.TOF_EDGE_MODE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 32d7 	ldrb.w	r3, [r3, #727]	@ 0x2d7
 8003214:	059b      	lsls	r3, r3, #22
 8003216:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_TOF_RATE_INIT_SET      (as60xx->Param.CR10.TOF_RATE_INIT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 32d8 	ldrb.w	r3, [r3, #728]	@ 0x2d8
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
    as60xx->CR[10]  |= AS60XX_CA_NOT_USED_31_30_SET     (as60xx->Param.CR10.NOT_USED_31_30);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 32d9 	ldrb.w	r3, [r3, #729]	@ 0x2d9
 8003240:	079b      	lsls	r3, r3, #30
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameter for CR[11] */
    as60xx->CR[11]  = 0;// Clearing the register
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_RATE_SET            (as60xx->Param.CR11.AM_RATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_3_SET         (as60xx->Param.CR11.NOT_USED_3);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 32db 	ldrb.w	r3, [r3, #731]	@ 0x2db
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_END_SET          (as60xx->Param.CR11.AM_PD_END);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_11_9_SET      (as60xx->Param.CR11.NOT_USED_11_9);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 32dd 	ldrb.w	r3, [r3, #733]	@ 0x2dd
 8003298:	025b      	lsls	r3, r3, #9
 800329a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AMC_RATE_SET           (as60xx->Param.CR11.AMC_RATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 32de 	ldrb.w	r3, [r3, #734]	@ 0x2de
 80032ae:	031b      	lsls	r3, r3, #12
 80032b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PWD_EN_SET             (as60xx->Param.CR11.PWD_EN);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 32df 	ldrb.w	r3, [r3, #735]	@ 0x2df
 80032c4:	03db      	lsls	r3, r3, #15
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_TRIM_SET           (as60xx->Param.CR11.PGA_TRIM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_EN_MODE_SET        (as60xx->Param.CR11.PGA_EN_MODE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 32e1 	ldrb.w	r3, [r3, #737]	@ 0x2e1
 80032ee:	051b      	lsls	r3, r3, #20
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_PGA_MODE_SET           (as60xx->Param.CR11.PGA_MODE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 32e2 	ldrb.w	r3, [r3, #738]	@ 0x2e2
 8003304:	055b      	lsls	r3, r3, #21
 8003306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_NOT_USED_22_SET        (as60xx->Param.CR11.NOT_USED_22);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800331a:	059b      	lsls	r3, r3, #22
 800331c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_AM_PD_START_MODE_SET   (as60xx->Param.CR11.AM_PD_START_MODE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	63da      	str	r2, [r3, #60]	@ 0x3c
    as60xx->CR[11]  |= AS60XX_CB_ZCD_FHL_INIT_SET       (as60xx->Param.CR11.ZCD_FHL_INIT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Parameter for CR[12] */
    as60xx->CR[12]  = 0;// Clearing the register
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40
    as60xx->CR[12]  |= AS60XX_CC_TRIM1_SET              (as60xx->Param.CR12.TRIM1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Parameter for CR[13] */
    as60xx->CR[13]  = 0;// Clearing the register
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    as60xx->CR[13]  |= AS60XX_CD_TRIM2_SET              (as60xx->Param.CR13.TRIM2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Parameter for CR[14] */
    as60xx->CR[14]  = 0;// Clearing the register
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	649a      	str	r2, [r3, #72]	@ 0x48
    as60xx->CR[14]  |= AS60XX_CE_TRIM3_SET              (as60xx->Param.CR14.TRIM3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Parameter for CR[15] */
    as60xx->CR[15]  = 0;// Clearing the register
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_TOF_RATE_SET           (as60xx->Param.CR15.TOF_RATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
 80033a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    as60xx->CR[15]  |= AS60XX_D0_NOT_USED_31_6_SET      (as60xx->Param.CR15.NOT_USED_31_6);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Parameter for CR[16] */
    as60xx->CR[16]  = 0;// Clearing the register
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_USM_RLS_DLY_U_SET      (as60xx->Param.CR16.USM_RLS_DLY_U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	651a      	str	r2, [r3, #80]	@ 0x50
    as60xx->CR[16]  |= AS60XX_D1_NOT_USED_31_19_SET     (as60xx->Param.CR16.NOT_USED_31_19);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80033e0:	04db      	lsls	r3, r3, #19
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Parameter for CR[17] */
    as60xx->CR[17]  = 0;// Clearing the register
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_USM_RLS_DLY_D_SET      (as60xx->Param.CR17.USM_RLS_DLY_D);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	@ 0x54
    as60xx->CR[17]  |= AS60XX_D2_NOT_USED_31_19_SET     (as60xx->Param.CR17.NOT_USED_31_19);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 800340c:	04db      	lsls	r3, r3, #19
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Parameter for CR[18] */
    as60xx->CR[18]  = 0;// Clearing the register
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_ZCD_FHL_U_SET          (as60xx->Param.CR18.ZCD_FHL_U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	f892 230c 	ldrb.w	r2, [r2, #780]	@ 0x30c
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58
    as60xx->CR[18]  |= AS60XX_DA_NOT_USED_31_8_SET      (as60xx->Param.CR18.NOT_USED_31_8);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Parameter for CR[19] */
    as60xx->CR[19]  = 0;// Clearing the register
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_ZCD_FHL_D_SET          (as60xx->Param.CR19.ZCD_FHL_D);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	f892 2314 	ldrb.w	r2, [r2, #788]	@ 0x314
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	65da      	str	r2, [r3, #92]	@ 0x5c
    as60xx->CR[19]  |= AS60XX_DB_NOT_USED_31_8_SET      (as60xx->Param.CR19.NOT_USED_31_8);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3318 	ldr.w	r3, [r3, #792]	@ 0x318
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx>:

static inline void As6xx_Initialize_Configuration(ScioSense_As60xx* as60xx)
{
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint8_t registersToWrite[] = {
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x20>)
 800347a:	f107 0408 	add.w	r4, r7, #8
 800347e:	461d      	mov	r5, r3
 8003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	6023      	str	r3, [r4, #0]
        0x0C0, 0X0C1, 0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C6, 0x0C7, 0x0C8, 0x0C9, 0x0CA, 0x0CB, 0x0CC, 0x0CD, 0x0CE,
        0x0D0, 0x0D1, 0x0D2,                                                  0x0DA, 0x0DB};
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e010      	b.n	80034b0 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x40>
 800348e:	bf00      	nop
 8003490:	0800c9c8 	.word	0x0800c9c8
  {
    as60xx->Addresses[idx] = registersToWrite[idx];
 8003494:	7ffb      	ldrb	r3, [r7, #31]
 8003496:	3320      	adds	r3, #32
 8003498:	443b      	add	r3, r7
 800349a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800349e:	7ffa      	ldrb	r2, [r7, #31]
 80034a0:	4619      	mov	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3230      	adds	r2, #48	@ 0x30
 80034a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( uint8_t idx=0; idx<AS60XX_AMOUNT_CONFIGURATION_REGISTERS; idx++ )
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	3301      	adds	r3, #1
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	7ffb      	ldrb	r3, [r7, #31]
 80034b2:	2b13      	cmp	r3, #19
 80034b4:	d9ee      	bls.n	8003494 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x24>
  }

  as60xx->State = AS60XX_STATE_RESET;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

  as60xx->Param.CR0.WS_DIS              = 0xAF0A7435;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4aca      	ldr	r2, [pc, #808]	@ (80037ec <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x37c>)
 80034c2:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

  as60xx->Param.CR1.PI_TPW              = 0;                            /*!< Pulse Interface, Pulse Width */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
  as60xx->Param.CR1.PI_EN               = 0;                            /*!< Pulse Interface Enable */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
  as60xx->Param.CR1.PI_OUT_MODE         = 0;                            /*!< Pulse Interface Output Mode */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 224a 	strb.w	r2, [r3, #586]	@ 0x24a
  as60xx->Param.CR1.PI_UPD_MODE         = 0;                            /*!< Pulse Interface Update Mode */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 224b 	strb.w	r2, [r3, #587]	@ 0x24b
  as60xx->Param.CR1.NOT_USED_11         = AS60XX_C1_NOT_USED_11;        /*!< Mandatory setting: b0 */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c
  as60xx->Param.CR1.I2C_MODE            = 0;                            /*!< 2-wire master interface mode */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
  as60xx->Param.CR1.I2C_ADR             = 0;                            /*!< 2-wire master interface slave address */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e
  as60xx->Param.CR1.NOT_USED_21         = AS60XX_C1_NOT_USED_21;        /*!< Mandatory setting: b0 */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f
  as60xx->Param.CR1.SPI_INPORT_CFG      = 0;                            /*!< Configuration of SPI input ports */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250
  as60xx->Param.CR1.NOT_USED_31_24      = AS60XX_C1_NOT_USED_31_24;     /*!< Not used */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251

  as60xx->Param.CR2.GP0_DIR             = 0;                            /*!< Direction of General Purpose Port 0 */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
  as60xx->Param.CR2.GP0_SEL             = 0;                            /*!< Output Select of General Purpose Port 0 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253
  as60xx->Param.CR2.GP1_DIR             = 0;                            /*!< Direction of General Purpose Port 1 */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
  as60xx->Param.CR2.GP1_SEL             = 0;                            /*!< Output Select of General Purpose Port 1 */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  as60xx->Param.CR2.GP2_DIR             = 0;                            /*!< Direction of General Purpose Port 2 */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2256 	strb.w	r2, [r3, #598]	@ 0x256
  as60xx->Param.CR2.GP2_SEL             = 0;                            /*!< Output Select of General Purpose Port 2 */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
  as60xx->Param.CR2.GP3_DIR             = 0;                            /*!< Direction of General Purpose Port 3 */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
  as60xx->Param.CR2.GP3_SEL             = 0;                            /*!< Output Select of General Purpose Port 3 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
  as60xx->Param.CR2.GP4_DIR             = 0;                            /*!< Direction of General Purpose Port 4 */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
  as60xx->Param.CR2.GP4_SEL             = 0;                            /*!< Output Select of General Purpose Port 4 */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
  as60xx->Param.CR2.GP5_DIR             = 0;                            /*!< Direction of General Purpose Port 5 */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
  as60xx->Param.CR2.GP5_SEL             = 0;                            /*!< Output Select of General Purpose Port 5 */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  as60xx->Param.CR2.NOT_USED_31_24      = AS60XX_C2_NOT_USED_31_24;     /*!< Not used */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e

  as60xx->Param.CR3.USM_OPT             = 0;                            /*!< Mandatory setting: b00001 */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  as60xx->Param.CR3.NOT_USED_31_5       = AS60XX_C3_NOT_USED_31_5;      /*!< Not used */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  
  as60xx->Param.CR4.EF_EN_TDC_TMO       = 0;                            /*!< Error Flag Enable, TDC Timeout */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
  as60xx->Param.CR4.EF_EN_TOF_TMO       = 0;                            /*!< Error Flag Enable, TOF Timeout */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2269 	strb.w	r2, [r3, #617]	@ 0x269
  as60xx->Param.CR4.EF_EN_AM_TMO        = 0;                            /*!< Error Flag Enable, Amplitude Measurement Timeout */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
  as60xx->Param.CR4.EF_EN_TM_OC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Open Circuit */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
  as60xx->Param.CR4.EF_EN_TM_SC         = 0;                            /*!< Error Flag Enable, Temperature Measurement Short Circuit */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 226c 	strb.w	r2, [r3, #620]	@ 0x26c
  as60xx->Param.CR4.EF_EN_ZCC_ERR       = 0;                            /*!< Error Flag Enable, Zero Cross Calibration Error */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 226d 	strb.w	r2, [r3, #621]	@ 0x26d
  as60xx->Param.CR4.EF_EN_LBD_ERR       = 0;                            /*!< Error Flag Enable, Low Battery Detect Error */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
  as60xx->Param.CR4.EF_EN_USM_SQC_TMO   = 0;                            /*!< Error Flag Enable, Ultrasonic Sequence Timeout */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 226f 	strb.w	r2, [r3, #623]	@ 0x26f
  as60xx->Param.CR4.EF_EN_TM_SQC_TMO    = 0;                            /*!< Error Flag Enable, Temperature Sequence Timeout */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
  as60xx->Param.CR4.EF_EN_TSQ_TMO       = 0;                            /*!< Error Flag Enable, Task Sequencer Timeout */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
  as60xx->Param.CR4.EF_EN_I2C_ACK_ERR   = 0;                            /*!< Error Flag Enable, EEPROM Acknowledge Error */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2272 	strb.w	r2, [r3, #626]	@ 0x272
  as60xx->Param.CR4.EF_EN_CHP_ERR       = 0;                            /*!< Mandatory setting: b0 */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2273 	strb.w	r2, [r3, #627]	@ 0x273
  as60xx->Param.CR4.EF_EN_NVM_FWCU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWCU Error */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2274 	strb.w	r2, [r3, #628]	@ 0x274
  as60xx->Param.CR4.EF_EN_NVM_FWDU_ERR  = 0;                            /*!< Error Flag Enable, NVM FWDU Error */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2275 	strb.w	r2, [r3, #629]	@ 0x275
  as60xx->Param.CR4.EF_EN_NVM_FWA_ERR   = 0;                            /*!< Error Flag Enable, NVM Applied Firmware Error */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2276 	strb.w	r2, [r3, #630]	@ 0x276
  as60xx->Param.CR4.EF_EN_CPU_ERR       = 0;                            /*!< Error Flag Enable, CPU Error */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2277 	strb.w	r2, [r3, #631]	@ 0x277
  as60xx->Param.CR4.IRQ_EN_TSQ_FNS      = 0;                            /*!< Interrupt Request Enable, Task Sequencer finished */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
  as60xx->Param.CR4.IRQ_EN_TRANS_FNS    = 0;                            /*!< Interrupt Request Enable, FW Transaction finished */
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2279 	strb.w	r2, [r3, #633]	@ 0x279
  as60xx->Param.CR4.IRQ_EN_BLD_FNS      = 0;                            /*!< Interrupt Request Enable, Bootload finished */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 227a 	strb.w	r2, [r3, #634]	@ 0x27a
  as60xx->Param.CR4.IRQ_EN_CHKSUM_FNS   = 0;                            /*!< Interrupt Request Enable, Checksum generation finished */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 227b 	strb.w	r2, [r3, #635]	@ 0x27b
  as60xx->Param.CR4.IRQ_EN_FW_S         = 0;                            /*!< Interrupt Request Enable, Firmware, synchronized with task sequencer */
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
  as60xx->Param.CR4.IRQ_EN_TSQ_TO       = 0;                            /*!< Interrupt Request Enable, Firmware */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
  as60xx->Param.CR4.NOT_USED_22         = AS60XX_C4_NOT_USED_22;        /*!< Error Flag Enable, Charge Pump Error */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 227e 	strb.w	r2, [r3, #638]	@ 0x27e
  as60xx->Param.CR4.IRQ_EN_ERR_FLAG     = 0;                            /*!< Interrupt Request Enable, Error Flag */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 227f 	strb.w	r2, [r3, #639]	@ 0x27f
  as60xx->Param.CR4.NOT_USED_26_24      = AS60XX_C4_NOT_USED_26_24;     /*!< Mandatory setting: b000 */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
  as60xx->Param.CR4.CPU_REQ_EN_GPH      = 0;                            /*!< CPU Request Enable, General Purpose Handling */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
  as60xx->Param.CR4.TS_GPT_RATE         = 0;                            /*!< General Purpose Timer Rate */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282
  
  as60xx->Param.CR5.HSC_DIV_MODE        = 0;                            /*!< High Speed Clock Divider Mode */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2283 	strb.w	r2, [r3, #643]	@ 0x283
  as60xx->Param.CR5.NOT_USED_1          = AS60XX_C5_NOT_USED_1;         /*!< Mandatory setting: b0 */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
  as60xx->Param.CR5.HSC_CLK_ST          = 0;                            /*!< High-Speed Clock Settling Time */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
  as60xx->Param.CR5.NOT_USED_7_5        = AS60XX_C5_NOT_USED_7_5;       /*!< Recommended setting: b001 */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
  as60xx->Param.CR5.HSC_DIV             = 0;                            /*!< High-Speed Clock Divider */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
  as60xx->Param.CR5.HSC_RATE            = 0;                            /*!< High-Speed Clock Calibration Rate */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2288 	strb.w	r2, [r3, #648]	@ 0x288
  as60xx->Param.CR5.HSC_MODE_CPU        = 0;                            /*!< High-Speed Clock Mode CPU */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
  as60xx->Param.CR5.VM_RATE             = 0;                            /*!< VCC Voltage measurement rate */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 228a 	strb.w	r2, [r3, #650]	@ 0x28a
  as60xx->Param.CR5.LBD_TH              = 0;                            /*!< Low battery detection threshold */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 228b 	strb.w	r2, [r3, #651]	@ 0x28b
  as60xx->Param.CR5.TSV_UPD_MODE        = 0;                            /*!< Time stamp update mode */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 228c 	strb.w	r2, [r3, #652]	@ 0x28c
  as60xx->Param.CR5.BF_SEL              = 0;                            /*!< Base Frequency Select */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 228d 	strb.w	r2, [r3, #653]	@ 0x28d
  as60xx->Param.CR5.CHP_HV_SEL          = 1;         			/*!< Selection of charge pump voltage */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 228e 	strb.w	r2, [r3, #654]	@ 0x28e
  as60xx->Param.CR5.NOT_USED_28         = AS60XX_C5_NOT_USED_28;        /*!< Mandatory setting: b0 */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 228f 	strb.w	r2, [r3, #655]	@ 0x28f
  as60xx->Param.CR5.TI_PATH_SEL         = 0;                            /*!< Transducer Fire Buffer Impedance */
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  as60xx->Param.CR5.NOT_USED_31         = AS60XX_C5_NOT_USED_31;        /*!< Mandatory setting: b0 */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  as60xx->Param.CR6.MR_CT               = 0;                            /*!< Measure rate cycle time */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  as60xx->Param.CR6.TS_MCM              = 0;                            /*!< Task Sequencer Measure Cycle Mode */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
  as60xx->Param.CR6.TS_PP_T_EN          = 0;                            /*!< Enables final post processing T */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
  as60xx->Param.CR6.TS_PP_F_EN          = 0;                            /*!< Enables post processing F */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
  as60xx->Param.CR6.TS_PP_MODE          = 0;                            /*!< Post processing mode */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
  as60xx->Param.CR6.TS_CST_RATE         = 0;                            /*!< Firmware Check(sum) Timer Rate */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  as60xx->Param.CR6.TS_NVR_RATE         = 0;                            /*!< Recall Timer Rate */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  as60xx->Param.CR6.NOT_USED_25_24      = AS60XX_C6_NOT_USED_25_24;     /*!< Mandatory setting: b01 */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
  as60xx->Param.CR6.NOT_USED_30      	= 0;                            /*!< Mandatory setting: b0 */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 22a1 	strb.w	r2, [r3, #673]	@ 0x2a1
  as60xx->Param.CR6.TS_CST_MODE         = 0;                            /*!< Checksum Handling Mode */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 22a2 	strb.w	r2, [r3, #674]	@ 0x2a2

  as60xx->Param.CR7.TM_RATE             = 0;                            /*!< Temperature Measurement Rate */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  as60xx->Param.CR7.TPM_PAUSE           = 0;                            /*!< Pause time between 2 temperature measurements */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  as60xx->Param.CR7.TM_MODE             = 0;                            /*!< Temperature Measurement Mode */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  as60xx->Param.CR7.NOT_USED_16         = AS60XX_C7_NOT_USED_16;        /*!< Mandatory setting: b0 */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
  as60xx->Param.CR7.TPM_PORT_MODE       = 0;                            /*!< Temperature Measurement Port Mode */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab
  as60xx->Param.CR7.TM_PORT_ORDER       = 0;                            /*!< Temperature Measurement Port Order */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
  as60xx->Param.CR7.TPM_CLOAD_TRIM      = 0;                            /*!< Temperature Measurement Load Trim */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 22ad 	strb.w	r2, [r3, #685]	@ 0x2ad
  as60xx->Param.CR7.TPM_CYCLE_SEL       = 0;                            /*!< Temperature Measurement Cycle Select */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 22ae 	strb.w	r2, [r3, #686]	@ 0x2ae
  as60xx->Param.CR7.TPM_FAKE_NO         = 0;                            /*!< Number of Fake measurements */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 22af 	strb.w	r2, [r3, #687]	@ 0x2af
  as60xx->Param.CR7.NOT_USED_31_24      = AS60XX_C7_NOT_USED_31_24;     /*!< Mandatory setting: h00 */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0

  as60xx->Param.CR8.USM_PAUSE           = 0;                            /*!< Pause time between two ultrasonic measurements */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4
  as60xx->Param.CR8.TI_PGA_AZ_DIS       = AS60XX_C8_TI_PGA_AZ_DIS_ENABLED;             /*!< Mandatory setting: b0 */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 22b5 	strb.w	r2, [r3, #693]	@ 0x2b5
  as60xx->Param.CR8.USM_DIR_MODE        = 0;                            /*!< Ultrasonic Measurement Direction Mode */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
  as60xx->Param.CR8.USM_NOISE_MASK_WIN  = 0;                            /*!< Noise Mask Window */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  as60xx->Param.CR8.USM_TO              = 0;                            /*!< Timeout */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 22bc 	strb.w	r2, [r3, #700]	@ 0x2bc
  as60xx->Param.CR8.NOT_USED_18         = AS60XX_C8_NOT_USED_18;        /*!< Mandatory setting: b0 */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 22bd 	strb.w	r2, [r3, #701]	@ 0x2bd
  as60xx->Param.CR8.USM_RLS_MODE        = 0;                            /*!< Select mode for multihit start release */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 22be 	strb.w	r2, [r3, #702]	@ 0x2be
  as60xx->Param.CR8.ZCC_RATE            = 0;                            /*!< Zero Cross Calibration Rate */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
  as60xx->Param.CR8.NOT_USED_29_23      = 0;                            /*!< Mandatory setting: b0000000 */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  as60xx->Param.CR8.TI_PGA_CON_MODE     = AS60XX_C8_TI_PGA_CON_MODE_WITH_EXTERNAL;     /*!< Connection of PGA filter */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f8a3 22c4 	strh.w	r2, [r3, #708]	@ 0x2c4

  as60xx->Param.CR9.FBG_CLK_DIV         = 0;                            /*!< Clock divider for fire burst generator */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
  as60xx->Param.CR9.FBG_MODE            = 0;                            /*!< Fire Burst Generator Mode */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
  as60xx->Param.CR9.FBG_PHASE_INS       = 0;                            /*!< Fire Burst Generator, Phase Insertion */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
  as60xx->Param.CR9.FBG_BURST_PRE       = 0;                            /*!< Fire Burst Generator, pre-burst */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	e001      	b.n	80037f0 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x380>
 80037ec:	af0a7435 	.word	0xaf0a7435
 80037f0:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
  as60xx->Param.CR9.FBG_BURST_POST      = 0;                            /*!< Fire Burst Generator, post-burst */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
  as60xx->Param.CR9.NOT_USED_28         = AS60XX_C9_NOT_USED_28;        /*!< Mandatory setting: b0 */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
  as60xx->Param.CR9.NOT_USED_29         = AS60XX_C9_NOT_USED_29;        /*!< Mandatory setting: b1 */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 22ce 	strb.w	r2, [r3, #718]	@ 0x2ce
  as60xx->Param.CR9.TOF_HIT_MODE        = 0;                            /*!< TOF data in FDB according to Multi-Hit Mode */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 22cf 	strb.w	r2, [r3, #719]	@ 0x2cf
  as60xx->Param.CR9.NOT_USED_31         = AS60XX_C9_NOT_USED_31;        /*!< Mandatory setting: b0 */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

  as60xx->Param.CR10.NOT_USED_0         = AS60XX_CA_NOT_USED_0;         /*!< Mandatory setting: b0 */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
  as60xx->Param.CR10.TOF_HIT_START      = 0;                            /*!< Defines number of detected hits (including first hit) */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2
  as60xx->Param.CR10.TOF_HIT_IGN        = 0;                            /*!< Number of multi hits ignored between two hits taken for TDC measurement */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 22d3 	strb.w	r2, [r3, #723]	@ 0x2d3
  as60xx->Param.CR10.TOF_HIT_SUM_NO     = 0;                            /*!< Number of hits taken for sum value of TOF measurement */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 22d4 	strb.w	r2, [r3, #724]	@ 0x2d4
  as60xx->Param.CR10.TOF_HIT_END        = 0;                            /*!< TOF Hits stored to frontend data buffer */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 22d5 	strb.w	r2, [r3, #725]	@ 0x2d5
  as60xx->Param.CR10.NOT_USED_21_20     = AS60XX_CA_NOT_USED_21_20;     /*!< Mandatory setting: b00 */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
  as60xx->Param.CR10.TOF_EDGE_MODE      = 0;                            /*!< Time of Flight, edge mode */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
  as60xx->Param.CR10.TOF_RATE_INIT      = 0;                            /*!< FWD copy of initial value for TOF rate */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 22d8 	strb.w	r2, [r3, #728]	@ 0x2d8
  as60xx->Param.CR10.NOT_USED_31_30     = AS60XX_CA_NOT_USED_31_30;     /*!< Not Used */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 22d9 	strb.w	r2, [r3, #729]	@ 0x2d9

  as60xx->Param.CR11.AM_RATE            = 0;                            /*!< Amplitude measurement rate */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
  as60xx->Param.CR11.NOT_USED_3         = AS60XX_CB_NOT_USED_3;         /*!< Default setting: b0 */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 22db 	strb.w	r2, [r3, #731]	@ 0x2db
  as60xx->Param.CR11.AM_PD_END          = 0;                            /*!< Amplitude measurement, end of peak detection */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
  as60xx->Param.CR11.NOT_USED_11_9      = AS60XX_CB_NOT_USED_11_9;      /*!< Mandatory setting: b111 */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2207      	movs	r2, #7
 8003880:	f883 22dd 	strb.w	r2, [r3, #733]	@ 0x2dd
  as60xx->Param.CR11.AMC_RATE           = 0;                            /*!< Amplitude measurement calibration rate */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 22de 	strb.w	r2, [r3, #734]	@ 0x2de
  as60xx->Param.CR11.PWD_EN             = 0;                            /*!< Enables pulse width detection */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 22df 	strb.w	r2, [r3, #735]	@ 0x2df
  as60xx->Param.CR11.PGA_TRIM           = 0;                            /*!< DC gain of the PGA */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
  as60xx->Param.CR11.PGA_EN_MODE        = 0;                            /*!< PGA enable mode */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
  as60xx->Param.CR11.PGA_MODE           = 0;                            /*!< Ultrasonic measurement PGA Mode */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
  as60xx->Param.CR11.NOT_USED_22        = AS60XX_CB_NOT_USED_22;        /*!< Mandatory setting: b0 */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
  as60xx->Param.CR11.AM_PD_START_MODE   = 0;                            /*!< Peak Detection Start Mode */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  as60xx->Param.CR11.ZCD_FHL_INIT       = 0;                            /*!< FWD copy of initial value for first hit levels */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  
  as60xx->Param.CR12.TRIM1              = AS60XX_CC_TRIM1_DEFAULT;      /*!< Default setting: 0x95A0C06C */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	@ (800393c <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4cc>)
 80038c8:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

  as60xx->Param.CR13.TRIM2              = AS60XX_CD_TRIM2_DEFAULT;      /*!< Default setting: 0x40110000 */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d0>)
 80038d0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

  as60xx->Param.CR14.TRIM3              = AS60XX_CE_TRIM3_DEFAULT;      /*!< Default setting: 0x4027000F */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <_ZL30As6xx_Initialize_ConfigurationP16ScioSense_As60xx+0x4d4>)
 80038d8:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0

  as60xx->Param.CR15.TOF_RATE           = 0;                            /*!< TOF Rate */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 22f4 	strb.w	r2, [r3, #756]	@ 0x2f4
  as60xx->Param.CR15.NOT_USED_31_6      = AS60XX_D0_NOT_USED_31_6;      /*!< Not used */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

  as60xx->Param.CR16.USM_RLS_DLY_U      = 0;                            /*!< Delay window in up direction, releasing ultrasonic measurement */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
  as60xx->Param.CR16.NOT_USED_31_19     = AS60XX_D1_NOT_USED_31_19;     /*!< Not used */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  
  as60xx->Param.CR17.USM_RLS_DLY_D      = 0;                            /*!< Delay window in down direction, releasing ultrasonic measurement */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
  as60xx->Param.CR17.NOT_USED_31_19     = AS60XX_D2_NOT_USED_31_19;     /*!< Not used */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

  as60xx->Param.CR18.ZCD_FHL_U          = 0;                            /*!< First Hit Level Up */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c
  as60xx->Param.CR18.NOT_USED_31_8      = AS60XX_DA_NOT_USED_31_8;      /*!< Not used */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310

  as60xx->Param.CR19.ZCD_FHL_D          = 0;                            /*!< First Hit Level Down */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  as60xx->Param.CR19.NOT_USED_31_8      = AS60XX_DB_NOT_USED_31_8;      /*!< Not used */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  As60xx_Update_Configuration(as60xx);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe ff92 	bl	8002856 <_ZL27As60xx_Update_ConfigurationP16ScioSense_As60xx>
}
 8003932:	bf00      	nop
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bdb0      	pop	{r4, r5, r7, pc}
 800393a:	bf00      	nop
 800393c:	94a0c46c 	.word	0x94a0c46c
 8003940:	401100c4 	.word	0x401100c4
 8003944:	00a7400f 	.word	0x00a7400f

08003948 <_ZL25ScioSense_STM32_Spi_WritePvPht>:
    uint16_t            cs_pin;
    GPIO_TypeDef*       port;
} ScioSense_Stm32_Spi_Config;

static inline int8_t ScioSense_STM32_Spi_Write(void* config, uint8_t* data, const uint16_t size)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	889b      	ldrh	r3, [r3, #4]
 8003960:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	617b      	str	r3, [r7, #20]

    /* 1. Put CN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 8003968:	8b7b      	ldrh	r3, [r7, #26]
 800396a:	2200      	movs	r2, #0
 800396c:	4619      	mov	r1, r3
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f001 f9c6 	bl	8004d00 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, data, size, STM32_SPI_TIMEOUT_MS);
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	230a      	movs	r3, #10
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	69f8      	ldr	r0, [r7, #28]
 800397c:	f002 ffd4 	bl	8006928 <HAL_SPI_Transmit>
    
    /* 3. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 8003980:	8b7b      	ldrh	r3, [r7, #26]
 8003982:	2201      	movs	r2, #1
 8003984:	4619      	mov	r1, r3
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f001 f9ba 	bl	8004d00 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZL24ScioSense_STM32_Spi_ReadPvPhtS0_t>:

static inline int8_t ScioSense_STM32_Spi_Read(void* config, uint8_t* dataToWrite, const uint16_t sizeToWrite, uint8_t* dataToRead, const uint16_t sizeToRead)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	889b      	ldrh	r3, [r3, #4]
 80039b0:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	617b      	str	r3, [r7, #20]

    /* 1. Put SSN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 80039b8:	8b7b      	ldrh	r3, [r7, #26]
 80039ba:	2200      	movs	r2, #0
 80039bc:	4619      	mov	r1, r3
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f001 f99e 	bl	8004d00 <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, dataToWrite, sizeToWrite, STM32_SPI_TIMEOUT_MS);
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	230a      	movs	r3, #10
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	69f8      	ldr	r0, [r7, #28]
 80039cc:	f002 ffac 	bl	8006928 <HAL_SPI_Transmit>

    /* 3. Read the data */
    HAL_SPI_Receive(spi, dataToRead, sizeToRead, STM32_SPI_TIMEOUT_MS);
 80039d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80039d2:	230a      	movs	r3, #10
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	69f8      	ldr	r0, [r7, #28]
 80039d8:	f003 f9a8 	bl	8006d2c <HAL_SPI_Receive>
    
    /* 4. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	2201      	movs	r2, #1
 80039e0:	4619      	mov	r1, r3
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f001 f98c 	bl	8004d00 <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZL20ScioSense_STM32_Waitm>:

static inline void ScioSense_STM32_Wait(uint32_t ms)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fe8c 	bl	8004718 <HAL_Delay>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN6AS60xxD1Ev>:
    "NVM error in FWDU area",
    "NVM error in any FWA area",
    "CPU error"
};

AS60xx::~AS60xx() { }
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <_ZN6AS60xxD1Ev+0x1c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	0800cb6c 	.word	0x0800cb6c

08003a28 <_ZN6AS60xxD0Ev>:
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ffe9 	bl	8003a08 <_ZN6AS60xxD1Ev>
 8003a36:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f004 fae0 	bl	8008000 <_ZdlPvj>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <_ZN6AS60xxC1Ev>:

AS60xx::AS60xx()
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	4a06      	ldr	r2, [pc, #24]	@ (8003a70 <_ZN6AS60xxC1Ev+0x24>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	601a      	str	r2, [r3, #0]
{
    State   = AS60XX_STATE_NOT_CONNECTED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	22ff      	movs	r2, #255	@ 0xff
 8003a5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
}
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	0800cb6c 	.word	0x0800cb6c

08003a74 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

void AS60xx::begin(SPI_HandleTypeDef* spi, uint16_t cs_pin, GPIO_TypeDef* port)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	80fb      	strh	r3, [r7, #6]
    spiConfig               = { 0 };
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]
    spiConfig.spi           = spi;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
    spiConfig.cs_pin        = cs_pin;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	f8a3 2328 	strh.w	r2, [r3, #808]	@ 0x328
    spiConfig.port          = port;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c

    io.read    = ScioSense_STM32_Spi_Read;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x60>)
 8003aae:	605a      	str	r2, [r3, #4]
    io.write   = ScioSense_STM32_Spi_Write;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x64>)
 8003ab4:	609a      	str	r2, [r3, #8]
    io.wait    = ScioSense_STM32_Wait;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x68>)
 8003aba:	60da      	str	r2, [r3, #12]
    io.config  = &spiConfig;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	611a      	str	r2, [r3, #16]
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	08003997 	.word	0x08003997
 8003ad8:	08003949 	.word	0x08003949
 8003adc:	080039f3 	.word	0x080039f3

08003ae0 <_ZN6AS60xx11writeConfigEv>:
{
    return As60xx_Reset(this);
}

Result AS60xx::writeConfig()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    return As60xx_Write_Config(this);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fe35 	bl	800175c <_ZL19As60xx_Write_ConfigP16ScioSense_As60xx>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZN6AS60xx16startMeasurementEv>:

Result AS60xx::startMeasurement()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    return As60xx_Start_Measurements(this);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd fea2 	bl	8001852 <_ZL25As60xx_Start_MeasurementsP16ScioSense_As60xx>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN6AS60xx18getSupplyVoltageMvEv>:

uint32_t AS60xx::getSupplyVoltageMv()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    return As60xx_GetSupplyVoltageMv(this);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fec5 	bl	80018b4 <_ZL25As60xx_GetSupplyVoltageMvP16ScioSense_As60xx>
 8003b2a:	4603      	mov	r3, r0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZN6AS60xx28getHighSpeedClockFrequencyHzEv>:

float AS60xx::getHighSpeedClockFrequencyHz()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    return As60xx_GetHsClkFreqHz(this);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd fed5 	bl	80018f0 <_ZL21As60xx_GetHsClkFreqHzP16ScioSense_As60xx>
 8003b46:	eef0 7a40 	vmov.f32	s15, s0
}
 8003b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_ZN6AS60xx12getTimestampEv>:

As60xx_Timestamp AS60xx::getTimestamp()
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
    return As60xx_GetTimestamp(this);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fee6 	bl	8001938 <_ZL19As60xx_GetTimestampP16ScioSense_As60xx>
 8003b6c:	bf00      	nop
}
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN6AS60xx12hasErrorFlagE16As60xx_ErrorFlag>:
{
    return As60xx_GetRawErrorFlags(this);
}

bool AS60xx::hasErrorFlag(As60xx_ErrorFlag errorFlag)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
    return (bool)As60xx_HasErrorFlag(this, errorFlag);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fef4 	bl	8001978 <_ZL19As60xx_HasErrorFlagP16ScioSense_As60xx16As60xx_ErrorFlag>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN6AS60xx13errorToStringE16As60xx_ErrorFlag>:

const char* AS60xx::errorToString(As60xx_ErrorFlag errorFlag)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
    return as60xx_ErrorNames[(uint8_t)errorFlag];
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <_ZN6AS60xx13errorToStringE16As60xx_ErrorFlag+0x20>)
 8003bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <_ZN6AS60xx4initEv>:
{
    return As60xx_Write_Fw(this, FWC, FWC_Length, FWD, FWD_Length);
}

bool AS60xx::init()
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    As60xx_Init(this);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd fda0 	bl	800171a <_ZL11As60xx_InitP16ScioSense_As60xx>

    return isConnected();
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN6AS60xx11isConnectedEv>:

bool AS60xx::isConnected()
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    return (bool)As60xx_isConnected(this);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fd fd9b 	bl	8001738 <_ZL18As60xx_isConnectedP16ScioSense_As60xx>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_ZN6AS60xx6updateEv>:

AS60xx_Measure_Type AS60xx::update()
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
    return As60xx_Update(this);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd febe 	bl	80019a4 <_ZL13As60xx_UpdateP16ScioSense_As60xx>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZN6AS60xx11getSumTofUpEv>:

uint32_t AS60xx::getSumTofUp()
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofUp(this);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fef0 	bl	8001a24 <_ZL18As60xx_GetSumTofUpP16ScioSense_As60xx>
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN6AS60xx13getSumTofDownEv>:

uint32_t AS60xx::getSumTofDown()
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
    return As60xx_GetSumTofDown(this);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd feef 	bl	8001a3e <_ZL20As60xx_GetSumTofDownP16ScioSense_As60xx>
 8003c60:	4603      	mov	r3, r0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <_ZN6AS60xx22getAmountHitsForSumToFEv>:

uint32_t AS60xx::getAmountHitsForSumToF()
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
    return As60xx_GetAmountHitsForSumTof(this);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd feee 	bl	8001a58 <_ZL29As60xx_GetAmountHitsForSumTofP16ScioSense_As60xx>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <_ZN6AS60xx15calculateTimeNsEm>:

float AS60xx::calculateTimeNs(uint32_t contentTDCRegister)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
    return ((float)As60xx_CalculateTDCTimePs(this, contentTDCRegister)) / 1000.0;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd feec 	bl	8001a76 <_ZL25As60xx_CalculateTDCTimePsP16ScioSense_As60xxm>
 8003c9e:	ee07 0a90 	vmov	s15, r0
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	ee17 0a90 	vmov	r0, s15
 8003caa:	f7fc fc51 	bl	8000550 <__aeabi_f2d>
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <_ZN6AS60xx15calculateTimeNsEm+0x4c>)
 8003cb4:	f7fc fdce 	bl	8000854 <__aeabi_ddiv>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7fc ff96 	bl	8000bf0 <__aeabi_d2f>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	ee07 3a90 	vmov	s15, r3
}
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	408f4000 	.word	0x408f4000

08003cd8 <_ZN6AS60xx24getTemperatures2WireDegCEPf>:
{
    return As60xx_CalculateTDCTimePs(this, contentTDCRegister);
}

void AS60xx::getTemperatures2WireDegC(float* temperatures2Wire)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    AS60xx_CalculateTemperature2Wire(this, temperatures2Wire);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd ffb9 	bl	8001c60 <_ZL32AS60xx_CalculateTemperature2WireP16ScioSense_As60xxPf>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_ZN6AS60xx26getInternalTemperatureDegCEv>:

float AS60xx::getInternalTemperatureDegC()
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
    return AS60xx_CalculateInternalTemperature(this);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f820 	bl	8001d48 <_ZL35AS60xx_CalculateInternalTemperatureP16ScioSense_As60xx>
 8003d08:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_ZN6AS60xx25setConfigurationRegistersEPm>:
{
    As60xx_Update_Configuration(this);
}

void AS60xx::setConfigurationRegisters(uint32_t* configurationRegisters)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
    As60xx_Set_Configuration_Registers(this, configurationRegisters);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe f850 	bl	8001dcc <_ZL34As60xx_Set_Configuration_RegistersP16ScioSense_As60xxPm>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d38:	f000 fc30 	bl	800459c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d3c:	f000 f814 	bl	8003d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d40:	f000 f92e 	bl	8003fa0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003d44:	f000 f870 	bl	8003e28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003d48:	f000 f8de 	bl	8003f08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AS60xx_Example_Setup(&huart1, &hspi1);
 8003d4c:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <main+0x2c>)
 8003d4e:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <main+0x30>)
 8003d50:	f7fd f992 	bl	8001078 <AS60xx_Example_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      AS60xx_Example_Loop(&huart1, &hspi1);
 8003d54:	4902      	ldr	r1, [pc, #8]	@ (8003d60 <main+0x2c>)
 8003d56:	4803      	ldr	r0, [pc, #12]	@ (8003d64 <main+0x30>)
 8003d58:	f7fd fa32 	bl	80011c0 <AS60xx_Example_Loop>
 8003d5c:	e7fa      	b.n	8003d54 <main+0x20>
 8003d5e:	bf00      	nop
 8003d60:	20000674 	.word	0x20000674
 8003d64:	20000704 	.word	0x20000704

08003d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b094      	sub	sp, #80	@ 0x50
 8003d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d6e:	f107 0318 	add.w	r3, r7, #24
 8003d72:	2238      	movs	r2, #56	@ 0x38
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f005 f991 	bl	800909e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f002 fc96 	bl	80066c0 <HAL_RCCEx_EpodBoosterClkConfig>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003d9a:	f000 f97d 	bl	8004098 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8003d9e:	f001 f805 	bl	8004dac <HAL_PWREx_EnableEpodBooster>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <SystemClock_Config+0x44>
  {
    Error_Handler();
 8003da8:	f000 f976 	bl	8004098 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dac:	2001      	movs	r0, #1
 8003dae:	f000 ffbf 	bl	8004d30 <HAL_PWREx_ControlVoltageScaling>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003db8:	f000 f96e 	bl	8004098 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <SystemClock_Config+0xbc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 030f 	bic.w	r3, r3, #15
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <SystemClock_Config+0xbc>)
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ddc:	f107 0318 	add.w	r3, r7, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 f80f 	bl	8004e04 <HAL_RCC_OscConfig>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003dec:	f000 f954 	bl	8004098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003df0:	231f      	movs	r3, #31
 8003df2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e08:	463b      	mov	r3, r7
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fb4f 	bl	80054b0 <HAL_RCC_ClockConfig>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003e18:	f000 f93e 	bl	8004098 <Error_Handler>
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3750      	adds	r7, #80	@ 0x50
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40022000 	.word	0x40022000

08003e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e38:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e3a:	4a32      	ldr	r2, [pc, #200]	@ (8003f04 <MX_SPI1_Init+0xdc>)
 8003e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e3e:	4b30      	ldr	r3, [pc, #192]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e46:	4b2e      	ldr	r3, [pc, #184]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e4e:	2207      	movs	r2, #7
 8003e50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e52:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e58:	4b29      	ldr	r3, [pc, #164]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e60:	4b27      	ldr	r3, [pc, #156]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003e68:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e6a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e70:	4b23      	ldr	r3, [pc, #140]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e76:	4b22      	ldr	r3, [pc, #136]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7c:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e84:	2207      	movs	r2, #7
 8003e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003e94:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003e9a:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ec4:	480e      	ldr	r0, [pc, #56]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003ec6:	f002 fc3f 	bl	8006748 <HAL_SPI_Init>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8003ed0:	f000 f8e2 	bl	8004098 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003ed8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4806      	ldr	r0, [pc, #24]	@ (8003f00 <MX_SPI1_Init+0xd8>)
 8003ee8:	f003 fad5 	bl	8007496 <HAL_SPIEx_SetConfigAutonomousMode>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8003ef2:	f000 f8d1 	bl	8004098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000674 	.word	0x20000674
 8003f04:	40013000 	.word	0x40013000

08003f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f0c:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f0e:	4a23      	ldr	r2, [pc, #140]	@ (8003f9c <MX_USART1_UART_Init+0x94>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003f12:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f14:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8003f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f3e:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f44:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f4a:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f50:	4811      	ldr	r0, [pc, #68]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f52:	f003 fae1 	bl	8007518 <HAL_UART_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f5c:	f000 f89c 	bl	8004098 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f60:	2100      	movs	r1, #0
 8003f62:	480d      	ldr	r0, [pc, #52]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f64:	f003 ff82 	bl	8007e6c <HAL_UARTEx_SetTxFifoThreshold>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f6e:	f000 f893 	bl	8004098 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f72:	2100      	movs	r1, #0
 8003f74:	4808      	ldr	r0, [pc, #32]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f76:	f003 ffb7 	bl	8007ee8 <HAL_UARTEx_SetRxFifoThreshold>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f80:	f000 f88a 	bl	8004098 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f84:	4804      	ldr	r0, [pc, #16]	@ (8003f98 <MX_USART1_UART_Init+0x90>)
 8003f86:	f003 ff38 	bl	8007dfa <HAL_UARTEx_DisableFifoMode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f90:	f000 f882 	bl	8004098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000704 	.word	0x20000704
 8003f9c:	40013800 	.word	0x40013800

08003fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fbc:	4a33      	ldr	r2, [pc, #204]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fc6:	4b31      	ldr	r3, [pc, #196]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fda:	4a2c      	ldr	r2, [pc, #176]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fe4:	4b29      	ldr	r3, [pc, #164]	@ (800408c <MX_GPIO_Init+0xec>)
 8003fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	4b26      	ldr	r3, [pc, #152]	@ (800408c <MX_GPIO_Init+0xec>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff8:	4a24      	ldr	r2, [pc, #144]	@ (800408c <MX_GPIO_Init+0xec>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <MX_GPIO_Init+0xec>)
 8004004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004016:	481e      	ldr	r0, [pc, #120]	@ (8004090 <MX_GPIO_Init+0xf0>)
 8004018:	f000 fe72 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTN_Pin */
  GPIO_InitStruct.Pin = INTN_Pin;
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTN_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	4619      	mov	r1, r3
 800402e:	4818      	ldr	r0, [pc, #96]	@ (8004090 <MX_GPIO_Init+0xf0>)
 8004030:	f000 fcc4 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8004034:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	4619      	mov	r1, r3
 8004048:	4811      	ldr	r0, [pc, #68]	@ (8004090 <MX_GPIO_Init+0xf0>)
 800404a:	f000 fcb7 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 800404e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004054:	2301      	movs	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4619      	mov	r1, r3
 8004066:	480a      	ldr	r0, [pc, #40]	@ (8004090 <MX_GPIO_Init+0xf0>)
 8004068:	f000 fca8 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO5_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO5_Pin|GPIO4_Pin;
 800406c:	2330      	movs	r3, #48	@ 0x30
 800406e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4619      	mov	r1, r3
 800407e:	4805      	ldr	r0, [pc, #20]	@ (8004094 <MX_GPIO_Init+0xf4>)
 8004080:	f000 fc9c 	bl	80049bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004084:	bf00      	nop
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40030c00 	.word	0x40030c00
 8004090:	42020800 	.word	0x42020800
 8004094:	42020400 	.word	0x42020400

08004098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800409c:	b672      	cpsid	i
}
 800409e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <Error_Handler+0x8>

080040a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_MspInit+0x30>)
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b0:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <HAL_MspInit+0x30>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_MspInit+0x30>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40030c00 	.word	0x40030c00

080040d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0a8      	sub	sp, #160	@ 0xa0
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2278      	movs	r2, #120	@ 0x78
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f004 ffd0 	bl	800909e <memset>
  if(hspi->Instance==SPI1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <HAL_SPI_MspInit+0xbc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d141      	bne.n	800418c <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800410c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 800410e:	2300      	movs	r3, #0
 8004110:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fb8a 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004122:	f7ff ffb9 	bl	8004098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004126:	4b1c      	ldr	r3, [pc, #112]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 8004128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800412c:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 800412e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004132:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004136:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 8004138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800413c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 8004146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004154:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <HAL_SPI_MspInit+0xc0>)
 8004156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8004162:	23e0      	movs	r3, #224	@ 0xe0
 8004164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2302      	movs	r3, #2
 800416a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800417a:	2305      	movs	r3, #5
 800417c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004180:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004184:	4619      	mov	r1, r3
 8004186:	4805      	ldr	r0, [pc, #20]	@ (800419c <HAL_SPI_MspInit+0xc4>)
 8004188:	f000 fc18 	bl	80049bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800418c:	bf00      	nop
 800418e:	37a0      	adds	r7, #160	@ 0xa0
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40013000 	.word	0x40013000
 8004198:	40030c00 	.word	0x40030c00
 800419c:	42020000 	.word	0x42020000

080041a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b0a8      	sub	sp, #160	@ 0xa0
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	2278      	movs	r2, #120	@ 0x78
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 ff6c 	bl	800909e <memset>
  if(huart->Instance==USART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a24      	ldr	r2, [pc, #144]	@ (800425c <HAL_UART_MspInit+0xbc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d141      	bne.n	8004254 <HAL_UART_MspInit+0xb4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fb27 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80041e8:	f7ff ff56 	bl	8004098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 80041ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 80041f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041f8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80041fc:	4b18      	ldr	r3, [pc, #96]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 80041fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004210:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_UART_MspInit+0xc0>)
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004228:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800422c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004242:	2307      	movs	r3, #7
 8004244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800424c:	4619      	mov	r1, r3
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <HAL_UART_MspInit+0xc4>)
 8004250:	f000 fbb4 	bl	80049bc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004254:	bf00      	nop
 8004256:	37a0      	adds	r7, #160	@ 0xa0
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40013800 	.word	0x40013800
 8004260:	40030c00 	.word	0x40030c00
 8004264:	42020000 	.word	0x42020000

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <NMI_Handler+0x4>

08004270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <MemManage_Handler+0x4>

08004280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <BusFault_Handler+0x4>

08004288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <UsageFault_Handler+0x4>

08004290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042be:	f000 fa0b 	bl	80046d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  return 1;
 80042ca:	2301      	movs	r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_kill>:

int _kill(int pid, int sig)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042e0:	f004 ff40 	bl	8009164 <__errno>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2216      	movs	r2, #22
 80042e8:	601a      	str	r2, [r3, #0]
  return -1;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_exit>:

void _exit (int status)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ffe7 	bl	80042d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <_exit+0x12>

0800430c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e00a      	b.n	8004334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800431e:	f3af 8000 	nop.w
 8004322:	4601      	mov	r1, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	60ba      	str	r2, [r7, #8]
 800432a:	b2ca      	uxtb	r2, r1
 800432c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	dbf0      	blt.n	800431e <_read+0x12>
  }

  return len;
 800433c:	687b      	ldr	r3, [r7, #4]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e009      	b.n	800436c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	60ba      	str	r2, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	3301      	adds	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	dbf1      	blt.n	8004358 <_write+0x12>
  }
  return len;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_close>:

int _close(int file)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043a6:	605a      	str	r2, [r3, #4]
  return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_isatty>:

int _isatty(int file)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <_sbrk+0x5c>)
 80043f2:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <_sbrk+0x60>)
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004404:	4b11      	ldr	r3, [pc, #68]	@ (800444c <_sbrk+0x64>)
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <_sbrk+0x68>)
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <_sbrk+0x64>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d207      	bcs.n	8004428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004418:	f004 fea4 	bl	8009164 <__errno>
 800441c:	4603      	mov	r3, r0
 800441e:	220c      	movs	r2, #12
 8004420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e009      	b.n	800443c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004428:	4b08      	ldr	r3, [pc, #32]	@ (800444c <_sbrk+0x64>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <_sbrk+0x64>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	4a05      	ldr	r2, [pc, #20]	@ (800444c <_sbrk+0x64>)
 8004438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20030000 	.word	0x20030000
 8004448:	00000400 	.word	0x00000400
 800444c:	20000798 	.word	0x20000798
 8004450:	200008f0 	.word	0x200008f0

08004454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <SystemInit+0x20>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	4a05      	ldr	r2, [pc, #20]	@ (8004474 <SystemInit+0x20>)
 8004460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 800447e:	4b2c      	ldr	r3, [pc, #176]	@ (8004530 <SystemCoreClockUpdate+0xb8>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b08      	cmp	r3, #8
 8004488:	d034      	beq.n	80044f4 <SystemCoreClockUpdate+0x7c>
 800448a:	2b08      	cmp	r3, #8
 800448c:	d836      	bhi.n	80044fc <SystemCoreClockUpdate+0x84>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <SystemCoreClockUpdate+0x20>
 8004492:	2b04      	cmp	r3, #4
 8004494:	d02a      	beq.n	80044ec <SystemCoreClockUpdate+0x74>
 8004496:	e031      	b.n	80044fc <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <SystemCoreClockUpdate+0xb8>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00f      	beq.n	80044c8 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da03      	bge.n	80044b6 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 80044ae:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044b0:	4a21      	ldr	r2, [pc, #132]	@ (8004538 <SystemCoreClockUpdate+0xc0>)
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e002      	b.n	80044bc <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 80044b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044b8:	4a20      	ldr	r2, [pc, #128]	@ (800453c <SystemCoreClockUpdate+0xc4>)
 80044ba:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	0f5b      	lsrs	r3, r3, #29
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	e009      	b.n	80044dc <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <SystemCoreClockUpdate+0xc0>)
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80044ce:	4b18      	ldr	r3, [pc, #96]	@ (8004530 <SystemCoreClockUpdate+0xb8>)
 80044d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80044d4:	0b1b      	lsrs	r3, r3, #12
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 80044dc:	4b15      	ldr	r3, [pc, #84]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a13      	ldr	r2, [pc, #76]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044e8:	6013      	str	r3, [r2, #0]
    break;
 80044ea:	e00c      	b.n	8004506 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 80044ec:	4b11      	ldr	r3, [pc, #68]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044ee:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <SystemCoreClockUpdate+0xc8>)
 80044f0:	601a      	str	r2, [r3, #0]
    break;
 80044f2:	e008      	b.n	8004506 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 80044f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <SystemCoreClockUpdate+0xc8>)
 80044f8:	601a      	str	r2, [r3, #0]
    break;
 80044fa:	e004      	b.n	8004506 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 80044fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	601a      	str	r2, [r3, #0]
    break;
 8004504:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <SystemCoreClockUpdate+0xb8>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <SystemCoreClockUpdate+0xcc>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004514:	4b07      	ldr	r3, [pc, #28]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <SystemCoreClockUpdate+0xbc>)
 8004520:	6013      	str	r3, [r2, #0]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40030c00 	.word	0x40030c00
 8004534:	20000040 	.word	0x20000040
 8004538:	016e3600 	.word	0x016e3600
 800453c:	05b8d800 	.word	0x05b8d800
 8004540:	00f42400 	.word	0x00f42400
 8004544:	0800cb7c 	.word	0x0800cb7c

08004548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004580 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800454c:	f7ff ff82 	bl	8004454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004550:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004552:	e003      	b.n	800455c <LoopCopyDataInit>

08004554 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004556:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004558:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800455a:	3104      	adds	r1, #4

0800455c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800455c:	480a      	ldr	r0, [pc, #40]	@ (8004588 <LoopForever+0xa>)
	ldr	r3, =_edata
 800455e:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004560:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004562:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004564:	d3f6      	bcc.n	8004554 <CopyDataInit>
	ldr	r2, =_sbss
 8004566:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004568:	e002      	b.n	8004570 <LoopFillZerobss>

0800456a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800456a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800456c:	f842 3b04 	str.w	r3, [r2], #4

08004570 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004570:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <LoopForever+0x16>)
	cmp	r2, r3
 8004572:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004574:	d3f9      	bcc.n	800456a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004576:	f004 fdfb 	bl	8009170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800457a:	f7ff fbdb 	bl	8003d34 <main>

0800457e <LoopForever>:

LoopForever:
    b LoopForever
 800457e:	e7fe      	b.n	800457e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004580:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8004584:	0800cffc 	.word	0x0800cffc
	ldr	r0, =_sdata
 8004588:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800458c:	20000214 	.word	0x20000214
	ldr	r2, =_sbss
 8004590:	20000214 	.word	0x20000214
	ldr	r3, = _ebss
 8004594:	200008ec 	.word	0x200008ec

08004598 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004598:	e7fe      	b.n	8004598 <ADC1_IRQHandler>
	...

0800459c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a0:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <HAL_Init+0x3c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <HAL_Init+0x3c>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ac:	2003      	movs	r0, #3
 80045ae:	f000 f966 	bl	800487e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80045b2:	f7ff ff61 	bl	8004478 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80045b6:	2004      	movs	r0, #4
 80045b8:	f000 f9a8 	bl	800490c <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045bc:	200f      	movs	r0, #15
 80045be:	f000 f80d 	bl	80045dc <HAL_InitTick>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_Init+0x30>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e002      	b.n	80045d2 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80045cc:	f7ff fd6a 	bl	80040a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40022000 	.word	0x40022000

080045dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80045e8:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <HAL_InitTick+0xe8>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e062      	b.n	80046ba <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_InitTick+0xec>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d10c      	bne.n	800461a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004600:	4b32      	ldr	r3, [pc, #200]	@ (80046cc <HAL_InitTick+0xf0>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800460e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e03d      	b.n	8004696 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800461a:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <HAL_InitTick+0xf4>)
 800461c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004620:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004624:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800462c:	d025      	beq.n	800467a <HAL_InitTick+0x9e>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004634:	d82e      	bhi.n	8004694 <HAL_InitTick+0xb8>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_InitTick+0x6a>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004642:	d00d      	beq.n	8004660 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8004644:	e026      	b.n	8004694 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8004646:	4b21      	ldr	r3, [pc, #132]	@ (80046cc <HAL_InitTick+0xf0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <HAL_InitTick+0xe8>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004654:	fbb3 f3f1 	udiv	r3, r3, r1
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	60fb      	str	r3, [r7, #12]
        break;
 800465e:	e01a      	b.n	8004696 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004660:	4b18      	ldr	r3, [pc, #96]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466a:	fbb3 f3f2 	udiv	r3, r3, r2
 800466e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	60fb      	str	r3, [r7, #12]
        break;
 8004678:	e00d      	b.n	8004696 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <HAL_InitTick+0xe8>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004684:	fbb3 f3f2 	udiv	r3, r3, r2
 8004688:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	60fb      	str	r3, [r7, #12]
        break;
 8004692:	e000      	b.n	8004696 <HAL_InitTick+0xba>
        break;
 8004694:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f916 	bl	80048c8 <HAL_SYSTICK_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e009      	b.n	80046ba <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a6:	2200      	movs	r2, #0
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	f000 f8f1 	bl	8004894 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80046b2:	4a08      	ldr	r2, [pc, #32]	@ (80046d4 <HAL_InitTick+0xf8>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000048 	.word	0x20000048
 80046c8:	e000e010 	.word	0xe000e010
 80046cc:	20000040 	.word	0x20000040
 80046d0:	40030c00 	.word	0x40030c00
 80046d4:	20000044 	.word	0x20000044

080046d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_IncTick+0x20>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_IncTick+0x24>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	4a04      	ldr	r2, [pc, #16]	@ (80046fc <HAL_IncTick+0x24>)
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000048 	.word	0x20000048
 80046fc:	2000079c 	.word	0x2000079c

08004700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return uwTick;
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_GetTick+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000079c 	.word	0x2000079c

08004718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff ffee 	bl	8004700 <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d005      	beq.n	800473e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <HAL_Delay+0x44>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800473e:	bf00      	nop
 8004740:	f7ff ffde 	bl	8004700 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d8f7      	bhi.n	8004740 <HAL_Delay+0x28>
  {
  }
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000048 	.word	0x20000048

08004760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800478c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004792:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	60d3      	str	r3, [r2, #12]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0307 	and.w	r3, r3, #7
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db0a      	blt.n	80047ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	490c      	ldr	r1, [pc, #48]	@ (8004810 <__NVIC_SetPriority+0x4c>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	440b      	add	r3, r1
 80047e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ec:	e00a      	b.n	8004804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4908      	ldr	r1, [pc, #32]	@ (8004814 <__NVIC_SetPriority+0x50>)
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3b04      	subs	r3, #4
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	440b      	add	r3, r1
 8004802:	761a      	strb	r2, [r3, #24]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000e100 	.word	0xe000e100
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f1c3 0307 	rsb	r3, r3, #7
 8004832:	2b04      	cmp	r3, #4
 8004834:	bf28      	it	cs
 8004836:	2304      	movcs	r3, #4
 8004838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3304      	adds	r3, #4
 800483e:	2b06      	cmp	r3, #6
 8004840:	d902      	bls.n	8004848 <NVIC_EncodePriority+0x30>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b03      	subs	r3, #3
 8004846:	e000      	b.n	800484a <NVIC_EncodePriority+0x32>
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	401a      	ands	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	43d9      	mvns	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	4313      	orrs	r3, r2
         );
}
 8004872:	4618      	mov	r0, r3
 8004874:	3724      	adds	r7, #36	@ 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff6a 	bl	8004760 <__NVIC_SetPriorityGrouping>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a2:	f7ff ff81 	bl	80047a8 <__NVIC_GetPriorityGrouping>
 80048a6:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	6978      	ldr	r0, [r7, #20]
 80048ae:	f7ff ffb3 	bl	8004818 <NVIC_EncodePriority>
 80048b2:	4602      	mov	r2, r0
 80048b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff82 	bl	80047c4 <__NVIC_SetPriority>
}
 80048c0:	bf00      	nop
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d8:	d301      	bcc.n	80048de <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80048da:	2301      	movs	r3, #1
 80048dc:	e00d      	b.n	80048fa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80048de:	4a0a      	ldr	r2, [pc, #40]	@ (8004908 <HAL_SYSTICK_Config+0x40>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80048e6:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <HAL_SYSTICK_Config+0x40>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_SYSTICK_Config+0x40>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a05      	ldr	r2, [pc, #20]	@ (8004908 <HAL_SYSTICK_Config+0x40>)
 80048f2:	f043 0303 	orr.w	r3, r3, #3
 80048f6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000e010 	.word	0xe000e010

0800490c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d844      	bhi.n	80049a4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800491a:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004943 	.word	0x08004943
 8004924:	08004961 	.word	0x08004961
 8004928:	08004983 	.word	0x08004983
 800492c:	080049a5 	.word	0x080049a5
 8004930:	08004935 	.word	0x08004935
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004934:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	6013      	str	r3, [r2, #0]
      break;
 8004940:	e031      	b.n	80049a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004942:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800494e:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004950:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004954:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004956:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800495a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800495e:	e022      	b.n	80049a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004960:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800496c:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800496e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004972:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004976:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004978:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800497c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004980:	e011      	b.n	80049a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0b      	ldr	r2, [pc, #44]	@ (80049b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800498e:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004990:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004994:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004998:	4a07      	ldr	r2, [pc, #28]	@ (80049b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800499a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800499e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80049a2:	e000      	b.n	80049a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80049a4:	bf00      	nop
  }
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000e010 	.word	0xe000e010
 80049b8:	40030c00 	.word	0x40030c00

080049bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049ca:	e162      	b.n	8004c92 <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8154 	beq.w	8004c8c <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d005      	beq.n	80049fc <HAL_GPIO_Init+0x40>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d130      	bne.n	8004a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2203      	movs	r2, #3
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a32:	2201      	movs	r2, #1
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0201 	and.w	r2, r3, #1
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d109      	bne.n	8004a7e <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d11b      	bne.n	8004aae <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d017      	beq.n	8004aae <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d123      	bne.n	8004b02 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	08da      	lsrs	r2, r3, #3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3208      	adds	r2, #8
 8004afc:	6939      	ldr	r1, [r7, #16]
 8004afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80a4 	beq.w	8004c8c <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004b44:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a52      	ldr	r2, [pc, #328]	@ (8004cb4 <HAL_GPIO_Init+0x2f8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d025      	beq.n	8004bbc <HAL_GPIO_Init+0x200>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a51      	ldr	r2, [pc, #324]	@ (8004cb8 <HAL_GPIO_Init+0x2fc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01f      	beq.n	8004bb8 <HAL_GPIO_Init+0x1fc>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a50      	ldr	r2, [pc, #320]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d019      	beq.n	8004bb4 <HAL_GPIO_Init+0x1f8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a4f      	ldr	r2, [pc, #316]	@ (8004cc0 <HAL_GPIO_Init+0x304>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1f4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a4e      	ldr	r2, [pc, #312]	@ (8004cc4 <HAL_GPIO_Init+0x308>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1f0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a4d      	ldr	r2, [pc, #308]	@ (8004cc8 <HAL_GPIO_Init+0x30c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1ec>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8004ccc <HAL_GPIO_Init+0x310>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1e8>
 8004ba0:	2307      	movs	r3, #7
 8004ba2:	e00c      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	e00a      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	e008      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004bac:	2304      	movs	r3, #4
 8004bae:	e006      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e004      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e002      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_GPIO_Init+0x202>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	f002 0203 	and.w	r2, r2, #3
 8004bc4:	00d2      	lsls	r2, r2, #3
 8004bc6:	4093      	lsls	r3, r2
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004bce:	4938      	ldr	r1, [pc, #224]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bdc:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c02:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004c0a:	4b29      	ldr	r3, [pc, #164]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c30:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c38:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c5c:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c62:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c86:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f47f ae95 	bne.w	80049cc <HAL_GPIO_Init+0x10>
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40032000 	.word	0x40032000
 8004cb4:	42020000 	.word	0x42020000
 8004cb8:	42020400 	.word	0x42020400
 8004cbc:	42020800 	.word	0x42020800
 8004cc0:	42020c00 	.word	0x42020c00
 8004cc4:	42021000 	.word	0x42021000
 8004cc8:	42021800 	.word	0x42021800
 8004ccc:	42021c00 	.word	0x42021c00

08004cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e001      	b.n	8004cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d10:	787b      	ldrb	r3, [r7, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d1c:	e002      	b.n	8004d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f023 0303 	bic.w	r3, r3, #3
 8004d40:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8004d4a:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8004d50:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2232      	movs	r2, #50	@ 0x32
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	0c9b      	lsrs	r3, r3, #18
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004d6c:	e002      	b.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d002      	beq.n	8004d88 <HAL_PWREx_ControlVoltageScaling+0x58>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f2      	bne.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e000      	b.n	8004d94 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40030800 	.word	0x40030800
 8004da4:	20000040 	.word	0x20000040
 8004da8:	431bde83 	.word	0x431bde83

08004dac <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8004db2:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dbc:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dbe:	f7ff fc9f 	bl	8004700 <HAL_GetTick>
 8004dc2:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004dc4:	e00f      	b.n	8004de6 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8004dc6:	f7ff fc9b 	bl	8004700 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d908      	bls.n	8004de6 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de0:	d001      	beq.n	8004de6 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e007      	b.n	8004df6 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004de6:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004df2:	d1e8      	bne.n	8004dc6 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40030800 	.word	0x40030800

08004e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e340      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e16:	4b98      	ldr	r3, [pc, #608]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ad 	beq.w	8004f88 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 80a5 	bne.w	8004f88 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e32a      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04f      	beq.n	8004eea <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e52:	d106      	bne.n	8004e62 <HAL_RCC_OscConfig+0x5e>
 8004e54:	4b88      	ldr	r3, [pc, #544]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a87      	ldr	r2, [pc, #540]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	e02f      	b.n	8004ec2 <HAL_RCC_OscConfig+0xbe>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e6a:	d10c      	bne.n	8004e86 <HAL_RCC_OscConfig+0x82>
 8004e6c:	4b82      	ldr	r3, [pc, #520]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a81      	ldr	r2, [pc, #516]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b7f      	ldr	r3, [pc, #508]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a7e      	ldr	r2, [pc, #504]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e01d      	b.n	8004ec2 <HAL_RCC_OscConfig+0xbe>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCC_OscConfig+0xa6>
 8004e90:	4b79      	ldr	r3, [pc, #484]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a78      	ldr	r2, [pc, #480]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e96:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b76      	ldr	r3, [pc, #472]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a75      	ldr	r2, [pc, #468]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e00b      	b.n	8004ec2 <HAL_RCC_OscConfig+0xbe>
 8004eaa:	4b73      	ldr	r3, [pc, #460]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a72      	ldr	r2, [pc, #456]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b70      	ldr	r3, [pc, #448]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6f      	ldr	r2, [pc, #444]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7ff fc1d 	bl	8004700 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eca:	f7ff fc19 	bl	8004700 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	@ 0x64
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e2dd      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004edc:	4b66      	ldr	r3, [pc, #408]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0xc6>
 8004ee8:	e04e      	b.n	8004f88 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0xfe>
 8004ef4:	4b60      	ldr	r3, [pc, #384]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5f      	ldr	r2, [pc, #380]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e02f      	b.n	8004f62 <HAL_RCC_OscConfig+0x15e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0a:	d10c      	bne.n	8004f26 <HAL_RCC_OscConfig+0x122>
 8004f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a59      	ldr	r2, [pc, #356]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b57      	ldr	r3, [pc, #348]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a56      	ldr	r2, [pc, #344]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e01d      	b.n	8004f62 <HAL_RCC_OscConfig+0x15e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x146>
 8004f30:	4b51      	ldr	r3, [pc, #324]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a50      	ldr	r2, [pc, #320]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f36:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a4d      	ldr	r2, [pc, #308]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x15e>
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4b48      	ldr	r3, [pc, #288]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a47      	ldr	r2, [pc, #284]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7ff fbcd 	bl	8004700 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6a:	f7ff fbc9 	bl	8004700 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b64      	cmp	r3, #100	@ 0x64
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e28d      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d054      	beq.n	800503e <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d110      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e278      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4b34      	ldr	r3, [pc, #208]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	4930      	ldr	r1, [pc, #192]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
 8004fba:	e040      	b.n	800503e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d023      	beq.n	800500c <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004fca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7ff fb96 	bl	8004700 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd8:	f7ff fb92 	bl	8004700 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e256      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fea:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	491c      	ldr	r1, [pc, #112]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8005006:	4313      	orrs	r3, r2
 8005008:	610b      	str	r3, [r1, #16]
 800500a:	e018      	b.n	800503e <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500c:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8005012:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7ff fb72 	bl	8004700 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005020:	f7ff fb6e 	bl	8004700 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e232      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005032:	4b11      	ldr	r3, [pc, #68]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	2b00      	cmp	r3, #0
 8005048:	d038      	beq.n	80050bc <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01b      	beq.n	800508a <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <HAL_RCC_OscConfig+0x274>)
 8005058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800505c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7ff fb4f 	bl	8004700 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005066:	f7ff fb4b 	bl	8004700 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d903      	bls.n	800507c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e20f      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
 8005078:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800507c:	4ba0      	ldr	r3, [pc, #640]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ee      	beq.n	8005066 <HAL_RCC_OscConfig+0x262>
 8005088:	e018      	b.n	80050bc <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800508a:	4b9d      	ldr	r3, [pc, #628]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a9c      	ldr	r2, [pc, #624]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005094:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7ff fb33 	bl	8004700 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509e:	f7ff fb2f 	bl	8004700 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1f3      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050b0:	4b93      	ldr	r3, [pc, #588]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a7 	beq.w	8005218 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80050ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80050d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d110      	bne.n	80050fe <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	4b88      	ldr	r3, [pc, #544]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e2:	4a87      	ldr	r2, [pc, #540]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050ec:	4b84      	ldr	r3, [pc, #528]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80050ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050fa:	2301      	movs	r3, #1
 80050fc:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050fe:	4b81      	ldr	r3, [pc, #516]	@ (8005304 <HAL_RCC_OscConfig+0x500>)
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	4a80      	ldr	r2, [pc, #512]	@ (8005304 <HAL_RCC_OscConfig+0x500>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d051      	beq.n	80051b6 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8005112:	4b7b      	ldr	r3, [pc, #492]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005114:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800511c:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	4313      	orrs	r3, r2
 8005126:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8005128:	4a75      	ldr	r2, [pc, #468]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7ff fae6 	bl	8004700 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7ff fae2 	bl	8004700 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1a4      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	4b6c      	ldr	r3, [pc, #432]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005150:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ed      	beq.n	8005138 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7ff fac9 	bl	8004700 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e18b      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005180:	4b5f      	ldr	r3, [pc, #380]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005182:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ed      	beq.n	800516a <HAL_RCC_OscConfig+0x366>
 800518e:	e038      	b.n	8005202 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7ff fab6 	bl	8004700 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e178      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051a6:	4b56      	ldr	r3, [pc, #344]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ed      	bne.n	8005190 <HAL_RCC_OscConfig+0x38c>
 80051b4:	e025      	b.n	8005202 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 80051b6:	4b52      	ldr	r3, [pc, #328]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051bc:	4a50      	ldr	r2, [pc, #320]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051be:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 80051c2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051cc:	4a4c      	ldr	r2, [pc, #304]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051ce:	f023 0304 	bic.w	r3, r3, #4
 80051d2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7ff fa93 	bl	8004700 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7ff fa8f 	bl	8004700 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e151      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f4:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80051f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ed      	bne.n	80051de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005202:	7efb      	ldrb	r3, [r7, #27]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005208:	4b3d      	ldr	r3, [pc, #244]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520e:	4a3c      	ldr	r2, [pc, #240]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005210:	f023 0304 	bic.w	r3, r3, #4
 8005214:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d078      	beq.n	8005316 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8005224:	4b36      	ldr	r3, [pc, #216]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005226:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800522a:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d050      	beq.n	80052d6 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	429a      	cmp	r2, r3
 8005240:	d023      	beq.n	800528a <HAL_RCC_OscConfig+0x486>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8005254:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7ff fa50 	bl	8004700 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005264:	f7ff fa4c 	bl	8004700 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b14      	cmp	r3, #20
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e110      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005276:	4b22      	ldr	r3, [pc, #136]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005278:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ef      	bne.n	8005264 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8005284:	2001      	movs	r0, #1
 8005286:	f7ff fa47 	bl	8004718 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	4313      	orrs	r3, r2
 800529a:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80052a4:	4a16      	ldr	r2, [pc, #88]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7ff fa28 	bl	8004700 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b4:	f7ff fa24 	bl	8004700 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b14      	cmp	r3, #20
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0e8      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80052c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ef      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4b0>
 80052d4:	e01f      	b.n	8005316 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80052de:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <HAL_RCC_OscConfig+0x4fc>)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7ff fa0b 	bl	8004700 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80052ec:	e00c      	b.n	8005308 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ee:	f7ff fa07 	bl	8004700 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b14      	cmp	r3, #20
 80052fa:	d905      	bls.n	8005308 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e0cb      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
 8005300:	40030c00 	.word	0x40030c00
 8005304:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005308:	4b65      	ldr	r3, [pc, #404]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800530a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1eb      	bne.n	80052ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d068      	beq.n	80053f4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b1      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8005334:	4b5a      	ldr	r3, [pc, #360]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a59      	ldr	r2, [pc, #356]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e03b      	b.n	80053be <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8005346:	4b56      	ldr	r3, [pc, #344]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0305 	and.w	r3, r3, #5
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0a0      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8005356:	4b52      	ldr	r3, [pc, #328]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800535e:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	431a      	orrs	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4313      	orrs	r3, r2
 800536e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005372:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8005374:	4a4a      	ldr	r2, [pc, #296]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005380:	f000 f982 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	4945      	ldr	r1, [pc, #276]	@ (80054a4 <HAL_RCC_OscConfig+0x6a0>)
 8005390:	5ccb      	ldrb	r3, [r1, r3]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	4a44      	ldr	r2, [pc, #272]	@ (80054a8 <HAL_RCC_OscConfig+0x6a4>)
 8005398:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800539a:	4b44      	ldr	r3, [pc, #272]	@ (80054ac <HAL_RCC_OscConfig+0x6a8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff f91c 	bl	80045dc <HAL_InitTick>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e074      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 80053ae:	4b3c      	ldr	r3, [pc, #240]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3b      	ldr	r2, [pc, #236]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 80053ba:	2304      	movs	r3, #4
 80053bc:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7ff f99f 	bl	8004700 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80053c4:	e00f      	b.n	80053e6 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053c6:	f7ff f99b 	bl	8004700 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d908      	bls.n	80053e6 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80053d4:	4b32      	ldr	r3, [pc, #200]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d001      	beq.n	80053e6 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e058      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80053e6:	4b2e      	ldr	r3, [pc, #184]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1e8      	bne.n	80053c6 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d04a      	beq.n	8005496 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a24      	ldr	r2, [pc, #144]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800540e:	f023 0308 	bic.w	r3, r3, #8
 8005412:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e022      	b.n	8005460 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 800541a:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0318 	and.w	r3, r3, #24
 8005422:	2b08      	cmp	r3, #8
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e036      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 800542a:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8005432:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543c:	4313      	orrs	r3, r2
 800543e:	08da      	lsrs	r2, r3, #3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4313      	orrs	r3, r2
 8005444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005448:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 800544a:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8005450:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a12      	ldr	r2, [pc, #72]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005456:	f043 0308 	orr.w	r3, r3, #8
 800545a:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 800545c:	2310      	movs	r3, #16
 800545e:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7ff f94e 	bl	8004700 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005466:	e00f      	b.n	8005488 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005468:	f7ff f94a 	bl	8004700 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d908      	bls.n	8005488 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005476:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e007      	b.n	8005498 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_OscConfig+0x69c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d1e8      	bne.n	8005468 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40030c00 	.word	0x40030c00
 80054a4:	0800cb7c 	.word	0x0800cb7c
 80054a8:	20000040 	.word	0x20000040
 80054ac:	20000044 	.word	0x20000044

080054b0 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0d2      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d910      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b68      	ldr	r3, [pc, #416]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 020f 	bic.w	r2, r3, #15
 80054da:	4966      	ldr	r1, [pc, #408]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b64      	ldr	r3, [pc, #400]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0ba      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d040      	beq.n	8005582 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8005500:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d106      	bne.n	800551c <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d113      	bne.n	8005540 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0a6      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d106      	bne.n	8005532 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d108      	bne.n	8005540 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e09b      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e094      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005540:	4b4d      	ldr	r3, [pc, #308]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f023 0203 	bic.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	494a      	ldr	r1, [pc, #296]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 800554e:	4313      	orrs	r3, r2
 8005550:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005552:	f7ff f8d5 	bl	8004700 <HAL_GetTick>
 8005556:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005558:	e00a      	b.n	8005570 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555a:	f7ff f8d1 	bl	8004700 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e07c      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005570:	4b41      	ldr	r3, [pc, #260]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f003 020c 	and.w	r2, r3, #12
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	429a      	cmp	r2, r3
 8005580:	d1eb      	bne.n	800555a <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8005582:	4b3d      	ldr	r3, [pc, #244]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 030f 	bic.w	r3, r3, #15
 800559e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80055aa:	2301      	movs	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c0:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80055cc:	2301      	movs	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80055e2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80055f0:	2301      	movs	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 80055fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 800560c:	4a1a      	ldr	r2, [pc, #104]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005614:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d210      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 020f 	bic.w	r2, r3, #15
 800562a:	4912      	ldr	r1, [pc, #72]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e012      	b.n	800566a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005644:	f000 f820 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	490a      	ldr	r1, [pc, #40]	@ (800567c <HAL_RCC_ClockConfig+0x1cc>)
 8005654:	5ccb      	ldrb	r3, [r1, r3]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <HAL_RCC_ClockConfig+0x1d0>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800565e:	4b09      	ldr	r3, [pc, #36]	@ (8005684 <HAL_RCC_ClockConfig+0x1d4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe ffba 	bl	80045dc <HAL_InitTick>
 8005668:	4603      	mov	r3, r0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40022000 	.word	0x40022000
 8005678:	40030c00 	.word	0x40030c00
 800567c:	0800cb7c 	.word	0x0800cb7c
 8005680:	20000040 	.word	0x20000040
 8005684:	20000044 	.word	0x20000044

08005688 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 800568e:	4b1e      	ldr	r3, [pc, #120]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x80>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d102      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 800569e:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <HAL_RCC_GetSysClockFreq+0x84>)
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	e029      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d102      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80056aa:	4b18      	ldr	r3, [pc, #96]	@ (800570c <HAL_RCC_GetSysClockFreq+0x84>)
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e023      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 80056b0:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x80>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00d      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da02      	bge.n	80056cc <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 80056c6:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x88>)
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	e001      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 80056cc:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x8c>)
 80056ce:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	0f5b      	lsrs	r3, r3, #29
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	e008      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 80056dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x88>)
 80056de:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80056e0:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x80>)
 80056e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80056e6:	0b1b      	lsrs	r3, r3, #12
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 80056f8:	683b      	ldr	r3, [r7, #0]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40030c00 	.word	0x40030c00
 800570c:	00f42400 	.word	0x00f42400
 8005710:	016e3600 	.word	0x016e3600
 8005714:	05b8d800 	.word	0x05b8d800

08005718 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800571c:	f7ff ffb4 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <HAL_RCC_GetHCLKFreq+0x28>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	4906      	ldr	r1, [pc, #24]	@ (8005744 <HAL_RCC_GetHCLKFreq+0x2c>)
 800572c:	5ccb      	ldrb	r3, [r1, r3]
 800572e:	fa22 f303 	lsr.w	r3, r2, r3
 8005732:	4a05      	ldr	r2, [pc, #20]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x30>)
 8005734:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005736:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x30>)
 8005738:	681b      	ldr	r3, [r3, #0]
}
 800573a:	4618      	mov	r0, r3
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40030c00 	.word	0x40030c00
 8005744:	0800cb7c 	.word	0x0800cb7c
 8005748:	20000040 	.word	0x20000040

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005750:	f7ff ffe2 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4903      	ldr	r1, [pc, #12]	@ (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40030c00 	.word	0x40030c00
 8005770:	0800cb8c 	.word	0x0800cb8c

08005774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005778:	f7ff ffce 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4903      	ldr	r1, [pc, #12]	@ (8005798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40030c00 	.word	0x40030c00
 8005798:	0800cb8c 	.word	0x0800cb8c

0800579c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80057a0:	f7ff ffba 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <HAL_RCC_GetPCLK3Freq+0x20>)
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4903      	ldr	r1, [pc, #12]	@ (80057c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40030c00 	.word	0x40030c00
 80057c0:	0800cb8c 	.word	0x0800cb8c

080057c4 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 80057ca:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <HAL_RCC_GetMSIKFreq+0x60>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00f      	beq.n	80057fa <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 80057ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <HAL_RCC_GetMSIKFreq+0x64>)
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	e00b      	b.n	800580c <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 80057f4:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <HAL_RCC_GetMSIKFreq+0x68>)
 80057f6:	607b      	str	r3, [r7, #4]
 80057f8:	e008      	b.n	800580c <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <HAL_RCC_GetMSIKFreq+0x64>)
 80057fc:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 80057fe:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <HAL_RCC_GetMSIKFreq+0x60>)
 8005800:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	607b      	str	r3, [r7, #4]

  return tmp;
 8005816:	687b      	ldr	r3, [r7, #4]
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40030c00 	.word	0x40030c00
 8005828:	016e3600 	.word	0x016e3600
 800582c:	05b8d800 	.word	0x05b8d800

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005844:	4bad      	ldr	r3, [pc, #692]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005846:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800584a:	f023 0201 	bic.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	49aa      	ldr	r1, [pc, #680]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005866:	4ba5      	ldr	r3, [pc, #660]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005868:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800586c:	f023 0204 	bic.w	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	49a1      	ldr	r1, [pc, #644]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005888:	4b9c      	ldr	r3, [pc, #624]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800588a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800588e:	f023 0210 	bic.w	r2, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4999      	ldr	r1, [pc, #612]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058aa:	4b94      	ldr	r3, [pc, #592]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4990      	ldr	r1, [pc, #576]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 80058cc:	4b8b      	ldr	r3, [pc, #556]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	4988      	ldr	r1, [pc, #544]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ee:	4b83      	ldr	r3, [pc, #524]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80058f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	497f      	ldr	r1, [pc, #508]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005910:	4b7a      	ldr	r3, [pc, #488]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005912:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4977      	ldr	r1, [pc, #476]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8005932:	4b72      	ldr	r3, [pc, #456]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005934:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005938:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	496e      	ldr	r1, [pc, #440]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8005954:	4b69      	ldr	r3, [pc, #420]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005956:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800595a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	4966      	ldr	r1, [pc, #408]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005976:	4b61      	ldr	r3, [pc, #388]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005978:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800597c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	495d      	ldr	r1, [pc, #372]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8005998:	4b58      	ldr	r3, [pc, #352]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800599a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800599e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	4955      	ldr	r1, [pc, #340]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80059ba:	4b50      	ldr	r3, [pc, #320]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80059c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	494c      	ldr	r1, [pc, #304]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059dc:	4b47      	ldr	r3, [pc, #284]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80059e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ea:	4944      	ldr	r1, [pc, #272]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 80059fe:	4b3f      	ldr	r3, [pc, #252]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0c:	493b      	ldr	r1, [pc, #236]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8005a20:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	4933      	ldr	r1, [pc, #204]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8005a42:	4b2e      	ldr	r3, [pc, #184]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	492a      	ldr	r1, [pc, #168]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8005a64:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a66:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005a6a:	f023 0203 	bic.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	4922      	ldr	r1, [pc, #136]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8005a86:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005a8c:	f023 0208 	bic.w	r2, r3, #8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a94:	4919      	ldr	r1, [pc, #100]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa8:	4b14      	ldr	r3, [pc, #80]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005aaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005aae:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab6:	4911      	ldr	r1, [pc, #68]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aca:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005acc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005ad0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad8:	4908      	ldr	r1, [pc, #32]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d019      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005aee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005af2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	e002      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005afa:	bf00      	nop
 8005afc:	40030c00 	.word	0x40030c00
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	4980      	ldr	r1, [pc, #512]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8005b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b10:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b18:	497a      	ldr	r1, [pc, #488]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8005b2c:	4b75      	ldr	r3, [pc, #468]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3a:	4972      	ldr	r1, [pc, #456]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8005b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b50:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005b54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5c:	4969      	ldr	r1, [pc, #420]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b70:	4b64      	ldr	r3, [pc, #400]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b76:	f023 0203 	bic.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b7e:	4961      	ldr	r1, [pc, #388]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b92:	4b5c      	ldr	r3, [pc, #368]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b98:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba0:	4958      	ldr	r1, [pc, #352]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8005bb4:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc2:	4950      	ldr	r1, [pc, #320]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be4:	4947      	ldr	r1, [pc, #284]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f280 8082 	bge.w	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8005bf6:	4b43      	ldr	r3, [pc, #268]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bf8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005bfc:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bfe:	4b41      	ldr	r3, [pc, #260]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c00:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c08:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d072      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8005c14:	2300      	movs	r3, #0
 8005c16:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8005c18:	4b3a      	ldr	r3, [pc, #232]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d110      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c2c:	4a35      	ldr	r2, [pc, #212]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c36:	4b33      	ldr	r3, [pc, #204]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c44:	2301      	movs	r3, #1
 8005c46:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005c48:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005c60:	4a28      	ldr	r2, [pc, #160]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c66:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c6a:	4b26      	ldr	r3, [pc, #152]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005c70:	4a24      	ldr	r2, [pc, #144]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c76:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c80:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8005c98:	4a1a      	ldr	r2, [pc, #104]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01c      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fe fd29 	bl	8004700 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005cb0:	e011      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fe fd25 	bl	8004700 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d908      	bls.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005cc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e012      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005cd8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0e6      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ce4:	7efb      	ldrb	r3, [r7, #27]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cf0:	4a04      	ldr	r2, [pc, #16]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40030c00 	.word	0x40030c00
 8005d08:	40030800 	.word	0x40030800

08005d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d1e:	f000 8469 	beq.w	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d28:	f200 84a0 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d32:	f000 8420 	beq.w	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d3c:	f200 8496 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d46:	f000 83d3 	beq.w	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d50:	f200 848c 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d5a:	f000 83b8 	beq.w	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d64:	f200 8482 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d6e:	f000 8377 	beq.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d78:	f200 8478 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d82:	f000 835c 	beq.w	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d8c:	f200 846e 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d96:	f000 8326 	beq.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da0:	f200 8464 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005daa:	f000 82db 	beq.w	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db4:	f200 845a 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005dbe:	f000 82b9 	beq.w	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005dc8:	f200 8450 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dd2:	f000 828c 	beq.w	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ddc:	f200 8446 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de6:	f000 8271 	beq.w	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df0:	f200 843c 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfa:	f000 8246 	beq.w	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	f200 8432 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e0e:	f000 8228 	beq.w	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e18:	f200 8428 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e22:	f000 81ef 	beq.w	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2c:	f200 841e 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e36:	f000 81ce 	beq.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e40:	f200 8414 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e4a:	f000 8189 	beq.w	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e54:	f200 840a 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5e:	f000 816e 	beq.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e68:	f200 8400 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e72:	f000 8121 	beq.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7c:	f200 83f6 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e86:	f000 8106 	beq.w	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e90:	f200 83ec 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	f000 80ec 	beq.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ea0:	f200 83e4 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d84c      	bhi.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 83dd 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	2b1f      	cmp	r3, #31
 8005eb8:	f200 83d8 	bhi.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005f4f 	.word	0x08005f4f
 8005ec8:	08005f7f 	.word	0x08005f7f
 8005ecc:	0800666d 	.word	0x0800666d
 8005ed0:	08005faf 	.word	0x08005faf
 8005ed4:	0800666d 	.word	0x0800666d
 8005ed8:	0800666d 	.word	0x0800666d
 8005edc:	0800666d 	.word	0x0800666d
 8005ee0:	08005fdf 	.word	0x08005fdf
 8005ee4:	0800666d 	.word	0x0800666d
 8005ee8:	0800666d 	.word	0x0800666d
 8005eec:	0800666d 	.word	0x0800666d
 8005ef0:	0800666d 	.word	0x0800666d
 8005ef4:	0800666d 	.word	0x0800666d
 8005ef8:	0800666d 	.word	0x0800666d
 8005efc:	0800666d 	.word	0x0800666d
 8005f00:	0800600f 	.word	0x0800600f
 8005f04:	0800666d 	.word	0x0800666d
 8005f08:	0800666d 	.word	0x0800666d
 8005f0c:	0800666d 	.word	0x0800666d
 8005f10:	0800666d 	.word	0x0800666d
 8005f14:	0800666d 	.word	0x0800666d
 8005f18:	0800666d 	.word	0x0800666d
 8005f1c:	0800666d 	.word	0x0800666d
 8005f20:	0800666d 	.word	0x0800666d
 8005f24:	0800666d 	.word	0x0800666d
 8005f28:	0800666d 	.word	0x0800666d
 8005f2c:	0800666d 	.word	0x0800666d
 8005f30:	0800666d 	.word	0x0800666d
 8005f34:	0800666d 	.word	0x0800666d
 8005f38:	0800666d 	.word	0x0800666d
 8005f3c:	0800666d 	.word	0x0800666d
 8005f40:	08006031 	.word	0x08006031
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	f000 8083 	beq.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8005f4c:	e38e      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f4e:	4ba9      	ldr	r3, [pc, #676]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d103      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005f60:	f7ff fc08 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8005f64:	60f8      	str	r0, [r7, #12]
      break;
 8005f66:	e383      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f68:	4ba2      	ldr	r3, [pc, #648]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f74:	f040 837c 	bne.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8005f78:	4b9f      	ldr	r3, [pc, #636]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f7a:	60fb      	str	r3, [r7, #12]
      break;
 8005f7c:	e378      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005f7e:	4b9d      	ldr	r3, [pc, #628]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7ff fbdc 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8005f94:	60f8      	str	r0, [r7, #12]
      break;
 8005f96:	e36d      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f98:	4b96      	ldr	r3, [pc, #600]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa4:	f040 8366 	bne.w	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8005fa8:	4b93      	ldr	r3, [pc, #588]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005faa:	60fb      	str	r3, [r7, #12]
      break;
 8005fac:	e362      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005fae:	4b91      	ldr	r3, [pc, #580]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005fb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005fc0:	f7ff fbc4 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8005fc4:	60f8      	str	r0, [r7, #12]
      break;
 8005fc6:	e357      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd4:	f040 8350 	bne.w	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8005fd8:	4b87      	ldr	r3, [pc, #540]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005fda:	60fb      	str	r3, [r7, #12]
      break;
 8005fdc:	e34c      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005fde:	4b85      	ldr	r3, [pc, #532]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005fe0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7ff fbac 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8005ff4:	60f8      	str	r0, [r7, #12]
      break;
 8005ff6:	e341      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006004:	f040 833a 	bne.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8006008:	4b7b      	ldr	r3, [pc, #492]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800600a:	60fb      	str	r3, [r7, #12]
      break;
 800600c:	e336      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800600e:	4b79      	ldr	r3, [pc, #484]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006010:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006020:	f7ff fb94 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006024:	60f8      	str	r0, [r7, #12]
      break;
 8006026:	e340      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006028:	f7ff fbcc 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 800602c:	60f8      	str	r0, [r7, #12]
      break;
 800602e:	e33c      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006030:	4b70      	ldr	r3, [pc, #448]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006032:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006042:	f7ff fb83 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006046:	60f8      	str	r0, [r7, #12]
      break;
 8006048:	e32f      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800604a:	f7ff fbbb 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 800604e:	60f8      	str	r0, [r7, #12]
      break;
 8006050:	e32b      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006052:	4b68      	ldr	r3, [pc, #416]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006054:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800605c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006064:	f7ff fb72 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006068:	60f8      	str	r0, [r7, #12]
      break;
 800606a:	e31e      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800606c:	f7ff fbaa 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006070:	60f8      	str	r0, [r7, #12]
      break;
 8006072:	e31a      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006074:	4b5f      	ldr	r3, [pc, #380]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006076:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800607a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800607e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006086:	f7ff fb75 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 800608a:	60f8      	str	r0, [r7, #12]
      break;
 800608c:	e30d      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800608e:	f7ff fb99 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006092:	60f8      	str	r0, [r7, #12]
      break;
 8006094:	e309      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006096:	4b57      	ldr	r3, [pc, #348]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006098:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800609c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060a0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7ff fb50 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80060ac:	60f8      	str	r0, [r7, #12]
      break;
 80060ae:	e2fc      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80060b0:	f7ff fb88 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80060b4:	60f8      	str	r0, [r7, #12]
      break;
 80060b6:	e2f8      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060b8:	4b4e      	ldr	r3, [pc, #312]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80060ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80060be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80060c2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7ff fb3f 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80060ce:	60f8      	str	r0, [r7, #12]
      break;
 80060d0:	e2d6      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d8:	d116      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060da:	4b46      	ldr	r3, [pc, #280]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80060dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	f040 82cb 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 80060ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80060ee:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80060f0:	4b40      	ldr	r3, [pc, #256]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80060f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	f040 82c0 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	09db      	lsrs	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
      break;
 8006106:	e2bb      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800610e:	d10a      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006110:	4b38      	ldr	r3, [pc, #224]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611c:	f040 82b0 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8006120:	4b35      	ldr	r3, [pc, #212]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006122:	60fb      	str	r3, [r7, #12]
      break;
 8006124:	e2ac      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006126:	4b33      	ldr	r3, [pc, #204]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006128:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	f040 82a5 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613a:	60fb      	str	r3, [r7, #12]
      break;
 800613c:	e2a0      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800613e:	4b2d      	ldr	r3, [pc, #180]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006140:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006148:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006150:	f7ff fb10 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8006154:	60f8      	str	r0, [r7, #12]
      break;
 8006156:	e2a8      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006158:	f7ff fb34 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 800615c:	60f8      	str	r0, [r7, #12]
      break;
 800615e:	e2a4      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8006160:	4b24      	ldr	r3, [pc, #144]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006162:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006166:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800616a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8006172:	f7ff fad1 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8006176:	4603      	mov	r3, r0
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	60fb      	str	r3, [r7, #12]
      break;
 800617c:	e282      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006184:	d10b      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006188:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	f040 8277 	bne.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619a:	60fb      	str	r3, [r7, #12]
      break;
 800619c:	e272      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a4:	f040 826e 	bne.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80061aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	f040 8266 	bne.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 80061b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80061bc:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80061be:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80061c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	f040 825b 	bne.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
      break;
 80061d4:	e256      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80061d6:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80061d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80061dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061e0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061e8:	d108      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 80061ea:	f7ff faeb 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80061ee:	60f8      	str	r0, [r7, #12]
      break;
 80061f0:	e25b      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80061f2:	bf00      	nop
 80061f4:	40030c00 	.word	0x40030c00
 80061f8:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 80061fc:	f7ff fa44 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8006200:	60f8      	str	r0, [r7, #12]
      break;
 8006202:	e252      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006204:	4ba4      	ldr	r3, [pc, #656]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006206:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800620a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800620e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006216:	4ba0      	ldr	r3, [pc, #640]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006222:	f040 8231 	bne.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8006226:	4b9d      	ldr	r3, [pc, #628]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006228:	60fb      	str	r3, [r7, #12]
      break;
 800622a:	e22d      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006232:	d103      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8006234:	f7ff fac6 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006238:	60f8      	str	r0, [r7, #12]
      break;
 800623a:	e225      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006242:	d10a      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006244:	4b94      	ldr	r3, [pc, #592]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006250:	f040 821a 	bne.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8006254:	4b92      	ldr	r3, [pc, #584]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006256:	60fb      	str	r3, [r7, #12]
      break;
 8006258:	e216      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 800625a:	f7ff fa15 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 800625e:	60f8      	str	r0, [r7, #12]
      break;
 8006260:	e212      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8006262:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006266:	f7ff fd51 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 800626a:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 800626c:	4b8a      	ldr	r3, [pc, #552]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800626e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800627e:	f040 8205 	bne.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	085b      	lsrs	r3, r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
      break;
 8006288:	e200      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800628a:	4b83      	ldr	r3, [pc, #524]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800628c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 800629c:	f7ff fa3c 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 80062a0:	60f8      	str	r0, [r7, #12]
      break;
 80062a2:	e202      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d103      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80062ae:	60fb      	str	r3, [r7, #12]
      break;
 80062b0:	e1fb      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d103      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 80062b8:	f7ff fa84 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80062bc:	60f8      	str	r0, [r7, #12]
      break;
 80062be:	e1f4      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80062c0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80062c4:	f7ff fd22 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 80062c8:	60f8      	str	r0, [r7, #12]
      break;
 80062ca:	e1ee      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80062cc:	4b72      	ldr	r3, [pc, #456]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80062ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 80062de:	f7ff fa35 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80062e2:	60f8      	str	r0, [r7, #12]
      break;
 80062e4:	e1e1      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80062e6:	f7ff fa6d 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80062ea:	60f8      	str	r0, [r7, #12]
      break;
 80062ec:	e1dd      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80062ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80062f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80062f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062f8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8006300:	f7ff fa60 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006304:	60f8      	str	r0, [r7, #12]
      break;
 8006306:	e1c3      	b.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b20      	cmp	r3, #32
 800630c:	d103      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800630e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006312:	60fb      	str	r3, [r7, #12]
      break;
 8006314:	e1bc      	b.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	f040 81b9 	bne.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800631e:	4b5e      	ldr	r3, [pc, #376]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800632a:	f040 81b1 	bne.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 800632e:	4b5c      	ldr	r3, [pc, #368]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006330:	60fb      	str	r3, [r7, #12]
      break;
 8006332:	e1ad      	b.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006334:	4b58      	ldr	r3, [pc, #352]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006336:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800633a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800633e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006346:	4b54      	ldr	r3, [pc, #336]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800634e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006352:	f040 819f 	bne.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8006356:	4b51      	ldr	r3, [pc, #324]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006358:	60fb      	str	r3, [r7, #12]
      break;
 800635a:	e19b      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 800635c:	f7ff fa32 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006360:	60f8      	str	r0, [r7, #12]
      break;
 8006362:	e197      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006364:	4b4c      	ldr	r3, [pc, #304]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006366:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800636a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800636e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8006376:	f7ff f9cf 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	e014      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006384:	d109      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006386:	4b44      	ldr	r3, [pc, #272]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006392:	d109      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8006394:	4b42      	ldr	r3, [pc, #264]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a0:	d102      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 80063a2:	f7ff fa0f 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80063a6:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 80063a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80063aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80063ae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80063b2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	e00c      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c6:	d202      	bcs.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60bb      	str	r3, [r7, #8]
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	0b1a      	lsrs	r2, r3, #12
 80063d2:	4b34      	ldr	r3, [pc, #208]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	3302      	adds	r3, #2
 80063d8:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	fa22 f303 	lsr.w	r3, r2, r3
 80063e2:	60fb      	str	r3, [r7, #12]
      break;
 80063e4:	e161      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 80063e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80063e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80063ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063f0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d116      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063f8:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80063fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b02      	cmp	r3, #2
 8006404:	f040 8148 	bne.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8006408:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800640c:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800640e:	4b22      	ldr	r3, [pc, #136]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006410:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	f040 813d 	bne.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	09db      	lsrs	r3, r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
      break;
 8006424:	e138      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006426:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006428:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	f040 8131 	bne.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643a:	60fb      	str	r3, [r7, #12]
      break;
 800643c:	e12c      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 800643e:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006440:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006448:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d103      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
        frequency = HAL_RCC_GetSysClockFreq();
 8006450:	f7ff f91a 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8006454:	60f8      	str	r0, [r7, #12]
      break;
 8006456:	e128      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006458:	f7ff f9b4 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 800645c:	60f8      	str	r0, [r7, #12]
      break;
 800645e:	e124      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006460:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006462:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006472:	f7ff f993 	bl	800579c <HAL_RCC_GetPCLK3Freq>
 8006476:	60f8      	str	r0, [r7, #12]
      break;
 8006478:	e110      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d113      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800648c:	f040 8106 	bne.w	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006492:	60fb      	str	r3, [r7, #12]
      break;
 8006494:	e102      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8006496:	bf00      	nop
 8006498:	40030c00 	.word	0x40030c00
 800649c:	02dc6c00 	.word	0x02dc6c00
 80064a0:	00f42400 	.word	0x00f42400
 80064a4:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d10b      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064ae:	4b81      	ldr	r3, [pc, #516]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	f040 80ef 	bne.w	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c2:	60fb      	str	r3, [r7, #12]
      break;
 80064c4:	e0ea      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 80064c6:	f7ff f97d 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80064ca:	60f8      	str	r0, [r7, #12]
      break;
 80064cc:	e0e6      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80064ce:	4b79      	ldr	r3, [pc, #484]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 80064e0:	f7ff f95c 	bl	800579c <HAL_RCC_GetPCLK3Freq>
 80064e4:	60f8      	str	r0, [r7, #12]
      break;
 80064e6:	e0e0      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80064e8:	f7ff f96c 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 80064ec:	60f8      	str	r0, [r7, #12]
      break;
 80064ee:	e0dc      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80064f0:	4b70      	ldr	r3, [pc, #448]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064fa:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8006502:	f7ff f95f 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 8006506:	60f8      	str	r0, [r7, #12]
      break;
 8006508:	e0ca      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006510:	d116      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006512:	4b68      	ldr	r3, [pc, #416]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006514:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b02      	cmp	r3, #2
 800651e:	f040 80bf 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8006522:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006526:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006528:	4b62      	ldr	r3, [pc, #392]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800652a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b04      	cmp	r3, #4
 8006534:	f040 80b4 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	09db      	lsrs	r3, r3, #7
 800653c:	60fb      	str	r3, [r7, #12]
      break;
 800653e:	e0af      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006546:	d10a      	bne.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006548:	4b5a      	ldr	r3, [pc, #360]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006554:	f040 80a4 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8006558:	4b57      	ldr	r3, [pc, #348]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800655a:	60fb      	str	r3, [r7, #12]
      break;
 800655c:	e0a0      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800655e:	4b55      	ldr	r3, [pc, #340]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006560:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	f040 8099 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006572:	60fb      	str	r3, [r7, #12]
      break;
 8006574:	e094      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006576:	4b4f      	ldr	r3, [pc, #316]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006578:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800657c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006580:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8006588:	f7ff f91c 	bl	80057c4 <HAL_RCC_GetMSIKFreq>
 800658c:	60f8      	str	r0, [r7, #12]
      break;
 800658e:	e089      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006596:	d114      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006598:	4b46      	ldr	r3, [pc, #280]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800659a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d17e      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 80065a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065aa:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80065ac:	4b41      	ldr	r3, [pc, #260]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80065ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d174      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
      break;
 80065c0:	e070      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065ca:	4b3a      	ldr	r3, [pc, #232]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d6:	d165      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 80065d8:	4b37      	ldr	r3, [pc, #220]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80065da:	60fb      	str	r3, [r7, #12]
      break;
 80065dc:	e062      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065de:	4b35      	ldr	r3, [pc, #212]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80065e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d15b      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 80065ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f0:	60fb      	str	r3, [r7, #12]
      break;
 80065f2:	e057      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80065f4:	4b2f      	ldr	r3, [pc, #188]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80065f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80065fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006606:	d10a      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006608:	4b2a      	ldr	r3, [pc, #168]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800660a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d148      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661a:	60fb      	str	r3, [r7, #12]
      break;
 800661c:	e044      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006624:	d114      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006626:	4b23      	ldr	r3, [pc, #140]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006628:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d139      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8006634:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006638:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800663a:	4b1e      	ldr	r3, [pc, #120]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800663c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d12f      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	60fb      	str	r3, [r7, #12]
      break;
 800664e:	e02b      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006656:	d127      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006658:	4b16      	ldr	r3, [pc, #88]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006664:	d120      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 8006666:	4b15      	ldr	r3, [pc, #84]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8006668:	60fb      	str	r3, [r7, #12]
      break;
 800666a:	e01d      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 800666c:	bf00      	nop
 800666e:	e01c      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006670:	bf00      	nop
 8006672:	e01a      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006674:	bf00      	nop
 8006676:	e018      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006678:	bf00      	nop
 800667a:	e016      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800667c:	bf00      	nop
 800667e:	e014      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006680:	bf00      	nop
 8006682:	e012      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006684:	bf00      	nop
 8006686:	e010      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006688:	bf00      	nop
 800668a:	e00e      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800668c:	bf00      	nop
 800668e:	e00c      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006690:	bf00      	nop
 8006692:	e00a      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006694:	bf00      	nop
 8006696:	e008      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006698:	bf00      	nop
 800669a:	e006      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800669c:	bf00      	nop
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80066a0:	bf00      	nop
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80066a8:	bf00      	nop
  }

  return (frequency);
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40030c00 	.word	0x40030c00
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	0007a120 	.word	0x0007a120

080066c0 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 80066ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
 80066e4:	e027      	b.n	8006736 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	e01c      	b.n	8006736 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d107      	bne.n	8006712 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
 8006710:	e011      	b.n	8006736 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8006712:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4313      	orrs	r3, r2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 800672c:	4a05      	ldr	r2, [pc, #20]	@ (8006744 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40030c00 	.word	0x40030c00

08006748 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e0dc      	b.n	8006914 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a6d      	ldr	r2, [pc, #436]	@ (800691c <HAL_SPI_Init+0x1d4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d105      	bne.n	8006776 <HAL_SPI_Init+0x2e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d901      	bls.n	8006776 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e0ce      	b.n	8006914 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fe72 	bl	8007460 <SPI_GetPacketSize>
 800677c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a66      	ldr	r2, [pc, #408]	@ (800691c <HAL_SPI_Init+0x1d4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d102      	bne.n	800678e <HAL_SPI_Init+0x46>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b08      	cmp	r3, #8
 800678c:	d80c      	bhi.n	80067a8 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006792:	4a63      	ldr	r2, [pc, #396]	@ (8006920 <HAL_SPI_Init+0x1d8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a61      	ldr	r2, [pc, #388]	@ (8006924 <HAL_SPI_Init+0x1dc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d104      	bne.n	80067ac <HAL_SPI_Init+0x64>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d901      	bls.n	80067ac <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0b3      	b.n	8006914 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fd fc89 	bl	80040d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80067e8:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067f2:	d119      	bne.n	8006828 <HAL_SPI_Init+0xe0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067fc:	d103      	bne.n	8006806 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10c      	bne.n	8006828 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006816:	d107      	bne.n	8006828 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006826:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00f      	beq.n	8006854 <HAL_SPI_Init+0x10c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b06      	cmp	r3, #6
 800683a:	d90b      	bls.n	8006854 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e007      	b.n	8006864 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006862:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	431a      	orrs	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006876:	ea42 0103 	orr.w	r1, r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d0:	ea42 0103 	orr.w	r1, r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40002000 	.word	0x40002000
 8006920:	40013000 	.word	0x40013000
 8006924:	40003800 	.word	0x40003800

08006928 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3320      	adds	r3, #32
 800693e:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006940:	f7fd fede 	bl	8004700 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006952:	2302      	movs	r3, #2
 8006954:	e1e5      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_SPI_Transmit+0x3a>
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e1dd      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_SPI_Transmit+0x4c>
 8006970:	2302      	movs	r3, #2
 8006972:	e1d6      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2203      	movs	r2, #3
 8006980:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e009      	b.n	80069f4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80069f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	88f9      	ldrh	r1, [r7, #6]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_SPI_Transmit+0x118>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a2e:	d107      	bne.n	8006a40 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b0f      	cmp	r3, #15
 8006a46:	d951      	bls.n	8006aec <HAL_SPI_Transmit+0x1c4>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a8a      	ldr	r2, [pc, #552]	@ (8006c78 <HAL_SPI_Transmit+0x350>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d045      	beq.n	8006ade <HAL_SPI_Transmit+0x1b6>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a89      	ldr	r2, [pc, #548]	@ (8006c7c <HAL_SPI_Transmit+0x354>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d147      	bne.n	8006aec <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006a5c:	e03f      	b.n	8006ade <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d114      	bne.n	8006a96 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7c:	1d1a      	adds	r2, r3, #4
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a94:	e023      	b.n	8006ade <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a96:	f7fd fe33 	bl	8004700 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d803      	bhi.n	8006aae <HAL_SPI_Transmit+0x186>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d102      	bne.n	8006ab4 <HAL_SPI_Transmit+0x18c>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d114      	bne.n	8006ade <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fc05 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ac0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e121      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1b9      	bne.n	8006a5e <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006aea:	e0f4      	b.n	8006cd6 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b07      	cmp	r3, #7
 8006af2:	f240 80e9 	bls.w	8006cc8 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006af6:	e05d      	b.n	8006bb4 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d132      	bne.n	8006b6c <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d918      	bls.n	8006b44 <HAL_SPI_Transmit+0x21c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d014      	beq.n	8006b44 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b02      	subs	r3, #2
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b42:	e037      	b.n	8006bb4 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b52:	1c9a      	adds	r2, r3, #2
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b6a:	e023      	b.n	8006bb4 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b6c:	f7fd fdc8 	bl	8004700 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d803      	bhi.n	8006b84 <HAL_SPI_Transmit+0x25c>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d102      	bne.n	8006b8a <HAL_SPI_Transmit+0x262>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d114      	bne.n	8006bb4 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fb9a 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0b6      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d19b      	bne.n	8006af8 <HAL_SPI_Transmit+0x1d0>
 8006bc0:	e089      	b.n	8006cd6 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d157      	bne.n	8006c80 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d918      	bls.n	8006c0e <HAL_SPI_Transmit+0x2e6>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	d914      	bls.n	8006c0e <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf4:	1d1a      	adds	r2, r3, #4
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b04      	subs	r3, #4
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c0c:	e05c      	b.n	8006cc8 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d917      	bls.n	8006c4a <HAL_SPI_Transmit+0x322>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c30:	1c9a      	adds	r2, r3, #2
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b02      	subs	r3, #2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c48:	e03e      	b.n	8006cc8 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3320      	adds	r3, #32
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c74:	e028      	b.n	8006cc8 <HAL_SPI_Transmit+0x3a0>
 8006c76:	bf00      	nop
 8006c78:	40013000 	.word	0x40013000
 8006c7c:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c80:	f7fd fd3e 	bl	8004700 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d803      	bhi.n	8006c98 <HAL_SPI_Transmit+0x370>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d102      	bne.n	8006c9e <HAL_SPI_Transmit+0x376>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d114      	bne.n	8006cc8 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fb10 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006caa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e02c      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f47f af76 	bne.w	8006bc2 <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2108      	movs	r1, #8
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fb8f 	bl	8007404 <SPI_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf2:	f043 0220 	orr.w	r2, r3, #32
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fae1 	bl	80072c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop

08006d2c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3301      	adds	r3, #1
 8006d46:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3330      	adds	r3, #48	@ 0x30
 8006d4e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d50:	f7fd fcd6 	bl	8004700 <HAL_GetTick>
 8006d54:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d001      	beq.n	8006d66 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	e2aa      	b.n	80072bc <HAL_SPI_Receive+0x590>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Receive+0x46>
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e2a2      	b.n	80072bc <HAL_SPI_Receive+0x590>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_SPI_Receive+0x58>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e29b      	b.n	80072bc <HAL_SPI_Receive+0x590>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2204      	movs	r2, #4
 8006d90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	88fa      	ldrh	r2, [r7, #6]
 8006dae:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006ddc:	d108      	bne.n	8006df0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e009      	b.n	8006e04 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006e02:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	88f9      	ldrh	r1, [r7, #6]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <HAL_SPI_Receive+0x124>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e3e:	d107      	bne.n	8006e50 <HAL_SPI_Receive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b0f      	cmp	r3, #15
 8006e56:	f240 8090 	bls.w	8006f7a <HAL_SPI_Receive+0x24e>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a8b      	ldr	r2, [pc, #556]	@ (800708c <HAL_SPI_Receive+0x360>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	f000 8082 	beq.w	8006f6a <HAL_SPI_Receive+0x23e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a89      	ldr	r2, [pc, #548]	@ (8007090 <HAL_SPI_Receive+0x364>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	f040 8084 	bne.w	8006f7a <HAL_SPI_Receive+0x24e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006e72:	e07a      	b.n	8006f6a <HAL_SPI_Receive+0x23e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d114      	bne.n	8006eb4 <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006eb2:	e05a      	b.n	8006f6a <HAL_SPI_Receive+0x23e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8bfa      	ldrh	r2, [r7, #30]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d919      	bls.n	8006ef6 <HAL_SPI_Receive+0x1ca>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d014      	beq.n	8006ef6 <HAL_SPI_Receive+0x1ca>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ed6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006edc:	1d1a      	adds	r2, r3, #4
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006ef4:	e039      	b.n	8006f6a <HAL_SPI_Receive+0x23e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <HAL_SPI_Receive+0x1f6>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0e:	d12c      	bne.n	8006f6a <HAL_SPI_Receive+0x23e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f1e:	619a      	str	r2, [r3, #24]
 8006f20:	e023      	b.n	8006f6a <HAL_SPI_Receive+0x23e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f22:	f7fd fbed 	bl	8004700 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d803      	bhi.n	8006f3a <HAL_SPI_Receive+0x20e>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d102      	bne.n	8006f40 <HAL_SPI_Receive+0x214>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d114      	bne.n	8006f6a <HAL_SPI_Receive+0x23e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f9bf 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1a8      	b.n	80072bc <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f47f af7e 	bne.w	8006e74 <HAL_SPI_Receive+0x148>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006f78:	e18d      	b.n	8007296 <HAL_SPI_Receive+0x56a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b07      	cmp	r3, #7
 8006f80:	f240 8182 	bls.w	8007288 <HAL_SPI_Receive+0x55c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006f84:	e0aa      	b.n	80070dc <HAL_SPI_Receive+0x3b0>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d114      	bne.n	8006fc6 <HAL_SPI_Receive+0x29a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	8812      	ldrh	r2, [r2, #0]
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fac:	1c9a      	adds	r2, r3, #2
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006fc4:	e08a      	b.n	80070dc <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8bfa      	ldrh	r2, [r7, #30]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d924      	bls.n	800701e <HAL_SPI_Receive+0x2f2>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01f      	beq.n	800701e <HAL_SPI_Receive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	8812      	ldrh	r2, [r2, #0]
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	8812      	ldrh	r2, [r2, #0]
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b02      	subs	r3, #2
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800701c:	e05e      	b.n	80070dc <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d119      	bne.n	800705e <HAL_SPI_Receive+0x332>
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d014      	beq.n	800705e <HAL_SPI_Receive+0x332>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	8812      	ldrh	r2, [r2, #0]
 800703c:	b292      	uxth	r2, r2
 800703e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007044:	1c9a      	adds	r2, r3, #2
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800705c:	e03e      	b.n	80070dc <HAL_SPI_Receive+0x3b0>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007064:	2b00      	cmp	r3, #0
 8007066:	d015      	beq.n	8007094 <HAL_SPI_Receive+0x368>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007076:	d131      	bne.n	80070dc <HAL_SPI_Receive+0x3b0>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007086:	619a      	str	r2, [r3, #24]
 8007088:	e028      	b.n	80070dc <HAL_SPI_Receive+0x3b0>
 800708a:	bf00      	nop
 800708c:	40013000 	.word	0x40013000
 8007090:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007094:	f7fd fb34 	bl	8004700 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d803      	bhi.n	80070ac <HAL_SPI_Receive+0x380>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d102      	bne.n	80070b2 <HAL_SPI_Receive+0x386>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d114      	bne.n	80070dc <HAL_SPI_Receive+0x3b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f906 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e0ef      	b.n	80072bc <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f47f af4e 	bne.w	8006f86 <HAL_SPI_Receive+0x25a>
 80070ea:	e0d4      	b.n	8007296 <HAL_SPI_Receive+0x56a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d117      	bne.n	8007132 <HAL_SPI_Receive+0x406>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007130:	e0aa      	b.n	8007288 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007138:	b29b      	uxth	r3, r3
 800713a:	8bfa      	ldrh	r2, [r7, #30]
 800713c:	429a      	cmp	r2, r3
 800713e:	d946      	bls.n	80071ce <HAL_SPI_Receive+0x4a2>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d041      	beq.n	80071ce <HAL_SPI_Receive+0x4a2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3b04      	subs	r3, #4
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80071cc:	e05c      	b.n	8007288 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d81c      	bhi.n	8007214 <HAL_SPI_Receive+0x4e8>
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <HAL_SPI_Receive+0x4e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007212:	e039      	b.n	8007288 <HAL_SPI_Receive+0x55c>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800721a:	2b00      	cmp	r3, #0
 800721c:	d010      	beq.n	8007240 <HAL_SPI_Receive+0x514>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800722c:	d12c      	bne.n	8007288 <HAL_SPI_Receive+0x55c>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800723c:	619a      	str	r2, [r3, #24]
 800723e:	e023      	b.n	8007288 <HAL_SPI_Receive+0x55c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007240:	f7fd fa5e 	bl	8004700 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d803      	bhi.n	8007258 <HAL_SPI_Receive+0x52c>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d102      	bne.n	800725e <HAL_SPI_Receive+0x532>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d114      	bne.n	8007288 <HAL_SPI_Receive+0x55c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f830 	bl	80072c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800726a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e019      	b.n	80072bc <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f af2b 	bne.w	80070ec <HAL_SPI_Receive+0x3c0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f814 	bl	80072c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_SPI_Receive+0x58e>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_SPI_Receive+0x590>
  }
  else
  {
    return HAL_OK;
 80072ba:	2300      	movs	r3, #0
  }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0208 	orr.w	r2, r2, #8
 80072e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0210 	orr.w	r2, r2, #16
 80072f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007326:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b04      	cmp	r3, #4
 8007332:	d014      	beq.n	800735e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007344:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0220 	orr.w	r2, r2, #32
 800735c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d014      	beq.n	8007394 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00f      	beq.n	8007394 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800737a:	f043 0204 	orr.w	r2, r3, #4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007392:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00f      	beq.n	80073be <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a4:	f043 0201 	orr.w	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00f      	beq.n	80073e8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ce:	f043 0208 	orr.w	r2, r3, #8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007414:	e010      	b.n	8007438 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007416:	f7fd f973 	bl	8004700 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d803      	bhi.n	800742e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d102      	bne.n	8007434 <SPI_WaitOnFlagUntilTimeout+0x30>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e00f      	b.n	8007458 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	429a      	cmp	r2, r3
 8007454:	d0df      	beq.n	8007416 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	3301      	adds	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3307      	adds	r3, #7
 800747e:	08db      	lsrs	r3, r3, #3
 8007480:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	fb02 f303 	mul.w	r3, r2, r3
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d12e      	bne.n	800750a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e028      	b.n	800750c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80074e6:	ea42 0103 	orr.w	r1, r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	e000      	b.n	800750c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
  }
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e042      	b.n	80075b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fc fe2f 	bl	80041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2224      	movs	r2, #36	@ 0x24
 8007546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa2a 	bl	80079bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8b3 	bl	80076d4 <UART_SetConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e01b      	b.n	80075b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 faa9 	bl	8007b00 <UART_CheckIdleState>
 80075ae:	4603      	mov	r3, r0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	@ 0x28
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d17b      	bne.n	80076ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_UART_Transmit+0x26>
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e074      	b.n	80076cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2221      	movs	r2, #33	@ 0x21
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075f2:	f7fd f885 	bl	8004700 <HAL_GetTick>
 80075f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007610:	d108      	bne.n	8007624 <HAL_UART_Transmit+0x6c>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e003      	b.n	800762c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800762c:	e030      	b.n	8007690 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	2180      	movs	r1, #128	@ 0x80
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fb0b 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e03d      	b.n	80076cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3302      	adds	r3, #2
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	e007      	b.n	800767e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1c8      	bne.n	800762e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2200      	movs	r2, #0
 80076a4:	2140      	movs	r1, #64	@ 0x40
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fad4 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e006      	b.n	80076cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e000      	b.n	80076cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80076ca:	2302      	movs	r3, #2
  }
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d8:	b08e      	sub	sp, #56	@ 0x38
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b9b      	ldr	r3, [pc, #620]	@ (8007970 <UART_SetConfig+0x29c>)
 8007704:	4013      	ands	r3, r2
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800770c:	430b      	orrs	r3, r1
 800770e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a90      	ldr	r2, [pc, #576]	@ (8007974 <UART_SetConfig+0x2a0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800773c:	4313      	orrs	r3, r2
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800774a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007754:	430b      	orrs	r3, r1
 8007756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	f023 010f 	bic.w	r1, r3, #15
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a81      	ldr	r2, [pc, #516]	@ (8007978 <UART_SetConfig+0x2a4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d102      	bne.n	800777e <UART_SetConfig+0xaa>
 8007778:	2301      	movs	r3, #1
 800777a:	633b      	str	r3, [r7, #48]	@ 0x30
 800777c:	e022      	b.n	80077c4 <UART_SetConfig+0xf0>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a7e      	ldr	r2, [pc, #504]	@ (800797c <UART_SetConfig+0x2a8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d102      	bne.n	800778e <UART_SetConfig+0xba>
 8007788:	2302      	movs	r3, #2
 800778a:	633b      	str	r3, [r7, #48]	@ 0x30
 800778c:	e01a      	b.n	80077c4 <UART_SetConfig+0xf0>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a7b      	ldr	r2, [pc, #492]	@ (8007980 <UART_SetConfig+0x2ac>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d102      	bne.n	800779e <UART_SetConfig+0xca>
 8007798:	2304      	movs	r3, #4
 800779a:	633b      	str	r3, [r7, #48]	@ 0x30
 800779c:	e012      	b.n	80077c4 <UART_SetConfig+0xf0>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a78      	ldr	r2, [pc, #480]	@ (8007984 <UART_SetConfig+0x2b0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d102      	bne.n	80077ae <UART_SetConfig+0xda>
 80077a8:	2308      	movs	r3, #8
 80077aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ac:	e00a      	b.n	80077c4 <UART_SetConfig+0xf0>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a70      	ldr	r2, [pc, #448]	@ (8007974 <UART_SetConfig+0x2a0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <UART_SetConfig+0xec>
 80077b8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80077bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077be:	e001      	b.n	80077c4 <UART_SetConfig+0xf0>
 80077c0:	2300      	movs	r3, #0
 80077c2:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007974 <UART_SetConfig+0x2a0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d16c      	bne.n	80078a8 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80077ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077d0:	f7fe fa9c 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 80077d4:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80da 	beq.w	8007992 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	4a69      	ldr	r2, [pc, #420]	@ (8007988 <UART_SetConfig+0x2b4>)
 80077e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f0:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4413      	add	r3, r2
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d305      	bcc.n	800780e <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	429a      	cmp	r2, r3
 800780c:	d903      	bls.n	8007816 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007814:	e0bd      	b.n	8007992 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	2200      	movs	r2, #0
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	60fa      	str	r2, [r7, #12]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	4a59      	ldr	r2, [pc, #356]	@ (8007988 <UART_SetConfig+0x2b4>)
 8007824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007828:	b29b      	uxth	r3, r3
 800782a:	2200      	movs	r2, #0
 800782c:	603b      	str	r3, [r7, #0]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007838:	f7f9 fa2a 	bl	8000c90 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	020b      	lsls	r3, r1, #8
 800784e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007852:	0202      	lsls	r2, r0, #8
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	6849      	ldr	r1, [r1, #4]
 8007858:	0849      	lsrs	r1, r1, #1
 800785a:	2000      	movs	r0, #0
 800785c:	460c      	mov	r4, r1
 800785e:	4605      	mov	r5, r0
 8007860:	eb12 0804 	adds.w	r8, r2, r4
 8007864:	eb43 0905 	adc.w	r9, r3, r5
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	469a      	mov	sl, r3
 8007870:	4693      	mov	fp, r2
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f9 fa09 	bl	8000c90 <__aeabi_uldivmod>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4613      	mov	r3, r2
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800788c:	d308      	bcc.n	80078a0 <UART_SetConfig+0x1cc>
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007894:	d204      	bcs.n	80078a0 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	e078      	b.n	8007992 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80078a6:	e074      	b.n	8007992 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b0:	d137      	bne.n	8007922 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80078b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078b4:	f7fe fa2a 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 80078b8:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d068      	beq.n	8007992 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	4a30      	ldr	r2, [pc, #192]	@ (8007988 <UART_SetConfig+0x2b4>)
 80078c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d2:	005a      	lsls	r2, r3, #1
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	441a      	add	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	2b0f      	cmp	r3, #15
 80078ea:	d916      	bls.n	800791a <UART_SetConfig+0x246>
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f2:	d212      	bcs.n	800791a <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f023 030f 	bic.w	r3, r3, #15
 80078fc:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	b29b      	uxth	r3, r3
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	b29a      	uxth	r2, r3
 800790a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800790c:	4313      	orrs	r3, r2
 800790e:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	e03b      	b.n	8007992 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007920:	e037      	b.n	8007992 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007922:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007924:	f7fe f9f2 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007928:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d030      	beq.n	8007992 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	4a14      	ldr	r2, [pc, #80]	@ (8007988 <UART_SetConfig+0x2b4>)
 8007936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793a:	461a      	mov	r2, r3
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	441a      	add	r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d918      	bls.n	800798c <UART_SetConfig+0x2b8>
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007960:	d214      	bcs.n	800798c <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	b29a      	uxth	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	e011      	b.n	8007992 <UART_SetConfig+0x2be>
 800796e:	bf00      	nop
 8007970:	cfff69f3 	.word	0xcfff69f3
 8007974:	40042400 	.word	0x40042400
 8007978:	40013800 	.word	0x40013800
 800797c:	40004800 	.word	0x40004800
 8007980:	40004c00 	.word	0x40004c00
 8007984:	40005000 	.word	0x40005000
 8007988:	0800cb94 	.word	0x0800cb94
      }
      else
      {
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2201      	movs	r2, #1
 8007996:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2201      	movs	r2, #1
 800799e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2200      	movs	r2, #0
 80079ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3738      	adds	r7, #56	@ 0x38
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aba:	d10a      	bne.n	8007ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	605a      	str	r2, [r3, #4]
  }
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b098      	sub	sp, #96	@ 0x60
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b10:	f7fc fdf6 	bl	8004700 <HAL_GetTick>
 8007b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d12f      	bne.n	8007b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f88e 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d022      	beq.n	8007b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e6      	bne.n	8007b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e063      	b.n	8007c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d149      	bne.n	8007c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f857 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d03c      	beq.n	8007c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e6      	bne.n	8007bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bfe:	61fa      	str	r2, [r7, #28]
 8007c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e012      	b.n	8007c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3758      	adds	r7, #88	@ 0x58
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	4613      	mov	r3, r2
 8007c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c64:	e04f      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d04b      	beq.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fc fd47 	bl	8004700 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e04e      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d037      	beq.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b80      	cmp	r3, #128	@ 0x80
 8007c9a:	d034      	beq.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ca0:	d031      	beq.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d110      	bne.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 f838 	bl	8007d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e029      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ce0:	d111      	bne.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f81e 	bl	8007d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e00f      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d0a0      	beq.n	8007c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b095      	sub	sp, #84	@ 0x54
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d7e:	f023 0301 	bic.w	r3, r3, #1
 8007d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3308      	adds	r3, #8
 8007d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e3      	bne.n	8007d68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d118      	bne.n	8007dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0310 	bic.w	r3, r3, #16
 8007dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007dee:	bf00      	nop
 8007df0:	3754      	adds	r7, #84	@ 0x54
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e027      	b.n	8007e60 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2224      	movs	r2, #36	@ 0x24
 8007e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e02d      	b.n	8007ee0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2224      	movs	r2, #36	@ 0x24
 8007e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f84f 	bl	8007f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e02d      	b.n	8007f5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	@ 0x24
 8007f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f811 	bl	8007f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d108      	bne.n	8007f86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f84:	e031      	b.n	8007fea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f86:	2308      	movs	r3, #8
 8007f88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	0e5b      	lsrs	r3, r3, #25
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	0f5b      	lsrs	r3, r3, #29
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	7b3a      	ldrb	r2, [r7, #12]
 8007fb2:	4911      	ldr	r1, [pc, #68]	@ (8007ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8007fb4:	5c8a      	ldrb	r2, [r1, r2]
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fba:	7b3a      	ldrb	r2, [r7, #12]
 8007fbc:	490f      	ldr	r1, [pc, #60]	@ (8007ffc <UARTEx_SetNbDataToProcess+0x98>)
 8007fbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	7b7a      	ldrb	r2, [r7, #13]
 8007fd0:	4909      	ldr	r1, [pc, #36]	@ (8007ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8007fd2:	5c8a      	ldrb	r2, [r1, r2]
 8007fd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fd8:	7b7a      	ldrb	r2, [r7, #13]
 8007fda:	4908      	ldr	r1, [pc, #32]	@ (8007ffc <UARTEx_SetNbDataToProcess+0x98>)
 8007fdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fde:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	0800cbac 	.word	0x0800cbac
 8007ffc:	0800cbb4 	.word	0x0800cbb4

08008000 <_ZdlPvj>:
 8008000:	f000 b800 	b.w	8008004 <_ZdlPv>

08008004 <_ZdlPv>:
 8008004:	f000 b808 	b.w	8008018 <free>

08008008 <malloc>:
 8008008:	4b02      	ldr	r3, [pc, #8]	@ (8008014 <malloc+0xc>)
 800800a:	4601      	mov	r1, r0
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	f000 b82d 	b.w	800806c <_malloc_r>
 8008012:	bf00      	nop
 8008014:	20000058 	.word	0x20000058

08008018 <free>:
 8008018:	4b02      	ldr	r3, [pc, #8]	@ (8008024 <free+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f001 bf51 	b.w	8009ec4 <_free_r>
 8008022:	bf00      	nop
 8008024:	20000058 	.word	0x20000058

08008028 <sbrk_aligned>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4e0f      	ldr	r6, [pc, #60]	@ (8008068 <sbrk_aligned+0x40>)
 800802c:	460c      	mov	r4, r1
 800802e:	4605      	mov	r5, r0
 8008030:	6831      	ldr	r1, [r6, #0]
 8008032:	b911      	cbnz	r1, 800803a <sbrk_aligned+0x12>
 8008034:	f001 f874 	bl	8009120 <_sbrk_r>
 8008038:	6030      	str	r0, [r6, #0]
 800803a:	4621      	mov	r1, r4
 800803c:	4628      	mov	r0, r5
 800803e:	f001 f86f 	bl	8009120 <_sbrk_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	d103      	bne.n	800804e <sbrk_aligned+0x26>
 8008046:	f04f 34ff 	mov.w	r4, #4294967295
 800804a:	4620      	mov	r0, r4
 800804c:	bd70      	pop	{r4, r5, r6, pc}
 800804e:	1cc4      	adds	r4, r0, #3
 8008050:	f024 0403 	bic.w	r4, r4, #3
 8008054:	42a0      	cmp	r0, r4
 8008056:	d0f8      	beq.n	800804a <sbrk_aligned+0x22>
 8008058:	1a21      	subs	r1, r4, r0
 800805a:	4628      	mov	r0, r5
 800805c:	f001 f860 	bl	8009120 <_sbrk_r>
 8008060:	3001      	adds	r0, #1
 8008062:	d1f2      	bne.n	800804a <sbrk_aligned+0x22>
 8008064:	e7ef      	b.n	8008046 <sbrk_aligned+0x1e>
 8008066:	bf00      	nop
 8008068:	200007a0 	.word	0x200007a0

0800806c <_malloc_r>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	1ccd      	adds	r5, r1, #3
 8008072:	4606      	mov	r6, r0
 8008074:	f025 0503 	bic.w	r5, r5, #3
 8008078:	3508      	adds	r5, #8
 800807a:	2d0c      	cmp	r5, #12
 800807c:	bf38      	it	cc
 800807e:	250c      	movcc	r5, #12
 8008080:	2d00      	cmp	r5, #0
 8008082:	db01      	blt.n	8008088 <_malloc_r+0x1c>
 8008084:	42a9      	cmp	r1, r5
 8008086:	d904      	bls.n	8008092 <_malloc_r+0x26>
 8008088:	230c      	movs	r3, #12
 800808a:	6033      	str	r3, [r6, #0]
 800808c:	2000      	movs	r0, #0
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008168 <_malloc_r+0xfc>
 8008096:	f000 f869 	bl	800816c <__malloc_lock>
 800809a:	f8d8 3000 	ldr.w	r3, [r8]
 800809e:	461c      	mov	r4, r3
 80080a0:	bb44      	cbnz	r4, 80080f4 <_malloc_r+0x88>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff ffbf 	bl	8008028 <sbrk_aligned>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	4604      	mov	r4, r0
 80080ae:	d158      	bne.n	8008162 <_malloc_r+0xf6>
 80080b0:	f8d8 4000 	ldr.w	r4, [r8]
 80080b4:	4627      	mov	r7, r4
 80080b6:	2f00      	cmp	r7, #0
 80080b8:	d143      	bne.n	8008142 <_malloc_r+0xd6>
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	d04b      	beq.n	8008156 <_malloc_r+0xea>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	4639      	mov	r1, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	eb04 0903 	add.w	r9, r4, r3
 80080c8:	f001 f82a 	bl	8009120 <_sbrk_r>
 80080cc:	4581      	cmp	r9, r0
 80080ce:	d142      	bne.n	8008156 <_malloc_r+0xea>
 80080d0:	6821      	ldr	r1, [r4, #0]
 80080d2:	4630      	mov	r0, r6
 80080d4:	1a6d      	subs	r5, r5, r1
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7ff ffa6 	bl	8008028 <sbrk_aligned>
 80080dc:	3001      	adds	r0, #1
 80080de:	d03a      	beq.n	8008156 <_malloc_r+0xea>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	442b      	add	r3, r5
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	bb62      	cbnz	r2, 8008148 <_malloc_r+0xdc>
 80080ee:	f8c8 7000 	str.w	r7, [r8]
 80080f2:	e00f      	b.n	8008114 <_malloc_r+0xa8>
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	1b52      	subs	r2, r2, r5
 80080f8:	d420      	bmi.n	800813c <_malloc_r+0xd0>
 80080fa:	2a0b      	cmp	r2, #11
 80080fc:	d917      	bls.n	800812e <_malloc_r+0xc2>
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	42a3      	cmp	r3, r4
 8008102:	6025      	str	r5, [r4, #0]
 8008104:	bf18      	it	ne
 8008106:	6059      	strne	r1, [r3, #4]
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	bf08      	it	eq
 800810c:	f8c8 1000 	streq.w	r1, [r8]
 8008110:	5162      	str	r2, [r4, r5]
 8008112:	604b      	str	r3, [r1, #4]
 8008114:	4630      	mov	r0, r6
 8008116:	f000 f82f 	bl	8008178 <__malloc_unlock>
 800811a:	f104 000b 	add.w	r0, r4, #11
 800811e:	1d23      	adds	r3, r4, #4
 8008120:	f020 0007 	bic.w	r0, r0, #7
 8008124:	1ac2      	subs	r2, r0, r3
 8008126:	bf1c      	itt	ne
 8008128:	1a1b      	subne	r3, r3, r0
 800812a:	50a3      	strne	r3, [r4, r2]
 800812c:	e7af      	b.n	800808e <_malloc_r+0x22>
 800812e:	6862      	ldr	r2, [r4, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	bf0c      	ite	eq
 8008134:	f8c8 2000 	streq.w	r2, [r8]
 8008138:	605a      	strne	r2, [r3, #4]
 800813a:	e7eb      	b.n	8008114 <_malloc_r+0xa8>
 800813c:	4623      	mov	r3, r4
 800813e:	6864      	ldr	r4, [r4, #4]
 8008140:	e7ae      	b.n	80080a0 <_malloc_r+0x34>
 8008142:	463c      	mov	r4, r7
 8008144:	687f      	ldr	r7, [r7, #4]
 8008146:	e7b6      	b.n	80080b6 <_malloc_r+0x4a>
 8008148:	461a      	mov	r2, r3
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	42a3      	cmp	r3, r4
 800814e:	d1fb      	bne.n	8008148 <_malloc_r+0xdc>
 8008150:	2300      	movs	r3, #0
 8008152:	6053      	str	r3, [r2, #4]
 8008154:	e7de      	b.n	8008114 <_malloc_r+0xa8>
 8008156:	230c      	movs	r3, #12
 8008158:	4630      	mov	r0, r6
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	f000 f80c 	bl	8008178 <__malloc_unlock>
 8008160:	e794      	b.n	800808c <_malloc_r+0x20>
 8008162:	6005      	str	r5, [r0, #0]
 8008164:	e7d6      	b.n	8008114 <_malloc_r+0xa8>
 8008166:	bf00      	nop
 8008168:	200007a4 	.word	0x200007a4

0800816c <__malloc_lock>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__malloc_lock+0x8>)
 800816e:	f001 b824 	b.w	80091ba <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	200008e8 	.word	0x200008e8

08008178 <__malloc_unlock>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__malloc_unlock+0x8>)
 800817a:	f001 b81f 	b.w	80091bc <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	200008e8 	.word	0x200008e8

08008184 <__cvt>:
 8008184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	ec57 6b10 	vmov	r6, r7, d0
 800818c:	2f00      	cmp	r7, #0
 800818e:	460c      	mov	r4, r1
 8008190:	4619      	mov	r1, r3
 8008192:	463b      	mov	r3, r7
 8008194:	bfb4      	ite	lt
 8008196:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800819a:	2300      	movge	r3, #0
 800819c:	4691      	mov	r9, r2
 800819e:	bfbf      	itttt	lt
 80081a0:	4632      	movlt	r2, r6
 80081a2:	461f      	movlt	r7, r3
 80081a4:	232d      	movlt	r3, #45	@ 0x2d
 80081a6:	4616      	movlt	r6, r2
 80081a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081ac:	700b      	strb	r3, [r1, #0]
 80081ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081b0:	f023 0820 	bic.w	r8, r3, #32
 80081b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081b8:	d005      	beq.n	80081c6 <__cvt+0x42>
 80081ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081be:	d100      	bne.n	80081c2 <__cvt+0x3e>
 80081c0:	3401      	adds	r4, #1
 80081c2:	2102      	movs	r1, #2
 80081c4:	e000      	b.n	80081c8 <__cvt+0x44>
 80081c6:	2103      	movs	r1, #3
 80081c8:	ab03      	add	r3, sp, #12
 80081ca:	4622      	mov	r2, r4
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	ab02      	add	r3, sp, #8
 80081d0:	ec47 6b10 	vmov	d0, r6, r7
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4653      	mov	r3, sl
 80081d8:	f001 f8a2 	bl	8009320 <_dtoa_r>
 80081dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081e0:	4605      	mov	r5, r0
 80081e2:	d119      	bne.n	8008218 <__cvt+0x94>
 80081e4:	f019 0f01 	tst.w	r9, #1
 80081e8:	d00e      	beq.n	8008208 <__cvt+0x84>
 80081ea:	eb00 0904 	add.w	r9, r0, r4
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	f7f8 fc6b 	bl	8000ad0 <__aeabi_dcmpeq>
 80081fa:	b108      	cbz	r0, 8008200 <__cvt+0x7c>
 80081fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008200:	2230      	movs	r2, #48	@ 0x30
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	454b      	cmp	r3, r9
 8008206:	d31e      	bcc.n	8008246 <__cvt+0xc2>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	4628      	mov	r0, r5
 800820c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800820e:	1b5b      	subs	r3, r3, r5
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	b004      	add	sp, #16
 8008214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008218:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800821c:	eb00 0904 	add.w	r9, r0, r4
 8008220:	d1e5      	bne.n	80081ee <__cvt+0x6a>
 8008222:	7803      	ldrb	r3, [r0, #0]
 8008224:	2b30      	cmp	r3, #48	@ 0x30
 8008226:	d10a      	bne.n	800823e <__cvt+0xba>
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 fc4e 	bl	8000ad0 <__aeabi_dcmpeq>
 8008234:	b918      	cbnz	r0, 800823e <__cvt+0xba>
 8008236:	f1c4 0401 	rsb	r4, r4, #1
 800823a:	f8ca 4000 	str.w	r4, [sl]
 800823e:	f8da 3000 	ldr.w	r3, [sl]
 8008242:	4499      	add	r9, r3
 8008244:	e7d3      	b.n	80081ee <__cvt+0x6a>
 8008246:	1c59      	adds	r1, r3, #1
 8008248:	9103      	str	r1, [sp, #12]
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	e7d9      	b.n	8008202 <__cvt+0x7e>

0800824e <__exponent>:
 800824e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008250:	2900      	cmp	r1, #0
 8008252:	7002      	strb	r2, [r0, #0]
 8008254:	bfba      	itte	lt
 8008256:	4249      	neglt	r1, r1
 8008258:	232d      	movlt	r3, #45	@ 0x2d
 800825a:	232b      	movge	r3, #43	@ 0x2b
 800825c:	2909      	cmp	r1, #9
 800825e:	7043      	strb	r3, [r0, #1]
 8008260:	dd28      	ble.n	80082b4 <__exponent+0x66>
 8008262:	f10d 0307 	add.w	r3, sp, #7
 8008266:	270a      	movs	r7, #10
 8008268:	461d      	mov	r5, r3
 800826a:	461a      	mov	r2, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008272:	fb07 1416 	mls	r4, r7, r6, r1
 8008276:	3430      	adds	r4, #48	@ 0x30
 8008278:	f802 4c01 	strb.w	r4, [r2, #-1]
 800827c:	460c      	mov	r4, r1
 800827e:	4631      	mov	r1, r6
 8008280:	2c63      	cmp	r4, #99	@ 0x63
 8008282:	dcf2      	bgt.n	800826a <__exponent+0x1c>
 8008284:	3130      	adds	r1, #48	@ 0x30
 8008286:	1e94      	subs	r4, r2, #2
 8008288:	f803 1c01 	strb.w	r1, [r3, #-1]
 800828c:	1c41      	adds	r1, r0, #1
 800828e:	4623      	mov	r3, r4
 8008290:	42ab      	cmp	r3, r5
 8008292:	d30a      	bcc.n	80082aa <__exponent+0x5c>
 8008294:	f10d 0309 	add.w	r3, sp, #9
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	42ac      	cmp	r4, r5
 800829c:	bf88      	it	hi
 800829e:	2300      	movhi	r3, #0
 80082a0:	3302      	adds	r3, #2
 80082a2:	4403      	add	r3, r0
 80082a4:	1a18      	subs	r0, r3, r0
 80082a6:	b003      	add	sp, #12
 80082a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082b2:	e7ed      	b.n	8008290 <__exponent+0x42>
 80082b4:	2330      	movs	r3, #48	@ 0x30
 80082b6:	3130      	adds	r1, #48	@ 0x30
 80082b8:	7083      	strb	r3, [r0, #2]
 80082ba:	1d03      	adds	r3, r0, #4
 80082bc:	70c1      	strb	r1, [r0, #3]
 80082be:	e7f1      	b.n	80082a4 <__exponent+0x56>

080082c0 <_printf_float>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	b08d      	sub	sp, #52	@ 0x34
 80082c6:	460c      	mov	r4, r1
 80082c8:	4616      	mov	r6, r2
 80082ca:	461f      	mov	r7, r3
 80082cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082d0:	4605      	mov	r5, r0
 80082d2:	f000 feed 	bl	80090b0 <_localeconv_r>
 80082d6:	6803      	ldr	r3, [r0, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	f7f7 ffcc 	bl	8000278 <strlen>
 80082e0:	2300      	movs	r3, #0
 80082e2:	9005      	str	r0, [sp, #20]
 80082e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082e6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ea:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082ee:	3307      	adds	r3, #7
 80082f0:	f8d4 b000 	ldr.w	fp, [r4]
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	f103 0208 	add.w	r2, r3, #8
 80082fc:	f8c8 2000 	str.w	r2, [r8]
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008308:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800830c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	4b9d      	ldr	r3, [pc, #628]	@ (8008588 <_printf_float+0x2c8>)
 8008314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008318:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800831c:	f7f8 fc0a 	bl	8000b34 <__aeabi_dcmpun>
 8008320:	bb70      	cbnz	r0, 8008380 <_printf_float+0xc0>
 8008322:	f04f 32ff 	mov.w	r2, #4294967295
 8008326:	4b98      	ldr	r3, [pc, #608]	@ (8008588 <_printf_float+0x2c8>)
 8008328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800832c:	f7f8 fbe4 	bl	8000af8 <__aeabi_dcmple>
 8008330:	bb30      	cbnz	r0, 8008380 <_printf_float+0xc0>
 8008332:	2200      	movs	r2, #0
 8008334:	2300      	movs	r3, #0
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	f7f8 fbd3 	bl	8000ae4 <__aeabi_dcmplt>
 800833e:	b110      	cbz	r0, 8008346 <_printf_float+0x86>
 8008340:	232d      	movs	r3, #45	@ 0x2d
 8008342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008346:	4a91      	ldr	r2, [pc, #580]	@ (800858c <_printf_float+0x2cc>)
 8008348:	4b91      	ldr	r3, [pc, #580]	@ (8008590 <_printf_float+0x2d0>)
 800834a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800834e:	bf8c      	ite	hi
 8008350:	4690      	movhi	r8, r2
 8008352:	4698      	movls	r8, r3
 8008354:	2303      	movs	r3, #3
 8008356:	f04f 0900 	mov.w	r9, #0
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	f02b 0304 	bic.w	r3, fp, #4
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	4633      	mov	r3, r6
 8008364:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	9700      	str	r7, [sp, #0]
 800836c:	f000 f9d2 	bl	8008714 <_printf_common>
 8008370:	3001      	adds	r0, #1
 8008372:	f040 808d 	bne.w	8008490 <_printf_float+0x1d0>
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	b00d      	add	sp, #52	@ 0x34
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 fbd4 	bl	8000b34 <__aeabi_dcmpun>
 800838c:	b140      	cbz	r0, 80083a0 <_printf_float+0xe0>
 800838e:	464b      	mov	r3, r9
 8008390:	4a80      	ldr	r2, [pc, #512]	@ (8008594 <_printf_float+0x2d4>)
 8008392:	2b00      	cmp	r3, #0
 8008394:	bfbc      	itt	lt
 8008396:	232d      	movlt	r3, #45	@ 0x2d
 8008398:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800839c:	4b7e      	ldr	r3, [pc, #504]	@ (8008598 <_printf_float+0x2d8>)
 800839e:	e7d4      	b.n	800834a <_printf_float+0x8a>
 80083a0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	9206      	str	r2, [sp, #24]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	d13b      	bne.n	8008424 <_printf_float+0x164>
 80083ac:	2306      	movs	r3, #6
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083b4:	2300      	movs	r3, #0
 80083b6:	4628      	mov	r0, r5
 80083b8:	6022      	str	r2, [r4, #0]
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80083be:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083c2:	ab09      	add	r3, sp, #36	@ 0x24
 80083c4:	ec49 8b10 	vmov	d0, r8, r9
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083ce:	6861      	ldr	r1, [r4, #4]
 80083d0:	f7ff fed8 	bl	8008184 <__cvt>
 80083d4:	9b06      	ldr	r3, [sp, #24]
 80083d6:	4680      	mov	r8, r0
 80083d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083da:	2b47      	cmp	r3, #71	@ 0x47
 80083dc:	d129      	bne.n	8008432 <_printf_float+0x172>
 80083de:	1cc8      	adds	r0, r1, #3
 80083e0:	db02      	blt.n	80083e8 <_printf_float+0x128>
 80083e2:	6863      	ldr	r3, [r4, #4]
 80083e4:	4299      	cmp	r1, r3
 80083e6:	dd41      	ble.n	800846c <_printf_float+0x1ac>
 80083e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80083ec:	fa5f fa8a 	uxtb.w	sl, sl
 80083f0:	3901      	subs	r1, #1
 80083f2:	4652      	mov	r2, sl
 80083f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80083fa:	f7ff ff28 	bl	800824e <__exponent>
 80083fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008400:	4681      	mov	r9, r0
 8008402:	1813      	adds	r3, r2, r0
 8008404:	2a01      	cmp	r2, #1
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	dc02      	bgt.n	8008410 <_printf_float+0x150>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	07d2      	lsls	r2, r2, #31
 800840e:	d501      	bpl.n	8008414 <_printf_float+0x154>
 8008410:	3301      	adds	r3, #1
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0a2      	beq.n	8008362 <_printf_float+0xa2>
 800841c:	232d      	movs	r3, #45	@ 0x2d
 800841e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008422:	e79e      	b.n	8008362 <_printf_float+0xa2>
 8008424:	9a06      	ldr	r2, [sp, #24]
 8008426:	2a47      	cmp	r2, #71	@ 0x47
 8008428:	d1c2      	bne.n	80083b0 <_printf_float+0xf0>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1c0      	bne.n	80083b0 <_printf_float+0xf0>
 800842e:	2301      	movs	r3, #1
 8008430:	e7bd      	b.n	80083ae <_printf_float+0xee>
 8008432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008436:	d9db      	bls.n	80083f0 <_printf_float+0x130>
 8008438:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800843c:	d118      	bne.n	8008470 <_printf_float+0x1b0>
 800843e:	2900      	cmp	r1, #0
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	dd0b      	ble.n	800845c <_printf_float+0x19c>
 8008444:	6121      	str	r1, [r4, #16]
 8008446:	b913      	cbnz	r3, 800844e <_printf_float+0x18e>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	07d0      	lsls	r0, r2, #31
 800844c:	d502      	bpl.n	8008454 <_printf_float+0x194>
 800844e:	3301      	adds	r3, #1
 8008450:	440b      	add	r3, r1
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	f04f 0900 	mov.w	r9, #0
 8008458:	65a1      	str	r1, [r4, #88]	@ 0x58
 800845a:	e7db      	b.n	8008414 <_printf_float+0x154>
 800845c:	b913      	cbnz	r3, 8008464 <_printf_float+0x1a4>
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	07d2      	lsls	r2, r2, #31
 8008462:	d501      	bpl.n	8008468 <_printf_float+0x1a8>
 8008464:	3302      	adds	r3, #2
 8008466:	e7f4      	b.n	8008452 <_printf_float+0x192>
 8008468:	2301      	movs	r3, #1
 800846a:	e7f2      	b.n	8008452 <_printf_float+0x192>
 800846c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008472:	4299      	cmp	r1, r3
 8008474:	db05      	blt.n	8008482 <_printf_float+0x1c2>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	6121      	str	r1, [r4, #16]
 800847a:	07d8      	lsls	r0, r3, #31
 800847c:	d5ea      	bpl.n	8008454 <_printf_float+0x194>
 800847e:	1c4b      	adds	r3, r1, #1
 8008480:	e7e7      	b.n	8008452 <_printf_float+0x192>
 8008482:	2900      	cmp	r1, #0
 8008484:	bfd4      	ite	le
 8008486:	f1c1 0202 	rsble	r2, r1, #2
 800848a:	2201      	movgt	r2, #1
 800848c:	4413      	add	r3, r2
 800848e:	e7e0      	b.n	8008452 <_printf_float+0x192>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	055a      	lsls	r2, r3, #21
 8008494:	d407      	bmi.n	80084a6 <_printf_float+0x1e6>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	4642      	mov	r2, r8
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	d12b      	bne.n	80084fc <_printf_float+0x23c>
 80084a4:	e767      	b.n	8008376 <_printf_float+0xb6>
 80084a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084aa:	f240 80dd 	bls.w	8008668 <_printf_float+0x3a8>
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084b6:	f7f8 fb0b 	bl	8000ad0 <__aeabi_dcmpeq>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d033      	beq.n	8008526 <_printf_float+0x266>
 80084be:	2301      	movs	r3, #1
 80084c0:	4a36      	ldr	r2, [pc, #216]	@ (800859c <_printf_float+0x2dc>)
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f af54 	beq.w	8008376 <_printf_float+0xb6>
 80084ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084d2:	4543      	cmp	r3, r8
 80084d4:	db02      	blt.n	80084dc <_printf_float+0x21c>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	07d8      	lsls	r0, r3, #31
 80084da:	d50f      	bpl.n	80084fc <_printf_float+0x23c>
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f af45 	beq.w	8008376 <_printf_float+0xb6>
 80084ec:	f04f 0900 	mov.w	r9, #0
 80084f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80084f4:	f104 0a1a 	add.w	sl, r4, #26
 80084f8:	45c8      	cmp	r8, r9
 80084fa:	dc09      	bgt.n	8008510 <_printf_float+0x250>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	079b      	lsls	r3, r3, #30
 8008500:	f100 8103 	bmi.w	800870a <_printf_float+0x44a>
 8008504:	68e0      	ldr	r0, [r4, #12]
 8008506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008508:	4298      	cmp	r0, r3
 800850a:	bfb8      	it	lt
 800850c:	4618      	movlt	r0, r3
 800850e:	e734      	b.n	800837a <_printf_float+0xba>
 8008510:	2301      	movs	r3, #1
 8008512:	4652      	mov	r2, sl
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af2b 	beq.w	8008376 <_printf_float+0xb6>
 8008520:	f109 0901 	add.w	r9, r9, #1
 8008524:	e7e8      	b.n	80084f8 <_printf_float+0x238>
 8008526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc39      	bgt.n	80085a0 <_printf_float+0x2e0>
 800852c:	2301      	movs	r3, #1
 800852e:	4a1b      	ldr	r2, [pc, #108]	@ (800859c <_printf_float+0x2dc>)
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f af1d 	beq.w	8008376 <_printf_float+0xb6>
 800853c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008540:	ea59 0303 	orrs.w	r3, r9, r3
 8008544:	d102      	bne.n	800854c <_printf_float+0x28c>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	07d9      	lsls	r1, r3, #31
 800854a:	d5d7      	bpl.n	80084fc <_printf_float+0x23c>
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af0d 	beq.w	8008376 <_printf_float+0xb6>
 800855c:	f04f 0a00 	mov.w	sl, #0
 8008560:	f104 0b1a 	add.w	fp, r4, #26
 8008564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008566:	425b      	negs	r3, r3
 8008568:	4553      	cmp	r3, sl
 800856a:	dc01      	bgt.n	8008570 <_printf_float+0x2b0>
 800856c:	464b      	mov	r3, r9
 800856e:	e793      	b.n	8008498 <_printf_float+0x1d8>
 8008570:	2301      	movs	r3, #1
 8008572:	465a      	mov	r2, fp
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f aefb 	beq.w	8008376 <_printf_float+0xb6>
 8008580:	f10a 0a01 	add.w	sl, sl, #1
 8008584:	e7ee      	b.n	8008564 <_printf_float+0x2a4>
 8008586:	bf00      	nop
 8008588:	7fefffff 	.word	0x7fefffff
 800858c:	0800cbc0 	.word	0x0800cbc0
 8008590:	0800cbbc 	.word	0x0800cbbc
 8008594:	0800cbc8 	.word	0x0800cbc8
 8008598:	0800cbc4 	.word	0x0800cbc4
 800859c:	0800cbcc 	.word	0x0800cbcc
 80085a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085a6:	4553      	cmp	r3, sl
 80085a8:	bfa8      	it	ge
 80085aa:	4653      	movge	r3, sl
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	4699      	mov	r9, r3
 80085b0:	dc36      	bgt.n	8008620 <_printf_float+0x360>
 80085b2:	f04f 0b00 	mov.w	fp, #0
 80085b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ba:	f104 021a 	add.w	r2, r4, #26
 80085be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085c0:	9306      	str	r3, [sp, #24]
 80085c2:	eba3 0309 	sub.w	r3, r3, r9
 80085c6:	455b      	cmp	r3, fp
 80085c8:	dc31      	bgt.n	800862e <_printf_float+0x36e>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	459a      	cmp	sl, r3
 80085ce:	dc3a      	bgt.n	8008646 <_printf_float+0x386>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	07da      	lsls	r2, r3, #31
 80085d4:	d437      	bmi.n	8008646 <_printf_float+0x386>
 80085d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d8:	ebaa 0903 	sub.w	r9, sl, r3
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	ebaa 0303 	sub.w	r3, sl, r3
 80085e2:	4599      	cmp	r9, r3
 80085e4:	bfa8      	it	ge
 80085e6:	4699      	movge	r9, r3
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	dc33      	bgt.n	8008656 <_printf_float+0x396>
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085f6:	f104 0b1a 	add.w	fp, r4, #26
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008600:	eba3 0309 	sub.w	r3, r3, r9
 8008604:	4543      	cmp	r3, r8
 8008606:	f77f af79 	ble.w	80084fc <_printf_float+0x23c>
 800860a:	2301      	movs	r3, #1
 800860c:	465a      	mov	r2, fp
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f aeae 	beq.w	8008376 <_printf_float+0xb6>
 800861a:	f108 0801 	add.w	r8, r8, #1
 800861e:	e7ec      	b.n	80085fa <_printf_float+0x33a>
 8008620:	4642      	mov	r2, r8
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	d1c2      	bne.n	80085b2 <_printf_float+0x2f2>
 800862c:	e6a3      	b.n	8008376 <_printf_float+0xb6>
 800862e:	2301      	movs	r3, #1
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	9206      	str	r2, [sp, #24]
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae9c 	beq.w	8008376 <_printf_float+0xb6>
 800863e:	f10b 0b01 	add.w	fp, fp, #1
 8008642:	9a06      	ldr	r2, [sp, #24]
 8008644:	e7bb      	b.n	80085be <_printf_float+0x2fe>
 8008646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	d1c0      	bne.n	80085d6 <_printf_float+0x316>
 8008654:	e68f      	b.n	8008376 <_printf_float+0xb6>
 8008656:	9a06      	ldr	r2, [sp, #24]
 8008658:	464b      	mov	r3, r9
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	4442      	add	r2, r8
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	d1c3      	bne.n	80085ee <_printf_float+0x32e>
 8008666:	e686      	b.n	8008376 <_printf_float+0xb6>
 8008668:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800866c:	f1ba 0f01 	cmp.w	sl, #1
 8008670:	dc01      	bgt.n	8008676 <_printf_float+0x3b6>
 8008672:	07db      	lsls	r3, r3, #31
 8008674:	d536      	bpl.n	80086e4 <_printf_float+0x424>
 8008676:	2301      	movs	r3, #1
 8008678:	4642      	mov	r2, r8
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f ae78 	beq.w	8008376 <_printf_float+0xb6>
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	f43f ae70 	beq.w	8008376 <_printf_float+0xb6>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800869e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086a2:	f7f8 fa15 	bl	8000ad0 <__aeabi_dcmpeq>
 80086a6:	b9c0      	cbnz	r0, 80086da <_printf_float+0x41a>
 80086a8:	4653      	mov	r3, sl
 80086aa:	f108 0201 	add.w	r2, r8, #1
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	d10c      	bne.n	80086d2 <_printf_float+0x412>
 80086b8:	e65d      	b.n	8008376 <_printf_float+0xb6>
 80086ba:	2301      	movs	r3, #1
 80086bc:	465a      	mov	r2, fp
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	f43f ae56 	beq.w	8008376 <_printf_float+0xb6>
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	45d0      	cmp	r8, sl
 80086d0:	dbf3      	blt.n	80086ba <_printf_float+0x3fa>
 80086d2:	464b      	mov	r3, r9
 80086d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086d8:	e6df      	b.n	800849a <_printf_float+0x1da>
 80086da:	f04f 0800 	mov.w	r8, #0
 80086de:	f104 0b1a 	add.w	fp, r4, #26
 80086e2:	e7f4      	b.n	80086ce <_printf_float+0x40e>
 80086e4:	2301      	movs	r3, #1
 80086e6:	4642      	mov	r2, r8
 80086e8:	e7e1      	b.n	80086ae <_printf_float+0x3ee>
 80086ea:	2301      	movs	r3, #1
 80086ec:	464a      	mov	r2, r9
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae3e 	beq.w	8008376 <_printf_float+0xb6>
 80086fa:	f108 0801 	add.w	r8, r8, #1
 80086fe:	68e3      	ldr	r3, [r4, #12]
 8008700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008702:	1a5b      	subs	r3, r3, r1
 8008704:	4543      	cmp	r3, r8
 8008706:	dcf0      	bgt.n	80086ea <_printf_float+0x42a>
 8008708:	e6fc      	b.n	8008504 <_printf_float+0x244>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	f104 0919 	add.w	r9, r4, #25
 8008712:	e7f4      	b.n	80086fe <_printf_float+0x43e>

08008714 <_printf_common>:
 8008714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	4616      	mov	r6, r2
 800871a:	4698      	mov	r8, r3
 800871c:	688a      	ldr	r2, [r1, #8]
 800871e:	4607      	mov	r7, r0
 8008720:	690b      	ldr	r3, [r1, #16]
 8008722:	460c      	mov	r4, r1
 8008724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008728:	4293      	cmp	r3, r2
 800872a:	bfb8      	it	lt
 800872c:	4613      	movlt	r3, r2
 800872e:	6033      	str	r3, [r6, #0]
 8008730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008734:	b10a      	cbz	r2, 800873a <_printf_common+0x26>
 8008736:	3301      	adds	r3, #1
 8008738:	6033      	str	r3, [r6, #0]
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	0699      	lsls	r1, r3, #26
 800873e:	bf42      	ittt	mi
 8008740:	6833      	ldrmi	r3, [r6, #0]
 8008742:	3302      	addmi	r3, #2
 8008744:	6033      	strmi	r3, [r6, #0]
 8008746:	6825      	ldr	r5, [r4, #0]
 8008748:	f015 0506 	ands.w	r5, r5, #6
 800874c:	d106      	bne.n	800875c <_printf_common+0x48>
 800874e:	f104 0a19 	add.w	sl, r4, #25
 8008752:	68e3      	ldr	r3, [r4, #12]
 8008754:	6832      	ldr	r2, [r6, #0]
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	42ab      	cmp	r3, r5
 800875a:	dc2b      	bgt.n	80087b4 <_printf_common+0xa0>
 800875c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	3b00      	subs	r3, #0
 8008764:	bf18      	it	ne
 8008766:	2301      	movne	r3, #1
 8008768:	0692      	lsls	r2, r2, #26
 800876a:	d430      	bmi.n	80087ce <_printf_common+0xba>
 800876c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008770:	4641      	mov	r1, r8
 8008772:	4638      	mov	r0, r7
 8008774:	47c8      	blx	r9
 8008776:	3001      	adds	r0, #1
 8008778:	d023      	beq.n	80087c2 <_printf_common+0xae>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	341a      	adds	r4, #26
 800877e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008782:	f003 0306 	and.w	r3, r3, #6
 8008786:	2b04      	cmp	r3, #4
 8008788:	bf0a      	itet	eq
 800878a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800878e:	2500      	movne	r5, #0
 8008790:	6833      	ldreq	r3, [r6, #0]
 8008792:	f04f 0600 	mov.w	r6, #0
 8008796:	bf08      	it	eq
 8008798:	1aed      	subeq	r5, r5, r3
 800879a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800879e:	bf08      	it	eq
 80087a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a4:	4293      	cmp	r3, r2
 80087a6:	bfc4      	itt	gt
 80087a8:	1a9b      	subgt	r3, r3, r2
 80087aa:	18ed      	addgt	r5, r5, r3
 80087ac:	42b5      	cmp	r5, r6
 80087ae:	d11a      	bne.n	80087e6 <_printf_common+0xd2>
 80087b0:	2000      	movs	r0, #0
 80087b2:	e008      	b.n	80087c6 <_printf_common+0xb2>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4652      	mov	r2, sl
 80087b8:	4641      	mov	r1, r8
 80087ba:	4638      	mov	r0, r7
 80087bc:	47c8      	blx	r9
 80087be:	3001      	adds	r0, #1
 80087c0:	d103      	bne.n	80087ca <_printf_common+0xb6>
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295
 80087c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ca:	3501      	adds	r5, #1
 80087cc:	e7c1      	b.n	8008752 <_printf_common+0x3e>
 80087ce:	18e1      	adds	r1, r4, r3
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	2030      	movs	r0, #48	@ 0x30
 80087d4:	3302      	adds	r3, #2
 80087d6:	4422      	add	r2, r4
 80087d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087e4:	e7c2      	b.n	800876c <_printf_common+0x58>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4622      	mov	r2, r4
 80087ea:	4641      	mov	r1, r8
 80087ec:	4638      	mov	r0, r7
 80087ee:	47c8      	blx	r9
 80087f0:	3001      	adds	r0, #1
 80087f2:	d0e6      	beq.n	80087c2 <_printf_common+0xae>
 80087f4:	3601      	adds	r6, #1
 80087f6:	e7d9      	b.n	80087ac <_printf_common+0x98>

080087f8 <_printf_i>:
 80087f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087fc:	7e0f      	ldrb	r7, [r1, #24]
 80087fe:	4691      	mov	r9, r2
 8008800:	4680      	mov	r8, r0
 8008802:	460c      	mov	r4, r1
 8008804:	2f78      	cmp	r7, #120	@ 0x78
 8008806:	469a      	mov	sl, r3
 8008808:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800880a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800880e:	d807      	bhi.n	8008820 <_printf_i+0x28>
 8008810:	2f62      	cmp	r7, #98	@ 0x62
 8008812:	d80a      	bhi.n	800882a <_printf_i+0x32>
 8008814:	2f00      	cmp	r7, #0
 8008816:	f000 80d1 	beq.w	80089bc <_printf_i+0x1c4>
 800881a:	2f58      	cmp	r7, #88	@ 0x58
 800881c:	f000 80b8 	beq.w	8008990 <_printf_i+0x198>
 8008820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008824:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008828:	e03a      	b.n	80088a0 <_printf_i+0xa8>
 800882a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800882e:	2b15      	cmp	r3, #21
 8008830:	d8f6      	bhi.n	8008820 <_printf_i+0x28>
 8008832:	a101      	add	r1, pc, #4	@ (adr r1, 8008838 <_printf_i+0x40>)
 8008834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008838:	08008891 	.word	0x08008891
 800883c:	080088a5 	.word	0x080088a5
 8008840:	08008821 	.word	0x08008821
 8008844:	08008821 	.word	0x08008821
 8008848:	08008821 	.word	0x08008821
 800884c:	08008821 	.word	0x08008821
 8008850:	080088a5 	.word	0x080088a5
 8008854:	08008821 	.word	0x08008821
 8008858:	08008821 	.word	0x08008821
 800885c:	08008821 	.word	0x08008821
 8008860:	08008821 	.word	0x08008821
 8008864:	080089a3 	.word	0x080089a3
 8008868:	080088cf 	.word	0x080088cf
 800886c:	0800895d 	.word	0x0800895d
 8008870:	08008821 	.word	0x08008821
 8008874:	08008821 	.word	0x08008821
 8008878:	080089c5 	.word	0x080089c5
 800887c:	08008821 	.word	0x08008821
 8008880:	080088cf 	.word	0x080088cf
 8008884:	08008821 	.word	0x08008821
 8008888:	08008821 	.word	0x08008821
 800888c:	08008965 	.word	0x08008965
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	1d1a      	adds	r2, r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6032      	str	r2, [r6, #0]
 8008898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800889c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088a0:	2301      	movs	r3, #1
 80088a2:	e09c      	b.n	80089de <_printf_i+0x1e6>
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	6031      	str	r1, [r6, #0]
 80088ac:	0606      	lsls	r6, r0, #24
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0xbc>
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	e003      	b.n	80088bc <_printf_i+0xc4>
 80088b4:	0645      	lsls	r5, r0, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0xb8>
 80088b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088bc:	2d00      	cmp	r5, #0
 80088be:	da03      	bge.n	80088c8 <_printf_i+0xd0>
 80088c0:	232d      	movs	r3, #45	@ 0x2d
 80088c2:	426d      	negs	r5, r5
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c8:	4858      	ldr	r0, [pc, #352]	@ (8008a2c <_printf_i+0x234>)
 80088ca:	230a      	movs	r3, #10
 80088cc:	e011      	b.n	80088f2 <_printf_i+0xfa>
 80088ce:	6821      	ldr	r1, [r4, #0]
 80088d0:	6833      	ldr	r3, [r6, #0]
 80088d2:	0608      	lsls	r0, r1, #24
 80088d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088d8:	d402      	bmi.n	80088e0 <_printf_i+0xe8>
 80088da:	0649      	lsls	r1, r1, #25
 80088dc:	bf48      	it	mi
 80088de:	b2ad      	uxthmi	r5, r5
 80088e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	4851      	ldr	r0, [pc, #324]	@ (8008a2c <_printf_i+0x234>)
 80088e6:	bf14      	ite	ne
 80088e8:	230a      	movne	r3, #10
 80088ea:	2308      	moveq	r3, #8
 80088ec:	2100      	movs	r1, #0
 80088ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088f2:	6866      	ldr	r6, [r4, #4]
 80088f4:	2e00      	cmp	r6, #0
 80088f6:	60a6      	str	r6, [r4, #8]
 80088f8:	db05      	blt.n	8008906 <_printf_i+0x10e>
 80088fa:	6821      	ldr	r1, [r4, #0]
 80088fc:	432e      	orrs	r6, r5
 80088fe:	f021 0104 	bic.w	r1, r1, #4
 8008902:	6021      	str	r1, [r4, #0]
 8008904:	d04b      	beq.n	800899e <_printf_i+0x1a6>
 8008906:	4616      	mov	r6, r2
 8008908:	fbb5 f1f3 	udiv	r1, r5, r3
 800890c:	fb03 5711 	mls	r7, r3, r1, r5
 8008910:	5dc7      	ldrb	r7, [r0, r7]
 8008912:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008916:	462f      	mov	r7, r5
 8008918:	460d      	mov	r5, r1
 800891a:	42bb      	cmp	r3, r7
 800891c:	d9f4      	bls.n	8008908 <_printf_i+0x110>
 800891e:	2b08      	cmp	r3, #8
 8008920:	d10b      	bne.n	800893a <_printf_i+0x142>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	07df      	lsls	r7, r3, #31
 8008926:	d508      	bpl.n	800893a <_printf_i+0x142>
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	6861      	ldr	r1, [r4, #4]
 800892c:	4299      	cmp	r1, r3
 800892e:	bfde      	ittt	le
 8008930:	2330      	movle	r3, #48	@ 0x30
 8008932:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008936:	f106 36ff 	addle.w	r6, r6, #4294967295
 800893a:	1b92      	subs	r2, r2, r6
 800893c:	6122      	str	r2, [r4, #16]
 800893e:	464b      	mov	r3, r9
 8008940:	aa03      	add	r2, sp, #12
 8008942:	4621      	mov	r1, r4
 8008944:	4640      	mov	r0, r8
 8008946:	f8cd a000 	str.w	sl, [sp]
 800894a:	f7ff fee3 	bl	8008714 <_printf_common>
 800894e:	3001      	adds	r0, #1
 8008950:	d14a      	bne.n	80089e8 <_printf_i+0x1f0>
 8008952:	f04f 30ff 	mov.w	r0, #4294967295
 8008956:	b004      	add	sp, #16
 8008958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	f043 0320 	orr.w	r3, r3, #32
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	2778      	movs	r7, #120	@ 0x78
 8008966:	4832      	ldr	r0, [pc, #200]	@ (8008a30 <_printf_i+0x238>)
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800896e:	061f      	lsls	r7, r3, #24
 8008970:	6831      	ldr	r1, [r6, #0]
 8008972:	f851 5b04 	ldr.w	r5, [r1], #4
 8008976:	d402      	bmi.n	800897e <_printf_i+0x186>
 8008978:	065f      	lsls	r7, r3, #25
 800897a:	bf48      	it	mi
 800897c:	b2ad      	uxthmi	r5, r5
 800897e:	6031      	str	r1, [r6, #0]
 8008980:	07d9      	lsls	r1, r3, #31
 8008982:	bf44      	itt	mi
 8008984:	f043 0320 	orrmi.w	r3, r3, #32
 8008988:	6023      	strmi	r3, [r4, #0]
 800898a:	b11d      	cbz	r5, 8008994 <_printf_i+0x19c>
 800898c:	2310      	movs	r3, #16
 800898e:	e7ad      	b.n	80088ec <_printf_i+0xf4>
 8008990:	4826      	ldr	r0, [pc, #152]	@ (8008a2c <_printf_i+0x234>)
 8008992:	e7e9      	b.n	8008968 <_printf_i+0x170>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	f023 0320 	bic.w	r3, r3, #32
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	e7f6      	b.n	800898c <_printf_i+0x194>
 800899e:	4616      	mov	r6, r2
 80089a0:	e7bd      	b.n	800891e <_printf_i+0x126>
 80089a2:	6833      	ldr	r3, [r6, #0]
 80089a4:	6825      	ldr	r5, [r4, #0]
 80089a6:	1d18      	adds	r0, r3, #4
 80089a8:	6961      	ldr	r1, [r4, #20]
 80089aa:	6030      	str	r0, [r6, #0]
 80089ac:	062e      	lsls	r6, r5, #24
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	d501      	bpl.n	80089b6 <_printf_i+0x1be>
 80089b2:	6019      	str	r1, [r3, #0]
 80089b4:	e002      	b.n	80089bc <_printf_i+0x1c4>
 80089b6:	0668      	lsls	r0, r5, #25
 80089b8:	d5fb      	bpl.n	80089b2 <_printf_i+0x1ba>
 80089ba:	8019      	strh	r1, [r3, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	4616      	mov	r6, r2
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	e7bc      	b.n	800893e <_printf_i+0x146>
 80089c4:	6833      	ldr	r3, [r6, #0]
 80089c6:	2100      	movs	r1, #0
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	6032      	str	r2, [r6, #0]
 80089cc:	681e      	ldr	r6, [r3, #0]
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 fbf4 	bl	80091be <memchr>
 80089d6:	b108      	cbz	r0, 80089dc <_printf_i+0x1e4>
 80089d8:	1b80      	subs	r0, r0, r6
 80089da:	6060      	str	r0, [r4, #4]
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	6123      	str	r3, [r4, #16]
 80089e0:	2300      	movs	r3, #0
 80089e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089e6:	e7aa      	b.n	800893e <_printf_i+0x146>
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	4632      	mov	r2, r6
 80089ec:	4649      	mov	r1, r9
 80089ee:	4640      	mov	r0, r8
 80089f0:	47d0      	blx	sl
 80089f2:	3001      	adds	r0, #1
 80089f4:	d0ad      	beq.n	8008952 <_printf_i+0x15a>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	079b      	lsls	r3, r3, #30
 80089fa:	d413      	bmi.n	8008a24 <_printf_i+0x22c>
 80089fc:	68e0      	ldr	r0, [r4, #12]
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	4298      	cmp	r0, r3
 8008a02:	bfb8      	it	lt
 8008a04:	4618      	movlt	r0, r3
 8008a06:	e7a6      	b.n	8008956 <_printf_i+0x15e>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	4640      	mov	r0, r8
 8008a10:	47d0      	blx	sl
 8008a12:	3001      	adds	r0, #1
 8008a14:	d09d      	beq.n	8008952 <_printf_i+0x15a>
 8008a16:	3501      	adds	r5, #1
 8008a18:	68e3      	ldr	r3, [r4, #12]
 8008a1a:	9903      	ldr	r1, [sp, #12]
 8008a1c:	1a5b      	subs	r3, r3, r1
 8008a1e:	42ab      	cmp	r3, r5
 8008a20:	dcf2      	bgt.n	8008a08 <_printf_i+0x210>
 8008a22:	e7eb      	b.n	80089fc <_printf_i+0x204>
 8008a24:	2500      	movs	r5, #0
 8008a26:	f104 0619 	add.w	r6, r4, #25
 8008a2a:	e7f5      	b.n	8008a18 <_printf_i+0x220>
 8008a2c:	0800cbce 	.word	0x0800cbce
 8008a30:	0800cbdf 	.word	0x0800cbdf

08008a34 <_scanf_float>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	b087      	sub	sp, #28
 8008a3a:	4691      	mov	r9, r2
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	688b      	ldr	r3, [r1, #8]
 8008a44:	1e5a      	subs	r2, r3, #1
 8008a46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	bf89      	itett	hi
 8008a4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a52:	f04f 0b00 	movls.w	fp, #0
 8008a56:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a5e:	f04f 0500 	mov.w	r5, #0
 8008a62:	bf88      	it	hi
 8008a64:	608b      	strhi	r3, [r1, #8]
 8008a66:	680b      	ldr	r3, [r1, #0]
 8008a68:	46aa      	mov	sl, r5
 8008a6a:	462f      	mov	r7, r5
 8008a6c:	9502      	str	r5, [sp, #8]
 8008a6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a72:	f842 3b1c 	str.w	r3, [r2], #28
 8008a76:	4616      	mov	r6, r2
 8008a78:	9201      	str	r2, [sp, #4]
 8008a7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a7e:	68a2      	ldr	r2, [r4, #8]
 8008a80:	b15a      	cbz	r2, 8008a9a <_scanf_float+0x66>
 8008a82:	f8d9 3000 	ldr.w	r3, [r9]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a8a:	d863      	bhi.n	8008b54 <_scanf_float+0x120>
 8008a8c:	2b40      	cmp	r3, #64	@ 0x40
 8008a8e:	d83b      	bhi.n	8008b08 <_scanf_float+0xd4>
 8008a90:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a94:	b2c8      	uxtb	r0, r1
 8008a96:	280e      	cmp	r0, #14
 8008a98:	d939      	bls.n	8008b0e <_scanf_float+0xda>
 8008a9a:	b11f      	cbz	r7, 8008aa4 <_scanf_float+0x70>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aa8:	f1ba 0f01 	cmp.w	sl, #1
 8008aac:	f200 8115 	bhi.w	8008cda <_scanf_float+0x2a6>
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	429e      	cmp	r6, r3
 8008ab4:	f200 8106 	bhi.w	8008cc4 <_scanf_float+0x290>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	b007      	add	sp, #28
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ac4:	2a0d      	cmp	r2, #13
 8008ac6:	d8e8      	bhi.n	8008a9a <_scanf_float+0x66>
 8008ac8:	a101      	add	r1, pc, #4	@ (adr r1, 8008ad0 <_scanf_float+0x9c>)
 8008aca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008c19 	.word	0x08008c19
 8008ad4:	08008a9b 	.word	0x08008a9b
 8008ad8:	08008a9b 	.word	0x08008a9b
 8008adc:	08008a9b 	.word	0x08008a9b
 8008ae0:	08008c75 	.word	0x08008c75
 8008ae4:	08008c4f 	.word	0x08008c4f
 8008ae8:	08008a9b 	.word	0x08008a9b
 8008aec:	08008a9b 	.word	0x08008a9b
 8008af0:	08008c27 	.word	0x08008c27
 8008af4:	08008a9b 	.word	0x08008a9b
 8008af8:	08008a9b 	.word	0x08008a9b
 8008afc:	08008a9b 	.word	0x08008a9b
 8008b00:	08008a9b 	.word	0x08008a9b
 8008b04:	08008be3 	.word	0x08008be3
 8008b08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b0c:	e7da      	b.n	8008ac4 <_scanf_float+0x90>
 8008b0e:	290e      	cmp	r1, #14
 8008b10:	d8c3      	bhi.n	8008a9a <_scanf_float+0x66>
 8008b12:	a001      	add	r0, pc, #4	@ (adr r0, 8008b18 <_scanf_float+0xe4>)
 8008b14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b18:	08008bd3 	.word	0x08008bd3
 8008b1c:	08008a9b 	.word	0x08008a9b
 8008b20:	08008bd3 	.word	0x08008bd3
 8008b24:	08008c63 	.word	0x08008c63
 8008b28:	08008a9b 	.word	0x08008a9b
 8008b2c:	08008b75 	.word	0x08008b75
 8008b30:	08008bb9 	.word	0x08008bb9
 8008b34:	08008bb9 	.word	0x08008bb9
 8008b38:	08008bb9 	.word	0x08008bb9
 8008b3c:	08008bb9 	.word	0x08008bb9
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008bb9 	.word	0x08008bb9
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b56:	d809      	bhi.n	8008b6c <_scanf_float+0x138>
 8008b58:	2b60      	cmp	r3, #96	@ 0x60
 8008b5a:	d8b1      	bhi.n	8008ac0 <_scanf_float+0x8c>
 8008b5c:	2b54      	cmp	r3, #84	@ 0x54
 8008b5e:	d07b      	beq.n	8008c58 <_scanf_float+0x224>
 8008b60:	2b59      	cmp	r3, #89	@ 0x59
 8008b62:	d19a      	bne.n	8008a9a <_scanf_float+0x66>
 8008b64:	2d07      	cmp	r5, #7
 8008b66:	d198      	bne.n	8008a9a <_scanf_float+0x66>
 8008b68:	2508      	movs	r5, #8
 8008b6a:	e02f      	b.n	8008bcc <_scanf_float+0x198>
 8008b6c:	2b74      	cmp	r3, #116	@ 0x74
 8008b6e:	d073      	beq.n	8008c58 <_scanf_float+0x224>
 8008b70:	2b79      	cmp	r3, #121	@ 0x79
 8008b72:	e7f6      	b.n	8008b62 <_scanf_float+0x12e>
 8008b74:	6821      	ldr	r1, [r4, #0]
 8008b76:	05c8      	lsls	r0, r1, #23
 8008b78:	d51e      	bpl.n	8008bb8 <_scanf_float+0x184>
 8008b7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b7e:	3701      	adds	r7, #1
 8008b80:	6021      	str	r1, [r4, #0]
 8008b82:	f1bb 0f00 	cmp.w	fp, #0
 8008b86:	d003      	beq.n	8008b90 <_scanf_float+0x15c>
 8008b88:	3201      	adds	r2, #1
 8008b8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b8e:	60a2      	str	r2, [r4, #8]
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	6123      	str	r3, [r4, #16]
 8008b9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f8c9 3004 	str.w	r3, [r9, #4]
 8008ba8:	f340 8083 	ble.w	8008cb2 <_scanf_float+0x27e>
 8008bac:	f8d9 3000 	ldr.w	r3, [r9]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f8c9 3000 	str.w	r3, [r9]
 8008bb6:	e762      	b.n	8008a7e <_scanf_float+0x4a>
 8008bb8:	eb1a 0105 	adds.w	r1, sl, r5
 8008bbc:	f47f af6d 	bne.w	8008a9a <_scanf_float+0x66>
 8008bc0:	6822      	ldr	r2, [r4, #0]
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	468a      	mov	sl, r1
 8008bc6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008bca:	6022      	str	r2, [r4, #0]
 8008bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8008bd0:	e7de      	b.n	8008b90 <_scanf_float+0x15c>
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	0610      	lsls	r0, r2, #24
 8008bd6:	f57f af60 	bpl.w	8008a9a <_scanf_float+0x66>
 8008bda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bde:	6022      	str	r2, [r4, #0]
 8008be0:	e7f4      	b.n	8008bcc <_scanf_float+0x198>
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	d10c      	bne.n	8008c02 <_scanf_float+0x1ce>
 8008be8:	b977      	cbnz	r7, 8008c08 <_scanf_float+0x1d4>
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bf0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bf4:	d108      	bne.n	8008c08 <_scanf_float+0x1d4>
 8008bf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bfa:	f04f 0a01 	mov.w	sl, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	e7e4      	b.n	8008bcc <_scanf_float+0x198>
 8008c02:	f1ba 0f02 	cmp.w	sl, #2
 8008c06:	d051      	beq.n	8008cac <_scanf_float+0x278>
 8008c08:	2d01      	cmp	r5, #1
 8008c0a:	d002      	beq.n	8008c12 <_scanf_float+0x1de>
 8008c0c:	2d04      	cmp	r5, #4
 8008c0e:	f47f af44 	bne.w	8008a9a <_scanf_float+0x66>
 8008c12:	3501      	adds	r5, #1
 8008c14:	b2ed      	uxtb	r5, r5
 8008c16:	e7d9      	b.n	8008bcc <_scanf_float+0x198>
 8008c18:	f1ba 0f01 	cmp.w	sl, #1
 8008c1c:	f47f af3d 	bne.w	8008a9a <_scanf_float+0x66>
 8008c20:	f04f 0a02 	mov.w	sl, #2
 8008c24:	e7d2      	b.n	8008bcc <_scanf_float+0x198>
 8008c26:	b975      	cbnz	r5, 8008c46 <_scanf_float+0x212>
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	f47f af37 	bne.w	8008a9c <_scanf_float+0x68>
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c38:	f040 8103 	bne.w	8008e42 <_scanf_float+0x40e>
 8008c3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c40:	2501      	movs	r5, #1
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	e7c2      	b.n	8008bcc <_scanf_float+0x198>
 8008c46:	2d03      	cmp	r5, #3
 8008c48:	d0e3      	beq.n	8008c12 <_scanf_float+0x1de>
 8008c4a:	2d05      	cmp	r5, #5
 8008c4c:	e7df      	b.n	8008c0e <_scanf_float+0x1da>
 8008c4e:	2d02      	cmp	r5, #2
 8008c50:	f47f af23 	bne.w	8008a9a <_scanf_float+0x66>
 8008c54:	2503      	movs	r5, #3
 8008c56:	e7b9      	b.n	8008bcc <_scanf_float+0x198>
 8008c58:	2d06      	cmp	r5, #6
 8008c5a:	f47f af1e 	bne.w	8008a9a <_scanf_float+0x66>
 8008c5e:	2507      	movs	r5, #7
 8008c60:	e7b4      	b.n	8008bcc <_scanf_float+0x198>
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	0591      	lsls	r1, r2, #22
 8008c66:	f57f af18 	bpl.w	8008a9a <_scanf_float+0x66>
 8008c6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c6e:	9702      	str	r7, [sp, #8]
 8008c70:	6022      	str	r2, [r4, #0]
 8008c72:	e7ab      	b.n	8008bcc <_scanf_float+0x198>
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c7a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c7e:	d005      	beq.n	8008c8c <_scanf_float+0x258>
 8008c80:	0550      	lsls	r0, r2, #21
 8008c82:	f57f af0a 	bpl.w	8008a9a <_scanf_float+0x66>
 8008c86:	2f00      	cmp	r7, #0
 8008c88:	f000 80db 	beq.w	8008e42 <_scanf_float+0x40e>
 8008c8c:	0591      	lsls	r1, r2, #22
 8008c8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c92:	bf58      	it	pl
 8008c94:	9902      	ldrpl	r1, [sp, #8]
 8008c96:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c9a:	bf58      	it	pl
 8008c9c:	1a79      	subpl	r1, r7, r1
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	f04f 0700 	mov.w	r7, #0
 8008ca4:	bf58      	it	pl
 8008ca6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008caa:	e78f      	b.n	8008bcc <_scanf_float+0x198>
 8008cac:	f04f 0a03 	mov.w	sl, #3
 8008cb0:	e78c      	b.n	8008bcc <_scanf_float+0x198>
 8008cb2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4798      	blx	r3
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f43f aede 	beq.w	8008a7e <_scanf_float+0x4a>
 8008cc2:	e6ea      	b.n	8008a9a <_scanf_float+0x66>
 8008cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cc8:	464a      	mov	r2, r9
 8008cca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4798      	blx	r3
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	e6ea      	b.n	8008ab0 <_scanf_float+0x7c>
 8008cda:	1e6b      	subs	r3, r5, #1
 8008cdc:	2b06      	cmp	r3, #6
 8008cde:	d824      	bhi.n	8008d2a <_scanf_float+0x2f6>
 8008ce0:	2d02      	cmp	r5, #2
 8008ce2:	d836      	bhi.n	8008d52 <_scanf_float+0x31e>
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	429e      	cmp	r6, r3
 8008ce8:	f67f aee6 	bls.w	8008ab8 <_scanf_float+0x84>
 8008cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cf0:	464a      	mov	r2, r9
 8008cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	e7f0      	b.n	8008ce4 <_scanf_float+0x2b0>
 8008d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d06:	464a      	mov	r2, r9
 8008d08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4798      	blx	r3
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d1a:	fa5f fa8a 	uxtb.w	sl, sl
 8008d1e:	f1ba 0f02 	cmp.w	sl, #2
 8008d22:	d1ee      	bne.n	8008d02 <_scanf_float+0x2ce>
 8008d24:	3d03      	subs	r5, #3
 8008d26:	b2ed      	uxtb	r5, r5
 8008d28:	1b76      	subs	r6, r6, r5
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	05da      	lsls	r2, r3, #23
 8008d2e:	d52f      	bpl.n	8008d90 <_scanf_float+0x35c>
 8008d30:	055b      	lsls	r3, r3, #21
 8008d32:	d511      	bpl.n	8008d58 <_scanf_float+0x324>
 8008d34:	9b01      	ldr	r3, [sp, #4]
 8008d36:	429e      	cmp	r6, r3
 8008d38:	f67f aebe 	bls.w	8008ab8 <_scanf_float+0x84>
 8008d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d40:	464a      	mov	r2, r9
 8008d42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d46:	4640      	mov	r0, r8
 8008d48:	4798      	blx	r3
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	e7f0      	b.n	8008d34 <_scanf_float+0x300>
 8008d52:	46aa      	mov	sl, r5
 8008d54:	46b3      	mov	fp, r6
 8008d56:	e7de      	b.n	8008d16 <_scanf_float+0x2e2>
 8008d58:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d5c:	1e75      	subs	r5, r6, #1
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	2965      	cmp	r1, #101	@ 0x65
 8008d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	d00c      	beq.n	8008d84 <_scanf_float+0x350>
 8008d6a:	2945      	cmp	r1, #69	@ 0x45
 8008d6c:	d00a      	beq.n	8008d84 <_scanf_float+0x350>
 8008d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d72:	464a      	mov	r2, r9
 8008d74:	4640      	mov	r0, r8
 8008d76:	1eb5      	subs	r5, r6, #2
 8008d78:	4798      	blx	r3
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	462e      	mov	r6, r5
 8008d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d8a:	464a      	mov	r2, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	4798      	blx	r3
 8008d90:	6822      	ldr	r2, [r4, #0]
 8008d92:	f012 0210 	ands.w	r2, r2, #16
 8008d96:	d001      	beq.n	8008d9c <_scanf_float+0x368>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e68e      	b.n	8008aba <_scanf_float+0x86>
 8008d9c:	7032      	strb	r2, [r6, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da8:	d125      	bne.n	8008df6 <_scanf_float+0x3c2>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	429f      	cmp	r7, r3
 8008dae:	d00a      	beq.n	8008dc6 <_scanf_float+0x392>
 8008db0:	1bda      	subs	r2, r3, r7
 8008db2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008db6:	4924      	ldr	r1, [pc, #144]	@ (8008e48 <_scanf_float+0x414>)
 8008db8:	429e      	cmp	r6, r3
 8008dba:	bf28      	it	cs
 8008dbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f000 f907 	bl	8008fd4 <siprintf>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	9901      	ldr	r1, [sp, #4]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f002 fb7c 	bl	800b4c8 <_strtod_r>
 8008dd0:	6821      	ldr	r1, [r4, #0]
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	f011 0f02 	tst.w	r1, #2
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	ec57 6b10 	vmov	r6, r7, d0
 8008dde:	f103 0204 	add.w	r2, r3, #4
 8008de2:	d015      	beq.n	8008e10 <_scanf_float+0x3dc>
 8008de4:	9903      	ldr	r1, [sp, #12]
 8008de6:	600a      	str	r2, [r1, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	e9c3 6700 	strd	r6, r7, [r3]
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60e3      	str	r3, [r4, #12]
 8008df4:	e7d0      	b.n	8008d98 <_scanf_float+0x364>
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0e4      	beq.n	8008dc6 <_scanf_float+0x392>
 8008dfc:	9905      	ldr	r1, [sp, #20]
 8008dfe:	230a      	movs	r3, #10
 8008e00:	4640      	mov	r0, r8
 8008e02:	3101      	adds	r1, #1
 8008e04:	f002 fbe0 	bl	800b5c8 <_strtol_r>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	9e05      	ldr	r6, [sp, #20]
 8008e0c:	1ac2      	subs	r2, r0, r3
 8008e0e:	e7d0      	b.n	8008db2 <_scanf_float+0x37e>
 8008e10:	f011 0f04 	tst.w	r1, #4
 8008e14:	9903      	ldr	r1, [sp, #12]
 8008e16:	600a      	str	r2, [r1, #0]
 8008e18:	d1e6      	bne.n	8008de8 <_scanf_float+0x3b4>
 8008e1a:	681d      	ldr	r5, [r3, #0]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fe86 	bl	8000b34 <__aeabi_dcmpun>
 8008e28:	b128      	cbz	r0, 8008e36 <_scanf_float+0x402>
 8008e2a:	4808      	ldr	r0, [pc, #32]	@ (8008e4c <_scanf_float+0x418>)
 8008e2c:	f000 f9e2 	bl	80091f4 <nanf>
 8008e30:	ed85 0a00 	vstr	s0, [r5]
 8008e34:	e7db      	b.n	8008dee <_scanf_float+0x3ba>
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 fed9 	bl	8000bf0 <__aeabi_d2f>
 8008e3e:	6028      	str	r0, [r5, #0]
 8008e40:	e7d5      	b.n	8008dee <_scanf_float+0x3ba>
 8008e42:	2700      	movs	r7, #0
 8008e44:	e62e      	b.n	8008aa4 <_scanf_float+0x70>
 8008e46:	bf00      	nop
 8008e48:	0800cbf0 	.word	0x0800cbf0
 8008e4c:	0800cd31 	.word	0x0800cd31

08008e50 <std>:
 8008e50:	2300      	movs	r3, #0
 8008e52:	b510      	push	{r4, lr}
 8008e54:	4604      	mov	r4, r0
 8008e56:	6083      	str	r3, [r0, #8]
 8008e58:	8181      	strh	r1, [r0, #12]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e5e:	81c2      	strh	r2, [r0, #14]
 8008e60:	2208      	movs	r2, #8
 8008e62:	6183      	str	r3, [r0, #24]
 8008e64:	e9c0 3300 	strd	r3, r3, [r0]
 8008e68:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e6c:	305c      	adds	r0, #92	@ 0x5c
 8008e6e:	f000 f916 	bl	800909e <memset>
 8008e72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea8 <std+0x58>)
 8008e74:	6224      	str	r4, [r4, #32]
 8008e76:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e78:	4b0c      	ldr	r3, [pc, #48]	@ (8008eac <std+0x5c>)
 8008e7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb0 <std+0x60>)
 8008e7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e80:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb4 <std+0x64>)
 8008e82:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e84:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <std+0x68>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d006      	beq.n	8008e98 <std+0x48>
 8008e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e8e:	4294      	cmp	r4, r2
 8008e90:	d002      	beq.n	8008e98 <std+0x48>
 8008e92:	33d0      	adds	r3, #208	@ 0xd0
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d105      	bne.n	8008ea4 <std+0x54>
 8008e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea0:	f000 b98a 	b.w	80091b8 <__retarget_lock_init_recursive>
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08009019 	.word	0x08009019
 8008eac:	0800903b 	.word	0x0800903b
 8008eb0:	08009073 	.word	0x08009073
 8008eb4:	08009097 	.word	0x08009097
 8008eb8:	200007a8 	.word	0x200007a8

08008ebc <stdio_exit_handler>:
 8008ebc:	4a02      	ldr	r2, [pc, #8]	@ (8008ec8 <stdio_exit_handler+0xc>)
 8008ebe:	4903      	ldr	r1, [pc, #12]	@ (8008ecc <stdio_exit_handler+0x10>)
 8008ec0:	4803      	ldr	r0, [pc, #12]	@ (8008ed0 <stdio_exit_handler+0x14>)
 8008ec2:	f000 b869 	b.w	8008f98 <_fwalk_sglue>
 8008ec6:	bf00      	nop
 8008ec8:	2000004c 	.word	0x2000004c
 8008ecc:	0800b985 	.word	0x0800b985
 8008ed0:	2000005c 	.word	0x2000005c

08008ed4 <cleanup_stdio>:
 8008ed4:	6841      	ldr	r1, [r0, #4]
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f08 <cleanup_stdio+0x34>)
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	b510      	push	{r4, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	d001      	beq.n	8008ee4 <cleanup_stdio+0x10>
 8008ee0:	f002 fd50 	bl	800b984 <_fflush_r>
 8008ee4:	68a1      	ldr	r1, [r4, #8]
 8008ee6:	4b09      	ldr	r3, [pc, #36]	@ (8008f0c <cleanup_stdio+0x38>)
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d002      	beq.n	8008ef2 <cleanup_stdio+0x1e>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f002 fd49 	bl	800b984 <_fflush_r>
 8008ef2:	68e1      	ldr	r1, [r4, #12]
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <cleanup_stdio+0x3c>)
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	d004      	beq.n	8008f04 <cleanup_stdio+0x30>
 8008efa:	4620      	mov	r0, r4
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f002 bd40 	b.w	800b984 <_fflush_r>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	bf00      	nop
 8008f08:	200007a8 	.word	0x200007a8
 8008f0c:	20000810 	.word	0x20000810
 8008f10:	20000878 	.word	0x20000878

08008f14 <global_stdio_init.part.0>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <global_stdio_init.part.0+0x30>)
 8008f18:	2104      	movs	r1, #4
 8008f1a:	4c0b      	ldr	r4, [pc, #44]	@ (8008f48 <global_stdio_init.part.0+0x34>)
 8008f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8008f4c <global_stdio_init.part.0+0x38>)
 8008f1e:	4620      	mov	r0, r4
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f7ff ff94 	bl	8008e50 <std>
 8008f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	2109      	movs	r1, #9
 8008f30:	f7ff ff8e 	bl	8008e50 <std>
 8008f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f38:	2202      	movs	r2, #2
 8008f3a:	2112      	movs	r1, #18
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f40:	f7ff bf86 	b.w	8008e50 <std>
 8008f44:	200008e0 	.word	0x200008e0
 8008f48:	200007a8 	.word	0x200007a8
 8008f4c:	08008ebd 	.word	0x08008ebd

08008f50 <__sfp_lock_acquire>:
 8008f50:	4801      	ldr	r0, [pc, #4]	@ (8008f58 <__sfp_lock_acquire+0x8>)
 8008f52:	f000 b932 	b.w	80091ba <__retarget_lock_acquire_recursive>
 8008f56:	bf00      	nop
 8008f58:	200008e9 	.word	0x200008e9

08008f5c <__sfp_lock_release>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	@ (8008f64 <__sfp_lock_release+0x8>)
 8008f5e:	f000 b92d 	b.w	80091bc <__retarget_lock_release_recursive>
 8008f62:	bf00      	nop
 8008f64:	200008e9 	.word	0x200008e9

08008f68 <__sinit>:
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	f7ff fff0 	bl	8008f50 <__sfp_lock_acquire>
 8008f70:	6a23      	ldr	r3, [r4, #32]
 8008f72:	b11b      	cbz	r3, 8008f7c <__sinit+0x14>
 8008f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f78:	f7ff bff0 	b.w	8008f5c <__sfp_lock_release>
 8008f7c:	4b04      	ldr	r3, [pc, #16]	@ (8008f90 <__sinit+0x28>)
 8008f7e:	6223      	str	r3, [r4, #32]
 8008f80:	4b04      	ldr	r3, [pc, #16]	@ (8008f94 <__sinit+0x2c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f5      	bne.n	8008f74 <__sinit+0xc>
 8008f88:	f7ff ffc4 	bl	8008f14 <global_stdio_init.part.0>
 8008f8c:	e7f2      	b.n	8008f74 <__sinit+0xc>
 8008f8e:	bf00      	nop
 8008f90:	08008ed5 	.word	0x08008ed5
 8008f94:	200008e0 	.word	0x200008e0

08008f98 <_fwalk_sglue>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	4688      	mov	r8, r1
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8008fac:	d505      	bpl.n	8008fba <_fwalk_sglue+0x22>
 8008fae:	6824      	ldr	r4, [r4, #0]
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	d1f7      	bne.n	8008fa4 <_fwalk_sglue+0xc>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	89ab      	ldrh	r3, [r5, #12]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d907      	bls.n	8008fd0 <_fwalk_sglue+0x38>
 8008fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	d003      	beq.n	8008fd0 <_fwalk_sglue+0x38>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	4306      	orrs	r6, r0
 8008fd0:	3568      	adds	r5, #104	@ 0x68
 8008fd2:	e7e9      	b.n	8008fa8 <_fwalk_sglue+0x10>

08008fd4 <siprintf>:
 8008fd4:	b40e      	push	{r1, r2, r3}
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	b09d      	sub	sp, #116	@ 0x74
 8008fda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fde:	2400      	movs	r4, #0
 8008fe0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008fe2:	9002      	str	r0, [sp, #8]
 8008fe4:	9006      	str	r0, [sp, #24]
 8008fe6:	9107      	str	r1, [sp, #28]
 8008fe8:	9104      	str	r1, [sp, #16]
 8008fea:	4809      	ldr	r0, [pc, #36]	@ (8009010 <siprintf+0x3c>)
 8008fec:	4909      	ldr	r1, [pc, #36]	@ (8009014 <siprintf+0x40>)
 8008fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff2:	9105      	str	r1, [sp, #20]
 8008ff4:	a902      	add	r1, sp, #8
 8008ff6:	6800      	ldr	r0, [r0, #0]
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ffc:	f002 fb42 	bl	800b684 <_svfiprintf_r>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	701c      	strb	r4, [r3, #0]
 8009004:	b01d      	add	sp, #116	@ 0x74
 8009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800900a:	b003      	add	sp, #12
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000058 	.word	0x20000058
 8009014:	ffff0208 	.word	0xffff0208

08009018 <__sread>:
 8009018:	b510      	push	{r4, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	f000 f86c 	bl	80090fc <_read_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	bfab      	itete	ge
 8009028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800902a:	89a3      	ldrhlt	r3, [r4, #12]
 800902c:	181b      	addge	r3, r3, r0
 800902e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009032:	bfac      	ite	ge
 8009034:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009036:	81a3      	strhlt	r3, [r4, #12]
 8009038:	bd10      	pop	{r4, pc}

0800903a <__swrite>:
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	461f      	mov	r7, r3
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	4605      	mov	r5, r0
 8009044:	460c      	mov	r4, r1
 8009046:	05db      	lsls	r3, r3, #23
 8009048:	4616      	mov	r6, r2
 800904a:	d505      	bpl.n	8009058 <__swrite+0x1e>
 800904c:	2302      	movs	r3, #2
 800904e:	2200      	movs	r2, #0
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f840 	bl	80090d8 <_lseek_r>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	4632      	mov	r2, r6
 800905c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009060:	4628      	mov	r0, r5
 8009062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	463b      	mov	r3, r7
 800906a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	f000 b867 	b.w	8009140 <_write_r>

08009072 <__sseek>:
 8009072:	b510      	push	{r4, lr}
 8009074:	460c      	mov	r4, r1
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 f82d 	bl	80090d8 <_lseek_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	bf15      	itete	ne
 8009084:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800908a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800908e:	81a3      	strheq	r3, [r4, #12]
 8009090:	bf18      	it	ne
 8009092:	81a3      	strhne	r3, [r4, #12]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__sclose>:
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 b80d 	b.w	80090b8 <_close_r>

0800909e <memset>:
 800909e:	4402      	add	r2, r0
 80090a0:	4603      	mov	r3, r0
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d100      	bne.n	80090a8 <memset+0xa>
 80090a6:	4770      	bx	lr
 80090a8:	f803 1b01 	strb.w	r1, [r3], #1
 80090ac:	e7f9      	b.n	80090a2 <memset+0x4>
	...

080090b0 <_localeconv_r>:
 80090b0:	4800      	ldr	r0, [pc, #0]	@ (80090b4 <_localeconv_r+0x4>)
 80090b2:	4770      	bx	lr
 80090b4:	20000198 	.word	0x20000198

080090b8 <_close_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	2300      	movs	r3, #0
 80090bc:	4d05      	ldr	r5, [pc, #20]	@ (80090d4 <_close_r+0x1c>)
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7fb f95b 	bl	800437e <_close>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_close_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_close_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	200008e4 	.word	0x200008e4

080090d8 <_lseek_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4604      	mov	r4, r0
 80090dc:	4d06      	ldr	r5, [pc, #24]	@ (80090f8 <_lseek_r+0x20>)
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7fb f970 	bl	80043cc <_lseek>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_lseek_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_lseek_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	200008e4 	.word	0x200008e4

080090fc <_read_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4604      	mov	r4, r0
 8009100:	4d06      	ldr	r5, [pc, #24]	@ (800911c <_read_r+0x20>)
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7fb f8fe 	bl	800430c <_read>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_read_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_read_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	200008e4 	.word	0x200008e4

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	2300      	movs	r3, #0
 8009124:	4d05      	ldr	r5, [pc, #20]	@ (800913c <_sbrk_r+0x1c>)
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7fb f95c 	bl	80043e8 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	200008e4 	.word	0x200008e4

08009140 <_write_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	4d06      	ldr	r5, [pc, #24]	@ (8009160 <_write_r+0x20>)
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7fb f8f9 	bl	8004346 <_write>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_write_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_write_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	200008e4 	.word	0x200008e4

08009164 <__errno>:
 8009164:	4b01      	ldr	r3, [pc, #4]	@ (800916c <__errno+0x8>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	20000058 	.word	0x20000058

08009170 <__libc_init_array>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4d0d      	ldr	r5, [pc, #52]	@ (80091a8 <__libc_init_array+0x38>)
 8009174:	2600      	movs	r6, #0
 8009176:	4c0d      	ldr	r4, [pc, #52]	@ (80091ac <__libc_init_array+0x3c>)
 8009178:	1b64      	subs	r4, r4, r5
 800917a:	10a4      	asrs	r4, r4, #2
 800917c:	42a6      	cmp	r6, r4
 800917e:	d109      	bne.n	8009194 <__libc_init_array+0x24>
 8009180:	4d0b      	ldr	r5, [pc, #44]	@ (80091b0 <__libc_init_array+0x40>)
 8009182:	2600      	movs	r6, #0
 8009184:	4c0b      	ldr	r4, [pc, #44]	@ (80091b4 <__libc_init_array+0x44>)
 8009186:	f003 facd 	bl	800c724 <_init>
 800918a:	1b64      	subs	r4, r4, r5
 800918c:	10a4      	asrs	r4, r4, #2
 800918e:	42a6      	cmp	r6, r4
 8009190:	d105      	bne.n	800919e <__libc_init_array+0x2e>
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	f855 3b04 	ldr.w	r3, [r5], #4
 8009198:	3601      	adds	r6, #1
 800919a:	4798      	blx	r3
 800919c:	e7ee      	b.n	800917c <__libc_init_array+0xc>
 800919e:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a2:	3601      	adds	r6, #1
 80091a4:	4798      	blx	r3
 80091a6:	e7f2      	b.n	800918e <__libc_init_array+0x1e>
 80091a8:	0800cfec 	.word	0x0800cfec
 80091ac:	0800cfec 	.word	0x0800cfec
 80091b0:	0800cfec 	.word	0x0800cfec
 80091b4:	0800cff4 	.word	0x0800cff4

080091b8 <__retarget_lock_init_recursive>:
 80091b8:	4770      	bx	lr

080091ba <__retarget_lock_acquire_recursive>:
 80091ba:	4770      	bx	lr

080091bc <__retarget_lock_release_recursive>:
 80091bc:	4770      	bx	lr

080091be <memchr>:
 80091be:	b2c9      	uxtb	r1, r1
 80091c0:	4603      	mov	r3, r0
 80091c2:	4402      	add	r2, r0
 80091c4:	b510      	push	{r4, lr}
 80091c6:	4293      	cmp	r3, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	d101      	bne.n	80091d0 <memchr+0x12>
 80091cc:	2000      	movs	r0, #0
 80091ce:	e003      	b.n	80091d8 <memchr+0x1a>
 80091d0:	7804      	ldrb	r4, [r0, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	428c      	cmp	r4, r1
 80091d6:	d1f6      	bne.n	80091c6 <memchr+0x8>
 80091d8:	bd10      	pop	{r4, pc}

080091da <memcpy>:
 80091da:	440a      	add	r2, r1
 80091dc:	1e43      	subs	r3, r0, #1
 80091de:	4291      	cmp	r1, r2
 80091e0:	d100      	bne.n	80091e4 <memcpy+0xa>
 80091e2:	4770      	bx	lr
 80091e4:	b510      	push	{r4, lr}
 80091e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f0:	d1f9      	bne.n	80091e6 <memcpy+0xc>
 80091f2:	bd10      	pop	{r4, pc}

080091f4 <nanf>:
 80091f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091fc <nanf+0x8>
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	7fc00000 	.word	0x7fc00000

08009200 <quorem>:
 8009200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	6903      	ldr	r3, [r0, #16]
 8009206:	4607      	mov	r7, r0
 8009208:	690c      	ldr	r4, [r1, #16]
 800920a:	42a3      	cmp	r3, r4
 800920c:	f2c0 8083 	blt.w	8009316 <quorem+0x116>
 8009210:	3c01      	subs	r4, #1
 8009212:	f100 0514 	add.w	r5, r0, #20
 8009216:	f101 0814 	add.w	r8, r1, #20
 800921a:	00a3      	lsls	r3, r4, #2
 800921c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009230:	3301      	adds	r3, #1
 8009232:	429a      	cmp	r2, r3
 8009234:	fbb2 f6f3 	udiv	r6, r2, r3
 8009238:	d331      	bcc.n	800929e <quorem+0x9e>
 800923a:	f04f 0a00 	mov.w	sl, #0
 800923e:	46c4      	mov	ip, r8
 8009240:	46ae      	mov	lr, r5
 8009242:	46d3      	mov	fp, sl
 8009244:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009248:	b298      	uxth	r0, r3
 800924a:	45e1      	cmp	r9, ip
 800924c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009250:	fb06 a000 	mla	r0, r6, r0, sl
 8009254:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009258:	b280      	uxth	r0, r0
 800925a:	fb06 2303 	mla	r3, r6, r3, r2
 800925e:	f8de 2000 	ldr.w	r2, [lr]
 8009262:	b292      	uxth	r2, r2
 8009264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009268:	eba2 0200 	sub.w	r2, r2, r0
 800926c:	b29b      	uxth	r3, r3
 800926e:	f8de 0000 	ldr.w	r0, [lr]
 8009272:	445a      	add	r2, fp
 8009274:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009278:	b292      	uxth	r2, r2
 800927a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800927e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009282:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009286:	f84e 2b04 	str.w	r2, [lr], #4
 800928a:	d2db      	bcs.n	8009244 <quorem+0x44>
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	58eb      	ldr	r3, [r5, r3]
 8009290:	b92b      	cbnz	r3, 800929e <quorem+0x9e>
 8009292:	9b01      	ldr	r3, [sp, #4]
 8009294:	3b04      	subs	r3, #4
 8009296:	429d      	cmp	r5, r3
 8009298:	461a      	mov	r2, r3
 800929a:	d330      	bcc.n	80092fe <quorem+0xfe>
 800929c:	613c      	str	r4, [r7, #16]
 800929e:	4638      	mov	r0, r7
 80092a0:	f001 f91a 	bl	800a4d8 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	db26      	blt.n	80092f6 <quorem+0xf6>
 80092a8:	4629      	mov	r1, r5
 80092aa:	2000      	movs	r0, #0
 80092ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80092b0:	f8d1 c000 	ldr.w	ip, [r1]
 80092b4:	fa1f fe82 	uxth.w	lr, r2
 80092b8:	45c1      	cmp	r9, r8
 80092ba:	fa1f f38c 	uxth.w	r3, ip
 80092be:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80092c2:	eba3 030e 	sub.w	r3, r3, lr
 80092c6:	4403      	add	r3, r0
 80092c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092da:	f841 3b04 	str.w	r3, [r1], #4
 80092de:	d2e5      	bcs.n	80092ac <quorem+0xac>
 80092e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e8:	b922      	cbnz	r2, 80092f4 <quorem+0xf4>
 80092ea:	3b04      	subs	r3, #4
 80092ec:	429d      	cmp	r5, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	d30b      	bcc.n	800930a <quorem+0x10a>
 80092f2:	613c      	str	r4, [r7, #16]
 80092f4:	3601      	adds	r6, #1
 80092f6:	4630      	mov	r0, r6
 80092f8:	b003      	add	sp, #12
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	6812      	ldr	r2, [r2, #0]
 8009300:	3b04      	subs	r3, #4
 8009302:	2a00      	cmp	r2, #0
 8009304:	d1ca      	bne.n	800929c <quorem+0x9c>
 8009306:	3c01      	subs	r4, #1
 8009308:	e7c5      	b.n	8009296 <quorem+0x96>
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	3b04      	subs	r3, #4
 800930e:	2a00      	cmp	r2, #0
 8009310:	d1ef      	bne.n	80092f2 <quorem+0xf2>
 8009312:	3c01      	subs	r4, #1
 8009314:	e7ea      	b.n	80092ec <quorem+0xec>
 8009316:	2000      	movs	r0, #0
 8009318:	e7ee      	b.n	80092f8 <quorem+0xf8>
 800931a:	0000      	movs	r0, r0
 800931c:	0000      	movs	r0, r0
	...

08009320 <_dtoa_r>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	69c7      	ldr	r7, [r0, #28]
 8009326:	b097      	sub	sp, #92	@ 0x5c
 8009328:	4681      	mov	r9, r0
 800932a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800932c:	9107      	str	r1, [sp, #28]
 800932e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009330:	9311      	str	r3, [sp, #68]	@ 0x44
 8009332:	ec55 4b10 	vmov	r4, r5, d0
 8009336:	ed8d 0b04 	vstr	d0, [sp, #16]
 800933a:	b97f      	cbnz	r7, 800935c <_dtoa_r+0x3c>
 800933c:	2010      	movs	r0, #16
 800933e:	f7fe fe63 	bl	8008008 <malloc>
 8009342:	4602      	mov	r2, r0
 8009344:	f8c9 001c 	str.w	r0, [r9, #28]
 8009348:	b920      	cbnz	r0, 8009354 <_dtoa_r+0x34>
 800934a:	4ba9      	ldr	r3, [pc, #676]	@ (80095f0 <_dtoa_r+0x2d0>)
 800934c:	21ef      	movs	r1, #239	@ 0xef
 800934e:	48a9      	ldr	r0, [pc, #676]	@ (80095f4 <_dtoa_r+0x2d4>)
 8009350:	f002 fb76 	bl	800ba40 <__assert_func>
 8009354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009358:	6007      	str	r7, [r0, #0]
 800935a:	60c7      	str	r7, [r0, #12]
 800935c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009360:	6819      	ldr	r1, [r3, #0]
 8009362:	b159      	cbz	r1, 800937c <_dtoa_r+0x5c>
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	2301      	movs	r3, #1
 8009368:	4648      	mov	r0, r9
 800936a:	4093      	lsls	r3, r2
 800936c:	604a      	str	r2, [r1, #4]
 800936e:	608b      	str	r3, [r1, #8]
 8009370:	f000 fe32 	bl	8009fd8 <_Bfree>
 8009374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	1e2b      	subs	r3, r5, #0
 800937e:	bfb7      	itett	lt
 8009380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009384:	2300      	movge	r3, #0
 8009386:	2201      	movlt	r2, #1
 8009388:	9305      	strlt	r3, [sp, #20]
 800938a:	bfa8      	it	ge
 800938c:	6033      	strge	r3, [r6, #0]
 800938e:	9f05      	ldr	r7, [sp, #20]
 8009390:	4b99      	ldr	r3, [pc, #612]	@ (80095f8 <_dtoa_r+0x2d8>)
 8009392:	bfb8      	it	lt
 8009394:	6032      	strlt	r2, [r6, #0]
 8009396:	43bb      	bics	r3, r7
 8009398:	d112      	bne.n	80093c0 <_dtoa_r+0xa0>
 800939a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800939e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093a6:	4323      	orrs	r3, r4
 80093a8:	f000 855a 	beq.w	8009e60 <_dtoa_r+0xb40>
 80093ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093ae:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800960c <_dtoa_r+0x2ec>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 855c 	beq.w	8009e70 <_dtoa_r+0xb50>
 80093b8:	f10a 0303 	add.w	r3, sl, #3
 80093bc:	f000 bd56 	b.w	8009e6c <_dtoa_r+0xb4c>
 80093c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	ec51 0b17 	vmov	r0, r1, d7
 80093cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80093d0:	f7f7 fb7e 	bl	8000ad0 <__aeabi_dcmpeq>
 80093d4:	4680      	mov	r8, r0
 80093d6:	b158      	cbz	r0, 80093f0 <_dtoa_r+0xd0>
 80093d8:	2301      	movs	r3, #1
 80093da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093e0:	b113      	cbz	r3, 80093e8 <_dtoa_r+0xc8>
 80093e2:	4b86      	ldr	r3, [pc, #536]	@ (80095fc <_dtoa_r+0x2dc>)
 80093e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009610 <_dtoa_r+0x2f0>
 80093ec:	f000 bd40 	b.w	8009e70 <_dtoa_r+0xb50>
 80093f0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093f4:	aa14      	add	r2, sp, #80	@ 0x50
 80093f6:	a915      	add	r1, sp, #84	@ 0x54
 80093f8:	4648      	mov	r0, r9
 80093fa:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80093fe:	f001 f993 	bl	800a728 <__d2b>
 8009402:	9002      	str	r0, [sp, #8]
 8009404:	2e00      	cmp	r6, #0
 8009406:	d076      	beq.n	80094f6 <_dtoa_r+0x1d6>
 8009408:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800940a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800940e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009416:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800941a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800941e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009422:	4619      	mov	r1, r3
 8009424:	2200      	movs	r2, #0
 8009426:	4b76      	ldr	r3, [pc, #472]	@ (8009600 <_dtoa_r+0x2e0>)
 8009428:	f7f6 ff32 	bl	8000290 <__aeabi_dsub>
 800942c:	a36a      	add	r3, pc, #424	@ (adr r3, 80095d8 <_dtoa_r+0x2b8>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f7 f8e5 	bl	8000600 <__aeabi_dmul>
 8009436:	a36a      	add	r3, pc, #424	@ (adr r3, 80095e0 <_dtoa_r+0x2c0>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f6 ff2a 	bl	8000294 <__adddf3>
 8009440:	4604      	mov	r4, r0
 8009442:	460d      	mov	r5, r1
 8009444:	4630      	mov	r0, r6
 8009446:	f7f7 f871 	bl	800052c <__aeabi_i2d>
 800944a:	a367      	add	r3, pc, #412	@ (adr r3, 80095e8 <_dtoa_r+0x2c8>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f7 f8d6 	bl	8000600 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f6 ff1a 	bl	8000294 <__adddf3>
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	f7f7 fb7c 	bl	8000b60 <__aeabi_d2iz>
 8009468:	2200      	movs	r2, #0
 800946a:	4607      	mov	r7, r0
 800946c:	2300      	movs	r3, #0
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 fb37 	bl	8000ae4 <__aeabi_dcmplt>
 8009476:	b140      	cbz	r0, 800948a <_dtoa_r+0x16a>
 8009478:	4638      	mov	r0, r7
 800947a:	f7f7 f857 	bl	800052c <__aeabi_i2d>
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	f7f7 fb25 	bl	8000ad0 <__aeabi_dcmpeq>
 8009486:	b900      	cbnz	r0, 800948a <_dtoa_r+0x16a>
 8009488:	3f01      	subs	r7, #1
 800948a:	2f16      	cmp	r7, #22
 800948c:	d852      	bhi.n	8009534 <_dtoa_r+0x214>
 800948e:	4b5d      	ldr	r3, [pc, #372]	@ (8009604 <_dtoa_r+0x2e4>)
 8009490:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f7 fb22 	bl	8000ae4 <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d049      	beq.n	8009538 <_dtoa_r+0x218>
 80094a4:	3f01      	subs	r7, #1
 80094a6:	2300      	movs	r3, #0
 80094a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80094aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094ac:	1b9b      	subs	r3, r3, r6
 80094ae:	1e5a      	subs	r2, r3, #1
 80094b0:	bf4c      	ite	mi
 80094b2:	f1c3 0301 	rsbmi	r3, r3, #1
 80094b6:	2300      	movpl	r3, #0
 80094b8:	9206      	str	r2, [sp, #24]
 80094ba:	bf45      	ittet	mi
 80094bc:	9300      	strmi	r3, [sp, #0]
 80094be:	2300      	movmi	r3, #0
 80094c0:	9300      	strpl	r3, [sp, #0]
 80094c2:	9306      	strmi	r3, [sp, #24]
 80094c4:	2f00      	cmp	r7, #0
 80094c6:	db39      	blt.n	800953c <_dtoa_r+0x21c>
 80094c8:	9b06      	ldr	r3, [sp, #24]
 80094ca:	970d      	str	r7, [sp, #52]	@ 0x34
 80094cc:	443b      	add	r3, r7
 80094ce:	9306      	str	r3, [sp, #24]
 80094d0:	2300      	movs	r3, #0
 80094d2:	9308      	str	r3, [sp, #32]
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	2b09      	cmp	r3, #9
 80094d8:	d863      	bhi.n	80095a2 <_dtoa_r+0x282>
 80094da:	2b05      	cmp	r3, #5
 80094dc:	bfc5      	ittet	gt
 80094de:	3b04      	subgt	r3, #4
 80094e0:	2400      	movgt	r4, #0
 80094e2:	2401      	movle	r4, #1
 80094e4:	9307      	strgt	r3, [sp, #28]
 80094e6:	9b07      	ldr	r3, [sp, #28]
 80094e8:	3b02      	subs	r3, #2
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d865      	bhi.n	80095ba <_dtoa_r+0x29a>
 80094ee:	e8df f003 	tbb	[pc, r3]
 80094f2:	5654      	.short	0x5654
 80094f4:	2d39      	.short	0x2d39
 80094f6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80094fa:	441e      	add	r6, r3
 80094fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009500:	2b20      	cmp	r3, #32
 8009502:	bfc9      	itett	gt
 8009504:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009508:	f1c3 0320 	rsble	r3, r3, #32
 800950c:	409f      	lslgt	r7, r3
 800950e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009512:	bfd8      	it	le
 8009514:	fa04 f003 	lslle.w	r0, r4, r3
 8009518:	f106 36ff 	add.w	r6, r6, #4294967295
 800951c:	bfc4      	itt	gt
 800951e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009522:	ea47 0003 	orrgt.w	r0, r7, r3
 8009526:	f7f6 fff1 	bl	800050c <__aeabi_ui2d>
 800952a:	2201      	movs	r2, #1
 800952c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009530:	9212      	str	r2, [sp, #72]	@ 0x48
 8009532:	e776      	b.n	8009422 <_dtoa_r+0x102>
 8009534:	2301      	movs	r3, #1
 8009536:	e7b7      	b.n	80094a8 <_dtoa_r+0x188>
 8009538:	9010      	str	r0, [sp, #64]	@ 0x40
 800953a:	e7b6      	b.n	80094aa <_dtoa_r+0x18a>
 800953c:	9b00      	ldr	r3, [sp, #0]
 800953e:	1bdb      	subs	r3, r3, r7
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	427b      	negs	r3, r7
 8009544:	9308      	str	r3, [sp, #32]
 8009546:	2300      	movs	r3, #0
 8009548:	930d      	str	r3, [sp, #52]	@ 0x34
 800954a:	e7c3      	b.n	80094d4 <_dtoa_r+0x1b4>
 800954c:	2301      	movs	r3, #1
 800954e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009552:	eb07 0b03 	add.w	fp, r7, r3
 8009556:	f10b 0301 	add.w	r3, fp, #1
 800955a:	2b01      	cmp	r3, #1
 800955c:	9303      	str	r3, [sp, #12]
 800955e:	bfb8      	it	lt
 8009560:	2301      	movlt	r3, #1
 8009562:	e006      	b.n	8009572 <_dtoa_r+0x252>
 8009564:	2301      	movs	r3, #1
 8009566:	9309      	str	r3, [sp, #36]	@ 0x24
 8009568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800956a:	2b00      	cmp	r3, #0
 800956c:	dd28      	ble.n	80095c0 <_dtoa_r+0x2a0>
 800956e:	469b      	mov	fp, r3
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009576:	2100      	movs	r1, #0
 8009578:	2204      	movs	r2, #4
 800957a:	f102 0514 	add.w	r5, r2, #20
 800957e:	429d      	cmp	r5, r3
 8009580:	d926      	bls.n	80095d0 <_dtoa_r+0x2b0>
 8009582:	6041      	str	r1, [r0, #4]
 8009584:	4648      	mov	r0, r9
 8009586:	f000 fce7 	bl	8009f58 <_Balloc>
 800958a:	4682      	mov	sl, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	d141      	bne.n	8009614 <_dtoa_r+0x2f4>
 8009590:	4b1d      	ldr	r3, [pc, #116]	@ (8009608 <_dtoa_r+0x2e8>)
 8009592:	4602      	mov	r2, r0
 8009594:	f240 11af 	movw	r1, #431	@ 0x1af
 8009598:	e6d9      	b.n	800934e <_dtoa_r+0x2e>
 800959a:	2300      	movs	r3, #0
 800959c:	e7e3      	b.n	8009566 <_dtoa_r+0x246>
 800959e:	2300      	movs	r3, #0
 80095a0:	e7d5      	b.n	800954e <_dtoa_r+0x22e>
 80095a2:	2401      	movs	r4, #1
 80095a4:	2300      	movs	r3, #0
 80095a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	f04f 3bff 	mov.w	fp, #4294967295
 80095ae:	2200      	movs	r2, #0
 80095b0:	2312      	movs	r3, #18
 80095b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80095b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80095b8:	e7db      	b.n	8009572 <_dtoa_r+0x252>
 80095ba:	2301      	movs	r3, #1
 80095bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095be:	e7f4      	b.n	80095aa <_dtoa_r+0x28a>
 80095c0:	f04f 0b01 	mov.w	fp, #1
 80095c4:	465b      	mov	r3, fp
 80095c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80095ca:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80095ce:	e7d0      	b.n	8009572 <_dtoa_r+0x252>
 80095d0:	3101      	adds	r1, #1
 80095d2:	0052      	lsls	r2, r2, #1
 80095d4:	e7d1      	b.n	800957a <_dtoa_r+0x25a>
 80095d6:	bf00      	nop
 80095d8:	636f4361 	.word	0x636f4361
 80095dc:	3fd287a7 	.word	0x3fd287a7
 80095e0:	8b60c8b3 	.word	0x8b60c8b3
 80095e4:	3fc68a28 	.word	0x3fc68a28
 80095e8:	509f79fb 	.word	0x509f79fb
 80095ec:	3fd34413 	.word	0x3fd34413
 80095f0:	0800cc02 	.word	0x0800cc02
 80095f4:	0800cc19 	.word	0x0800cc19
 80095f8:	7ff00000 	.word	0x7ff00000
 80095fc:	0800cbcd 	.word	0x0800cbcd
 8009600:	3ff80000 	.word	0x3ff80000
 8009604:	0800cdc8 	.word	0x0800cdc8
 8009608:	0800cc71 	.word	0x0800cc71
 800960c:	0800cbfe 	.word	0x0800cbfe
 8009610:	0800cbcc 	.word	0x0800cbcc
 8009614:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009618:	6018      	str	r0, [r3, #0]
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	2b0e      	cmp	r3, #14
 800961e:	f200 80a1 	bhi.w	8009764 <_dtoa_r+0x444>
 8009622:	2c00      	cmp	r4, #0
 8009624:	f000 809e 	beq.w	8009764 <_dtoa_r+0x444>
 8009628:	2f00      	cmp	r7, #0
 800962a:	dd33      	ble.n	8009694 <_dtoa_r+0x374>
 800962c:	f007 020f 	and.w	r2, r7, #15
 8009630:	4b9b      	ldr	r3, [pc, #620]	@ (80098a0 <_dtoa_r+0x580>)
 8009632:	05f8      	lsls	r0, r7, #23
 8009634:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800963c:	ed93 7b00 	vldr	d7, [r3]
 8009640:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009644:	d516      	bpl.n	8009674 <_dtoa_r+0x354>
 8009646:	4b97      	ldr	r3, [pc, #604]	@ (80098a4 <_dtoa_r+0x584>)
 8009648:	f004 040f 	and.w	r4, r4, #15
 800964c:	2603      	movs	r6, #3
 800964e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009656:	f7f7 f8fd 	bl	8000854 <__aeabi_ddiv>
 800965a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800965e:	4d91      	ldr	r5, [pc, #580]	@ (80098a4 <_dtoa_r+0x584>)
 8009660:	b954      	cbnz	r4, 8009678 <_dtoa_r+0x358>
 8009662:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800966a:	f7f7 f8f3 	bl	8000854 <__aeabi_ddiv>
 800966e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009672:	e028      	b.n	80096c6 <_dtoa_r+0x3a6>
 8009674:	2602      	movs	r6, #2
 8009676:	e7f2      	b.n	800965e <_dtoa_r+0x33e>
 8009678:	07e1      	lsls	r1, r4, #31
 800967a:	d508      	bpl.n	800968e <_dtoa_r+0x36e>
 800967c:	3601      	adds	r6, #1
 800967e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009686:	f7f6 ffbb 	bl	8000600 <__aeabi_dmul>
 800968a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800968e:	1064      	asrs	r4, r4, #1
 8009690:	3508      	adds	r5, #8
 8009692:	e7e5      	b.n	8009660 <_dtoa_r+0x340>
 8009694:	f000 80af 	beq.w	80097f6 <_dtoa_r+0x4d6>
 8009698:	427c      	negs	r4, r7
 800969a:	4b81      	ldr	r3, [pc, #516]	@ (80098a0 <_dtoa_r+0x580>)
 800969c:	4d81      	ldr	r5, [pc, #516]	@ (80098a4 <_dtoa_r+0x584>)
 800969e:	2602      	movs	r6, #2
 80096a0:	f004 020f 	and.w	r2, r4, #15
 80096a4:	1124      	asrs	r4, r4, #4
 80096a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	f7f6 ffa5 	bl	8000600 <__aeabi_dmul>
 80096b6:	2300      	movs	r3, #0
 80096b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096bc:	2c00      	cmp	r4, #0
 80096be:	f040 808f 	bne.w	80097e0 <_dtoa_r+0x4c0>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d3      	bne.n	800966e <_dtoa_r+0x34e>
 80096c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8094 	beq.w	80097fa <_dtoa_r+0x4da>
 80096d2:	2200      	movs	r2, #0
 80096d4:	4b74      	ldr	r3, [pc, #464]	@ (80098a8 <_dtoa_r+0x588>)
 80096d6:	4620      	mov	r0, r4
 80096d8:	4629      	mov	r1, r5
 80096da:	f7f7 fa03 	bl	8000ae4 <__aeabi_dcmplt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f000 808b 	beq.w	80097fa <_dtoa_r+0x4da>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8087 	beq.w	80097fa <_dtoa_r+0x4da>
 80096ec:	f1bb 0f00 	cmp.w	fp, #0
 80096f0:	dd34      	ble.n	800975c <_dtoa_r+0x43c>
 80096f2:	4620      	mov	r0, r4
 80096f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80096f8:	3601      	adds	r6, #1
 80096fa:	465c      	mov	r4, fp
 80096fc:	2200      	movs	r2, #0
 80096fe:	4b6b      	ldr	r3, [pc, #428]	@ (80098ac <_dtoa_r+0x58c>)
 8009700:	4629      	mov	r1, r5
 8009702:	f7f6 ff7d 	bl	8000600 <__aeabi_dmul>
 8009706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800970a:	4630      	mov	r0, r6
 800970c:	f7f6 ff0e 	bl	800052c <__aeabi_i2d>
 8009710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009714:	f7f6 ff74 	bl	8000600 <__aeabi_dmul>
 8009718:	2200      	movs	r2, #0
 800971a:	4b65      	ldr	r3, [pc, #404]	@ (80098b0 <_dtoa_r+0x590>)
 800971c:	f7f6 fdba 	bl	8000294 <__adddf3>
 8009720:	4605      	mov	r5, r0
 8009722:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009726:	2c00      	cmp	r4, #0
 8009728:	d16a      	bne.n	8009800 <_dtoa_r+0x4e0>
 800972a:	2200      	movs	r2, #0
 800972c:	4b61      	ldr	r3, [pc, #388]	@ (80098b4 <_dtoa_r+0x594>)
 800972e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009732:	f7f6 fdad 	bl	8000290 <__aeabi_dsub>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800973e:	462a      	mov	r2, r5
 8009740:	4633      	mov	r3, r6
 8009742:	f7f7 f9ed 	bl	8000b20 <__aeabi_dcmpgt>
 8009746:	2800      	cmp	r0, #0
 8009748:	f040 8298 	bne.w	8009c7c <_dtoa_r+0x95c>
 800974c:	462a      	mov	r2, r5
 800974e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	f7f7 f9c5 	bl	8000ae4 <__aeabi_dcmplt>
 800975a:	bb38      	cbnz	r0, 80097ac <_dtoa_r+0x48c>
 800975c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009760:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009764:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009766:	2b00      	cmp	r3, #0
 8009768:	f2c0 8157 	blt.w	8009a1a <_dtoa_r+0x6fa>
 800976c:	2f0e      	cmp	r7, #14
 800976e:	f300 8154 	bgt.w	8009a1a <_dtoa_r+0x6fa>
 8009772:	4b4b      	ldr	r3, [pc, #300]	@ (80098a0 <_dtoa_r+0x580>)
 8009774:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009778:	ed93 7b00 	vldr	d7, [r3]
 800977c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800977e:	2b00      	cmp	r3, #0
 8009780:	ed8d 7b00 	vstr	d7, [sp]
 8009784:	f280 80e5 	bge.w	8009952 <_dtoa_r+0x632>
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f300 80e1 	bgt.w	8009952 <_dtoa_r+0x632>
 8009790:	d10c      	bne.n	80097ac <_dtoa_r+0x48c>
 8009792:	2200      	movs	r2, #0
 8009794:	4b47      	ldr	r3, [pc, #284]	@ (80098b4 <_dtoa_r+0x594>)
 8009796:	ec51 0b17 	vmov	r0, r1, d7
 800979a:	f7f6 ff31 	bl	8000600 <__aeabi_dmul>
 800979e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097a2:	f7f7 f9b3 	bl	8000b0c <__aeabi_dcmpge>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f000 8266 	beq.w	8009c78 <_dtoa_r+0x958>
 80097ac:	2400      	movs	r4, #0
 80097ae:	4625      	mov	r5, r4
 80097b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097b2:	4656      	mov	r6, sl
 80097b4:	ea6f 0803 	mvn.w	r8, r3
 80097b8:	2700      	movs	r7, #0
 80097ba:	4621      	mov	r1, r4
 80097bc:	4648      	mov	r0, r9
 80097be:	f000 fc0b 	bl	8009fd8 <_Bfree>
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	f000 80bd 	beq.w	8009942 <_dtoa_r+0x622>
 80097c8:	b12f      	cbz	r7, 80097d6 <_dtoa_r+0x4b6>
 80097ca:	42af      	cmp	r7, r5
 80097cc:	d003      	beq.n	80097d6 <_dtoa_r+0x4b6>
 80097ce:	4639      	mov	r1, r7
 80097d0:	4648      	mov	r0, r9
 80097d2:	f000 fc01 	bl	8009fd8 <_Bfree>
 80097d6:	4629      	mov	r1, r5
 80097d8:	4648      	mov	r0, r9
 80097da:	f000 fbfd 	bl	8009fd8 <_Bfree>
 80097de:	e0b0      	b.n	8009942 <_dtoa_r+0x622>
 80097e0:	07e2      	lsls	r2, r4, #31
 80097e2:	d505      	bpl.n	80097f0 <_dtoa_r+0x4d0>
 80097e4:	3601      	adds	r6, #1
 80097e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097ea:	f7f6 ff09 	bl	8000600 <__aeabi_dmul>
 80097ee:	2301      	movs	r3, #1
 80097f0:	1064      	asrs	r4, r4, #1
 80097f2:	3508      	adds	r5, #8
 80097f4:	e762      	b.n	80096bc <_dtoa_r+0x39c>
 80097f6:	2602      	movs	r6, #2
 80097f8:	e765      	b.n	80096c6 <_dtoa_r+0x3a6>
 80097fa:	46b8      	mov	r8, r7
 80097fc:	9c03      	ldr	r4, [sp, #12]
 80097fe:	e784      	b.n	800970a <_dtoa_r+0x3ea>
 8009800:	4b27      	ldr	r3, [pc, #156]	@ (80098a0 <_dtoa_r+0x580>)
 8009802:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009808:	4454      	add	r4, sl
 800980a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800980e:	2900      	cmp	r1, #0
 8009810:	d054      	beq.n	80098bc <_dtoa_r+0x59c>
 8009812:	2000      	movs	r0, #0
 8009814:	4928      	ldr	r1, [pc, #160]	@ (80098b8 <_dtoa_r+0x598>)
 8009816:	f7f7 f81d 	bl	8000854 <__aeabi_ddiv>
 800981a:	4633      	mov	r3, r6
 800981c:	4656      	mov	r6, sl
 800981e:	462a      	mov	r2, r5
 8009820:	f7f6 fd36 	bl	8000290 <__aeabi_dsub>
 8009824:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800982c:	f7f7 f998 	bl	8000b60 <__aeabi_d2iz>
 8009830:	4605      	mov	r5, r0
 8009832:	f7f6 fe7b 	bl	800052c <__aeabi_i2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	3530      	adds	r5, #48	@ 0x30
 800983c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009840:	f7f6 fd26 	bl	8000290 <__aeabi_dsub>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	f806 5b01 	strb.w	r5, [r6], #1
 800984c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009850:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009854:	f7f7 f946 	bl	8000ae4 <__aeabi_dcmplt>
 8009858:	2800      	cmp	r0, #0
 800985a:	d172      	bne.n	8009942 <_dtoa_r+0x622>
 800985c:	2000      	movs	r0, #0
 800985e:	4912      	ldr	r1, [pc, #72]	@ (80098a8 <_dtoa_r+0x588>)
 8009860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009864:	f7f6 fd14 	bl	8000290 <__aeabi_dsub>
 8009868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800986c:	f7f7 f93a 	bl	8000ae4 <__aeabi_dcmplt>
 8009870:	2800      	cmp	r0, #0
 8009872:	f040 80b4 	bne.w	80099de <_dtoa_r+0x6be>
 8009876:	42a6      	cmp	r6, r4
 8009878:	f43f af70 	beq.w	800975c <_dtoa_r+0x43c>
 800987c:	2200      	movs	r2, #0
 800987e:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <_dtoa_r+0x58c>)
 8009880:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009884:	f7f6 febc 	bl	8000600 <__aeabi_dmul>
 8009888:	2200      	movs	r2, #0
 800988a:	4b08      	ldr	r3, [pc, #32]	@ (80098ac <_dtoa_r+0x58c>)
 800988c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009894:	f7f6 feb4 	bl	8000600 <__aeabi_dmul>
 8009898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800989c:	e7c4      	b.n	8009828 <_dtoa_r+0x508>
 800989e:	bf00      	nop
 80098a0:	0800cdc8 	.word	0x0800cdc8
 80098a4:	0800cda0 	.word	0x0800cda0
 80098a8:	3ff00000 	.word	0x3ff00000
 80098ac:	40240000 	.word	0x40240000
 80098b0:	401c0000 	.word	0x401c0000
 80098b4:	40140000 	.word	0x40140000
 80098b8:	3fe00000 	.word	0x3fe00000
 80098bc:	4631      	mov	r1, r6
 80098be:	4656      	mov	r6, sl
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7f6 fe9d 	bl	8000600 <__aeabi_dmul>
 80098c6:	9413      	str	r4, [sp, #76]	@ 0x4c
 80098c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d0:	f7f7 f946 	bl	8000b60 <__aeabi_d2iz>
 80098d4:	4605      	mov	r5, r0
 80098d6:	f7f6 fe29 	bl	800052c <__aeabi_i2d>
 80098da:	4602      	mov	r2, r0
 80098dc:	3530      	adds	r5, #48	@ 0x30
 80098de:	460b      	mov	r3, r1
 80098e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098e4:	f7f6 fcd4 	bl	8000290 <__aeabi_dsub>
 80098e8:	f806 5b01 	strb.w	r5, [r6], #1
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	42a6      	cmp	r6, r4
 80098f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	d124      	bne.n	8009946 <_dtoa_r+0x626>
 80098fc:	4baf      	ldr	r3, [pc, #700]	@ (8009bbc <_dtoa_r+0x89c>)
 80098fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009902:	f7f6 fcc7 	bl	8000294 <__adddf3>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800990e:	f7f7 f907 	bl	8000b20 <__aeabi_dcmpgt>
 8009912:	2800      	cmp	r0, #0
 8009914:	d163      	bne.n	80099de <_dtoa_r+0x6be>
 8009916:	2000      	movs	r0, #0
 8009918:	49a8      	ldr	r1, [pc, #672]	@ (8009bbc <_dtoa_r+0x89c>)
 800991a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800991e:	f7f6 fcb7 	bl	8000290 <__aeabi_dsub>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992a:	f7f7 f8db 	bl	8000ae4 <__aeabi_dcmplt>
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f af14 	beq.w	800975c <_dtoa_r+0x43c>
 8009934:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009936:	1e73      	subs	r3, r6, #1
 8009938:	9313      	str	r3, [sp, #76]	@ 0x4c
 800993a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800993e:	2b30      	cmp	r3, #48	@ 0x30
 8009940:	d0f8      	beq.n	8009934 <_dtoa_r+0x614>
 8009942:	4647      	mov	r7, r8
 8009944:	e03b      	b.n	80099be <_dtoa_r+0x69e>
 8009946:	4b9e      	ldr	r3, [pc, #632]	@ (8009bc0 <_dtoa_r+0x8a0>)
 8009948:	f7f6 fe5a 	bl	8000600 <__aeabi_dmul>
 800994c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009950:	e7bc      	b.n	80098cc <_dtoa_r+0x5ac>
 8009952:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009956:	4656      	mov	r6, sl
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009960:	f7f6 ff78 	bl	8000854 <__aeabi_ddiv>
 8009964:	f7f7 f8fc 	bl	8000b60 <__aeabi_d2iz>
 8009968:	4680      	mov	r8, r0
 800996a:	f7f6 fddf 	bl	800052c <__aeabi_i2d>
 800996e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009972:	f7f6 fe45 	bl	8000600 <__aeabi_dmul>
 8009976:	4602      	mov	r2, r0
 8009978:	4620      	mov	r0, r4
 800997a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800997e:	460b      	mov	r3, r1
 8009980:	4629      	mov	r1, r5
 8009982:	f7f6 fc85 	bl	8000290 <__aeabi_dsub>
 8009986:	9d03      	ldr	r5, [sp, #12]
 8009988:	f806 4b01 	strb.w	r4, [r6], #1
 800998c:	eba6 040a 	sub.w	r4, r6, sl
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	42a5      	cmp	r5, r4
 8009996:	d133      	bne.n	8009a00 <_dtoa_r+0x6e0>
 8009998:	f7f6 fc7c 	bl	8000294 <__adddf3>
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a4:	f7f7 f8bc 	bl	8000b20 <__aeabi_dcmpgt>
 80099a8:	b9c0      	cbnz	r0, 80099dc <_dtoa_r+0x6bc>
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b2:	f7f7 f88d 	bl	8000ad0 <__aeabi_dcmpeq>
 80099b6:	b110      	cbz	r0, 80099be <_dtoa_r+0x69e>
 80099b8:	f018 0f01 	tst.w	r8, #1
 80099bc:	d10e      	bne.n	80099dc <_dtoa_r+0x6bc>
 80099be:	9902      	ldr	r1, [sp, #8]
 80099c0:	4648      	mov	r0, r9
 80099c2:	f000 fb09 	bl	8009fd8 <_Bfree>
 80099c6:	2300      	movs	r3, #0
 80099c8:	3701      	adds	r7, #1
 80099ca:	7033      	strb	r3, [r6, #0]
 80099cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099ce:	601f      	str	r7, [r3, #0]
 80099d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 824c 	beq.w	8009e70 <_dtoa_r+0xb50>
 80099d8:	601e      	str	r6, [r3, #0]
 80099da:	e249      	b.n	8009e70 <_dtoa_r+0xb50>
 80099dc:	46b8      	mov	r8, r7
 80099de:	4633      	mov	r3, r6
 80099e0:	461e      	mov	r6, r3
 80099e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e6:	2a39      	cmp	r2, #57	@ 0x39
 80099e8:	d106      	bne.n	80099f8 <_dtoa_r+0x6d8>
 80099ea:	459a      	cmp	sl, r3
 80099ec:	d1f8      	bne.n	80099e0 <_dtoa_r+0x6c0>
 80099ee:	2230      	movs	r2, #48	@ 0x30
 80099f0:	f108 0801 	add.w	r8, r8, #1
 80099f4:	f88a 2000 	strb.w	r2, [sl]
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	3201      	adds	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	e7a0      	b.n	8009942 <_dtoa_r+0x622>
 8009a00:	2200      	movs	r2, #0
 8009a02:	4b6f      	ldr	r3, [pc, #444]	@ (8009bc0 <_dtoa_r+0x8a0>)
 8009a04:	f7f6 fdfc 	bl	8000600 <__aeabi_dmul>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	460d      	mov	r5, r1
 8009a10:	f7f7 f85e 	bl	8000ad0 <__aeabi_dcmpeq>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d09f      	beq.n	8009958 <_dtoa_r+0x638>
 8009a18:	e7d1      	b.n	80099be <_dtoa_r+0x69e>
 8009a1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	f000 80ea 	beq.w	8009bf6 <_dtoa_r+0x8d6>
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	2a01      	cmp	r2, #1
 8009a26:	f300 80cd 	bgt.w	8009bc4 <_dtoa_r+0x8a4>
 8009a2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f000 80c1 	beq.w	8009bb4 <_dtoa_r+0x894>
 8009a32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a36:	9c08      	ldr	r4, [sp, #32]
 8009a38:	9e00      	ldr	r6, [sp, #0]
 8009a3a:	9a00      	ldr	r2, [sp, #0]
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	4648      	mov	r0, r9
 8009a40:	441a      	add	r2, r3
 8009a42:	9200      	str	r2, [sp, #0]
 8009a44:	9a06      	ldr	r2, [sp, #24]
 8009a46:	441a      	add	r2, r3
 8009a48:	9206      	str	r2, [sp, #24]
 8009a4a:	f000 fbc5 	bl	800a1d8 <__i2b>
 8009a4e:	4605      	mov	r5, r0
 8009a50:	b166      	cbz	r6, 8009a6c <_dtoa_r+0x74c>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd09      	ble.n	8009a6c <_dtoa_r+0x74c>
 8009a58:	42b3      	cmp	r3, r6
 8009a5a:	9a00      	ldr	r2, [sp, #0]
 8009a5c:	bfa8      	it	ge
 8009a5e:	4633      	movge	r3, r6
 8009a60:	1ad2      	subs	r2, r2, r3
 8009a62:	1af6      	subs	r6, r6, r3
 8009a64:	9200      	str	r2, [sp, #0]
 8009a66:	9a06      	ldr	r2, [sp, #24]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	b30b      	cbz	r3, 8009ab4 <_dtoa_r+0x794>
 8009a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80c6 	beq.w	8009c04 <_dtoa_r+0x8e4>
 8009a78:	2c00      	cmp	r4, #0
 8009a7a:	f000 80c0 	beq.w	8009bfe <_dtoa_r+0x8de>
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4622      	mov	r2, r4
 8009a82:	4648      	mov	r0, r9
 8009a84:	f000 fc62 	bl	800a34c <__pow5mult>
 8009a88:	9a02      	ldr	r2, [sp, #8]
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	4648      	mov	r0, r9
 8009a90:	f000 fbb8 	bl	800a204 <__multiply>
 8009a94:	9902      	ldr	r1, [sp, #8]
 8009a96:	4680      	mov	r8, r0
 8009a98:	4648      	mov	r0, r9
 8009a9a:	f000 fa9d 	bl	8009fd8 <_Bfree>
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	1b1b      	subs	r3, r3, r4
 8009aa2:	9308      	str	r3, [sp, #32]
 8009aa4:	f000 80b1 	beq.w	8009c0a <_dtoa_r+0x8ea>
 8009aa8:	9a08      	ldr	r2, [sp, #32]
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4648      	mov	r0, r9
 8009aae:	f000 fc4d 	bl	800a34c <__pow5mult>
 8009ab2:	9002      	str	r0, [sp, #8]
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fb8e 	bl	800a1d8 <__i2b>
 8009abc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009abe:	4604      	mov	r4, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 81d9 	beq.w	8009e78 <_dtoa_r+0xb58>
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4601      	mov	r1, r0
 8009aca:	4648      	mov	r0, r9
 8009acc:	f000 fc3e 	bl	800a34c <__pow5mult>
 8009ad0:	9b07      	ldr	r3, [sp, #28]
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	f300 809f 	bgt.w	8009c18 <_dtoa_r+0x8f8>
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 8097 	bne.w	8009c10 <_dtoa_r+0x8f0>
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f040 8093 	bne.w	8009c14 <_dtoa_r+0x8f4>
 8009aee:	9b05      	ldr	r3, [sp, #20]
 8009af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009af4:	0d1b      	lsrs	r3, r3, #20
 8009af6:	051b      	lsls	r3, r3, #20
 8009af8:	b133      	cbz	r3, 8009b08 <_dtoa_r+0x7e8>
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	3301      	adds	r3, #1
 8009b04:	9306      	str	r3, [sp, #24]
 8009b06:	2301      	movs	r3, #1
 8009b08:	9308      	str	r3, [sp, #32]
 8009b0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 81b9 	beq.w	8009e84 <_dtoa_r+0xb64>
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b18:	6918      	ldr	r0, [r3, #16]
 8009b1a:	f000 fb11 	bl	800a140 <__hi0bits>
 8009b1e:	f1c0 0020 	rsb	r0, r0, #32
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	4418      	add	r0, r3
 8009b26:	f010 001f 	ands.w	r0, r0, #31
 8009b2a:	f000 8082 	beq.w	8009c32 <_dtoa_r+0x912>
 8009b2e:	f1c0 0320 	rsb	r3, r0, #32
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	dd73      	ble.n	8009c1e <_dtoa_r+0x8fe>
 8009b36:	f1c0 001c 	rsb	r0, r0, #28
 8009b3a:	9b00      	ldr	r3, [sp, #0]
 8009b3c:	4403      	add	r3, r0
 8009b3e:	4406      	add	r6, r0
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	4403      	add	r3, r0
 8009b46:	9306      	str	r3, [sp, #24]
 8009b48:	9b00      	ldr	r3, [sp, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dd05      	ble.n	8009b5a <_dtoa_r+0x83a>
 8009b4e:	461a      	mov	r2, r3
 8009b50:	9902      	ldr	r1, [sp, #8]
 8009b52:	4648      	mov	r0, r9
 8009b54:	f000 fc54 	bl	800a400 <__lshift>
 8009b58:	9002      	str	r0, [sp, #8]
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd05      	ble.n	8009b6c <_dtoa_r+0x84c>
 8009b60:	4621      	mov	r1, r4
 8009b62:	461a      	mov	r2, r3
 8009b64:	4648      	mov	r0, r9
 8009b66:	f000 fc4b 	bl	800a400 <__lshift>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d061      	beq.n	8009c36 <_dtoa_r+0x916>
 8009b72:	4621      	mov	r1, r4
 8009b74:	9802      	ldr	r0, [sp, #8]
 8009b76:	f000 fcaf 	bl	800a4d8 <__mcmp>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	da5b      	bge.n	8009c36 <_dtoa_r+0x916>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	220a      	movs	r2, #10
 8009b82:	9902      	ldr	r1, [sp, #8]
 8009b84:	4648      	mov	r0, r9
 8009b86:	f000 fa49 	bl	800a01c <__multadd>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b90:	9002      	str	r0, [sp, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8178 	beq.w	8009e88 <_dtoa_r+0xb68>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	4648      	mov	r0, r9
 8009ba0:	f000 fa3c 	bl	800a01c <__multadd>
 8009ba4:	f1bb 0f00 	cmp.w	fp, #0
 8009ba8:	4605      	mov	r5, r0
 8009baa:	dc6f      	bgt.n	8009c8c <_dtoa_r+0x96c>
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	dc49      	bgt.n	8009c46 <_dtoa_r+0x926>
 8009bb2:	e06b      	b.n	8009c8c <_dtoa_r+0x96c>
 8009bb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bba:	e73c      	b.n	8009a36 <_dtoa_r+0x716>
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	40240000 	.word	0x40240000
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	1e5c      	subs	r4, r3, #1
 8009bc8:	9b08      	ldr	r3, [sp, #32]
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	db09      	blt.n	8009be2 <_dtoa_r+0x8c2>
 8009bce:	1b1c      	subs	r4, r3, r4
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f6bf af30 	bge.w	8009a38 <_dtoa_r+0x718>
 8009bd8:	9b00      	ldr	r3, [sp, #0]
 8009bda:	9a03      	ldr	r2, [sp, #12]
 8009bdc:	1a9e      	subs	r6, r3, r2
 8009bde:	2300      	movs	r3, #0
 8009be0:	e72b      	b.n	8009a3a <_dtoa_r+0x71a>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009be6:	1ae3      	subs	r3, r4, r3
 8009be8:	9408      	str	r4, [sp, #32]
 8009bea:	9e00      	ldr	r6, [sp, #0]
 8009bec:	2400      	movs	r4, #0
 8009bee:	441a      	add	r2, r3
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	920d      	str	r2, [sp, #52]	@ 0x34
 8009bf4:	e721      	b.n	8009a3a <_dtoa_r+0x71a>
 8009bf6:	9c08      	ldr	r4, [sp, #32]
 8009bf8:	9e00      	ldr	r6, [sp, #0]
 8009bfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009bfc:	e728      	b.n	8009a50 <_dtoa_r+0x730>
 8009bfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c02:	e751      	b.n	8009aa8 <_dtoa_r+0x788>
 8009c04:	9a08      	ldr	r2, [sp, #32]
 8009c06:	9902      	ldr	r1, [sp, #8]
 8009c08:	e750      	b.n	8009aac <_dtoa_r+0x78c>
 8009c0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c0e:	e751      	b.n	8009ab4 <_dtoa_r+0x794>
 8009c10:	2300      	movs	r3, #0
 8009c12:	e779      	b.n	8009b08 <_dtoa_r+0x7e8>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	e777      	b.n	8009b08 <_dtoa_r+0x7e8>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9308      	str	r3, [sp, #32]
 8009c1c:	e779      	b.n	8009b12 <_dtoa_r+0x7f2>
 8009c1e:	d093      	beq.n	8009b48 <_dtoa_r+0x828>
 8009c20:	331c      	adds	r3, #28
 8009c22:	9a00      	ldr	r2, [sp, #0]
 8009c24:	441a      	add	r2, r3
 8009c26:	441e      	add	r6, r3
 8009c28:	9200      	str	r2, [sp, #0]
 8009c2a:	9a06      	ldr	r2, [sp, #24]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	9206      	str	r2, [sp, #24]
 8009c30:	e78a      	b.n	8009b48 <_dtoa_r+0x828>
 8009c32:	4603      	mov	r3, r0
 8009c34:	e7f4      	b.n	8009c20 <_dtoa_r+0x900>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	46b8      	mov	r8, r7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dc20      	bgt.n	8009c80 <_dtoa_r+0x960>
 8009c3e:	469b      	mov	fp, r3
 8009c40:	9b07      	ldr	r3, [sp, #28]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	dd1e      	ble.n	8009c84 <_dtoa_r+0x964>
 8009c46:	f1bb 0f00 	cmp.w	fp, #0
 8009c4a:	f47f adb1 	bne.w	80097b0 <_dtoa_r+0x490>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	465b      	mov	r3, fp
 8009c52:	2205      	movs	r2, #5
 8009c54:	4648      	mov	r0, r9
 8009c56:	f000 f9e1 	bl	800a01c <__multadd>
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	9802      	ldr	r0, [sp, #8]
 8009c60:	f000 fc3a 	bl	800a4d8 <__mcmp>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f77f ada3 	ble.w	80097b0 <_dtoa_r+0x490>
 8009c6a:	4656      	mov	r6, sl
 8009c6c:	2331      	movs	r3, #49	@ 0x31
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	f806 3b01 	strb.w	r3, [r6], #1
 8009c76:	e59f      	b.n	80097b8 <_dtoa_r+0x498>
 8009c78:	46b8      	mov	r8, r7
 8009c7a:	9c03      	ldr	r4, [sp, #12]
 8009c7c:	4625      	mov	r5, r4
 8009c7e:	e7f4      	b.n	8009c6a <_dtoa_r+0x94a>
 8009c80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8102 	beq.w	8009e90 <_dtoa_r+0xb70>
 8009c8c:	2e00      	cmp	r6, #0
 8009c8e:	dd05      	ble.n	8009c9c <_dtoa_r+0x97c>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4632      	mov	r2, r6
 8009c94:	4648      	mov	r0, r9
 8009c96:	f000 fbb3 	bl	800a400 <__lshift>
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	9b08      	ldr	r3, [sp, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d05c      	beq.n	8009d5c <_dtoa_r+0xa3c>
 8009ca2:	6869      	ldr	r1, [r5, #4]
 8009ca4:	4648      	mov	r0, r9
 8009ca6:	f000 f957 	bl	8009f58 <_Balloc>
 8009caa:	4606      	mov	r6, r0
 8009cac:	b928      	cbnz	r0, 8009cba <_dtoa_r+0x99a>
 8009cae:	4b83      	ldr	r3, [pc, #524]	@ (8009ebc <_dtoa_r+0xb9c>)
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cb6:	f7ff bb4a 	b.w	800934e <_dtoa_r+0x2e>
 8009cba:	692a      	ldr	r2, [r5, #16]
 8009cbc:	f105 010c 	add.w	r1, r5, #12
 8009cc0:	300c      	adds	r0, #12
 8009cc2:	3202      	adds	r2, #2
 8009cc4:	0092      	lsls	r2, r2, #2
 8009cc6:	f7ff fa88 	bl	80091da <memcpy>
 8009cca:	2201      	movs	r2, #1
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4648      	mov	r0, r9
 8009cd0:	f000 fb96 	bl	800a400 <__lshift>
 8009cd4:	f10a 0301 	add.w	r3, sl, #1
 8009cd8:	462f      	mov	r7, r5
 8009cda:	4605      	mov	r5, r0
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	eb0a 030b 	add.w	r3, sl, fp
 8009ce2:	9308      	str	r3, [sp, #32]
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	9306      	str	r3, [sp, #24]
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	4621      	mov	r1, r4
 8009cf0:	9802      	ldr	r0, [sp, #8]
 8009cf2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009cf6:	f7ff fa83 	bl	8009200 <quorem>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	9003      	str	r0, [sp, #12]
 8009d00:	3330      	adds	r3, #48	@ 0x30
 8009d02:	9802      	ldr	r0, [sp, #8]
 8009d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d06:	f000 fbe7 	bl	800a4d8 <__mcmp>
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	9004      	str	r0, [sp, #16]
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4648      	mov	r0, r9
 8009d12:	f000 fbfd 	bl	800a510 <__mdiff>
 8009d16:	68c2      	ldr	r2, [r0, #12]
 8009d18:	4606      	mov	r6, r0
 8009d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d1c:	bb02      	cbnz	r2, 8009d60 <_dtoa_r+0xa40>
 8009d1e:	4601      	mov	r1, r0
 8009d20:	9802      	ldr	r0, [sp, #8]
 8009d22:	f000 fbd9 	bl	800a4d8 <__mcmp>
 8009d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4648      	mov	r0, r9
 8009d2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d32:	f000 f951 	bl	8009fd8 <_Bfree>
 8009d36:	9b07      	ldr	r3, [sp, #28]
 8009d38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d3a:	9e00      	ldr	r6, [sp, #0]
 8009d3c:	ea42 0103 	orr.w	r1, r2, r3
 8009d40:	9b06      	ldr	r3, [sp, #24]
 8009d42:	4319      	orrs	r1, r3
 8009d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d46:	d10d      	bne.n	8009d64 <_dtoa_r+0xa44>
 8009d48:	2b39      	cmp	r3, #57	@ 0x39
 8009d4a:	d027      	beq.n	8009d9c <_dtoa_r+0xa7c>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	dd01      	ble.n	8009d56 <_dtoa_r+0xa36>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	3331      	adds	r3, #49	@ 0x31
 8009d56:	f88b 3000 	strb.w	r3, [fp]
 8009d5a:	e52e      	b.n	80097ba <_dtoa_r+0x49a>
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e7b9      	b.n	8009cd4 <_dtoa_r+0x9b4>
 8009d60:	2201      	movs	r2, #1
 8009d62:	e7e2      	b.n	8009d2a <_dtoa_r+0xa0a>
 8009d64:	9904      	ldr	r1, [sp, #16]
 8009d66:	2900      	cmp	r1, #0
 8009d68:	db04      	blt.n	8009d74 <_dtoa_r+0xa54>
 8009d6a:	9807      	ldr	r0, [sp, #28]
 8009d6c:	4301      	orrs	r1, r0
 8009d6e:	9806      	ldr	r0, [sp, #24]
 8009d70:	4301      	orrs	r1, r0
 8009d72:	d120      	bne.n	8009db6 <_dtoa_r+0xa96>
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	ddee      	ble.n	8009d56 <_dtoa_r+0xa36>
 8009d78:	2201      	movs	r2, #1
 8009d7a:	9902      	ldr	r1, [sp, #8]
 8009d7c:	4648      	mov	r0, r9
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	f000 fb3e 	bl	800a400 <__lshift>
 8009d84:	4621      	mov	r1, r4
 8009d86:	9002      	str	r0, [sp, #8]
 8009d88:	f000 fba6 	bl	800a4d8 <__mcmp>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	dc02      	bgt.n	8009d98 <_dtoa_r+0xa78>
 8009d92:	d1e0      	bne.n	8009d56 <_dtoa_r+0xa36>
 8009d94:	07da      	lsls	r2, r3, #31
 8009d96:	d5de      	bpl.n	8009d56 <_dtoa_r+0xa36>
 8009d98:	2b39      	cmp	r3, #57	@ 0x39
 8009d9a:	d1da      	bne.n	8009d52 <_dtoa_r+0xa32>
 8009d9c:	2339      	movs	r3, #57	@ 0x39
 8009d9e:	f88b 3000 	strb.w	r3, [fp]
 8009da2:	4633      	mov	r3, r6
 8009da4:	461e      	mov	r6, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009dac:	2a39      	cmp	r2, #57	@ 0x39
 8009dae:	d04f      	beq.n	8009e50 <_dtoa_r+0xb30>
 8009db0:	3201      	adds	r2, #1
 8009db2:	701a      	strb	r2, [r3, #0]
 8009db4:	e501      	b.n	80097ba <_dtoa_r+0x49a>
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	dd03      	ble.n	8009dc2 <_dtoa_r+0xaa2>
 8009dba:	2b39      	cmp	r3, #57	@ 0x39
 8009dbc:	d0ee      	beq.n	8009d9c <_dtoa_r+0xa7c>
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	e7c9      	b.n	8009d56 <_dtoa_r+0xa36>
 8009dc2:	9a00      	ldr	r2, [sp, #0]
 8009dc4:	9908      	ldr	r1, [sp, #32]
 8009dc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009dca:	428a      	cmp	r2, r1
 8009dcc:	d029      	beq.n	8009e22 <_dtoa_r+0xb02>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	9902      	ldr	r1, [sp, #8]
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 f921 	bl	800a01c <__multadd>
 8009dda:	42af      	cmp	r7, r5
 8009ddc:	9002      	str	r0, [sp, #8]
 8009dde:	f04f 0300 	mov.w	r3, #0
 8009de2:	f04f 020a 	mov.w	r2, #10
 8009de6:	4639      	mov	r1, r7
 8009de8:	4648      	mov	r0, r9
 8009dea:	d107      	bne.n	8009dfc <_dtoa_r+0xadc>
 8009dec:	f000 f916 	bl	800a01c <__multadd>
 8009df0:	4607      	mov	r7, r0
 8009df2:	4605      	mov	r5, r0
 8009df4:	9b00      	ldr	r3, [sp, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	e777      	b.n	8009cec <_dtoa_r+0x9cc>
 8009dfc:	f000 f90e 	bl	800a01c <__multadd>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4607      	mov	r7, r0
 8009e04:	2300      	movs	r3, #0
 8009e06:	220a      	movs	r2, #10
 8009e08:	4648      	mov	r0, r9
 8009e0a:	f000 f907 	bl	800a01c <__multadd>
 8009e0e:	4605      	mov	r5, r0
 8009e10:	e7f0      	b.n	8009df4 <_dtoa_r+0xad4>
 8009e12:	f1bb 0f00 	cmp.w	fp, #0
 8009e16:	f04f 0700 	mov.w	r7, #0
 8009e1a:	bfcc      	ite	gt
 8009e1c:	465e      	movgt	r6, fp
 8009e1e:	2601      	movle	r6, #1
 8009e20:	4456      	add	r6, sl
 8009e22:	2201      	movs	r2, #1
 8009e24:	9902      	ldr	r1, [sp, #8]
 8009e26:	4648      	mov	r0, r9
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	f000 fae9 	bl	800a400 <__lshift>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	9002      	str	r0, [sp, #8]
 8009e32:	f000 fb51 	bl	800a4d8 <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dcb3      	bgt.n	8009da2 <_dtoa_r+0xa82>
 8009e3a:	d102      	bne.n	8009e42 <_dtoa_r+0xb22>
 8009e3c:	9b00      	ldr	r3, [sp, #0]
 8009e3e:	07db      	lsls	r3, r3, #31
 8009e40:	d4af      	bmi.n	8009da2 <_dtoa_r+0xa82>
 8009e42:	4633      	mov	r3, r6
 8009e44:	461e      	mov	r6, r3
 8009e46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e4a:	2a30      	cmp	r2, #48	@ 0x30
 8009e4c:	d0fa      	beq.n	8009e44 <_dtoa_r+0xb24>
 8009e4e:	e4b4      	b.n	80097ba <_dtoa_r+0x49a>
 8009e50:	459a      	cmp	sl, r3
 8009e52:	d1a7      	bne.n	8009da4 <_dtoa_r+0xa84>
 8009e54:	2331      	movs	r3, #49	@ 0x31
 8009e56:	f108 0801 	add.w	r8, r8, #1
 8009e5a:	f88a 3000 	strb.w	r3, [sl]
 8009e5e:	e4ac      	b.n	80097ba <_dtoa_r+0x49a>
 8009e60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e62:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ec0 <_dtoa_r+0xba0>
 8009e66:	b11b      	cbz	r3, 8009e70 <_dtoa_r+0xb50>
 8009e68:	f10a 0308 	add.w	r3, sl, #8
 8009e6c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4650      	mov	r0, sl
 8009e72:	b017      	add	sp, #92	@ 0x5c
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	f77f ae2d 	ble.w	8009ada <_dtoa_r+0x7ba>
 8009e80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e82:	9308      	str	r3, [sp, #32]
 8009e84:	2001      	movs	r0, #1
 8009e86:	e64c      	b.n	8009b22 <_dtoa_r+0x802>
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	f77f aed8 	ble.w	8009c40 <_dtoa_r+0x920>
 8009e90:	4656      	mov	r6, sl
 8009e92:	4621      	mov	r1, r4
 8009e94:	9802      	ldr	r0, [sp, #8]
 8009e96:	f7ff f9b3 	bl	8009200 <quorem>
 8009e9a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009e9e:	f806 3b01 	strb.w	r3, [r6], #1
 8009ea2:	eba6 020a 	sub.w	r2, r6, sl
 8009ea6:	4593      	cmp	fp, r2
 8009ea8:	ddb3      	ble.n	8009e12 <_dtoa_r+0xaf2>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	220a      	movs	r2, #10
 8009eae:	9902      	ldr	r1, [sp, #8]
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f000 f8b3 	bl	800a01c <__multadd>
 8009eb6:	9002      	str	r0, [sp, #8]
 8009eb8:	e7eb      	b.n	8009e92 <_dtoa_r+0xb72>
 8009eba:	bf00      	nop
 8009ebc:	0800cc71 	.word	0x0800cc71
 8009ec0:	0800cbf5 	.word	0x0800cbf5

08009ec4 <_free_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d041      	beq.n	8009f50 <_free_r+0x8c>
 8009ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed0:	1f0c      	subs	r4, r1, #4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	bfb8      	it	lt
 8009ed6:	18e4      	addlt	r4, r4, r3
 8009ed8:	f7fe f948 	bl	800816c <__malloc_lock>
 8009edc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f54 <_free_r+0x90>)
 8009ede:	6813      	ldr	r3, [r2, #0]
 8009ee0:	b933      	cbnz	r3, 8009ef0 <_free_r+0x2c>
 8009ee2:	6063      	str	r3, [r4, #4]
 8009ee4:	6014      	str	r4, [r2, #0]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eec:	f7fe b944 	b.w	8008178 <__malloc_unlock>
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d908      	bls.n	8009f06 <_free_r+0x42>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	1821      	adds	r1, r4, r0
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	bf01      	itttt	eq
 8009efc:	6819      	ldreq	r1, [r3, #0]
 8009efe:	685b      	ldreq	r3, [r3, #4]
 8009f00:	1809      	addeq	r1, r1, r0
 8009f02:	6021      	streq	r1, [r4, #0]
 8009f04:	e7ed      	b.n	8009ee2 <_free_r+0x1e>
 8009f06:	461a      	mov	r2, r3
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	b10b      	cbz	r3, 8009f10 <_free_r+0x4c>
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	d9fa      	bls.n	8009f06 <_free_r+0x42>
 8009f10:	6811      	ldr	r1, [r2, #0]
 8009f12:	1850      	adds	r0, r2, r1
 8009f14:	42a0      	cmp	r0, r4
 8009f16:	d10b      	bne.n	8009f30 <_free_r+0x6c>
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	4401      	add	r1, r0
 8009f1c:	1850      	adds	r0, r2, r1
 8009f1e:	6011      	str	r1, [r2, #0]
 8009f20:	4283      	cmp	r3, r0
 8009f22:	d1e0      	bne.n	8009ee6 <_free_r+0x22>
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4408      	add	r0, r1
 8009f2a:	6053      	str	r3, [r2, #4]
 8009f2c:	6010      	str	r0, [r2, #0]
 8009f2e:	e7da      	b.n	8009ee6 <_free_r+0x22>
 8009f30:	d902      	bls.n	8009f38 <_free_r+0x74>
 8009f32:	230c      	movs	r3, #12
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	e7d6      	b.n	8009ee6 <_free_r+0x22>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	1821      	adds	r1, r4, r0
 8009f3c:	428b      	cmp	r3, r1
 8009f3e:	bf02      	ittt	eq
 8009f40:	6819      	ldreq	r1, [r3, #0]
 8009f42:	685b      	ldreq	r3, [r3, #4]
 8009f44:	1809      	addeq	r1, r1, r0
 8009f46:	6063      	str	r3, [r4, #4]
 8009f48:	bf08      	it	eq
 8009f4a:	6021      	streq	r1, [r4, #0]
 8009f4c:	6054      	str	r4, [r2, #4]
 8009f4e:	e7ca      	b.n	8009ee6 <_free_r+0x22>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	200007a4 	.word	0x200007a4

08009f58 <_Balloc>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	69c6      	ldr	r6, [r0, #28]
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	460d      	mov	r5, r1
 8009f60:	b976      	cbnz	r6, 8009f80 <_Balloc+0x28>
 8009f62:	2010      	movs	r0, #16
 8009f64:	f7fe f850 	bl	8008008 <malloc>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	61e0      	str	r0, [r4, #28]
 8009f6c:	b920      	cbnz	r0, 8009f78 <_Balloc+0x20>
 8009f6e:	4b18      	ldr	r3, [pc, #96]	@ (8009fd0 <_Balloc+0x78>)
 8009f70:	216b      	movs	r1, #107	@ 0x6b
 8009f72:	4818      	ldr	r0, [pc, #96]	@ (8009fd4 <_Balloc+0x7c>)
 8009f74:	f001 fd64 	bl	800ba40 <__assert_func>
 8009f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f7c:	6006      	str	r6, [r0, #0]
 8009f7e:	60c6      	str	r6, [r0, #12]
 8009f80:	69e6      	ldr	r6, [r4, #28]
 8009f82:	68f3      	ldr	r3, [r6, #12]
 8009f84:	b183      	cbz	r3, 8009fa8 <_Balloc+0x50>
 8009f86:	69e3      	ldr	r3, [r4, #28]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f8e:	b9b8      	cbnz	r0, 8009fc0 <_Balloc+0x68>
 8009f90:	2101      	movs	r1, #1
 8009f92:	4620      	mov	r0, r4
 8009f94:	fa01 f605 	lsl.w	r6, r1, r5
 8009f98:	1d72      	adds	r2, r6, #5
 8009f9a:	0092      	lsls	r2, r2, #2
 8009f9c:	f001 fd6e 	bl	800ba7c <_calloc_r>
 8009fa0:	b160      	cbz	r0, 8009fbc <_Balloc+0x64>
 8009fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fa6:	e00e      	b.n	8009fc6 <_Balloc+0x6e>
 8009fa8:	2221      	movs	r2, #33	@ 0x21
 8009faa:	2104      	movs	r1, #4
 8009fac:	4620      	mov	r0, r4
 8009fae:	f001 fd65 	bl	800ba7c <_calloc_r>
 8009fb2:	69e3      	ldr	r3, [r4, #28]
 8009fb4:	60f0      	str	r0, [r6, #12]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e4      	bne.n	8009f86 <_Balloc+0x2e>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	6802      	ldr	r2, [r0, #0]
 8009fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fcc:	e7f7      	b.n	8009fbe <_Balloc+0x66>
 8009fce:	bf00      	nop
 8009fd0:	0800cc02 	.word	0x0800cc02
 8009fd4:	0800cc82 	.word	0x0800cc82

08009fd8 <_Bfree>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	69c6      	ldr	r6, [r0, #28]
 8009fdc:	4605      	mov	r5, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	b976      	cbnz	r6, 800a000 <_Bfree+0x28>
 8009fe2:	2010      	movs	r0, #16
 8009fe4:	f7fe f810 	bl	8008008 <malloc>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	61e8      	str	r0, [r5, #28]
 8009fec:	b920      	cbnz	r0, 8009ff8 <_Bfree+0x20>
 8009fee:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <_Bfree+0x3c>)
 8009ff0:	218f      	movs	r1, #143	@ 0x8f
 8009ff2:	4809      	ldr	r0, [pc, #36]	@ (800a018 <_Bfree+0x40>)
 8009ff4:	f001 fd24 	bl	800ba40 <__assert_func>
 8009ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ffc:	6006      	str	r6, [r0, #0]
 8009ffe:	60c6      	str	r6, [r0, #12]
 800a000:	b13c      	cbz	r4, 800a012 <_Bfree+0x3a>
 800a002:	69eb      	ldr	r3, [r5, #28]
 800a004:	6862      	ldr	r2, [r4, #4]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a00c:	6021      	str	r1, [r4, #0]
 800a00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	0800cc02 	.word	0x0800cc02
 800a018:	0800cc82 	.word	0x0800cc82

0800a01c <__multadd>:
 800a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	f101 0c14 	add.w	ip, r1, #20
 800a024:	4607      	mov	r7, r0
 800a026:	460c      	mov	r4, r1
 800a028:	461e      	mov	r6, r3
 800a02a:	690d      	ldr	r5, [r1, #16]
 800a02c:	2000      	movs	r0, #0
 800a02e:	f8dc 3000 	ldr.w	r3, [ip]
 800a032:	3001      	adds	r0, #1
 800a034:	b299      	uxth	r1, r3
 800a036:	4285      	cmp	r5, r0
 800a038:	fb02 6101 	mla	r1, r2, r1, r6
 800a03c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a040:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a044:	b289      	uxth	r1, r1
 800a046:	fb02 3306 	mla	r3, r2, r6, r3
 800a04a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a04e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a052:	f84c 1b04 	str.w	r1, [ip], #4
 800a056:	dcea      	bgt.n	800a02e <__multadd+0x12>
 800a058:	b30e      	cbz	r6, 800a09e <__multadd+0x82>
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	42ab      	cmp	r3, r5
 800a05e:	dc19      	bgt.n	800a094 <__multadd+0x78>
 800a060:	6861      	ldr	r1, [r4, #4]
 800a062:	4638      	mov	r0, r7
 800a064:	3101      	adds	r1, #1
 800a066:	f7ff ff77 	bl	8009f58 <_Balloc>
 800a06a:	4680      	mov	r8, r0
 800a06c:	b928      	cbnz	r0, 800a07a <__multadd+0x5e>
 800a06e:	4602      	mov	r2, r0
 800a070:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a4 <__multadd+0x88>)
 800a072:	21ba      	movs	r1, #186	@ 0xba
 800a074:	480c      	ldr	r0, [pc, #48]	@ (800a0a8 <__multadd+0x8c>)
 800a076:	f001 fce3 	bl	800ba40 <__assert_func>
 800a07a:	6922      	ldr	r2, [r4, #16]
 800a07c:	f104 010c 	add.w	r1, r4, #12
 800a080:	300c      	adds	r0, #12
 800a082:	3202      	adds	r2, #2
 800a084:	0092      	lsls	r2, r2, #2
 800a086:	f7ff f8a8 	bl	80091da <memcpy>
 800a08a:	4621      	mov	r1, r4
 800a08c:	4644      	mov	r4, r8
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff ffa2 	bl	8009fd8 <_Bfree>
 800a094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a098:	3501      	adds	r5, #1
 800a09a:	615e      	str	r6, [r3, #20]
 800a09c:	6125      	str	r5, [r4, #16]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	0800cc71 	.word	0x0800cc71
 800a0a8:	0800cc82 	.word	0x0800cc82

0800a0ac <__s2b>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	461f      	mov	r7, r3
 800a0b4:	2209      	movs	r2, #9
 800a0b6:	3308      	adds	r3, #8
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	2100      	movs	r1, #0
 800a0be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	db09      	blt.n	800a0dc <__s2b+0x30>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff ff45 	bl	8009f58 <_Balloc>
 800a0ce:	b940      	cbnz	r0, 800a0e2 <__s2b+0x36>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <__s2b+0x8c>)
 800a0d4:	21d3      	movs	r1, #211	@ 0xd3
 800a0d6:	4819      	ldr	r0, [pc, #100]	@ (800a13c <__s2b+0x90>)
 800a0d8:	f001 fcb2 	bl	800ba40 <__assert_func>
 800a0dc:	0052      	lsls	r2, r2, #1
 800a0de:	3101      	adds	r1, #1
 800a0e0:	e7f0      	b.n	800a0c4 <__s2b+0x18>
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	2d09      	cmp	r5, #9
 800a0e6:	6143      	str	r3, [r0, #20]
 800a0e8:	f04f 0301 	mov.w	r3, #1
 800a0ec:	6103      	str	r3, [r0, #16]
 800a0ee:	dd16      	ble.n	800a11e <__s2b+0x72>
 800a0f0:	f104 0909 	add.w	r9, r4, #9
 800a0f4:	442c      	add	r4, r5
 800a0f6:	46c8      	mov	r8, r9
 800a0f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	220a      	movs	r2, #10
 800a100:	4630      	mov	r0, r6
 800a102:	3b30      	subs	r3, #48	@ 0x30
 800a104:	f7ff ff8a 	bl	800a01c <__multadd>
 800a108:	45a0      	cmp	r8, r4
 800a10a:	d1f5      	bne.n	800a0f8 <__s2b+0x4c>
 800a10c:	f1a5 0408 	sub.w	r4, r5, #8
 800a110:	444c      	add	r4, r9
 800a112:	1b2d      	subs	r5, r5, r4
 800a114:	1963      	adds	r3, r4, r5
 800a116:	42bb      	cmp	r3, r7
 800a118:	db04      	blt.n	800a124 <__s2b+0x78>
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	340a      	adds	r4, #10
 800a120:	2509      	movs	r5, #9
 800a122:	e7f6      	b.n	800a112 <__s2b+0x66>
 800a124:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a128:	4601      	mov	r1, r0
 800a12a:	220a      	movs	r2, #10
 800a12c:	4630      	mov	r0, r6
 800a12e:	3b30      	subs	r3, #48	@ 0x30
 800a130:	f7ff ff74 	bl	800a01c <__multadd>
 800a134:	e7ee      	b.n	800a114 <__s2b+0x68>
 800a136:	bf00      	nop
 800a138:	0800cc71 	.word	0x0800cc71
 800a13c:	0800cc82 	.word	0x0800cc82

0800a140 <__hi0bits>:
 800a140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a144:	4603      	mov	r3, r0
 800a146:	bf36      	itet	cc
 800a148:	0403      	lslcc	r3, r0, #16
 800a14a:	2000      	movcs	r0, #0
 800a14c:	2010      	movcc	r0, #16
 800a14e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a152:	bf3c      	itt	cc
 800a154:	021b      	lslcc	r3, r3, #8
 800a156:	3008      	addcc	r0, #8
 800a158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a15c:	bf3c      	itt	cc
 800a15e:	011b      	lslcc	r3, r3, #4
 800a160:	3004      	addcc	r0, #4
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a166:	bf3c      	itt	cc
 800a168:	009b      	lslcc	r3, r3, #2
 800a16a:	3002      	addcc	r0, #2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	db05      	blt.n	800a17c <__hi0bits+0x3c>
 800a170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a174:	f100 0001 	add.w	r0, r0, #1
 800a178:	bf08      	it	eq
 800a17a:	2020      	moveq	r0, #32
 800a17c:	4770      	bx	lr

0800a17e <__lo0bits>:
 800a17e:	6803      	ldr	r3, [r0, #0]
 800a180:	4602      	mov	r2, r0
 800a182:	f013 0007 	ands.w	r0, r3, #7
 800a186:	d00b      	beq.n	800a1a0 <__lo0bits+0x22>
 800a188:	07d9      	lsls	r1, r3, #31
 800a18a:	d421      	bmi.n	800a1d0 <__lo0bits+0x52>
 800a18c:	0798      	lsls	r0, r3, #30
 800a18e:	bf47      	ittee	mi
 800a190:	085b      	lsrmi	r3, r3, #1
 800a192:	2001      	movmi	r0, #1
 800a194:	089b      	lsrpl	r3, r3, #2
 800a196:	2002      	movpl	r0, #2
 800a198:	bf4c      	ite	mi
 800a19a:	6013      	strmi	r3, [r2, #0]
 800a19c:	6013      	strpl	r3, [r2, #0]
 800a19e:	4770      	bx	lr
 800a1a0:	b299      	uxth	r1, r3
 800a1a2:	b909      	cbnz	r1, 800a1a8 <__lo0bits+0x2a>
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	2010      	movs	r0, #16
 800a1a8:	b2d9      	uxtb	r1, r3
 800a1aa:	b909      	cbnz	r1, 800a1b0 <__lo0bits+0x32>
 800a1ac:	3008      	adds	r0, #8
 800a1ae:	0a1b      	lsrs	r3, r3, #8
 800a1b0:	0719      	lsls	r1, r3, #28
 800a1b2:	bf04      	itt	eq
 800a1b4:	091b      	lsreq	r3, r3, #4
 800a1b6:	3004      	addeq	r0, #4
 800a1b8:	0799      	lsls	r1, r3, #30
 800a1ba:	bf04      	itt	eq
 800a1bc:	089b      	lsreq	r3, r3, #2
 800a1be:	3002      	addeq	r0, #2
 800a1c0:	07d9      	lsls	r1, r3, #31
 800a1c2:	d403      	bmi.n	800a1cc <__lo0bits+0x4e>
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	f100 0001 	add.w	r0, r0, #1
 800a1ca:	d003      	beq.n	800a1d4 <__lo0bits+0x56>
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	4770      	bx	lr
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	4770      	bx	lr
 800a1d4:	2020      	movs	r0, #32
 800a1d6:	4770      	bx	lr

0800a1d8 <__i2b>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2101      	movs	r1, #1
 800a1de:	f7ff febb 	bl	8009f58 <_Balloc>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	b928      	cbnz	r0, 800a1f2 <__i2b+0x1a>
 800a1e6:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <__i2b+0x24>)
 800a1e8:	f240 1145 	movw	r1, #325	@ 0x145
 800a1ec:	4804      	ldr	r0, [pc, #16]	@ (800a200 <__i2b+0x28>)
 800a1ee:	f001 fc27 	bl	800ba40 <__assert_func>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	6144      	str	r4, [r0, #20]
 800a1f6:	6103      	str	r3, [r0, #16]
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800cc71 	.word	0x0800cc71
 800a200:	0800cc82 	.word	0x0800cc82

0800a204 <__multiply>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	4617      	mov	r7, r2
 800a20a:	690a      	ldr	r2, [r1, #16]
 800a20c:	4689      	mov	r9, r1
 800a20e:	b085      	sub	sp, #20
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	bfa2      	ittt	ge
 800a216:	463b      	movge	r3, r7
 800a218:	460f      	movge	r7, r1
 800a21a:	4699      	movge	r9, r3
 800a21c:	693d      	ldr	r5, [r7, #16]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	eb05 060a 	add.w	r6, r5, sl
 800a22a:	42b3      	cmp	r3, r6
 800a22c:	bfb8      	it	lt
 800a22e:	3101      	addlt	r1, #1
 800a230:	f7ff fe92 	bl	8009f58 <_Balloc>
 800a234:	b930      	cbnz	r0, 800a244 <__multiply+0x40>
 800a236:	4602      	mov	r2, r0
 800a238:	4b42      	ldr	r3, [pc, #264]	@ (800a344 <__multiply+0x140>)
 800a23a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a23e:	4842      	ldr	r0, [pc, #264]	@ (800a348 <__multiply+0x144>)
 800a240:	f001 fbfe 	bl	800ba40 <__assert_func>
 800a244:	f100 0414 	add.w	r4, r0, #20
 800a248:	2200      	movs	r2, #0
 800a24a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a24e:	4623      	mov	r3, r4
 800a250:	4573      	cmp	r3, lr
 800a252:	d320      	bcc.n	800a296 <__multiply+0x92>
 800a254:	f107 0814 	add.w	r8, r7, #20
 800a258:	f109 0114 	add.w	r1, r9, #20
 800a25c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a260:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a264:	9302      	str	r3, [sp, #8]
 800a266:	1beb      	subs	r3, r5, r7
 800a268:	3715      	adds	r7, #21
 800a26a:	3b15      	subs	r3, #21
 800a26c:	f023 0303 	bic.w	r3, r3, #3
 800a270:	3304      	adds	r3, #4
 800a272:	42bd      	cmp	r5, r7
 800a274:	bf38      	it	cc
 800a276:	2304      	movcc	r3, #4
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	9103      	str	r1, [sp, #12]
 800a27e:	428b      	cmp	r3, r1
 800a280:	d80c      	bhi.n	800a29c <__multiply+0x98>
 800a282:	2e00      	cmp	r6, #0
 800a284:	dd03      	ble.n	800a28e <__multiply+0x8a>
 800a286:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d057      	beq.n	800a33e <__multiply+0x13a>
 800a28e:	6106      	str	r6, [r0, #16]
 800a290:	b005      	add	sp, #20
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	f843 2b04 	str.w	r2, [r3], #4
 800a29a:	e7d9      	b.n	800a250 <__multiply+0x4c>
 800a29c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2a0:	f1ba 0f00 	cmp.w	sl, #0
 800a2a4:	d021      	beq.n	800a2ea <__multiply+0xe6>
 800a2a6:	46c4      	mov	ip, r8
 800a2a8:	46a1      	mov	r9, r4
 800a2aa:	2700      	movs	r7, #0
 800a2ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a2b0:	f8d9 3000 	ldr.w	r3, [r9]
 800a2b4:	fa1f fb82 	uxth.w	fp, r2
 800a2b8:	4565      	cmp	r5, ip
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a2c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a2c4:	443b      	add	r3, r7
 800a2c6:	f8d9 7000 	ldr.w	r7, [r9]
 800a2ca:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800a2ce:	fb0a 7202 	mla	r2, sl, r2, r7
 800a2d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e0:	f849 3b04 	str.w	r3, [r9], #4
 800a2e4:	d8e2      	bhi.n	800a2ac <__multiply+0xa8>
 800a2e6:	9b01      	ldr	r3, [sp, #4]
 800a2e8:	50e7      	str	r7, [r4, r3]
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	3104      	adds	r1, #4
 800a2ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	d020      	beq.n	800a33a <__multiply+0x136>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	4647      	mov	r7, r8
 800a2fc:	46a4      	mov	ip, r4
 800a2fe:	f04f 0a00 	mov.w	sl, #0
 800a302:	f8b7 b000 	ldrh.w	fp, [r7]
 800a306:	b29b      	uxth	r3, r3
 800a308:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a30c:	fb09 220b 	mla	r2, r9, fp, r2
 800a310:	4452      	add	r2, sl
 800a312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a316:	f84c 3b04 	str.w	r3, [ip], #4
 800a31a:	f857 3b04 	ldr.w	r3, [r7], #4
 800a31e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a322:	f8bc 3000 	ldrh.w	r3, [ip]
 800a326:	42bd      	cmp	r5, r7
 800a328:	fb09 330a 	mla	r3, r9, sl, r3
 800a32c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a334:	d8e5      	bhi.n	800a302 <__multiply+0xfe>
 800a336:	9a01      	ldr	r2, [sp, #4]
 800a338:	50a3      	str	r3, [r4, r2]
 800a33a:	3404      	adds	r4, #4
 800a33c:	e79d      	b.n	800a27a <__multiply+0x76>
 800a33e:	3e01      	subs	r6, #1
 800a340:	e79f      	b.n	800a282 <__multiply+0x7e>
 800a342:	bf00      	nop
 800a344:	0800cc71 	.word	0x0800cc71
 800a348:	0800cc82 	.word	0x0800cc82

0800a34c <__pow5mult>:
 800a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a350:	4615      	mov	r5, r2
 800a352:	f012 0203 	ands.w	r2, r2, #3
 800a356:	4607      	mov	r7, r0
 800a358:	460e      	mov	r6, r1
 800a35a:	d007      	beq.n	800a36c <__pow5mult+0x20>
 800a35c:	3a01      	subs	r2, #1
 800a35e:	4c25      	ldr	r4, [pc, #148]	@ (800a3f4 <__pow5mult+0xa8>)
 800a360:	2300      	movs	r3, #0
 800a362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a366:	f7ff fe59 	bl	800a01c <__multadd>
 800a36a:	4606      	mov	r6, r0
 800a36c:	10ad      	asrs	r5, r5, #2
 800a36e:	d03d      	beq.n	800a3ec <__pow5mult+0xa0>
 800a370:	69fc      	ldr	r4, [r7, #28]
 800a372:	b97c      	cbnz	r4, 800a394 <__pow5mult+0x48>
 800a374:	2010      	movs	r0, #16
 800a376:	f7fd fe47 	bl	8008008 <malloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	61f8      	str	r0, [r7, #28]
 800a37e:	b928      	cbnz	r0, 800a38c <__pow5mult+0x40>
 800a380:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f8 <__pow5mult+0xac>)
 800a382:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a386:	481d      	ldr	r0, [pc, #116]	@ (800a3fc <__pow5mult+0xb0>)
 800a388:	f001 fb5a 	bl	800ba40 <__assert_func>
 800a38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a390:	6004      	str	r4, [r0, #0]
 800a392:	60c4      	str	r4, [r0, #12]
 800a394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a39c:	b94c      	cbnz	r4, 800a3b2 <__pow5mult+0x66>
 800a39e:	f240 2171 	movw	r1, #625	@ 0x271
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f7ff ff18 	bl	800a1d8 <__i2b>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3b0:	6003      	str	r3, [r0, #0]
 800a3b2:	f04f 0900 	mov.w	r9, #0
 800a3b6:	07eb      	lsls	r3, r5, #31
 800a3b8:	d50a      	bpl.n	800a3d0 <__pow5mult+0x84>
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4638      	mov	r0, r7
 800a3c0:	f7ff ff20 	bl	800a204 <__multiply>
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	4646      	mov	r6, r8
 800a3cc:	f7ff fe04 	bl	8009fd8 <_Bfree>
 800a3d0:	106d      	asrs	r5, r5, #1
 800a3d2:	d00b      	beq.n	800a3ec <__pow5mult+0xa0>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	b938      	cbnz	r0, 800a3e8 <__pow5mult+0x9c>
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7ff ff11 	bl	800a204 <__multiply>
 800a3e2:	6020      	str	r0, [r4, #0]
 800a3e4:	f8c0 9000 	str.w	r9, [r0]
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	e7e4      	b.n	800a3b6 <__pow5mult+0x6a>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800cd94 	.word	0x0800cd94
 800a3f8:	0800cc02 	.word	0x0800cc02
 800a3fc:	0800cc82 	.word	0x0800cc82

0800a400 <__lshift>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	460c      	mov	r4, r1
 800a406:	4607      	mov	r7, r0
 800a408:	4691      	mov	r9, r2
 800a40a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	6849      	ldr	r1, [r1, #4]
 800a412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	f108 0601 	add.w	r6, r8, #1
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	db0b      	blt.n	800a438 <__lshift+0x38>
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff fd99 	bl	8009f58 <_Balloc>
 800a426:	4605      	mov	r5, r0
 800a428:	b948      	cbnz	r0, 800a43e <__lshift+0x3e>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4b28      	ldr	r3, [pc, #160]	@ (800a4d0 <__lshift+0xd0>)
 800a42e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a432:	4828      	ldr	r0, [pc, #160]	@ (800a4d4 <__lshift+0xd4>)
 800a434:	f001 fb04 	bl	800ba40 <__assert_func>
 800a438:	3101      	adds	r1, #1
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	e7ee      	b.n	800a41c <__lshift+0x1c>
 800a43e:	2300      	movs	r3, #0
 800a440:	f100 0114 	add.w	r1, r0, #20
 800a444:	f100 0210 	add.w	r2, r0, #16
 800a448:	4618      	mov	r0, r3
 800a44a:	4553      	cmp	r3, sl
 800a44c:	db33      	blt.n	800a4b6 <__lshift+0xb6>
 800a44e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a452:	f104 0314 	add.w	r3, r4, #20
 800a456:	6920      	ldr	r0, [r4, #16]
 800a458:	f019 091f 	ands.w	r9, r9, #31
 800a45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a464:	d02b      	beq.n	800a4be <__lshift+0xbe>
 800a466:	f1c9 0e20 	rsb	lr, r9, #32
 800a46a:	468a      	mov	sl, r1
 800a46c:	2200      	movs	r2, #0
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	fa00 f009 	lsl.w	r0, r0, r9
 800a474:	4310      	orrs	r0, r2
 800a476:	f84a 0b04 	str.w	r0, [sl], #4
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	459c      	cmp	ip, r3
 800a480:	fa22 f20e 	lsr.w	r2, r2, lr
 800a484:	d8f3      	bhi.n	800a46e <__lshift+0x6e>
 800a486:	ebac 0304 	sub.w	r3, ip, r4
 800a48a:	f104 0015 	add.w	r0, r4, #21
 800a48e:	3b15      	subs	r3, #21
 800a490:	f023 0303 	bic.w	r3, r3, #3
 800a494:	3304      	adds	r3, #4
 800a496:	4560      	cmp	r0, ip
 800a498:	bf88      	it	hi
 800a49a:	2304      	movhi	r3, #4
 800a49c:	50ca      	str	r2, [r1, r3]
 800a49e:	b10a      	cbz	r2, 800a4a4 <__lshift+0xa4>
 800a4a0:	f108 0602 	add.w	r6, r8, #2
 800a4a4:	3e01      	subs	r6, #1
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	612e      	str	r6, [r5, #16]
 800a4ac:	f7ff fd94 	bl	8009fd8 <_Bfree>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4bc:	e7c5      	b.n	800a44a <__lshift+0x4a>
 800a4be:	3904      	subs	r1, #4
 800a4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c4:	459c      	cmp	ip, r3
 800a4c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4ca:	d8f9      	bhi.n	800a4c0 <__lshift+0xc0>
 800a4cc:	e7ea      	b.n	800a4a4 <__lshift+0xa4>
 800a4ce:	bf00      	nop
 800a4d0:	0800cc71 	.word	0x0800cc71
 800a4d4:	0800cc82 	.word	0x0800cc82

0800a4d8 <__mcmp>:
 800a4d8:	4603      	mov	r3, r0
 800a4da:	690a      	ldr	r2, [r1, #16]
 800a4dc:	6900      	ldr	r0, [r0, #16]
 800a4de:	1a80      	subs	r0, r0, r2
 800a4e0:	b530      	push	{r4, r5, lr}
 800a4e2:	d10e      	bne.n	800a502 <__mcmp+0x2a>
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	3114      	adds	r1, #20
 800a4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4f8:	4295      	cmp	r5, r2
 800a4fa:	d003      	beq.n	800a504 <__mcmp+0x2c>
 800a4fc:	d205      	bcs.n	800a50a <__mcmp+0x32>
 800a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a502:	bd30      	pop	{r4, r5, pc}
 800a504:	42a3      	cmp	r3, r4
 800a506:	d3f3      	bcc.n	800a4f0 <__mcmp+0x18>
 800a508:	e7fb      	b.n	800a502 <__mcmp+0x2a>
 800a50a:	2001      	movs	r0, #1
 800a50c:	e7f9      	b.n	800a502 <__mcmp+0x2a>
	...

0800a510 <__mdiff>:
 800a510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	4689      	mov	r9, r1
 800a516:	4606      	mov	r6, r0
 800a518:	4611      	mov	r1, r2
 800a51a:	4614      	mov	r4, r2
 800a51c:	4648      	mov	r0, r9
 800a51e:	f7ff ffdb 	bl	800a4d8 <__mcmp>
 800a522:	1e05      	subs	r5, r0, #0
 800a524:	d112      	bne.n	800a54c <__mdiff+0x3c>
 800a526:	4629      	mov	r1, r5
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fd15 	bl	8009f58 <_Balloc>
 800a52e:	4602      	mov	r2, r0
 800a530:	b928      	cbnz	r0, 800a53e <__mdiff+0x2e>
 800a532:	4b41      	ldr	r3, [pc, #260]	@ (800a638 <__mdiff+0x128>)
 800a534:	f240 2137 	movw	r1, #567	@ 0x237
 800a538:	4840      	ldr	r0, [pc, #256]	@ (800a63c <__mdiff+0x12c>)
 800a53a:	f001 fa81 	bl	800ba40 <__assert_func>
 800a53e:	2301      	movs	r3, #1
 800a540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a544:	4610      	mov	r0, r2
 800a546:	b003      	add	sp, #12
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	bfbc      	itt	lt
 800a54e:	464b      	movlt	r3, r9
 800a550:	46a1      	movlt	r9, r4
 800a552:	4630      	mov	r0, r6
 800a554:	bfb8      	it	lt
 800a556:	2501      	movlt	r5, #1
 800a558:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a55c:	bfb4      	ite	lt
 800a55e:	461c      	movlt	r4, r3
 800a560:	2500      	movge	r5, #0
 800a562:	f7ff fcf9 	bl	8009f58 <_Balloc>
 800a566:	4602      	mov	r2, r0
 800a568:	b918      	cbnz	r0, 800a572 <__mdiff+0x62>
 800a56a:	4b33      	ldr	r3, [pc, #204]	@ (800a638 <__mdiff+0x128>)
 800a56c:	f240 2145 	movw	r1, #581	@ 0x245
 800a570:	e7e2      	b.n	800a538 <__mdiff+0x28>
 800a572:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a576:	f104 0e14 	add.w	lr, r4, #20
 800a57a:	6926      	ldr	r6, [r4, #16]
 800a57c:	f100 0b14 	add.w	fp, r0, #20
 800a580:	60c5      	str	r5, [r0, #12]
 800a582:	f109 0514 	add.w	r5, r9, #20
 800a586:	f109 0310 	add.w	r3, r9, #16
 800a58a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a58e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a592:	46d9      	mov	r9, fp
 800a594:	f04f 0c00 	mov.w	ip, #0
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5a0:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5a4:	4576      	cmp	r6, lr
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	fa1f f38a 	uxth.w	r3, sl
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	b283      	uxth	r3, r0
 800a5b0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a5b4:	eba1 0303 	sub.w	r3, r1, r3
 800a5b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a5bc:	4463      	add	r3, ip
 800a5be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a5cc:	f849 3b04 	str.w	r3, [r9], #4
 800a5d0:	d8e3      	bhi.n	800a59a <__mdiff+0x8a>
 800a5d2:	1b33      	subs	r3, r6, r4
 800a5d4:	3415      	adds	r4, #21
 800a5d6:	3b15      	subs	r3, #21
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	3304      	adds	r3, #4
 800a5de:	42a6      	cmp	r6, r4
 800a5e0:	bf38      	it	cc
 800a5e2:	2304      	movcc	r3, #4
 800a5e4:	441d      	add	r5, r3
 800a5e6:	445b      	add	r3, fp
 800a5e8:	462c      	mov	r4, r5
 800a5ea:	461e      	mov	r6, r3
 800a5ec:	4544      	cmp	r4, r8
 800a5ee:	d30e      	bcc.n	800a60e <__mdiff+0xfe>
 800a5f0:	f108 0103 	add.w	r1, r8, #3
 800a5f4:	1b49      	subs	r1, r1, r5
 800a5f6:	3d03      	subs	r5, #3
 800a5f8:	f021 0103 	bic.w	r1, r1, #3
 800a5fc:	45a8      	cmp	r8, r5
 800a5fe:	bf38      	it	cc
 800a600:	2100      	movcc	r1, #0
 800a602:	440b      	add	r3, r1
 800a604:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a608:	b199      	cbz	r1, 800a632 <__mdiff+0x122>
 800a60a:	6117      	str	r7, [r2, #16]
 800a60c:	e79a      	b.n	800a544 <__mdiff+0x34>
 800a60e:	f854 1b04 	ldr.w	r1, [r4], #4
 800a612:	46e6      	mov	lr, ip
 800a614:	fa1f fc81 	uxth.w	ip, r1
 800a618:	0c08      	lsrs	r0, r1, #16
 800a61a:	4471      	add	r1, lr
 800a61c:	44f4      	add	ip, lr
 800a61e:	b289      	uxth	r1, r1
 800a620:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a624:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a628:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a62c:	f846 1b04 	str.w	r1, [r6], #4
 800a630:	e7dc      	b.n	800a5ec <__mdiff+0xdc>
 800a632:	3f01      	subs	r7, #1
 800a634:	e7e6      	b.n	800a604 <__mdiff+0xf4>
 800a636:	bf00      	nop
 800a638:	0800cc71 	.word	0x0800cc71
 800a63c:	0800cc82 	.word	0x0800cc82

0800a640 <__ulp>:
 800a640:	b082      	sub	sp, #8
 800a642:	4b11      	ldr	r3, [pc, #68]	@ (800a688 <__ulp+0x48>)
 800a644:	ed8d 0b00 	vstr	d0, [sp]
 800a648:	9a01      	ldr	r2, [sp, #4]
 800a64a:	4013      	ands	r3, r2
 800a64c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a650:	2b00      	cmp	r3, #0
 800a652:	dc08      	bgt.n	800a666 <__ulp+0x26>
 800a654:	425b      	negs	r3, r3
 800a656:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a65a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a65e:	da04      	bge.n	800a66a <__ulp+0x2a>
 800a660:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a664:	4113      	asrs	r3, r2
 800a666:	2200      	movs	r2, #0
 800a668:	e008      	b.n	800a67c <__ulp+0x3c>
 800a66a:	f1a2 0314 	sub.w	r3, r2, #20
 800a66e:	2b1e      	cmp	r3, #30
 800a670:	bfd6      	itet	le
 800a672:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a676:	2201      	movgt	r2, #1
 800a678:	40da      	lsrle	r2, r3
 800a67a:	2300      	movs	r3, #0
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	ec41 0b10 	vmov	d0, r0, r1
 800a684:	b002      	add	sp, #8
 800a686:	4770      	bx	lr
 800a688:	7ff00000 	.word	0x7ff00000

0800a68c <__b2d>:
 800a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	6906      	ldr	r6, [r0, #16]
 800a692:	f100 0814 	add.w	r8, r0, #20
 800a696:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a69a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a69e:	1f37      	subs	r7, r6, #4
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	f7ff fd4d 	bl	800a140 <__hi0bits>
 800a6a6:	f1c0 0320 	rsb	r3, r0, #32
 800a6aa:	280a      	cmp	r0, #10
 800a6ac:	600b      	str	r3, [r1, #0]
 800a6ae:	491d      	ldr	r1, [pc, #116]	@ (800a724 <__b2d+0x98>)
 800a6b0:	dc16      	bgt.n	800a6e0 <__b2d+0x54>
 800a6b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a6b6:	45b8      	cmp	r8, r7
 800a6b8:	f100 0015 	add.w	r0, r0, #21
 800a6bc:	fa22 f30c 	lsr.w	r3, r2, ip
 800a6c0:	fa02 f000 	lsl.w	r0, r2, r0
 800a6c4:	ea43 0501 	orr.w	r5, r3, r1
 800a6c8:	bf34      	ite	cc
 800a6ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ce:	2300      	movcs	r3, #0
 800a6d0:	fa23 f30c 	lsr.w	r3, r3, ip
 800a6d4:	4303      	orrs	r3, r0
 800a6d6:	461c      	mov	r4, r3
 800a6d8:	ec45 4b10 	vmov	d0, r4, r5
 800a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e0:	45b8      	cmp	r8, r7
 800a6e2:	bf3a      	itte	cc
 800a6e4:	f1a6 0708 	subcc.w	r7, r6, #8
 800a6e8:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ec:	2300      	movcs	r3, #0
 800a6ee:	380b      	subs	r0, #11
 800a6f0:	d014      	beq.n	800a71c <__b2d+0x90>
 800a6f2:	f1c0 0120 	rsb	r1, r0, #32
 800a6f6:	4082      	lsls	r2, r0
 800a6f8:	4547      	cmp	r7, r8
 800a6fa:	fa23 f401 	lsr.w	r4, r3, r1
 800a6fe:	fa03 f300 	lsl.w	r3, r3, r0
 800a702:	ea42 0204 	orr.w	r2, r2, r4
 800a706:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a70a:	bf8c      	ite	hi
 800a70c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a710:	2200      	movls	r2, #0
 800a712:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a716:	40ca      	lsrs	r2, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	e7dc      	b.n	800a6d6 <__b2d+0x4a>
 800a71c:	ea42 0501 	orr.w	r5, r2, r1
 800a720:	e7d9      	b.n	800a6d6 <__b2d+0x4a>
 800a722:	bf00      	nop
 800a724:	3ff00000 	.word	0x3ff00000

0800a728 <__d2b>:
 800a728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	460f      	mov	r7, r1
 800a72e:	2101      	movs	r1, #1
 800a730:	4616      	mov	r6, r2
 800a732:	ec59 8b10 	vmov	r8, r9, d0
 800a736:	f7ff fc0f 	bl	8009f58 <_Balloc>
 800a73a:	4604      	mov	r4, r0
 800a73c:	b930      	cbnz	r0, 800a74c <__d2b+0x24>
 800a73e:	4602      	mov	r2, r0
 800a740:	4b23      	ldr	r3, [pc, #140]	@ (800a7d0 <__d2b+0xa8>)
 800a742:	f240 310f 	movw	r1, #783	@ 0x30f
 800a746:	4823      	ldr	r0, [pc, #140]	@ (800a7d4 <__d2b+0xac>)
 800a748:	f001 f97a 	bl	800ba40 <__assert_func>
 800a74c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a754:	b10d      	cbz	r5, 800a75a <__d2b+0x32>
 800a756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	f1b8 0300 	subs.w	r3, r8, #0
 800a760:	d023      	beq.n	800a7aa <__d2b+0x82>
 800a762:	4668      	mov	r0, sp
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	f7ff fd0a 	bl	800a17e <__lo0bits>
 800a76a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a76e:	b1d0      	cbz	r0, 800a7a6 <__d2b+0x7e>
 800a770:	f1c0 0320 	rsb	r3, r0, #32
 800a774:	fa02 f303 	lsl.w	r3, r2, r3
 800a778:	40c2      	lsrs	r2, r0
 800a77a:	430b      	orrs	r3, r1
 800a77c:	9201      	str	r2, [sp, #4]
 800a77e:	6163      	str	r3, [r4, #20]
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	61a3      	str	r3, [r4, #24]
 800a786:	bf0c      	ite	eq
 800a788:	2201      	moveq	r2, #1
 800a78a:	2202      	movne	r2, #2
 800a78c:	6122      	str	r2, [r4, #16]
 800a78e:	b1a5      	cbz	r5, 800a7ba <__d2b+0x92>
 800a790:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a794:	4405      	add	r5, r0
 800a796:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a79a:	603d      	str	r5, [r7, #0]
 800a79c:	6030      	str	r0, [r6, #0]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	b003      	add	sp, #12
 800a7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a6:	6161      	str	r1, [r4, #20]
 800a7a8:	e7ea      	b.n	800a780 <__d2b+0x58>
 800a7aa:	a801      	add	r0, sp, #4
 800a7ac:	f7ff fce7 	bl	800a17e <__lo0bits>
 800a7b0:	9b01      	ldr	r3, [sp, #4]
 800a7b2:	3020      	adds	r0, #32
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	6163      	str	r3, [r4, #20]
 800a7b8:	e7e8      	b.n	800a78c <__d2b+0x64>
 800a7ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7c2:	6038      	str	r0, [r7, #0]
 800a7c4:	6918      	ldr	r0, [r3, #16]
 800a7c6:	f7ff fcbb 	bl	800a140 <__hi0bits>
 800a7ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ce:	e7e5      	b.n	800a79c <__d2b+0x74>
 800a7d0:	0800cc71 	.word	0x0800cc71
 800a7d4:	0800cc82 	.word	0x0800cc82

0800a7d8 <__ratio>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	e9cd 1000 	strd	r1, r0, [sp]
 800a7e2:	a902      	add	r1, sp, #8
 800a7e4:	f7ff ff52 	bl	800a68c <__b2d>
 800a7e8:	a903      	add	r1, sp, #12
 800a7ea:	9800      	ldr	r0, [sp, #0]
 800a7ec:	ec55 4b10 	vmov	r4, r5, d0
 800a7f0:	f7ff ff4c 	bl	800a68c <__b2d>
 800a7f4:	9b01      	ldr	r3, [sp, #4]
 800a7f6:	462f      	mov	r7, r5
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	6919      	ldr	r1, [r3, #16]
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	1ac9      	subs	r1, r1, r3
 800a802:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a806:	ec5b ab10 	vmov	sl, fp, d0
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	46d9      	mov	r9, fp
 800a80e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfcd      	iteet	gt
 800a816:	462a      	movgt	r2, r5
 800a818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a81c:	465a      	movle	r2, fp
 800a81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a822:	bfd8      	it	le
 800a824:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a828:	4652      	mov	r2, sl
 800a82a:	4639      	mov	r1, r7
 800a82c:	464b      	mov	r3, r9
 800a82e:	f7f6 f811 	bl	8000854 <__aeabi_ddiv>
 800a832:	ec41 0b10 	vmov	d0, r0, r1
 800a836:	b005      	add	sp, #20
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a83c <__copybits>:
 800a83c:	3901      	subs	r1, #1
 800a83e:	f102 0314 	add.w	r3, r2, #20
 800a842:	1149      	asrs	r1, r1, #5
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	3101      	adds	r1, #1
 800a848:	6914      	ldr	r4, [r2, #16]
 800a84a:	1f05      	subs	r5, r0, #4
 800a84c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a850:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a854:	42a3      	cmp	r3, r4
 800a856:	d30c      	bcc.n	800a872 <__copybits+0x36>
 800a858:	1aa3      	subs	r3, r4, r2
 800a85a:	3211      	adds	r2, #17
 800a85c:	3b11      	subs	r3, #17
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	42a2      	cmp	r2, r4
 800a864:	bf88      	it	hi
 800a866:	2300      	movhi	r3, #0
 800a868:	4418      	add	r0, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	4288      	cmp	r0, r1
 800a86e:	d305      	bcc.n	800a87c <__copybits+0x40>
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	f853 6b04 	ldr.w	r6, [r3], #4
 800a876:	f845 6f04 	str.w	r6, [r5, #4]!
 800a87a:	e7eb      	b.n	800a854 <__copybits+0x18>
 800a87c:	f840 3b04 	str.w	r3, [r0], #4
 800a880:	e7f4      	b.n	800a86c <__copybits+0x30>

0800a882 <__any_on>:
 800a882:	f100 0214 	add.w	r2, r0, #20
 800a886:	114b      	asrs	r3, r1, #5
 800a888:	6900      	ldr	r0, [r0, #16]
 800a88a:	4298      	cmp	r0, r3
 800a88c:	b510      	push	{r4, lr}
 800a88e:	db11      	blt.n	800a8b4 <__any_on+0x32>
 800a890:	dd0a      	ble.n	800a8a8 <__any_on+0x26>
 800a892:	f011 011f 	ands.w	r1, r1, #31
 800a896:	d007      	beq.n	800a8a8 <__any_on+0x26>
 800a898:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a89c:	fa24 f001 	lsr.w	r0, r4, r1
 800a8a0:	fa00 f101 	lsl.w	r1, r0, r1
 800a8a4:	428c      	cmp	r4, r1
 800a8a6:	d10b      	bne.n	800a8c0 <__any_on+0x3e>
 800a8a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d803      	bhi.n	800a8b8 <__any_on+0x36>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	bd10      	pop	{r4, pc}
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	e7f7      	b.n	800a8a8 <__any_on+0x26>
 800a8b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	d0f5      	beq.n	800a8ac <__any_on+0x2a>
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	e7f6      	b.n	800a8b2 <__any_on+0x30>

0800a8c4 <sulp>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	4616      	mov	r6, r2
 800a8cc:	ec45 4b10 	vmov	d0, r4, r5
 800a8d0:	f7ff feb6 	bl	800a640 <__ulp>
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	b17e      	cbz	r6, 800a8fa <sulp+0x36>
 800a8da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dd09      	ble.n	800a8fa <sulp+0x36>
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	2400      	movs	r4, #0
 800a8ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	f7f5 fe83 	bl	8000600 <__aeabi_dmul>
 800a8fa:	ec41 0b10 	vmov	d0, r0, r1
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}

0800a900 <_strtod_l>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	b09f      	sub	sp, #124	@ 0x7c
 800a906:	460c      	mov	r4, r1
 800a908:	f04f 0a00 	mov.w	sl, #0
 800a90c:	f04f 0b00 	mov.w	fp, #0
 800a910:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a912:	2200      	movs	r2, #0
 800a914:	9005      	str	r0, [sp, #20]
 800a916:	921a      	str	r2, [sp, #104]	@ 0x68
 800a918:	460a      	mov	r2, r1
 800a91a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a91c:	7811      	ldrb	r1, [r2, #0]
 800a91e:	292b      	cmp	r1, #43	@ 0x2b
 800a920:	d04a      	beq.n	800a9b8 <_strtod_l+0xb8>
 800a922:	d838      	bhi.n	800a996 <_strtod_l+0x96>
 800a924:	290d      	cmp	r1, #13
 800a926:	d832      	bhi.n	800a98e <_strtod_l+0x8e>
 800a928:	2908      	cmp	r1, #8
 800a92a:	d832      	bhi.n	800a992 <_strtod_l+0x92>
 800a92c:	2900      	cmp	r1, #0
 800a92e:	d03b      	beq.n	800a9a8 <_strtod_l+0xa8>
 800a930:	2200      	movs	r2, #0
 800a932:	920e      	str	r2, [sp, #56]	@ 0x38
 800a934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a936:	782a      	ldrb	r2, [r5, #0]
 800a938:	2a30      	cmp	r2, #48	@ 0x30
 800a93a:	f040 80b2 	bne.w	800aaa2 <_strtod_l+0x1a2>
 800a93e:	786a      	ldrb	r2, [r5, #1]
 800a940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a944:	2a58      	cmp	r2, #88	@ 0x58
 800a946:	d16e      	bne.n	800aa26 <_strtod_l+0x126>
 800a948:	9302      	str	r3, [sp, #8]
 800a94a:	a919      	add	r1, sp, #100	@ 0x64
 800a94c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a94e:	4a90      	ldr	r2, [pc, #576]	@ (800ab90 <_strtod_l+0x290>)
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	ab1a      	add	r3, sp, #104	@ 0x68
 800a954:	9805      	ldr	r0, [sp, #20]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a95a:	f001 f909 	bl	800bb70 <__gethex>
 800a95e:	f010 060f 	ands.w	r6, r0, #15
 800a962:	4604      	mov	r4, r0
 800a964:	d005      	beq.n	800a972 <_strtod_l+0x72>
 800a966:	2e06      	cmp	r6, #6
 800a968:	d128      	bne.n	800a9bc <_strtod_l+0xbc>
 800a96a:	3501      	adds	r5, #1
 800a96c:	2300      	movs	r3, #0
 800a96e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a970:	930e      	str	r3, [sp, #56]	@ 0x38
 800a972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a974:	2b00      	cmp	r3, #0
 800a976:	f040 858e 	bne.w	800b496 <_strtod_l+0xb96>
 800a97a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a97c:	b1cb      	cbz	r3, 800a9b2 <_strtod_l+0xb2>
 800a97e:	4652      	mov	r2, sl
 800a980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a984:	ec43 2b10 	vmov	d0, r2, r3
 800a988:	b01f      	add	sp, #124	@ 0x7c
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	2920      	cmp	r1, #32
 800a990:	d1ce      	bne.n	800a930 <_strtod_l+0x30>
 800a992:	3201      	adds	r2, #1
 800a994:	e7c1      	b.n	800a91a <_strtod_l+0x1a>
 800a996:	292d      	cmp	r1, #45	@ 0x2d
 800a998:	d1ca      	bne.n	800a930 <_strtod_l+0x30>
 800a99a:	2101      	movs	r1, #1
 800a99c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a99e:	1c51      	adds	r1, r2, #1
 800a9a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9a2:	7852      	ldrb	r2, [r2, #1]
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	d1c5      	bne.n	800a934 <_strtod_l+0x34>
 800a9a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8570 	bne.w	800b492 <_strtod_l+0xb92>
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	e7e5      	b.n	800a984 <_strtod_l+0x84>
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	e7ef      	b.n	800a99c <_strtod_l+0x9c>
 800a9bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9be:	b13a      	cbz	r2, 800a9d0 <_strtod_l+0xd0>
 800a9c0:	2135      	movs	r1, #53	@ 0x35
 800a9c2:	a81c      	add	r0, sp, #112	@ 0x70
 800a9c4:	f7ff ff3a 	bl	800a83c <__copybits>
 800a9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9ca:	9805      	ldr	r0, [sp, #20]
 800a9cc:	f7ff fb04 	bl	8009fd8 <_Bfree>
 800a9d0:	3e01      	subs	r6, #1
 800a9d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a9d4:	2e04      	cmp	r6, #4
 800a9d6:	d806      	bhi.n	800a9e6 <_strtod_l+0xe6>
 800a9d8:	e8df f006 	tbb	[pc, r6]
 800a9dc:	201d0314 	.word	0x201d0314
 800a9e0:	14          	.byte	0x14
 800a9e1:	00          	.byte	0x00
 800a9e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a9e6:	05e1      	lsls	r1, r4, #23
 800a9e8:	bf48      	it	mi
 800a9ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a9ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9f2:	0d1b      	lsrs	r3, r3, #20
 800a9f4:	051b      	lsls	r3, r3, #20
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1bb      	bne.n	800a972 <_strtod_l+0x72>
 800a9fa:	f7fe fbb3 	bl	8009164 <__errno>
 800a9fe:	2322      	movs	r3, #34	@ 0x22
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	e7b6      	b.n	800a972 <_strtod_l+0x72>
 800aa04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa14:	e7e7      	b.n	800a9e6 <_strtod_l+0xe6>
 800aa16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ab98 <_strtod_l+0x298>
 800aa1a:	e7e4      	b.n	800a9e6 <_strtod_l+0xe6>
 800aa1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa20:	f04f 3aff 	mov.w	sl, #4294967295
 800aa24:	e7df      	b.n	800a9e6 <_strtod_l+0xe6>
 800aa26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	2b30      	cmp	r3, #48	@ 0x30
 800aa30:	d0f9      	beq.n	800aa26 <_strtod_l+0x126>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d09d      	beq.n	800a972 <_strtod_l+0x72>
 800aa36:	2301      	movs	r3, #1
 800aa38:	2700      	movs	r7, #0
 800aa3a:	9308      	str	r3, [sp, #32]
 800aa3c:	220a      	movs	r2, #10
 800aa3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa40:	46b9      	mov	r9, r7
 800aa42:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aa44:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa48:	7805      	ldrb	r5, [r0, #0]
 800aa4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa4e:	b2d9      	uxtb	r1, r3
 800aa50:	2909      	cmp	r1, #9
 800aa52:	d928      	bls.n	800aaa6 <_strtod_l+0x1a6>
 800aa54:	2201      	movs	r2, #1
 800aa56:	494f      	ldr	r1, [pc, #316]	@ (800ab94 <_strtod_l+0x294>)
 800aa58:	f000 ffd6 	bl	800ba08 <strncmp>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d032      	beq.n	800aac6 <_strtod_l+0x1c6>
 800aa60:	2000      	movs	r0, #0
 800aa62:	462a      	mov	r2, r5
 800aa64:	464d      	mov	r5, r9
 800aa66:	4603      	mov	r3, r0
 800aa68:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa6a:	2a65      	cmp	r2, #101	@ 0x65
 800aa6c:	d001      	beq.n	800aa72 <_strtod_l+0x172>
 800aa6e:	2a45      	cmp	r2, #69	@ 0x45
 800aa70:	d114      	bne.n	800aa9c <_strtod_l+0x19c>
 800aa72:	b91d      	cbnz	r5, 800aa7c <_strtod_l+0x17c>
 800aa74:	9a08      	ldr	r2, [sp, #32]
 800aa76:	4302      	orrs	r2, r0
 800aa78:	d096      	beq.n	800a9a8 <_strtod_l+0xa8>
 800aa7a:	2500      	movs	r5, #0
 800aa7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aa7e:	1c62      	adds	r2, r4, #1
 800aa80:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa82:	7862      	ldrb	r2, [r4, #1]
 800aa84:	2a2b      	cmp	r2, #43	@ 0x2b
 800aa86:	d079      	beq.n	800ab7c <_strtod_l+0x27c>
 800aa88:	2a2d      	cmp	r2, #45	@ 0x2d
 800aa8a:	d07d      	beq.n	800ab88 <_strtod_l+0x288>
 800aa8c:	f04f 0c00 	mov.w	ip, #0
 800aa90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aa94:	2909      	cmp	r1, #9
 800aa96:	f240 8085 	bls.w	800aba4 <_strtod_l+0x2a4>
 800aa9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa9c:	f04f 0800 	mov.w	r8, #0
 800aaa0:	e0a5      	b.n	800abee <_strtod_l+0x2ee>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e7c8      	b.n	800aa38 <_strtod_l+0x138>
 800aaa6:	f1b9 0f08 	cmp.w	r9, #8
 800aaaa:	f100 0001 	add.w	r0, r0, #1
 800aaae:	f109 0901 	add.w	r9, r9, #1
 800aab2:	bfd4      	ite	le
 800aab4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800aab6:	fb02 3707 	mlagt	r7, r2, r7, r3
 800aaba:	9019      	str	r0, [sp, #100]	@ 0x64
 800aabc:	bfdc      	itt	le
 800aabe:	fb02 3301 	mlale	r3, r2, r1, r3
 800aac2:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800aac4:	e7bf      	b.n	800aa46 <_strtod_l+0x146>
 800aac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	9219      	str	r2, [sp, #100]	@ 0x64
 800aacc:	785a      	ldrb	r2, [r3, #1]
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	d03a      	beq.n	800ab4a <_strtod_l+0x24a>
 800aad4:	464d      	mov	r5, r9
 800aad6:	900a      	str	r0, [sp, #40]	@ 0x28
 800aad8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aadc:	2b09      	cmp	r3, #9
 800aade:	d912      	bls.n	800ab06 <_strtod_l+0x206>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e7c2      	b.n	800aa6a <_strtod_l+0x16a>
 800aae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aae6:	3001      	adds	r0, #1
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaec:	785a      	ldrb	r2, [r3, #1]
 800aaee:	2a30      	cmp	r2, #48	@ 0x30
 800aaf0:	d0f8      	beq.n	800aae4 <_strtod_l+0x1e4>
 800aaf2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	f200 84d2 	bhi.w	800b4a0 <_strtod_l+0xba0>
 800aafc:	900a      	str	r0, [sp, #40]	@ 0x28
 800aafe:	2000      	movs	r0, #0
 800ab00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab02:	4605      	mov	r5, r0
 800ab04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab06:	3a30      	subs	r2, #48	@ 0x30
 800ab08:	f100 0301 	add.w	r3, r0, #1
 800ab0c:	d017      	beq.n	800ab3e <_strtod_l+0x23e>
 800ab0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab10:	462e      	mov	r6, r5
 800ab12:	f04f 0e0a 	mov.w	lr, #10
 800ab16:	4419      	add	r1, r3
 800ab18:	910a      	str	r1, [sp, #40]	@ 0x28
 800ab1a:	1c71      	adds	r1, r6, #1
 800ab1c:	eba1 0c05 	sub.w	ip, r1, r5
 800ab20:	4563      	cmp	r3, ip
 800ab22:	dc14      	bgt.n	800ab4e <_strtod_l+0x24e>
 800ab24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ab28:	182b      	adds	r3, r5, r0
 800ab2a:	3501      	adds	r5, #1
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	4405      	add	r5, r0
 800ab30:	dc1a      	bgt.n	800ab68 <_strtod_l+0x268>
 800ab32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab34:	230a      	movs	r3, #10
 800ab36:	fb03 2301 	mla	r3, r3, r1, r2
 800ab3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab40:	4618      	mov	r0, r3
 800ab42:	1c51      	adds	r1, r2, #1
 800ab44:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab46:	7852      	ldrb	r2, [r2, #1]
 800ab48:	e7c6      	b.n	800aad8 <_strtod_l+0x1d8>
 800ab4a:	4648      	mov	r0, r9
 800ab4c:	e7cf      	b.n	800aaee <_strtod_l+0x1ee>
 800ab4e:	2e08      	cmp	r6, #8
 800ab50:	dc05      	bgt.n	800ab5e <_strtod_l+0x25e>
 800ab52:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ab54:	fb0e f606 	mul.w	r6, lr, r6
 800ab58:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ab5a:	460e      	mov	r6, r1
 800ab5c:	e7dd      	b.n	800ab1a <_strtod_l+0x21a>
 800ab5e:	2910      	cmp	r1, #16
 800ab60:	bfd8      	it	le
 800ab62:	fb0e f707 	mulle.w	r7, lr, r7
 800ab66:	e7f8      	b.n	800ab5a <_strtod_l+0x25a>
 800ab68:	2b0f      	cmp	r3, #15
 800ab6a:	bfdc      	itt	le
 800ab6c:	230a      	movle	r3, #10
 800ab6e:	fb03 2707 	mlale	r7, r3, r7, r2
 800ab72:	e7e3      	b.n	800ab3c <_strtod_l+0x23c>
 800ab74:	2300      	movs	r3, #0
 800ab76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e77b      	b.n	800aa74 <_strtod_l+0x174>
 800ab7c:	f04f 0c00 	mov.w	ip, #0
 800ab80:	1ca2      	adds	r2, r4, #2
 800ab82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab84:	78a2      	ldrb	r2, [r4, #2]
 800ab86:	e783      	b.n	800aa90 <_strtod_l+0x190>
 800ab88:	f04f 0c01 	mov.w	ip, #1
 800ab8c:	e7f8      	b.n	800ab80 <_strtod_l+0x280>
 800ab8e:	bf00      	nop
 800ab90:	0800cea4 	.word	0x0800cea4
 800ab94:	0800ccdb 	.word	0x0800ccdb
 800ab98:	7ff00000 	.word	0x7ff00000
 800ab9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab9e:	1c51      	adds	r1, r2, #1
 800aba0:	9119      	str	r1, [sp, #100]	@ 0x64
 800aba2:	7852      	ldrb	r2, [r2, #1]
 800aba4:	2a30      	cmp	r2, #48	@ 0x30
 800aba6:	d0f9      	beq.n	800ab9c <_strtod_l+0x29c>
 800aba8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800abac:	2908      	cmp	r1, #8
 800abae:	f63f af75 	bhi.w	800aa9c <_strtod_l+0x19c>
 800abb2:	3a30      	subs	r2, #48	@ 0x30
 800abb4:	f04f 080a 	mov.w	r8, #10
 800abb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800abba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abc0:	1c56      	adds	r6, r2, #1
 800abc2:	9619      	str	r6, [sp, #100]	@ 0x64
 800abc4:	7852      	ldrb	r2, [r2, #1]
 800abc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800abca:	f1be 0f09 	cmp.w	lr, #9
 800abce:	d939      	bls.n	800ac44 <_strtod_l+0x344>
 800abd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800abd6:	1a76      	subs	r6, r6, r1
 800abd8:	2e08      	cmp	r6, #8
 800abda:	dc03      	bgt.n	800abe4 <_strtod_l+0x2e4>
 800abdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abde:	4588      	cmp	r8, r1
 800abe0:	bfa8      	it	ge
 800abe2:	4688      	movge	r8, r1
 800abe4:	f1bc 0f00 	cmp.w	ip, #0
 800abe8:	d001      	beq.n	800abee <_strtod_l+0x2ee>
 800abea:	f1c8 0800 	rsb	r8, r8, #0
 800abee:	2d00      	cmp	r5, #0
 800abf0:	d14e      	bne.n	800ac90 <_strtod_l+0x390>
 800abf2:	9908      	ldr	r1, [sp, #32]
 800abf4:	4308      	orrs	r0, r1
 800abf6:	f47f aebc 	bne.w	800a972 <_strtod_l+0x72>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f47f aed4 	bne.w	800a9a8 <_strtod_l+0xa8>
 800ac00:	2a69      	cmp	r2, #105	@ 0x69
 800ac02:	d028      	beq.n	800ac56 <_strtod_l+0x356>
 800ac04:	dc25      	bgt.n	800ac52 <_strtod_l+0x352>
 800ac06:	2a49      	cmp	r2, #73	@ 0x49
 800ac08:	d025      	beq.n	800ac56 <_strtod_l+0x356>
 800ac0a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac0c:	f47f aecc 	bne.w	800a9a8 <_strtod_l+0xa8>
 800ac10:	499a      	ldr	r1, [pc, #616]	@ (800ae7c <_strtod_l+0x57c>)
 800ac12:	a819      	add	r0, sp, #100	@ 0x64
 800ac14:	f001 f9cc 	bl	800bfb0 <__match>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	f43f aec5 	beq.w	800a9a8 <_strtod_l+0xa8>
 800ac1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b28      	cmp	r3, #40	@ 0x28
 800ac24:	d12e      	bne.n	800ac84 <_strtod_l+0x384>
 800ac26:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac28:	4995      	ldr	r1, [pc, #596]	@ (800ae80 <_strtod_l+0x580>)
 800ac2a:	a819      	add	r0, sp, #100	@ 0x64
 800ac2c:	f001 f9d4 	bl	800bfd8 <__hexnan>
 800ac30:	2805      	cmp	r0, #5
 800ac32:	d127      	bne.n	800ac84 <_strtod_l+0x384>
 800ac34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac42:	e696      	b.n	800a972 <_strtod_l+0x72>
 800ac44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac46:	fb08 2101 	mla	r1, r8, r1, r2
 800ac4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac50:	e7b5      	b.n	800abbe <_strtod_l+0x2be>
 800ac52:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac54:	e7da      	b.n	800ac0c <_strtod_l+0x30c>
 800ac56:	498b      	ldr	r1, [pc, #556]	@ (800ae84 <_strtod_l+0x584>)
 800ac58:	a819      	add	r0, sp, #100	@ 0x64
 800ac5a:	f001 f9a9 	bl	800bfb0 <__match>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aea2 	beq.w	800a9a8 <_strtod_l+0xa8>
 800ac64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac66:	a819      	add	r0, sp, #100	@ 0x64
 800ac68:	4987      	ldr	r1, [pc, #540]	@ (800ae88 <_strtod_l+0x588>)
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac6e:	f001 f99f 	bl	800bfb0 <__match>
 800ac72:	b910      	cbnz	r0, 800ac7a <_strtod_l+0x37a>
 800ac74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac76:	3301      	adds	r3, #1
 800ac78:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac7a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ae98 <_strtod_l+0x598>
 800ac7e:	f04f 0a00 	mov.w	sl, #0
 800ac82:	e676      	b.n	800a972 <_strtod_l+0x72>
 800ac84:	4881      	ldr	r0, [pc, #516]	@ (800ae8c <_strtod_l+0x58c>)
 800ac86:	f000 fed3 	bl	800ba30 <nan>
 800ac8a:	ec5b ab10 	vmov	sl, fp, d0
 800ac8e:	e670      	b.n	800a972 <_strtod_l+0x72>
 800ac90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac92:	f1b9 0f00 	cmp.w	r9, #0
 800ac96:	bf08      	it	eq
 800ac98:	46a9      	moveq	r9, r5
 800ac9a:	2d10      	cmp	r5, #16
 800ac9c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ac9e:	eba8 0303 	sub.w	r3, r8, r3
 800aca2:	462c      	mov	r4, r5
 800aca4:	bfa8      	it	ge
 800aca6:	2410      	movge	r4, #16
 800aca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acaa:	f7f5 fc2f 	bl	800050c <__aeabi_ui2d>
 800acae:	2d09      	cmp	r5, #9
 800acb0:	4682      	mov	sl, r0
 800acb2:	468b      	mov	fp, r1
 800acb4:	dc13      	bgt.n	800acde <_strtod_l+0x3de>
 800acb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f43f ae5a 	beq.w	800a972 <_strtod_l+0x72>
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	dd78      	ble.n	800adb4 <_strtod_l+0x4b4>
 800acc2:	2b16      	cmp	r3, #22
 800acc4:	dc5f      	bgt.n	800ad86 <_strtod_l+0x486>
 800acc6:	4972      	ldr	r1, [pc, #456]	@ (800ae90 <_strtod_l+0x590>)
 800acc8:	4652      	mov	r2, sl
 800acca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acce:	465b      	mov	r3, fp
 800acd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd4:	f7f5 fc94 	bl	8000600 <__aeabi_dmul>
 800acd8:	4682      	mov	sl, r0
 800acda:	468b      	mov	fp, r1
 800acdc:	e649      	b.n	800a972 <_strtod_l+0x72>
 800acde:	4b6c      	ldr	r3, [pc, #432]	@ (800ae90 <_strtod_l+0x590>)
 800ace0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ace4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ace8:	f7f5 fc8a 	bl	8000600 <__aeabi_dmul>
 800acec:	4682      	mov	sl, r0
 800acee:	468b      	mov	fp, r1
 800acf0:	4638      	mov	r0, r7
 800acf2:	f7f5 fc0b 	bl	800050c <__aeabi_ui2d>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4650      	mov	r0, sl
 800acfc:	4659      	mov	r1, fp
 800acfe:	f7f5 fac9 	bl	8000294 <__adddf3>
 800ad02:	2d0f      	cmp	r5, #15
 800ad04:	4682      	mov	sl, r0
 800ad06:	468b      	mov	fp, r1
 800ad08:	ddd5      	ble.n	800acb6 <_strtod_l+0x3b6>
 800ad0a:	1b2c      	subs	r4, r5, r4
 800ad0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad0e:	441c      	add	r4, r3
 800ad10:	2c00      	cmp	r4, #0
 800ad12:	f340 8093 	ble.w	800ae3c <_strtod_l+0x53c>
 800ad16:	f014 030f 	ands.w	r3, r4, #15
 800ad1a:	d00a      	beq.n	800ad32 <_strtod_l+0x432>
 800ad1c:	495c      	ldr	r1, [pc, #368]	@ (800ae90 <_strtod_l+0x590>)
 800ad1e:	4652      	mov	r2, sl
 800ad20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad24:	465b      	mov	r3, fp
 800ad26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad2a:	f7f5 fc69 	bl	8000600 <__aeabi_dmul>
 800ad2e:	4682      	mov	sl, r0
 800ad30:	468b      	mov	fp, r1
 800ad32:	f034 040f 	bics.w	r4, r4, #15
 800ad36:	d073      	beq.n	800ae20 <_strtod_l+0x520>
 800ad38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad3c:	dd49      	ble.n	800add2 <_strtod_l+0x4d2>
 800ad3e:	2400      	movs	r4, #0
 800ad40:	46a0      	mov	r8, r4
 800ad42:	46a1      	mov	r9, r4
 800ad44:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad46:	2322      	movs	r3, #34	@ 0x22
 800ad48:	9a05      	ldr	r2, [sp, #20]
 800ad4a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ae98 <_strtod_l+0x598>
 800ad4e:	f04f 0a00 	mov.w	sl, #0
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f43f ae0b 	beq.w	800a972 <_strtod_l+0x72>
 800ad5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad5e:	9805      	ldr	r0, [sp, #20]
 800ad60:	f7ff f93a 	bl	8009fd8 <_Bfree>
 800ad64:	4649      	mov	r1, r9
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	f7ff f936 	bl	8009fd8 <_Bfree>
 800ad6c:	4641      	mov	r1, r8
 800ad6e:	9805      	ldr	r0, [sp, #20]
 800ad70:	f7ff f932 	bl	8009fd8 <_Bfree>
 800ad74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad76:	9805      	ldr	r0, [sp, #20]
 800ad78:	f7ff f92e 	bl	8009fd8 <_Bfree>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	9805      	ldr	r0, [sp, #20]
 800ad80:	f7ff f92a 	bl	8009fd8 <_Bfree>
 800ad84:	e5f5      	b.n	800a972 <_strtod_l+0x72>
 800ad86:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ad8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	dbbc      	blt.n	800ad0a <_strtod_l+0x40a>
 800ad90:	f1c5 050f 	rsb	r5, r5, #15
 800ad94:	4c3e      	ldr	r4, [pc, #248]	@ (800ae90 <_strtod_l+0x590>)
 800ad96:	4652      	mov	r2, sl
 800ad98:	465b      	mov	r3, fp
 800ad9a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada2:	f7f5 fc2d 	bl	8000600 <__aeabi_dmul>
 800ada6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada8:	1b5d      	subs	r5, r3, r5
 800adaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800adae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adb2:	e78f      	b.n	800acd4 <_strtod_l+0x3d4>
 800adb4:	3316      	adds	r3, #22
 800adb6:	dba8      	blt.n	800ad0a <_strtod_l+0x40a>
 800adb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adba:	4650      	mov	r0, sl
 800adbc:	4659      	mov	r1, fp
 800adbe:	eba3 0808 	sub.w	r8, r3, r8
 800adc2:	4b33      	ldr	r3, [pc, #204]	@ (800ae90 <_strtod_l+0x590>)
 800adc4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800adc8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800adcc:	f7f5 fd42 	bl	8000854 <__aeabi_ddiv>
 800add0:	e782      	b.n	800acd8 <_strtod_l+0x3d8>
 800add2:	2300      	movs	r3, #0
 800add4:	1124      	asrs	r4, r4, #4
 800add6:	4650      	mov	r0, sl
 800add8:	4659      	mov	r1, fp
 800adda:	4f2e      	ldr	r7, [pc, #184]	@ (800ae94 <_strtod_l+0x594>)
 800addc:	461e      	mov	r6, r3
 800adde:	2c01      	cmp	r4, #1
 800ade0:	dc21      	bgt.n	800ae26 <_strtod_l+0x526>
 800ade2:	b10b      	cbz	r3, 800ade8 <_strtod_l+0x4e8>
 800ade4:	4682      	mov	sl, r0
 800ade6:	468b      	mov	fp, r1
 800ade8:	492a      	ldr	r1, [pc, #168]	@ (800ae94 <_strtod_l+0x594>)
 800adea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800adee:	4652      	mov	r2, sl
 800adf0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800adf4:	465b      	mov	r3, fp
 800adf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfa:	f7f5 fc01 	bl	8000600 <__aeabi_dmul>
 800adfe:	4b26      	ldr	r3, [pc, #152]	@ (800ae98 <_strtod_l+0x598>)
 800ae00:	460a      	mov	r2, r1
 800ae02:	4682      	mov	sl, r0
 800ae04:	400b      	ands	r3, r1
 800ae06:	4925      	ldr	r1, [pc, #148]	@ (800ae9c <_strtod_l+0x59c>)
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	d898      	bhi.n	800ad3e <_strtod_l+0x43e>
 800ae0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf86      	itte	hi
 800ae14:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800aea0 <_strtod_l+0x5a0>
 800ae18:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae20:	2300      	movs	r3, #0
 800ae22:	9308      	str	r3, [sp, #32]
 800ae24:	e076      	b.n	800af14 <_strtod_l+0x614>
 800ae26:	07e2      	lsls	r2, r4, #31
 800ae28:	d504      	bpl.n	800ae34 <_strtod_l+0x534>
 800ae2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2e:	f7f5 fbe7 	bl	8000600 <__aeabi_dmul>
 800ae32:	2301      	movs	r3, #1
 800ae34:	3601      	adds	r6, #1
 800ae36:	1064      	asrs	r4, r4, #1
 800ae38:	3708      	adds	r7, #8
 800ae3a:	e7d0      	b.n	800adde <_strtod_l+0x4de>
 800ae3c:	d0f0      	beq.n	800ae20 <_strtod_l+0x520>
 800ae3e:	4264      	negs	r4, r4
 800ae40:	f014 020f 	ands.w	r2, r4, #15
 800ae44:	d00a      	beq.n	800ae5c <_strtod_l+0x55c>
 800ae46:	4b12      	ldr	r3, [pc, #72]	@ (800ae90 <_strtod_l+0x590>)
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4659      	mov	r1, fp
 800ae4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f7f5 fcfe 	bl	8000854 <__aeabi_ddiv>
 800ae58:	4682      	mov	sl, r0
 800ae5a:	468b      	mov	fp, r1
 800ae5c:	1124      	asrs	r4, r4, #4
 800ae5e:	d0df      	beq.n	800ae20 <_strtod_l+0x520>
 800ae60:	2c1f      	cmp	r4, #31
 800ae62:	dd1f      	ble.n	800aea4 <_strtod_l+0x5a4>
 800ae64:	2400      	movs	r4, #0
 800ae66:	46a0      	mov	r8, r4
 800ae68:	46a1      	mov	r9, r4
 800ae6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae6c:	2322      	movs	r3, #34	@ 0x22
 800ae6e:	9a05      	ldr	r2, [sp, #20]
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	f04f 0b00 	mov.w	fp, #0
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	e76b      	b.n	800ad54 <_strtod_l+0x454>
 800ae7c:	0800cbc9 	.word	0x0800cbc9
 800ae80:	0800ce90 	.word	0x0800ce90
 800ae84:	0800cbc1 	.word	0x0800cbc1
 800ae88:	0800cbf8 	.word	0x0800cbf8
 800ae8c:	0800cd31 	.word	0x0800cd31
 800ae90:	0800cdc8 	.word	0x0800cdc8
 800ae94:	0800cda0 	.word	0x0800cda0
 800ae98:	7ff00000 	.word	0x7ff00000
 800ae9c:	7ca00000 	.word	0x7ca00000
 800aea0:	7fefffff 	.word	0x7fefffff
 800aea4:	f014 0310 	ands.w	r3, r4, #16
 800aea8:	4650      	mov	r0, sl
 800aeaa:	4659      	mov	r1, fp
 800aeac:	4ea9      	ldr	r6, [pc, #676]	@ (800b154 <_strtod_l+0x854>)
 800aeae:	bf18      	it	ne
 800aeb0:	236a      	movne	r3, #106	@ 0x6a
 800aeb2:	9308      	str	r3, [sp, #32]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	07e7      	lsls	r7, r4, #31
 800aeb8:	d504      	bpl.n	800aec4 <_strtod_l+0x5c4>
 800aeba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aebe:	f7f5 fb9f 	bl	8000600 <__aeabi_dmul>
 800aec2:	2301      	movs	r3, #1
 800aec4:	1064      	asrs	r4, r4, #1
 800aec6:	f106 0608 	add.w	r6, r6, #8
 800aeca:	d1f4      	bne.n	800aeb6 <_strtod_l+0x5b6>
 800aecc:	b10b      	cbz	r3, 800aed2 <_strtod_l+0x5d2>
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	9b08      	ldr	r3, [sp, #32]
 800aed4:	b1b3      	cbz	r3, 800af04 <_strtod_l+0x604>
 800aed6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aeda:	4659      	mov	r1, fp
 800aedc:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dd0f      	ble.n	800af04 <_strtod_l+0x604>
 800aee4:	2b1f      	cmp	r3, #31
 800aee6:	dd56      	ble.n	800af96 <_strtod_l+0x696>
 800aee8:	2b34      	cmp	r3, #52	@ 0x34
 800aeea:	f04f 0a00 	mov.w	sl, #0
 800aeee:	bfdb      	ittet	le
 800aef0:	f04f 33ff 	movle.w	r3, #4294967295
 800aef4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aef8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aefc:	4093      	lslle	r3, r2
 800aefe:	bfd8      	it	le
 800af00:	ea03 0b01 	andle.w	fp, r3, r1
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	4650      	mov	r0, sl
 800af0a:	4659      	mov	r1, fp
 800af0c:	f7f5 fde0 	bl	8000ad0 <__aeabi_dcmpeq>
 800af10:	2800      	cmp	r0, #0
 800af12:	d1a7      	bne.n	800ae64 <_strtod_l+0x564>
 800af14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af16:	464a      	mov	r2, r9
 800af18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	462b      	mov	r3, r5
 800af1e:	9805      	ldr	r0, [sp, #20]
 800af20:	f7ff f8c4 	bl	800a0ac <__s2b>
 800af24:	900b      	str	r0, [sp, #44]	@ 0x2c
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f af09 	beq.w	800ad3e <_strtod_l+0x43e>
 800af2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af2e:	2400      	movs	r4, #0
 800af30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af32:	2a00      	cmp	r2, #0
 800af34:	eba3 0308 	sub.w	r3, r3, r8
 800af38:	46a0      	mov	r8, r4
 800af3a:	bfa8      	it	ge
 800af3c:	2300      	movge	r3, #0
 800af3e:	9312      	str	r3, [sp, #72]	@ 0x48
 800af40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af44:	9316      	str	r3, [sp, #88]	@ 0x58
 800af46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af48:	9805      	ldr	r0, [sp, #20]
 800af4a:	6859      	ldr	r1, [r3, #4]
 800af4c:	f7ff f804 	bl	8009f58 <_Balloc>
 800af50:	4681      	mov	r9, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	f43f aef7 	beq.w	800ad46 <_strtod_l+0x446>
 800af58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af5a:	300c      	adds	r0, #12
 800af5c:	691a      	ldr	r2, [r3, #16]
 800af5e:	f103 010c 	add.w	r1, r3, #12
 800af62:	3202      	adds	r2, #2
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	f7fe f938 	bl	80091da <memcpy>
 800af6a:	aa1c      	add	r2, sp, #112	@ 0x70
 800af6c:	a91b      	add	r1, sp, #108	@ 0x6c
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	ec4b ab10 	vmov	d0, sl, fp
 800af74:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800af78:	f7ff fbd6 	bl	800a728 <__d2b>
 800af7c:	901a      	str	r0, [sp, #104]	@ 0x68
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f aee1 	beq.w	800ad46 <_strtod_l+0x446>
 800af84:	2101      	movs	r1, #1
 800af86:	9805      	ldr	r0, [sp, #20]
 800af88:	f7ff f926 	bl	800a1d8 <__i2b>
 800af8c:	4680      	mov	r8, r0
 800af8e:	b948      	cbnz	r0, 800afa4 <_strtod_l+0x6a4>
 800af90:	f04f 0800 	mov.w	r8, #0
 800af94:	e6d7      	b.n	800ad46 <_strtod_l+0x446>
 800af96:	f04f 32ff 	mov.w	r2, #4294967295
 800af9a:	fa02 f303 	lsl.w	r3, r2, r3
 800af9e:	ea03 0a0a 	and.w	sl, r3, sl
 800afa2:	e7af      	b.n	800af04 <_strtod_l+0x604>
 800afa4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800afa6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800afa8:	2d00      	cmp	r5, #0
 800afaa:	bfa9      	itett	ge
 800afac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800afae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800afb0:	18ef      	addge	r7, r5, r3
 800afb2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800afb4:	bfb8      	it	lt
 800afb6:	1b5e      	sublt	r6, r3, r5
 800afb8:	9b08      	ldr	r3, [sp, #32]
 800afba:	bfb8      	it	lt
 800afbc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800afbe:	1aed      	subs	r5, r5, r3
 800afc0:	4b65      	ldr	r3, [pc, #404]	@ (800b158 <_strtod_l+0x858>)
 800afc2:	4415      	add	r5, r2
 800afc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800afc8:	3d01      	subs	r5, #1
 800afca:	429d      	cmp	r5, r3
 800afcc:	da4f      	bge.n	800b06e <_strtod_l+0x76e>
 800afce:	1b5b      	subs	r3, r3, r5
 800afd0:	2101      	movs	r1, #1
 800afd2:	2b1f      	cmp	r3, #31
 800afd4:	eba2 0203 	sub.w	r2, r2, r3
 800afd8:	dc3d      	bgt.n	800b056 <_strtod_l+0x756>
 800afda:	fa01 f303 	lsl.w	r3, r1, r3
 800afde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afe0:	2300      	movs	r3, #0
 800afe2:	9310      	str	r3, [sp, #64]	@ 0x40
 800afe4:	18bd      	adds	r5, r7, r2
 800afe6:	9b08      	ldr	r3, [sp, #32]
 800afe8:	4416      	add	r6, r2
 800afea:	42af      	cmp	r7, r5
 800afec:	441e      	add	r6, r3
 800afee:	463b      	mov	r3, r7
 800aff0:	bfa8      	it	ge
 800aff2:	462b      	movge	r3, r5
 800aff4:	42b3      	cmp	r3, r6
 800aff6:	bfa8      	it	ge
 800aff8:	4633      	movge	r3, r6
 800affa:	2b00      	cmp	r3, #0
 800affc:	bfc2      	ittt	gt
 800affe:	1aed      	subgt	r5, r5, r3
 800b000:	1af6      	subgt	r6, r6, r3
 800b002:	1aff      	subgt	r7, r7, r3
 800b004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd16      	ble.n	800b038 <_strtod_l+0x738>
 800b00a:	4641      	mov	r1, r8
 800b00c:	461a      	mov	r2, r3
 800b00e:	9805      	ldr	r0, [sp, #20]
 800b010:	f7ff f99c 	bl	800a34c <__pow5mult>
 800b014:	4680      	mov	r8, r0
 800b016:	2800      	cmp	r0, #0
 800b018:	d0ba      	beq.n	800af90 <_strtod_l+0x690>
 800b01a:	4601      	mov	r1, r0
 800b01c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b01e:	9805      	ldr	r0, [sp, #20]
 800b020:	f7ff f8f0 	bl	800a204 <__multiply>
 800b024:	900a      	str	r0, [sp, #40]	@ 0x28
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f ae8d 	beq.w	800ad46 <_strtod_l+0x446>
 800b02c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b02e:	9805      	ldr	r0, [sp, #20]
 800b030:	f7fe ffd2 	bl	8009fd8 <_Bfree>
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	931a      	str	r3, [sp, #104]	@ 0x68
 800b038:	2d00      	cmp	r5, #0
 800b03a:	dc1d      	bgt.n	800b078 <_strtod_l+0x778>
 800b03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd23      	ble.n	800b08a <_strtod_l+0x78a>
 800b042:	4649      	mov	r1, r9
 800b044:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b046:	9805      	ldr	r0, [sp, #20]
 800b048:	f7ff f980 	bl	800a34c <__pow5mult>
 800b04c:	4681      	mov	r9, r0
 800b04e:	b9e0      	cbnz	r0, 800b08a <_strtod_l+0x78a>
 800b050:	f04f 0900 	mov.w	r9, #0
 800b054:	e677      	b.n	800ad46 <_strtod_l+0x446>
 800b056:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b05a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b05c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b060:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b064:	35e2      	adds	r5, #226	@ 0xe2
 800b066:	fa01 f305 	lsl.w	r3, r1, r5
 800b06a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b06c:	e7ba      	b.n	800afe4 <_strtod_l+0x6e4>
 800b06e:	2300      	movs	r3, #0
 800b070:	9310      	str	r3, [sp, #64]	@ 0x40
 800b072:	2301      	movs	r3, #1
 800b074:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b076:	e7b5      	b.n	800afe4 <_strtod_l+0x6e4>
 800b078:	462a      	mov	r2, r5
 800b07a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b07c:	9805      	ldr	r0, [sp, #20]
 800b07e:	f7ff f9bf 	bl	800a400 <__lshift>
 800b082:	901a      	str	r0, [sp, #104]	@ 0x68
 800b084:	2800      	cmp	r0, #0
 800b086:	d1d9      	bne.n	800b03c <_strtod_l+0x73c>
 800b088:	e65d      	b.n	800ad46 <_strtod_l+0x446>
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	dd07      	ble.n	800b09e <_strtod_l+0x79e>
 800b08e:	4649      	mov	r1, r9
 800b090:	4632      	mov	r2, r6
 800b092:	9805      	ldr	r0, [sp, #20]
 800b094:	f7ff f9b4 	bl	800a400 <__lshift>
 800b098:	4681      	mov	r9, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d0d8      	beq.n	800b050 <_strtod_l+0x750>
 800b09e:	2f00      	cmp	r7, #0
 800b0a0:	dd08      	ble.n	800b0b4 <_strtod_l+0x7b4>
 800b0a2:	4641      	mov	r1, r8
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	9805      	ldr	r0, [sp, #20]
 800b0a8:	f7ff f9aa 	bl	800a400 <__lshift>
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f ae49 	beq.w	800ad46 <_strtod_l+0x446>
 800b0b4:	464a      	mov	r2, r9
 800b0b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0b8:	9805      	ldr	r0, [sp, #20]
 800b0ba:	f7ff fa29 	bl	800a510 <__mdiff>
 800b0be:	4604      	mov	r4, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f43f ae40 	beq.w	800ad46 <_strtod_l+0x446>
 800b0c6:	68c3      	ldr	r3, [r0, #12]
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60c3      	str	r3, [r0, #12]
 800b0d0:	f7ff fa02 	bl	800a4d8 <__mcmp>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	da45      	bge.n	800b164 <_strtod_l+0x864>
 800b0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0da:	ea53 030a 	orrs.w	r3, r3, sl
 800b0de:	d16b      	bne.n	800b1b8 <_strtod_l+0x8b8>
 800b0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d167      	bne.n	800b1b8 <_strtod_l+0x8b8>
 800b0e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0ec:	0d1b      	lsrs	r3, r3, #20
 800b0ee:	051b      	lsls	r3, r3, #20
 800b0f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b0f4:	d960      	bls.n	800b1b8 <_strtod_l+0x8b8>
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	b913      	cbnz	r3, 800b100 <_strtod_l+0x800>
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	dd5b      	ble.n	800b1b8 <_strtod_l+0x8b8>
 800b100:	4621      	mov	r1, r4
 800b102:	2201      	movs	r2, #1
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	f7ff f97b 	bl	800a400 <__lshift>
 800b10a:	4641      	mov	r1, r8
 800b10c:	4604      	mov	r4, r0
 800b10e:	f7ff f9e3 	bl	800a4d8 <__mcmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	dd50      	ble.n	800b1b8 <_strtod_l+0x8b8>
 800b116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b11a:	9a08      	ldr	r2, [sp, #32]
 800b11c:	0d1b      	lsrs	r3, r3, #20
 800b11e:	051b      	lsls	r3, r3, #20
 800b120:	2a00      	cmp	r2, #0
 800b122:	d06a      	beq.n	800b1fa <_strtod_l+0x8fa>
 800b124:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b128:	d867      	bhi.n	800b1fa <_strtod_l+0x8fa>
 800b12a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b12e:	f67f ae9d 	bls.w	800ae6c <_strtod_l+0x56c>
 800b132:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <_strtod_l+0x85c>)
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	2200      	movs	r2, #0
 800b13a:	f7f5 fa61 	bl	8000600 <__aeabi_dmul>
 800b13e:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <_strtod_l+0x860>)
 800b140:	4682      	mov	sl, r0
 800b142:	468b      	mov	fp, r1
 800b144:	400b      	ands	r3, r1
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f ae08 	bne.w	800ad5c <_strtod_l+0x45c>
 800b14c:	2322      	movs	r3, #34	@ 0x22
 800b14e:	9a05      	ldr	r2, [sp, #20]
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	e603      	b.n	800ad5c <_strtod_l+0x45c>
 800b154:	0800ceb8 	.word	0x0800ceb8
 800b158:	fffffc02 	.word	0xfffffc02
 800b15c:	39500000 	.word	0x39500000
 800b160:	7ff00000 	.word	0x7ff00000
 800b164:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b168:	d165      	bne.n	800b236 <_strtod_l+0x936>
 800b16a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b170:	b35a      	cbz	r2, 800b1ca <_strtod_l+0x8ca>
 800b172:	4a9f      	ldr	r2, [pc, #636]	@ (800b3f0 <_strtod_l+0xaf0>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d12b      	bne.n	800b1d0 <_strtod_l+0x8d0>
 800b178:	9b08      	ldr	r3, [sp, #32]
 800b17a:	4651      	mov	r1, sl
 800b17c:	b303      	cbz	r3, 800b1c0 <_strtod_l+0x8c0>
 800b17e:	465a      	mov	r2, fp
 800b180:	4b9c      	ldr	r3, [pc, #624]	@ (800b3f4 <_strtod_l+0xaf4>)
 800b182:	4013      	ands	r3, r2
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b18c:	d81b      	bhi.n	800b1c6 <_strtod_l+0x8c6>
 800b18e:	0d1b      	lsrs	r3, r3, #20
 800b190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	4299      	cmp	r1, r3
 800b19a:	d119      	bne.n	800b1d0 <_strtod_l+0x8d0>
 800b19c:	4b96      	ldr	r3, [pc, #600]	@ (800b3f8 <_strtod_l+0xaf8>)
 800b19e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d102      	bne.n	800b1aa <_strtod_l+0x8aa>
 800b1a4:	3101      	adds	r1, #1
 800b1a6:	f43f adce 	beq.w	800ad46 <_strtod_l+0x446>
 800b1aa:	4b92      	ldr	r3, [pc, #584]	@ (800b3f4 <_strtod_l+0xaf4>)
 800b1ac:	f04f 0a00 	mov.w	sl, #0
 800b1b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1b2:	401a      	ands	r2, r3
 800b1b4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1b9      	bne.n	800b132 <_strtod_l+0x832>
 800b1be:	e5cd      	b.n	800ad5c <_strtod_l+0x45c>
 800b1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c4:	e7e8      	b.n	800b198 <_strtod_l+0x898>
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	e7e6      	b.n	800b198 <_strtod_l+0x898>
 800b1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b1ce:	d0a2      	beq.n	800b116 <_strtod_l+0x816>
 800b1d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1d2:	b1db      	cbz	r3, 800b20c <_strtod_l+0x90c>
 800b1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1d6:	4213      	tst	r3, r2
 800b1d8:	d0ee      	beq.n	800b1b8 <_strtod_l+0x8b8>
 800b1da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1dc:	4650      	mov	r0, sl
 800b1de:	9a08      	ldr	r2, [sp, #32]
 800b1e0:	4659      	mov	r1, fp
 800b1e2:	b1bb      	cbz	r3, 800b214 <_strtod_l+0x914>
 800b1e4:	f7ff fb6e 	bl	800a8c4 <sulp>
 800b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1ec:	ec53 2b10 	vmov	r2, r3, d0
 800b1f0:	f7f5 f850 	bl	8000294 <__adddf3>
 800b1f4:	4682      	mov	sl, r0
 800b1f6:	468b      	mov	fp, r1
 800b1f8:	e7de      	b.n	800b1b8 <_strtod_l+0x8b8>
 800b1fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b1fe:	f04f 3aff 	mov.w	sl, #4294967295
 800b202:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b206:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b20a:	e7d5      	b.n	800b1b8 <_strtod_l+0x8b8>
 800b20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b20e:	ea13 0f0a 	tst.w	r3, sl
 800b212:	e7e1      	b.n	800b1d8 <_strtod_l+0x8d8>
 800b214:	f7ff fb56 	bl	800a8c4 <sulp>
 800b218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b21c:	ec53 2b10 	vmov	r2, r3, d0
 800b220:	f7f5 f836 	bl	8000290 <__aeabi_dsub>
 800b224:	2200      	movs	r2, #0
 800b226:	2300      	movs	r3, #0
 800b228:	4682      	mov	sl, r0
 800b22a:	468b      	mov	fp, r1
 800b22c:	f7f5 fc50 	bl	8000ad0 <__aeabi_dcmpeq>
 800b230:	2800      	cmp	r0, #0
 800b232:	d0c1      	beq.n	800b1b8 <_strtod_l+0x8b8>
 800b234:	e61a      	b.n	800ae6c <_strtod_l+0x56c>
 800b236:	4641      	mov	r1, r8
 800b238:	4620      	mov	r0, r4
 800b23a:	f7ff facd 	bl	800a7d8 <__ratio>
 800b23e:	2200      	movs	r2, #0
 800b240:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b244:	ec57 6b10 	vmov	r6, r7, d0
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f5 fc54 	bl	8000af8 <__aeabi_dcmple>
 800b250:	2800      	cmp	r0, #0
 800b252:	d06f      	beq.n	800b334 <_strtod_l+0xa34>
 800b254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b256:	2b00      	cmp	r3, #0
 800b258:	d17a      	bne.n	800b350 <_strtod_l+0xa50>
 800b25a:	f1ba 0f00 	cmp.w	sl, #0
 800b25e:	d158      	bne.n	800b312 <_strtod_l+0xa12>
 800b260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b266:	2b00      	cmp	r3, #0
 800b268:	d15a      	bne.n	800b320 <_strtod_l+0xa20>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4b63      	ldr	r3, [pc, #396]	@ (800b3fc <_strtod_l+0xafc>)
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc37 	bl	8000ae4 <__aeabi_dcmplt>
 800b276:	2800      	cmp	r0, #0
 800b278:	d159      	bne.n	800b32e <_strtod_l+0xa2e>
 800b27a:	4630      	mov	r0, r6
 800b27c:	4639      	mov	r1, r7
 800b27e:	2200      	movs	r2, #0
 800b280:	4b5f      	ldr	r3, [pc, #380]	@ (800b400 <_strtod_l+0xb00>)
 800b282:	f7f5 f9bd 	bl	8000600 <__aeabi_dmul>
 800b286:	4606      	mov	r6, r0
 800b288:	460f      	mov	r7, r1
 800b28a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b28e:	9606      	str	r6, [sp, #24]
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	4d58      	ldr	r5, [pc, #352]	@ (800b3f4 <_strtod_l+0xaf4>)
 800b294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b29e:	401d      	ands	r5, r3
 800b2a0:	4b58      	ldr	r3, [pc, #352]	@ (800b404 <_strtod_l+0xb04>)
 800b2a2:	429d      	cmp	r5, r3
 800b2a4:	f040 80b2 	bne.w	800b40c <_strtod_l+0xb0c>
 800b2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b2ae:	ec4b ab10 	vmov	d0, sl, fp
 800b2b2:	f7ff f9c5 	bl	800a640 <__ulp>
 800b2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ba:	ec51 0b10 	vmov	r0, r1, d0
 800b2be:	f7f5 f99f 	bl	8000600 <__aeabi_dmul>
 800b2c2:	4652      	mov	r2, sl
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	f7f4 ffe5 	bl	8000294 <__adddf3>
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4949      	ldr	r1, [pc, #292]	@ (800b3f4 <_strtod_l+0xaf4>)
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	4a4d      	ldr	r2, [pc, #308]	@ (800b408 <_strtod_l+0xb08>)
 800b2d2:	4019      	ands	r1, r3
 800b2d4:	4291      	cmp	r1, r2
 800b2d6:	d942      	bls.n	800b35e <_strtod_l+0xa5e>
 800b2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2da:	4b47      	ldr	r3, [pc, #284]	@ (800b3f8 <_strtod_l+0xaf8>)
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d103      	bne.n	800b2e8 <_strtod_l+0x9e8>
 800b2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	f43f ad2f 	beq.w	800ad46 <_strtod_l+0x446>
 800b2e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b3f8 <_strtod_l+0xaf8>
 800b2ec:	f04f 3aff 	mov.w	sl, #4294967295
 800b2f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2f2:	9805      	ldr	r0, [sp, #20]
 800b2f4:	f7fe fe70 	bl	8009fd8 <_Bfree>
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	9805      	ldr	r0, [sp, #20]
 800b2fc:	f7fe fe6c 	bl	8009fd8 <_Bfree>
 800b300:	4641      	mov	r1, r8
 800b302:	9805      	ldr	r0, [sp, #20]
 800b304:	f7fe fe68 	bl	8009fd8 <_Bfree>
 800b308:	4621      	mov	r1, r4
 800b30a:	9805      	ldr	r0, [sp, #20]
 800b30c:	f7fe fe64 	bl	8009fd8 <_Bfree>
 800b310:	e619      	b.n	800af46 <_strtod_l+0x646>
 800b312:	f1ba 0f01 	cmp.w	sl, #1
 800b316:	d103      	bne.n	800b320 <_strtod_l+0xa20>
 800b318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f43f ada6 	beq.w	800ae6c <_strtod_l+0x56c>
 800b320:	2600      	movs	r6, #0
 800b322:	4f36      	ldr	r7, [pc, #216]	@ (800b3fc <_strtod_l+0xafc>)
 800b324:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b3d0 <_strtod_l+0xad0>
 800b328:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b32c:	e7b1      	b.n	800b292 <_strtod_l+0x992>
 800b32e:	2600      	movs	r6, #0
 800b330:	4f33      	ldr	r7, [pc, #204]	@ (800b400 <_strtod_l+0xb00>)
 800b332:	e7aa      	b.n	800b28a <_strtod_l+0x98a>
 800b334:	4b32      	ldr	r3, [pc, #200]	@ (800b400 <_strtod_l+0xb00>)
 800b336:	4630      	mov	r0, r6
 800b338:	4639      	mov	r1, r7
 800b33a:	2200      	movs	r2, #0
 800b33c:	f7f5 f960 	bl	8000600 <__aeabi_dmul>
 800b340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d09f      	beq.n	800b28a <_strtod_l+0x98a>
 800b34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b34e:	e7a0      	b.n	800b292 <_strtod_l+0x992>
 800b350:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b3d8 <_strtod_l+0xad8>
 800b354:	ec57 6b17 	vmov	r6, r7, d7
 800b358:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b35c:	e799      	b.n	800b292 <_strtod_l+0x992>
 800b35e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b362:	9b08      	ldr	r3, [sp, #32]
 800b364:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1c1      	bne.n	800b2f0 <_strtod_l+0x9f0>
 800b36c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b370:	0d1b      	lsrs	r3, r3, #20
 800b372:	051b      	lsls	r3, r3, #20
 800b374:	429d      	cmp	r5, r3
 800b376:	d1bb      	bne.n	800b2f0 <_strtod_l+0x9f0>
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f5 fca0 	bl	8000cc0 <__aeabi_d2lz>
 800b380:	f7f5 f910 	bl	80005a4 <__aeabi_l2d>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b390:	f7f4 ff7e 	bl	8000290 <__aeabi_dsub>
 800b394:	460b      	mov	r3, r1
 800b396:	4602      	mov	r2, r0
 800b398:	ea46 060a 	orr.w	r6, r6, sl
 800b39c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a2:	431e      	orrs	r6, r3
 800b3a4:	d06f      	beq.n	800b486 <_strtod_l+0xb86>
 800b3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3e0 <_strtod_l+0xae0>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f5 fb9a 	bl	8000ae4 <__aeabi_dcmplt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f47f acd3 	bne.w	800ad5c <_strtod_l+0x45c>
 800b3b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b3e8 <_strtod_l+0xae8>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3c0:	f7f5 fbae 	bl	8000b20 <__aeabi_dcmpgt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d093      	beq.n	800b2f0 <_strtod_l+0x9f0>
 800b3c8:	e4c8      	b.n	800ad5c <_strtod_l+0x45c>
 800b3ca:	bf00      	nop
 800b3cc:	f3af 8000 	nop.w
 800b3d0:	00000000 	.word	0x00000000
 800b3d4:	bff00000 	.word	0xbff00000
 800b3d8:	00000000 	.word	0x00000000
 800b3dc:	3ff00000 	.word	0x3ff00000
 800b3e0:	94a03595 	.word	0x94a03595
 800b3e4:	3fdfffff 	.word	0x3fdfffff
 800b3e8:	35afe535 	.word	0x35afe535
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	000fffff 	.word	0x000fffff
 800b3f4:	7ff00000 	.word	0x7ff00000
 800b3f8:	7fefffff 	.word	0x7fefffff
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	3fe00000 	.word	0x3fe00000
 800b404:	7fe00000 	.word	0x7fe00000
 800b408:	7c9fffff 	.word	0x7c9fffff
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	b323      	cbz	r3, 800b45a <_strtod_l+0xb5a>
 800b410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b414:	d821      	bhi.n	800b45a <_strtod_l+0xb5a>
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	a327      	add	r3, pc, #156	@ (adr r3, 800b4b8 <_strtod_l+0xbb8>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 fb6a 	bl	8000af8 <__aeabi_dcmple>
 800b424:	b1a0      	cbz	r0, 800b450 <_strtod_l+0xb50>
 800b426:	4639      	mov	r1, r7
 800b428:	4630      	mov	r0, r6
 800b42a:	f7f5 fbc1 	bl	8000bb0 <__aeabi_d2uiz>
 800b42e:	2801      	cmp	r0, #1
 800b430:	bf38      	it	cc
 800b432:	2001      	movcc	r0, #1
 800b434:	f7f5 f86a 	bl	800050c <__aeabi_ui2d>
 800b438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	b9fb      	cbnz	r3, 800b480 <_strtod_l+0xb80>
 800b440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b444:	9014      	str	r0, [sp, #80]	@ 0x50
 800b446:	9315      	str	r3, [sp, #84]	@ 0x54
 800b448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b44c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b456:	1b5b      	subs	r3, r3, r5
 800b458:	9311      	str	r3, [sp, #68]	@ 0x44
 800b45a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b45e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b462:	f7ff f8ed 	bl	800a640 <__ulp>
 800b466:	4650      	mov	r0, sl
 800b468:	4659      	mov	r1, fp
 800b46a:	ec53 2b10 	vmov	r2, r3, d0
 800b46e:	f7f5 f8c7 	bl	8000600 <__aeabi_dmul>
 800b472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b476:	f7f4 ff0d 	bl	8000294 <__adddf3>
 800b47a:	4682      	mov	sl, r0
 800b47c:	468b      	mov	fp, r1
 800b47e:	e770      	b.n	800b362 <_strtod_l+0xa62>
 800b480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b484:	e7e0      	b.n	800b448 <_strtod_l+0xb48>
 800b486:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4c0 <_strtod_l+0xbc0>)
 800b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48c:	f7f5 fb2a 	bl	8000ae4 <__aeabi_dcmplt>
 800b490:	e798      	b.n	800b3c4 <_strtod_l+0xac4>
 800b492:	2300      	movs	r3, #0
 800b494:	930e      	str	r3, [sp, #56]	@ 0x38
 800b496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b498:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	f7ff ba6d 	b.w	800a97a <_strtod_l+0x7a>
 800b4a0:	2a65      	cmp	r2, #101	@ 0x65
 800b4a2:	f43f ab67 	beq.w	800ab74 <_strtod_l+0x274>
 800b4a6:	2a45      	cmp	r2, #69	@ 0x45
 800b4a8:	f43f ab64 	beq.w	800ab74 <_strtod_l+0x274>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f7ff bba0 	b.w	800abf2 <_strtod_l+0x2f2>
 800b4b2:	bf00      	nop
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	ffc00000 	.word	0xffc00000
 800b4bc:	41dfffff 	.word	0x41dfffff
 800b4c0:	94a03595 	.word	0x94a03595
 800b4c4:	3fcfffff 	.word	0x3fcfffff

0800b4c8 <_strtod_r>:
 800b4c8:	4b01      	ldr	r3, [pc, #4]	@ (800b4d0 <_strtod_r+0x8>)
 800b4ca:	f7ff ba19 	b.w	800a900 <_strtod_l>
 800b4ce:	bf00      	nop
 800b4d0:	200000a8 	.word	0x200000a8

0800b4d4 <_strtol_l.isra.0>:
 800b4d4:	2b24      	cmp	r3, #36	@ 0x24
 800b4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4da:	4686      	mov	lr, r0
 800b4dc:	4690      	mov	r8, r2
 800b4de:	d801      	bhi.n	800b4e4 <_strtol_l.isra.0+0x10>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d106      	bne.n	800b4f2 <_strtol_l.isra.0+0x1e>
 800b4e4:	f7fd fe3e 	bl	8009164 <__errno>
 800b4e8:	2316      	movs	r3, #22
 800b4ea:	6003      	str	r3, [r0, #0]
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	4833      	ldr	r0, [pc, #204]	@ (800b5c4 <_strtol_l.isra.0+0xf0>)
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4fc:	5d06      	ldrb	r6, [r0, r4]
 800b4fe:	f016 0608 	ands.w	r6, r6, #8
 800b502:	d1f8      	bne.n	800b4f6 <_strtol_l.isra.0+0x22>
 800b504:	2c2d      	cmp	r4, #45	@ 0x2d
 800b506:	d110      	bne.n	800b52a <_strtol_l.isra.0+0x56>
 800b508:	782c      	ldrb	r4, [r5, #0]
 800b50a:	2601      	movs	r6, #1
 800b50c:	1c95      	adds	r5, r2, #2
 800b50e:	f033 0210 	bics.w	r2, r3, #16
 800b512:	d115      	bne.n	800b540 <_strtol_l.isra.0+0x6c>
 800b514:	2c30      	cmp	r4, #48	@ 0x30
 800b516:	d10d      	bne.n	800b534 <_strtol_l.isra.0+0x60>
 800b518:	782a      	ldrb	r2, [r5, #0]
 800b51a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b51e:	2a58      	cmp	r2, #88	@ 0x58
 800b520:	d108      	bne.n	800b534 <_strtol_l.isra.0+0x60>
 800b522:	786c      	ldrb	r4, [r5, #1]
 800b524:	3502      	adds	r5, #2
 800b526:	2310      	movs	r3, #16
 800b528:	e00a      	b.n	800b540 <_strtol_l.isra.0+0x6c>
 800b52a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b52c:	bf04      	itt	eq
 800b52e:	782c      	ldrbeq	r4, [r5, #0]
 800b530:	1c95      	addeq	r5, r2, #2
 800b532:	e7ec      	b.n	800b50e <_strtol_l.isra.0+0x3a>
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1f6      	bne.n	800b526 <_strtol_l.isra.0+0x52>
 800b538:	2c30      	cmp	r4, #48	@ 0x30
 800b53a:	bf14      	ite	ne
 800b53c:	230a      	movne	r3, #10
 800b53e:	2308      	moveq	r3, #8
 800b540:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b544:	2200      	movs	r2, #0
 800b546:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b54a:	4610      	mov	r0, r2
 800b54c:	fbbc f9f3 	udiv	r9, ip, r3
 800b550:	fb03 ca19 	mls	sl, r3, r9, ip
 800b554:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b558:	2f09      	cmp	r7, #9
 800b55a:	d80f      	bhi.n	800b57c <_strtol_l.isra.0+0xa8>
 800b55c:	463c      	mov	r4, r7
 800b55e:	42a3      	cmp	r3, r4
 800b560:	dd1b      	ble.n	800b59a <_strtol_l.isra.0+0xc6>
 800b562:	1c57      	adds	r7, r2, #1
 800b564:	d007      	beq.n	800b576 <_strtol_l.isra.0+0xa2>
 800b566:	4581      	cmp	r9, r0
 800b568:	d314      	bcc.n	800b594 <_strtol_l.isra.0+0xc0>
 800b56a:	d101      	bne.n	800b570 <_strtol_l.isra.0+0x9c>
 800b56c:	45a2      	cmp	sl, r4
 800b56e:	db11      	blt.n	800b594 <_strtol_l.isra.0+0xc0>
 800b570:	fb00 4003 	mla	r0, r0, r3, r4
 800b574:	2201      	movs	r2, #1
 800b576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b57a:	e7eb      	b.n	800b554 <_strtol_l.isra.0+0x80>
 800b57c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b580:	2f19      	cmp	r7, #25
 800b582:	d801      	bhi.n	800b588 <_strtol_l.isra.0+0xb4>
 800b584:	3c37      	subs	r4, #55	@ 0x37
 800b586:	e7ea      	b.n	800b55e <_strtol_l.isra.0+0x8a>
 800b588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b58c:	2f19      	cmp	r7, #25
 800b58e:	d804      	bhi.n	800b59a <_strtol_l.isra.0+0xc6>
 800b590:	3c57      	subs	r4, #87	@ 0x57
 800b592:	e7e4      	b.n	800b55e <_strtol_l.isra.0+0x8a>
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	e7ed      	b.n	800b576 <_strtol_l.isra.0+0xa2>
 800b59a:	1c53      	adds	r3, r2, #1
 800b59c:	d108      	bne.n	800b5b0 <_strtol_l.isra.0+0xdc>
 800b59e:	2322      	movs	r3, #34	@ 0x22
 800b5a0:	4660      	mov	r0, ip
 800b5a2:	f8ce 3000 	str.w	r3, [lr]
 800b5a6:	f1b8 0f00 	cmp.w	r8, #0
 800b5aa:	d0a0      	beq.n	800b4ee <_strtol_l.isra.0+0x1a>
 800b5ac:	1e69      	subs	r1, r5, #1
 800b5ae:	e006      	b.n	800b5be <_strtol_l.isra.0+0xea>
 800b5b0:	b106      	cbz	r6, 800b5b4 <_strtol_l.isra.0+0xe0>
 800b5b2:	4240      	negs	r0, r0
 800b5b4:	f1b8 0f00 	cmp.w	r8, #0
 800b5b8:	d099      	beq.n	800b4ee <_strtol_l.isra.0+0x1a>
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	d1f6      	bne.n	800b5ac <_strtol_l.isra.0+0xd8>
 800b5be:	f8c8 1000 	str.w	r1, [r8]
 800b5c2:	e794      	b.n	800b4ee <_strtol_l.isra.0+0x1a>
 800b5c4:	0800cee1 	.word	0x0800cee1

0800b5c8 <_strtol_r>:
 800b5c8:	f7ff bf84 	b.w	800b4d4 <_strtol_l.isra.0>

0800b5cc <__ssputs_r>:
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	461f      	mov	r7, r3
 800b5d2:	688e      	ldr	r6, [r1, #8]
 800b5d4:	4682      	mov	sl, r0
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	42be      	cmp	r6, r7
 800b5da:	4690      	mov	r8, r2
 800b5dc:	680b      	ldr	r3, [r1, #0]
 800b5de:	d82d      	bhi.n	800b63c <__ssputs_r+0x70>
 800b5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5e8:	d026      	beq.n	800b638 <__ssputs_r+0x6c>
 800b5ea:	6965      	ldr	r5, [r4, #20]
 800b5ec:	6909      	ldr	r1, [r1, #16]
 800b5ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5f2:	eba3 0901 	sub.w	r9, r3, r1
 800b5f6:	1c7b      	adds	r3, r7, #1
 800b5f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5fc:	444b      	add	r3, r9
 800b5fe:	106d      	asrs	r5, r5, #1
 800b600:	429d      	cmp	r5, r3
 800b602:	bf38      	it	cc
 800b604:	461d      	movcc	r5, r3
 800b606:	0553      	lsls	r3, r2, #21
 800b608:	d527      	bpl.n	800b65a <__ssputs_r+0x8e>
 800b60a:	4629      	mov	r1, r5
 800b60c:	f7fc fd2e 	bl	800806c <_malloc_r>
 800b610:	4606      	mov	r6, r0
 800b612:	b360      	cbz	r0, 800b66e <__ssputs_r+0xa2>
 800b614:	464a      	mov	r2, r9
 800b616:	6921      	ldr	r1, [r4, #16]
 800b618:	f7fd fddf 	bl	80091da <memcpy>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	6126      	str	r6, [r4, #16]
 800b62a:	444e      	add	r6, r9
 800b62c:	6165      	str	r5, [r4, #20]
 800b62e:	eba5 0509 	sub.w	r5, r5, r9
 800b632:	6026      	str	r6, [r4, #0]
 800b634:	463e      	mov	r6, r7
 800b636:	60a5      	str	r5, [r4, #8]
 800b638:	42be      	cmp	r6, r7
 800b63a:	d900      	bls.n	800b63e <__ssputs_r+0x72>
 800b63c:	463e      	mov	r6, r7
 800b63e:	4632      	mov	r2, r6
 800b640:	4641      	mov	r1, r8
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	f000 f9c6 	bl	800b9d4 <memmove>
 800b648:	68a3      	ldr	r3, [r4, #8]
 800b64a:	2000      	movs	r0, #0
 800b64c:	1b9b      	subs	r3, r3, r6
 800b64e:	60a3      	str	r3, [r4, #8]
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	4433      	add	r3, r6
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65a:	462a      	mov	r2, r5
 800b65c:	f000 fd69 	bl	800c132 <_realloc_r>
 800b660:	4606      	mov	r6, r0
 800b662:	2800      	cmp	r0, #0
 800b664:	d1e0      	bne.n	800b628 <__ssputs_r+0x5c>
 800b666:	6921      	ldr	r1, [r4, #16]
 800b668:	4650      	mov	r0, sl
 800b66a:	f7fe fc2b 	bl	8009ec4 <_free_r>
 800b66e:	230c      	movs	r3, #12
 800b670:	f04f 30ff 	mov.w	r0, #4294967295
 800b674:	f8ca 3000 	str.w	r3, [sl]
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	e7e9      	b.n	800b656 <__ssputs_r+0x8a>
	...

0800b684 <_svfiprintf_r>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	4698      	mov	r8, r3
 800b68a:	898b      	ldrh	r3, [r1, #12]
 800b68c:	b09d      	sub	sp, #116	@ 0x74
 800b68e:	4607      	mov	r7, r0
 800b690:	061b      	lsls	r3, r3, #24
 800b692:	460d      	mov	r5, r1
 800b694:	4614      	mov	r4, r2
 800b696:	d510      	bpl.n	800b6ba <_svfiprintf_r+0x36>
 800b698:	690b      	ldr	r3, [r1, #16]
 800b69a:	b973      	cbnz	r3, 800b6ba <_svfiprintf_r+0x36>
 800b69c:	2140      	movs	r1, #64	@ 0x40
 800b69e:	f7fc fce5 	bl	800806c <_malloc_r>
 800b6a2:	6028      	str	r0, [r5, #0]
 800b6a4:	6128      	str	r0, [r5, #16]
 800b6a6:	b930      	cbnz	r0, 800b6b6 <_svfiprintf_r+0x32>
 800b6a8:	230c      	movs	r3, #12
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	b01d      	add	sp, #116	@ 0x74
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	2340      	movs	r3, #64	@ 0x40
 800b6b8:	616b      	str	r3, [r5, #20]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c0:	f04f 0901 	mov.w	r9, #1
 800b6c4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b868 <_svfiprintf_r+0x1e4>
 800b6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ca:	2320      	movs	r3, #32
 800b6cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6d0:	2330      	movs	r3, #48	@ 0x30
 800b6d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6de:	b10a      	cbz	r2, 800b6e4 <_svfiprintf_r+0x60>
 800b6e0:	2a25      	cmp	r2, #37	@ 0x25
 800b6e2:	d1f9      	bne.n	800b6d8 <_svfiprintf_r+0x54>
 800b6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e8:	d00b      	beq.n	800b702 <_svfiprintf_r+0x7e>
 800b6ea:	465b      	mov	r3, fp
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	f7ff ff6b 	bl	800b5cc <__ssputs_r>
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f000 80a7 	beq.w	800b84a <_svfiprintf_r+0x1c6>
 800b6fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6fe:	445a      	add	r2, fp
 800b700:	9209      	str	r2, [sp, #36]	@ 0x24
 800b702:	f89a 3000 	ldrb.w	r3, [sl]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 809f 	beq.w	800b84a <_svfiprintf_r+0x1c6>
 800b70c:	2300      	movs	r3, #0
 800b70e:	f04f 32ff 	mov.w	r2, #4294967295
 800b712:	f10a 0a01 	add.w	sl, sl, #1
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	9307      	str	r3, [sp, #28]
 800b71a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b71e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b724:	4654      	mov	r4, sl
 800b726:	2205      	movs	r2, #5
 800b728:	484f      	ldr	r0, [pc, #316]	@ (800b868 <_svfiprintf_r+0x1e4>)
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	f7fd fd46 	bl	80091be <memchr>
 800b732:	9a04      	ldr	r2, [sp, #16]
 800b734:	b9d8      	cbnz	r0, 800b76e <_svfiprintf_r+0xea>
 800b736:	06d0      	lsls	r0, r2, #27
 800b738:	bf44      	itt	mi
 800b73a:	2320      	movmi	r3, #32
 800b73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b740:	0711      	lsls	r1, r2, #28
 800b742:	bf44      	itt	mi
 800b744:	232b      	movmi	r3, #43	@ 0x2b
 800b746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b74a:	f89a 3000 	ldrb.w	r3, [sl]
 800b74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b750:	d015      	beq.n	800b77e <_svfiprintf_r+0xfa>
 800b752:	9a07      	ldr	r2, [sp, #28]
 800b754:	4654      	mov	r4, sl
 800b756:	2000      	movs	r0, #0
 800b758:	f04f 0c0a 	mov.w	ip, #10
 800b75c:	4621      	mov	r1, r4
 800b75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b762:	3b30      	subs	r3, #48	@ 0x30
 800b764:	2b09      	cmp	r3, #9
 800b766:	d94b      	bls.n	800b800 <_svfiprintf_r+0x17c>
 800b768:	b1b0      	cbz	r0, 800b798 <_svfiprintf_r+0x114>
 800b76a:	9207      	str	r2, [sp, #28]
 800b76c:	e014      	b.n	800b798 <_svfiprintf_r+0x114>
 800b76e:	eba0 0308 	sub.w	r3, r0, r8
 800b772:	46a2      	mov	sl, r4
 800b774:	fa09 f303 	lsl.w	r3, r9, r3
 800b778:	4313      	orrs	r3, r2
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	e7d2      	b.n	800b724 <_svfiprintf_r+0xa0>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	1d19      	adds	r1, r3, #4
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	bfbb      	ittet	lt
 800b78a:	425b      	neglt	r3, r3
 800b78c:	f042 0202 	orrlt.w	r2, r2, #2
 800b790:	9307      	strge	r3, [sp, #28]
 800b792:	9307      	strlt	r3, [sp, #28]
 800b794:	bfb8      	it	lt
 800b796:	9204      	strlt	r2, [sp, #16]
 800b798:	7823      	ldrb	r3, [r4, #0]
 800b79a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b79c:	d10a      	bne.n	800b7b4 <_svfiprintf_r+0x130>
 800b79e:	7863      	ldrb	r3, [r4, #1]
 800b7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7a2:	d132      	bne.n	800b80a <_svfiprintf_r+0x186>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	3402      	adds	r4, #2
 800b7a8:	1d1a      	adds	r2, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7b0:	9203      	str	r2, [sp, #12]
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b878 <_svfiprintf_r+0x1f4>
 800b7b8:	2203      	movs	r2, #3
 800b7ba:	7821      	ldrb	r1, [r4, #0]
 800b7bc:	4650      	mov	r0, sl
 800b7be:	f7fd fcfe 	bl	80091be <memchr>
 800b7c2:	b138      	cbz	r0, 800b7d4 <_svfiprintf_r+0x150>
 800b7c4:	eba0 000a 	sub.w	r0, r0, sl
 800b7c8:	2240      	movs	r2, #64	@ 0x40
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	3401      	adds	r4, #1
 800b7ce:	4082      	lsls	r2, r0
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d8:	2206      	movs	r2, #6
 800b7da:	4824      	ldr	r0, [pc, #144]	@ (800b86c <_svfiprintf_r+0x1e8>)
 800b7dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7e0:	f7fd fced 	bl	80091be <memchr>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d036      	beq.n	800b856 <_svfiprintf_r+0x1d2>
 800b7e8:	4b21      	ldr	r3, [pc, #132]	@ (800b870 <_svfiprintf_r+0x1ec>)
 800b7ea:	bb1b      	cbnz	r3, 800b834 <_svfiprintf_r+0x1b0>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	3307      	adds	r3, #7
 800b7f0:	f023 0307 	bic.w	r3, r3, #7
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	9303      	str	r3, [sp, #12]
 800b7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7fa:	4433      	add	r3, r6
 800b7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7fe:	e76a      	b.n	800b6d6 <_svfiprintf_r+0x52>
 800b800:	fb0c 3202 	mla	r2, ip, r2, r3
 800b804:	460c      	mov	r4, r1
 800b806:	2001      	movs	r0, #1
 800b808:	e7a8      	b.n	800b75c <_svfiprintf_r+0xd8>
 800b80a:	2300      	movs	r3, #0
 800b80c:	3401      	adds	r4, #1
 800b80e:	f04f 0c0a 	mov.w	ip, #10
 800b812:	4619      	mov	r1, r3
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	4620      	mov	r0, r4
 800b818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81c:	3a30      	subs	r2, #48	@ 0x30
 800b81e:	2a09      	cmp	r2, #9
 800b820:	d903      	bls.n	800b82a <_svfiprintf_r+0x1a6>
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0c6      	beq.n	800b7b4 <_svfiprintf_r+0x130>
 800b826:	9105      	str	r1, [sp, #20]
 800b828:	e7c4      	b.n	800b7b4 <_svfiprintf_r+0x130>
 800b82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b82e:	4604      	mov	r4, r0
 800b830:	2301      	movs	r3, #1
 800b832:	e7f0      	b.n	800b816 <_svfiprintf_r+0x192>
 800b834:	ab03      	add	r3, sp, #12
 800b836:	462a      	mov	r2, r5
 800b838:	a904      	add	r1, sp, #16
 800b83a:	4638      	mov	r0, r7
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	4b0d      	ldr	r3, [pc, #52]	@ (800b874 <_svfiprintf_r+0x1f0>)
 800b840:	f7fc fd3e 	bl	80082c0 <_printf_float>
 800b844:	1c42      	adds	r2, r0, #1
 800b846:	4606      	mov	r6, r0
 800b848:	d1d6      	bne.n	800b7f8 <_svfiprintf_r+0x174>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	065b      	lsls	r3, r3, #25
 800b84e:	f53f af2d 	bmi.w	800b6ac <_svfiprintf_r+0x28>
 800b852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b854:	e72c      	b.n	800b6b0 <_svfiprintf_r+0x2c>
 800b856:	ab03      	add	r3, sp, #12
 800b858:	462a      	mov	r2, r5
 800b85a:	a904      	add	r1, sp, #16
 800b85c:	4638      	mov	r0, r7
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	4b04      	ldr	r3, [pc, #16]	@ (800b874 <_svfiprintf_r+0x1f0>)
 800b862:	f7fc ffc9 	bl	80087f8 <_printf_i>
 800b866:	e7ed      	b.n	800b844 <_svfiprintf_r+0x1c0>
 800b868:	0800ccdd 	.word	0x0800ccdd
 800b86c:	0800cce7 	.word	0x0800cce7
 800b870:	080082c1 	.word	0x080082c1
 800b874:	0800b5cd 	.word	0x0800b5cd
 800b878:	0800cce3 	.word	0x0800cce3

0800b87c <__sflush_r>:
 800b87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	0716      	lsls	r6, r2, #28
 800b886:	4605      	mov	r5, r0
 800b888:	460c      	mov	r4, r1
 800b88a:	d454      	bmi.n	800b936 <__sflush_r+0xba>
 800b88c:	684b      	ldr	r3, [r1, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	dc02      	bgt.n	800b898 <__sflush_r+0x1c>
 800b892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	dd48      	ble.n	800b92a <__sflush_r+0xae>
 800b898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	d045      	beq.n	800b92a <__sflush_r+0xae>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8a4:	682f      	ldr	r7, [r5, #0]
 800b8a6:	6a21      	ldr	r1, [r4, #32]
 800b8a8:	602b      	str	r3, [r5, #0]
 800b8aa:	d030      	beq.n	800b90e <__sflush_r+0x92>
 800b8ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	0759      	lsls	r1, r3, #29
 800b8b2:	d505      	bpl.n	800b8c0 <__sflush_r+0x44>
 800b8b4:	6863      	ldr	r3, [r4, #4]
 800b8b6:	1ad2      	subs	r2, r2, r3
 800b8b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8ba:	b10b      	cbz	r3, 800b8c0 <__sflush_r+0x44>
 800b8bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8c4:	6a21      	ldr	r1, [r4, #32]
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	47b0      	blx	r6
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	d106      	bne.n	800b8de <__sflush_r+0x62>
 800b8d0:	6829      	ldr	r1, [r5, #0]
 800b8d2:	291d      	cmp	r1, #29
 800b8d4:	d82b      	bhi.n	800b92e <__sflush_r+0xb2>
 800b8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b980 <__sflush_r+0x104>)
 800b8d8:	40ca      	lsrs	r2, r1
 800b8da:	07d6      	lsls	r6, r2, #31
 800b8dc:	d527      	bpl.n	800b92e <__sflush_r+0xb2>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	04d9      	lsls	r1, r3, #19
 800b8e2:	6062      	str	r2, [r4, #4]
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	6022      	str	r2, [r4, #0]
 800b8e8:	d504      	bpl.n	800b8f4 <__sflush_r+0x78>
 800b8ea:	1c42      	adds	r2, r0, #1
 800b8ec:	d101      	bne.n	800b8f2 <__sflush_r+0x76>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b903      	cbnz	r3, 800b8f4 <__sflush_r+0x78>
 800b8f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8f6:	602f      	str	r7, [r5, #0]
 800b8f8:	b1b9      	cbz	r1, 800b92a <__sflush_r+0xae>
 800b8fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8fe:	4299      	cmp	r1, r3
 800b900:	d002      	beq.n	800b908 <__sflush_r+0x8c>
 800b902:	4628      	mov	r0, r5
 800b904:	f7fe fade 	bl	8009ec4 <_free_r>
 800b908:	2300      	movs	r3, #0
 800b90a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b90c:	e00d      	b.n	800b92a <__sflush_r+0xae>
 800b90e:	2301      	movs	r3, #1
 800b910:	4628      	mov	r0, r5
 800b912:	47b0      	blx	r6
 800b914:	4602      	mov	r2, r0
 800b916:	1c50      	adds	r0, r2, #1
 800b918:	d1c9      	bne.n	800b8ae <__sflush_r+0x32>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0c6      	beq.n	800b8ae <__sflush_r+0x32>
 800b920:	2b1d      	cmp	r3, #29
 800b922:	d001      	beq.n	800b928 <__sflush_r+0xac>
 800b924:	2b16      	cmp	r3, #22
 800b926:	d11d      	bne.n	800b964 <__sflush_r+0xe8>
 800b928:	602f      	str	r7, [r5, #0]
 800b92a:	2000      	movs	r0, #0
 800b92c:	e021      	b.n	800b972 <__sflush_r+0xf6>
 800b92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b932:	b21b      	sxth	r3, r3
 800b934:	e01a      	b.n	800b96c <__sflush_r+0xf0>
 800b936:	690f      	ldr	r7, [r1, #16]
 800b938:	2f00      	cmp	r7, #0
 800b93a:	d0f6      	beq.n	800b92a <__sflush_r+0xae>
 800b93c:	0793      	lsls	r3, r2, #30
 800b93e:	680e      	ldr	r6, [r1, #0]
 800b940:	600f      	str	r7, [r1, #0]
 800b942:	bf0c      	ite	eq
 800b944:	694b      	ldreq	r3, [r1, #20]
 800b946:	2300      	movne	r3, #0
 800b948:	eba6 0807 	sub.w	r8, r6, r7
 800b94c:	608b      	str	r3, [r1, #8]
 800b94e:	f1b8 0f00 	cmp.w	r8, #0
 800b952:	ddea      	ble.n	800b92a <__sflush_r+0xae>
 800b954:	4643      	mov	r3, r8
 800b956:	463a      	mov	r2, r7
 800b958:	6a21      	ldr	r1, [r4, #32]
 800b95a:	4628      	mov	r0, r5
 800b95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b95e:	47b0      	blx	r6
 800b960:	2800      	cmp	r0, #0
 800b962:	dc08      	bgt.n	800b976 <__sflush_r+0xfa>
 800b964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	81a3      	strh	r3, [r4, #12]
 800b972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b976:	4407      	add	r7, r0
 800b978:	eba8 0800 	sub.w	r8, r8, r0
 800b97c:	e7e7      	b.n	800b94e <__sflush_r+0xd2>
 800b97e:	bf00      	nop
 800b980:	20400001 	.word	0x20400001

0800b984 <_fflush_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b913      	cbnz	r3, 800b994 <_fflush_r+0x10>
 800b98e:	2500      	movs	r5, #0
 800b990:	4628      	mov	r0, r5
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	b118      	cbz	r0, 800b99e <_fflush_r+0x1a>
 800b996:	6a03      	ldr	r3, [r0, #32]
 800b998:	b90b      	cbnz	r3, 800b99e <_fflush_r+0x1a>
 800b99a:	f7fd fae5 	bl	8008f68 <__sinit>
 800b99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0f3      	beq.n	800b98e <_fflush_r+0xa>
 800b9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9a8:	07d0      	lsls	r0, r2, #31
 800b9aa:	d404      	bmi.n	800b9b6 <_fflush_r+0x32>
 800b9ac:	0599      	lsls	r1, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_fflush_r+0x32>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b2:	f7fd fc02 	bl	80091ba <__retarget_lock_acquire_recursive>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	f7ff ff5f 	bl	800b87c <__sflush_r>
 800b9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	07da      	lsls	r2, r3, #31
 800b9c4:	d4e4      	bmi.n	800b990 <_fflush_r+0xc>
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	059b      	lsls	r3, r3, #22
 800b9ca:	d4e1      	bmi.n	800b990 <_fflush_r+0xc>
 800b9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ce:	f7fd fbf5 	bl	80091bc <__retarget_lock_release_recursive>
 800b9d2:	e7dd      	b.n	800b990 <_fflush_r+0xc>

0800b9d4 <memmove>:
 800b9d4:	4288      	cmp	r0, r1
 800b9d6:	b510      	push	{r4, lr}
 800b9d8:	eb01 0402 	add.w	r4, r1, r2
 800b9dc:	d902      	bls.n	800b9e4 <memmove+0x10>
 800b9de:	4284      	cmp	r4, r0
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	d807      	bhi.n	800b9f4 <memmove+0x20>
 800b9e4:	1e43      	subs	r3, r0, #1
 800b9e6:	42a1      	cmp	r1, r4
 800b9e8:	d008      	beq.n	800b9fc <memmove+0x28>
 800b9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9f2:	e7f8      	b.n	800b9e6 <memmove+0x12>
 800b9f4:	4402      	add	r2, r0
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	428a      	cmp	r2, r1
 800b9fa:	d100      	bne.n	800b9fe <memmove+0x2a>
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba06:	e7f7      	b.n	800b9f8 <memmove+0x24>

0800ba08 <strncmp>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	b16a      	cbz	r2, 800ba28 <strncmp+0x20>
 800ba0c:	3901      	subs	r1, #1
 800ba0e:	1884      	adds	r4, r0, r2
 800ba10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d103      	bne.n	800ba24 <strncmp+0x1c>
 800ba1c:	42a0      	cmp	r0, r4
 800ba1e:	d001      	beq.n	800ba24 <strncmp+0x1c>
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	d1f5      	bne.n	800ba10 <strncmp+0x8>
 800ba24:	1ad0      	subs	r0, r2, r3
 800ba26:	bd10      	pop	{r4, pc}
 800ba28:	4610      	mov	r0, r2
 800ba2a:	e7fc      	b.n	800ba26 <strncmp+0x1e>
 800ba2c:	0000      	movs	r0, r0
	...

0800ba30 <nan>:
 800ba30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba38 <nan+0x8>
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	00000000 	.word	0x00000000
 800ba3c:	7ff80000 	.word	0x7ff80000

0800ba40 <__assert_func>:
 800ba40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba42:	4614      	mov	r4, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b09      	ldr	r3, [pc, #36]	@ (800ba6c <__assert_func+0x2c>)
 800ba48:	4605      	mov	r5, r0
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68d8      	ldr	r0, [r3, #12]
 800ba4e:	b14c      	cbz	r4, 800ba64 <__assert_func+0x24>
 800ba50:	4b07      	ldr	r3, [pc, #28]	@ (800ba70 <__assert_func+0x30>)
 800ba52:	9100      	str	r1, [sp, #0]
 800ba54:	4907      	ldr	r1, [pc, #28]	@ (800ba74 <__assert_func+0x34>)
 800ba56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba5a:	462b      	mov	r3, r5
 800ba5c:	f000 fba4 	bl	800c1a8 <fiprintf>
 800ba60:	f000 fbb4 	bl	800c1cc <abort>
 800ba64:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <__assert_func+0x38>)
 800ba66:	461c      	mov	r4, r3
 800ba68:	e7f3      	b.n	800ba52 <__assert_func+0x12>
 800ba6a:	bf00      	nop
 800ba6c:	20000058 	.word	0x20000058
 800ba70:	0800ccf6 	.word	0x0800ccf6
 800ba74:	0800cd03 	.word	0x0800cd03
 800ba78:	0800cd31 	.word	0x0800cd31

0800ba7c <_calloc_r>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	fba1 5402 	umull	r5, r4, r1, r2
 800ba82:	b934      	cbnz	r4, 800ba92 <_calloc_r+0x16>
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7fc faf1 	bl	800806c <_malloc_r>
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <_calloc_r+0x1e>
 800ba8e:	4630      	mov	r0, r6
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
 800ba92:	220c      	movs	r2, #12
 800ba94:	2600      	movs	r6, #0
 800ba96:	6002      	str	r2, [r0, #0]
 800ba98:	e7f9      	b.n	800ba8e <_calloc_r+0x12>
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	f7fd fafe 	bl	800909e <memset>
 800baa2:	e7f4      	b.n	800ba8e <_calloc_r+0x12>

0800baa4 <rshift>:
 800baa4:	6903      	ldr	r3, [r0, #16]
 800baa6:	114a      	asrs	r2, r1, #5
 800baa8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800baac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bab0:	f100 0414 	add.w	r4, r0, #20
 800bab4:	dd45      	ble.n	800bb42 <rshift+0x9e>
 800bab6:	f011 011f 	ands.w	r1, r1, #31
 800baba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800babe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bac2:	d10c      	bne.n	800bade <rshift+0x3a>
 800bac4:	f100 0710 	add.w	r7, r0, #16
 800bac8:	4629      	mov	r1, r5
 800baca:	42b1      	cmp	r1, r6
 800bacc:	d334      	bcc.n	800bb38 <rshift+0x94>
 800bace:	1a9b      	subs	r3, r3, r2
 800bad0:	1eea      	subs	r2, r5, #3
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4296      	cmp	r6, r2
 800bad6:	bf38      	it	cc
 800bad8:	2300      	movcc	r3, #0
 800bada:	4423      	add	r3, r4
 800badc:	e015      	b.n	800bb0a <rshift+0x66>
 800bade:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bae2:	f1c1 0820 	rsb	r8, r1, #32
 800bae6:	f105 0e04 	add.w	lr, r5, #4
 800baea:	46a1      	mov	r9, r4
 800baec:	40cf      	lsrs	r7, r1
 800baee:	4576      	cmp	r6, lr
 800baf0:	46f4      	mov	ip, lr
 800baf2:	d815      	bhi.n	800bb20 <rshift+0x7c>
 800baf4:	1a9a      	subs	r2, r3, r2
 800baf6:	3501      	adds	r5, #1
 800baf8:	0092      	lsls	r2, r2, #2
 800bafa:	3a04      	subs	r2, #4
 800bafc:	42ae      	cmp	r6, r5
 800bafe:	bf38      	it	cc
 800bb00:	2200      	movcc	r2, #0
 800bb02:	18a3      	adds	r3, r4, r2
 800bb04:	50a7      	str	r7, [r4, r2]
 800bb06:	b107      	cbz	r7, 800bb0a <rshift+0x66>
 800bb08:	3304      	adds	r3, #4
 800bb0a:	1b1a      	subs	r2, r3, r4
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb12:	bf08      	it	eq
 800bb14:	2300      	moveq	r3, #0
 800bb16:	6102      	str	r2, [r0, #16]
 800bb18:	bf08      	it	eq
 800bb1a:	6143      	streq	r3, [r0, #20]
 800bb1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb20:	f8dc c000 	ldr.w	ip, [ip]
 800bb24:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb28:	ea4c 0707 	orr.w	r7, ip, r7
 800bb2c:	f849 7b04 	str.w	r7, [r9], #4
 800bb30:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb34:	40cf      	lsrs	r7, r1
 800bb36:	e7da      	b.n	800baee <rshift+0x4a>
 800bb38:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb3c:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb40:	e7c3      	b.n	800baca <rshift+0x26>
 800bb42:	4623      	mov	r3, r4
 800bb44:	e7e1      	b.n	800bb0a <rshift+0x66>

0800bb46 <__hexdig_fun>:
 800bb46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb4a:	2b09      	cmp	r3, #9
 800bb4c:	d802      	bhi.n	800bb54 <__hexdig_fun+0xe>
 800bb4e:	3820      	subs	r0, #32
 800bb50:	b2c0      	uxtb	r0, r0
 800bb52:	4770      	bx	lr
 800bb54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb58:	2b05      	cmp	r3, #5
 800bb5a:	d801      	bhi.n	800bb60 <__hexdig_fun+0x1a>
 800bb5c:	3847      	subs	r0, #71	@ 0x47
 800bb5e:	e7f7      	b.n	800bb50 <__hexdig_fun+0xa>
 800bb60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb64:	2b05      	cmp	r3, #5
 800bb66:	d801      	bhi.n	800bb6c <__hexdig_fun+0x26>
 800bb68:	3827      	subs	r0, #39	@ 0x27
 800bb6a:	e7f1      	b.n	800bb50 <__hexdig_fun+0xa>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4770      	bx	lr

0800bb70 <__gethex>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	b085      	sub	sp, #20
 800bb76:	468a      	mov	sl, r1
 800bb78:	4690      	mov	r8, r2
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	680b      	ldr	r3, [r1, #0]
 800bb7e:	9001      	str	r0, [sp, #4]
 800bb80:	1c9c      	adds	r4, r3, #2
 800bb82:	46a1      	mov	r9, r4
 800bb84:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb88:	2830      	cmp	r0, #48	@ 0x30
 800bb8a:	d0fa      	beq.n	800bb82 <__gethex+0x12>
 800bb8c:	eba9 0303 	sub.w	r3, r9, r3
 800bb90:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb94:	f7ff ffd7 	bl	800bb46 <__hexdig_fun>
 800bb98:	4605      	mov	r5, r0
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d166      	bne.n	800bc6c <__gethex+0xfc>
 800bb9e:	2201      	movs	r2, #1
 800bba0:	499e      	ldr	r1, [pc, #632]	@ (800be1c <__gethex+0x2ac>)
 800bba2:	4648      	mov	r0, r9
 800bba4:	f7ff ff30 	bl	800ba08 <strncmp>
 800bba8:	4607      	mov	r7, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d165      	bne.n	800bc7a <__gethex+0x10a>
 800bbae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bbb2:	4626      	mov	r6, r4
 800bbb4:	f7ff ffc7 	bl	800bb46 <__hexdig_fun>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d060      	beq.n	800bc7e <__gethex+0x10e>
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	7818      	ldrb	r0, [r3, #0]
 800bbc0:	4699      	mov	r9, r3
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	2830      	cmp	r0, #48	@ 0x30
 800bbc6:	d0fa      	beq.n	800bbbe <__gethex+0x4e>
 800bbc8:	f7ff ffbd 	bl	800bb46 <__hexdig_fun>
 800bbcc:	fab0 f580 	clz	r5, r0
 800bbd0:	f04f 0b01 	mov.w	fp, #1
 800bbd4:	096d      	lsrs	r5, r5, #5
 800bbd6:	464a      	mov	r2, r9
 800bbd8:	4616      	mov	r6, r2
 800bbda:	3201      	adds	r2, #1
 800bbdc:	7830      	ldrb	r0, [r6, #0]
 800bbde:	f7ff ffb2 	bl	800bb46 <__hexdig_fun>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1f8      	bne.n	800bbd8 <__gethex+0x68>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	498c      	ldr	r1, [pc, #560]	@ (800be1c <__gethex+0x2ac>)
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff0c 	bl	800ba08 <strncmp>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d13e      	bne.n	800bc72 <__gethex+0x102>
 800bbf4:	b944      	cbnz	r4, 800bc08 <__gethex+0x98>
 800bbf6:	1c74      	adds	r4, r6, #1
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4616      	mov	r6, r2
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	7830      	ldrb	r0, [r6, #0]
 800bc00:	f7ff ffa1 	bl	800bb46 <__hexdig_fun>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d1f8      	bne.n	800bbfa <__gethex+0x8a>
 800bc08:	1ba4      	subs	r4, r4, r6
 800bc0a:	00a7      	lsls	r7, r4, #2
 800bc0c:	7833      	ldrb	r3, [r6, #0]
 800bc0e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bc12:	2b50      	cmp	r3, #80	@ 0x50
 800bc14:	d13d      	bne.n	800bc92 <__gethex+0x122>
 800bc16:	7873      	ldrb	r3, [r6, #1]
 800bc18:	2b2b      	cmp	r3, #43	@ 0x2b
 800bc1a:	d032      	beq.n	800bc82 <__gethex+0x112>
 800bc1c:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc1e:	d033      	beq.n	800bc88 <__gethex+0x118>
 800bc20:	1c71      	adds	r1, r6, #1
 800bc22:	2400      	movs	r4, #0
 800bc24:	7808      	ldrb	r0, [r1, #0]
 800bc26:	f7ff ff8e 	bl	800bb46 <__hexdig_fun>
 800bc2a:	1e43      	subs	r3, r0, #1
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b18      	cmp	r3, #24
 800bc30:	d82f      	bhi.n	800bc92 <__gethex+0x122>
 800bc32:	f1a0 0210 	sub.w	r2, r0, #16
 800bc36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc3a:	f7ff ff84 	bl	800bb46 <__hexdig_fun>
 800bc3e:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc42:	230a      	movs	r3, #10
 800bc44:	fa5f fc8c 	uxtb.w	ip, ip
 800bc48:	f1bc 0f18 	cmp.w	ip, #24
 800bc4c:	d91e      	bls.n	800bc8c <__gethex+0x11c>
 800bc4e:	b104      	cbz	r4, 800bc52 <__gethex+0xe2>
 800bc50:	4252      	negs	r2, r2
 800bc52:	4417      	add	r7, r2
 800bc54:	f8ca 1000 	str.w	r1, [sl]
 800bc58:	b1ed      	cbz	r5, 800bc96 <__gethex+0x126>
 800bc5a:	f1bb 0f00 	cmp.w	fp, #0
 800bc5e:	bf0c      	ite	eq
 800bc60:	2506      	moveq	r5, #6
 800bc62:	2500      	movne	r5, #0
 800bc64:	4628      	mov	r0, r5
 800bc66:	b005      	add	sp, #20
 800bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	462c      	mov	r4, r5
 800bc70:	e7b1      	b.n	800bbd6 <__gethex+0x66>
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d1c8      	bne.n	800bc08 <__gethex+0x98>
 800bc76:	4627      	mov	r7, r4
 800bc78:	e7c8      	b.n	800bc0c <__gethex+0x9c>
 800bc7a:	464e      	mov	r6, r9
 800bc7c:	462f      	mov	r7, r5
 800bc7e:	2501      	movs	r5, #1
 800bc80:	e7c4      	b.n	800bc0c <__gethex+0x9c>
 800bc82:	2400      	movs	r4, #0
 800bc84:	1cb1      	adds	r1, r6, #2
 800bc86:	e7cd      	b.n	800bc24 <__gethex+0xb4>
 800bc88:	2401      	movs	r4, #1
 800bc8a:	e7fb      	b.n	800bc84 <__gethex+0x114>
 800bc8c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc90:	e7cf      	b.n	800bc32 <__gethex+0xc2>
 800bc92:	4631      	mov	r1, r6
 800bc94:	e7de      	b.n	800bc54 <__gethex+0xe4>
 800bc96:	eba6 0309 	sub.w	r3, r6, r9
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	2b07      	cmp	r3, #7
 800bca0:	dc0a      	bgt.n	800bcb8 <__gethex+0x148>
 800bca2:	9801      	ldr	r0, [sp, #4]
 800bca4:	f7fe f958 	bl	8009f58 <_Balloc>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	b940      	cbnz	r0, 800bcbe <__gethex+0x14e>
 800bcac:	4b5c      	ldr	r3, [pc, #368]	@ (800be20 <__gethex+0x2b0>)
 800bcae:	4602      	mov	r2, r0
 800bcb0:	21e4      	movs	r1, #228	@ 0xe4
 800bcb2:	485c      	ldr	r0, [pc, #368]	@ (800be24 <__gethex+0x2b4>)
 800bcb4:	f7ff fec4 	bl	800ba40 <__assert_func>
 800bcb8:	3101      	adds	r1, #1
 800bcba:	105b      	asrs	r3, r3, #1
 800bcbc:	e7ef      	b.n	800bc9e <__gethex+0x12e>
 800bcbe:	f100 0a14 	add.w	sl, r0, #20
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4655      	mov	r5, sl
 800bcc6:	469b      	mov	fp, r3
 800bcc8:	45b1      	cmp	r9, r6
 800bcca:	d337      	bcc.n	800bd3c <__gethex+0x1cc>
 800bccc:	f845 bb04 	str.w	fp, [r5], #4
 800bcd0:	eba5 050a 	sub.w	r5, r5, sl
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	10ad      	asrs	r5, r5, #2
 800bcd8:	6125      	str	r5, [r4, #16]
 800bcda:	016d      	lsls	r5, r5, #5
 800bcdc:	f7fe fa30 	bl	800a140 <__hi0bits>
 800bce0:	f8d8 6000 	ldr.w	r6, [r8]
 800bce4:	1a2d      	subs	r5, r5, r0
 800bce6:	42b5      	cmp	r5, r6
 800bce8:	dd54      	ble.n	800bd94 <__gethex+0x224>
 800bcea:	1bad      	subs	r5, r5, r6
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7fe fdc7 	bl	800a882 <__any_on>
 800bcf4:	4681      	mov	r9, r0
 800bcf6:	b178      	cbz	r0, 800bd18 <__gethex+0x1a8>
 800bcf8:	1e6b      	subs	r3, r5, #1
 800bcfa:	f04f 0901 	mov.w	r9, #1
 800bcfe:	1159      	asrs	r1, r3, #5
 800bd00:	f003 021f 	and.w	r2, r3, #31
 800bd04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd08:	fa09 f202 	lsl.w	r2, r9, r2
 800bd0c:	420a      	tst	r2, r1
 800bd0e:	d003      	beq.n	800bd18 <__gethex+0x1a8>
 800bd10:	454b      	cmp	r3, r9
 800bd12:	dc36      	bgt.n	800bd82 <__gethex+0x212>
 800bd14:	f04f 0902 	mov.w	r9, #2
 800bd18:	442f      	add	r7, r5
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7ff fec1 	bl	800baa4 <rshift>
 800bd22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd26:	42bb      	cmp	r3, r7
 800bd28:	da42      	bge.n	800bdb0 <__gethex+0x240>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	9801      	ldr	r0, [sp, #4]
 800bd2e:	f7fe f953 	bl	8009fd8 <_Bfree>
 800bd32:	2300      	movs	r3, #0
 800bd34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd36:	25a3      	movs	r5, #163	@ 0xa3
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	e793      	b.n	800bc64 <__gethex+0xf4>
 800bd3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd40:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd42:	d012      	beq.n	800bd6a <__gethex+0x1fa>
 800bd44:	2b20      	cmp	r3, #32
 800bd46:	d104      	bne.n	800bd52 <__gethex+0x1e2>
 800bd48:	f845 bb04 	str.w	fp, [r5], #4
 800bd4c:	f04f 0b00 	mov.w	fp, #0
 800bd50:	465b      	mov	r3, fp
 800bd52:	7830      	ldrb	r0, [r6, #0]
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	f7ff fef6 	bl	800bb46 <__hexdig_fun>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	f000 000f 	and.w	r0, r0, #15
 800bd60:	4098      	lsls	r0, r3
 800bd62:	3304      	adds	r3, #4
 800bd64:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd68:	e7ae      	b.n	800bcc8 <__gethex+0x158>
 800bd6a:	45b1      	cmp	r9, r6
 800bd6c:	d8ea      	bhi.n	800bd44 <__gethex+0x1d4>
 800bd6e:	2201      	movs	r2, #1
 800bd70:	492a      	ldr	r1, [pc, #168]	@ (800be1c <__gethex+0x2ac>)
 800bd72:	4630      	mov	r0, r6
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	f7ff fe47 	bl	800ba08 <strncmp>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d1e1      	bne.n	800bd44 <__gethex+0x1d4>
 800bd80:	e7a2      	b.n	800bcc8 <__gethex+0x158>
 800bd82:	1ea9      	subs	r1, r5, #2
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7fe fd7c 	bl	800a882 <__any_on>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d0c2      	beq.n	800bd14 <__gethex+0x1a4>
 800bd8e:	f04f 0903 	mov.w	r9, #3
 800bd92:	e7c1      	b.n	800bd18 <__gethex+0x1a8>
 800bd94:	da09      	bge.n	800bdaa <__gethex+0x23a>
 800bd96:	1b75      	subs	r5, r6, r5
 800bd98:	4621      	mov	r1, r4
 800bd9a:	9801      	ldr	r0, [sp, #4]
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	1b7f      	subs	r7, r7, r5
 800bda0:	f7fe fb2e 	bl	800a400 <__lshift>
 800bda4:	4604      	mov	r4, r0
 800bda6:	f100 0a14 	add.w	sl, r0, #20
 800bdaa:	f04f 0900 	mov.w	r9, #0
 800bdae:	e7b8      	b.n	800bd22 <__gethex+0x1b2>
 800bdb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bdb4:	42bd      	cmp	r5, r7
 800bdb6:	dd6f      	ble.n	800be98 <__gethex+0x328>
 800bdb8:	1bed      	subs	r5, r5, r7
 800bdba:	42ae      	cmp	r6, r5
 800bdbc:	dc34      	bgt.n	800be28 <__gethex+0x2b8>
 800bdbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d022      	beq.n	800be0c <__gethex+0x29c>
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d024      	beq.n	800be14 <__gethex+0x2a4>
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d115      	bne.n	800bdfa <__gethex+0x28a>
 800bdce:	42ae      	cmp	r6, r5
 800bdd0:	d113      	bne.n	800bdfa <__gethex+0x28a>
 800bdd2:	2e01      	cmp	r6, #1
 800bdd4:	d10b      	bne.n	800bdee <__gethex+0x27e>
 800bdd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bdda:	2562      	movs	r5, #98	@ 0x62
 800bddc:	9a02      	ldr	r2, [sp, #8]
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	2301      	movs	r3, #1
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	f8ca 3000 	str.w	r3, [sl]
 800bde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdea:	601c      	str	r4, [r3, #0]
 800bdec:	e73a      	b.n	800bc64 <__gethex+0xf4>
 800bdee:	1e71      	subs	r1, r6, #1
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f7fe fd46 	bl	800a882 <__any_on>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d1ed      	bne.n	800bdd6 <__gethex+0x266>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	9801      	ldr	r0, [sp, #4]
 800bdfe:	f7fe f8eb 	bl	8009fd8 <_Bfree>
 800be02:	2300      	movs	r3, #0
 800be04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be06:	2550      	movs	r5, #80	@ 0x50
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e72b      	b.n	800bc64 <__gethex+0xf4>
 800be0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f3      	bne.n	800bdfa <__gethex+0x28a>
 800be12:	e7e0      	b.n	800bdd6 <__gethex+0x266>
 800be14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1dd      	bne.n	800bdd6 <__gethex+0x266>
 800be1a:	e7ee      	b.n	800bdfa <__gethex+0x28a>
 800be1c:	0800ccdb 	.word	0x0800ccdb
 800be20:	0800cc71 	.word	0x0800cc71
 800be24:	0800cd32 	.word	0x0800cd32
 800be28:	1e6f      	subs	r7, r5, #1
 800be2a:	f1b9 0f00 	cmp.w	r9, #0
 800be2e:	d130      	bne.n	800be92 <__gethex+0x322>
 800be30:	b127      	cbz	r7, 800be3c <__gethex+0x2cc>
 800be32:	4639      	mov	r1, r7
 800be34:	4620      	mov	r0, r4
 800be36:	f7fe fd24 	bl	800a882 <__any_on>
 800be3a:	4681      	mov	r9, r0
 800be3c:	117a      	asrs	r2, r7, #5
 800be3e:	2301      	movs	r3, #1
 800be40:	f007 071f 	and.w	r7, r7, #31
 800be44:	4629      	mov	r1, r5
 800be46:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be4a:	4620      	mov	r0, r4
 800be4c:	40bb      	lsls	r3, r7
 800be4e:	1b76      	subs	r6, r6, r5
 800be50:	2502      	movs	r5, #2
 800be52:	4213      	tst	r3, r2
 800be54:	bf18      	it	ne
 800be56:	f049 0902 	orrne.w	r9, r9, #2
 800be5a:	f7ff fe23 	bl	800baa4 <rshift>
 800be5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be62:	f1b9 0f00 	cmp.w	r9, #0
 800be66:	d047      	beq.n	800bef8 <__gethex+0x388>
 800be68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d015      	beq.n	800be9c <__gethex+0x32c>
 800be70:	2b03      	cmp	r3, #3
 800be72:	d017      	beq.n	800bea4 <__gethex+0x334>
 800be74:	2b01      	cmp	r3, #1
 800be76:	d109      	bne.n	800be8c <__gethex+0x31c>
 800be78:	f019 0f02 	tst.w	r9, #2
 800be7c:	d006      	beq.n	800be8c <__gethex+0x31c>
 800be7e:	f8da 3000 	ldr.w	r3, [sl]
 800be82:	ea49 0903 	orr.w	r9, r9, r3
 800be86:	f019 0f01 	tst.w	r9, #1
 800be8a:	d10e      	bne.n	800beaa <__gethex+0x33a>
 800be8c:	f045 0510 	orr.w	r5, r5, #16
 800be90:	e032      	b.n	800bef8 <__gethex+0x388>
 800be92:	f04f 0901 	mov.w	r9, #1
 800be96:	e7d1      	b.n	800be3c <__gethex+0x2cc>
 800be98:	2501      	movs	r5, #1
 800be9a:	e7e2      	b.n	800be62 <__gethex+0x2f2>
 800be9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9e:	f1c3 0301 	rsb	r3, r3, #1
 800bea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0f0      	beq.n	800be8c <__gethex+0x31c>
 800beaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800beae:	f104 0314 	add.w	r3, r4, #20
 800beb2:	f04f 0c00 	mov.w	ip, #0
 800beb6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800beba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bec8:	d01b      	beq.n	800bf02 <__gethex+0x392>
 800beca:	3201      	adds	r2, #1
 800becc:	6002      	str	r2, [r0, #0]
 800bece:	2d02      	cmp	r5, #2
 800bed0:	f104 0314 	add.w	r3, r4, #20
 800bed4:	d13c      	bne.n	800bf50 <__gethex+0x3e0>
 800bed6:	f8d8 2000 	ldr.w	r2, [r8]
 800beda:	3a01      	subs	r2, #1
 800bedc:	42b2      	cmp	r2, r6
 800bede:	d109      	bne.n	800bef4 <__gethex+0x384>
 800bee0:	1171      	asrs	r1, r6, #5
 800bee2:	2201      	movs	r2, #1
 800bee4:	f006 061f 	and.w	r6, r6, #31
 800bee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beec:	fa02 f606 	lsl.w	r6, r2, r6
 800bef0:	421e      	tst	r6, r3
 800bef2:	d13a      	bne.n	800bf6a <__gethex+0x3fa>
 800bef4:	f045 0520 	orr.w	r5, r5, #32
 800bef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800befa:	601c      	str	r4, [r3, #0]
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	601f      	str	r7, [r3, #0]
 800bf00:	e6b0      	b.n	800bc64 <__gethex+0xf4>
 800bf02:	4299      	cmp	r1, r3
 800bf04:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf08:	d8d9      	bhi.n	800bebe <__gethex+0x34e>
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	459b      	cmp	fp, r3
 800bf0e:	db17      	blt.n	800bf40 <__gethex+0x3d0>
 800bf10:	6861      	ldr	r1, [r4, #4]
 800bf12:	9801      	ldr	r0, [sp, #4]
 800bf14:	3101      	adds	r1, #1
 800bf16:	f7fe f81f 	bl	8009f58 <_Balloc>
 800bf1a:	4681      	mov	r9, r0
 800bf1c:	b918      	cbnz	r0, 800bf26 <__gethex+0x3b6>
 800bf1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <__gethex+0x418>)
 800bf20:	4602      	mov	r2, r0
 800bf22:	2184      	movs	r1, #132	@ 0x84
 800bf24:	e6c5      	b.n	800bcb2 <__gethex+0x142>
 800bf26:	6922      	ldr	r2, [r4, #16]
 800bf28:	f104 010c 	add.w	r1, r4, #12
 800bf2c:	300c      	adds	r0, #12
 800bf2e:	3202      	adds	r2, #2
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	f7fd f952 	bl	80091da <memcpy>
 800bf36:	4621      	mov	r1, r4
 800bf38:	464c      	mov	r4, r9
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	f7fe f84c 	bl	8009fd8 <_Bfree>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf48:	6122      	str	r2, [r4, #16]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	615a      	str	r2, [r3, #20]
 800bf4e:	e7be      	b.n	800bece <__gethex+0x35e>
 800bf50:	6922      	ldr	r2, [r4, #16]
 800bf52:	455a      	cmp	r2, fp
 800bf54:	dd0b      	ble.n	800bf6e <__gethex+0x3fe>
 800bf56:	2101      	movs	r1, #1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7ff fda3 	bl	800baa4 <rshift>
 800bf5e:	3701      	adds	r7, #1
 800bf60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf64:	42bb      	cmp	r3, r7
 800bf66:	f6ff aee0 	blt.w	800bd2a <__gethex+0x1ba>
 800bf6a:	2501      	movs	r5, #1
 800bf6c:	e7c2      	b.n	800bef4 <__gethex+0x384>
 800bf6e:	f016 061f 	ands.w	r6, r6, #31
 800bf72:	d0fa      	beq.n	800bf6a <__gethex+0x3fa>
 800bf74:	4453      	add	r3, sl
 800bf76:	f1c6 0620 	rsb	r6, r6, #32
 800bf7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf7e:	f7fe f8df 	bl	800a140 <__hi0bits>
 800bf82:	42b0      	cmp	r0, r6
 800bf84:	dbe7      	blt.n	800bf56 <__gethex+0x3e6>
 800bf86:	e7f0      	b.n	800bf6a <__gethex+0x3fa>
 800bf88:	0800cc71 	.word	0x0800cc71

0800bf8c <L_shift>:
 800bf8c:	f1c2 0208 	rsb	r2, r2, #8
 800bf90:	0092      	lsls	r2, r2, #2
 800bf92:	b570      	push	{r4, r5, r6, lr}
 800bf94:	f1c2 0620 	rsb	r6, r2, #32
 800bf98:	6843      	ldr	r3, [r0, #4]
 800bf9a:	6804      	ldr	r4, [r0, #0]
 800bf9c:	fa03 f506 	lsl.w	r5, r3, r6
 800bfa0:	40d3      	lsrs	r3, r2
 800bfa2:	432c      	orrs	r4, r5
 800bfa4:	6004      	str	r4, [r0, #0]
 800bfa6:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfaa:	4288      	cmp	r0, r1
 800bfac:	d3f4      	bcc.n	800bf98 <L_shift+0xc>
 800bfae:	bd70      	pop	{r4, r5, r6, pc}

0800bfb0 <__match>:
 800bfb0:	6803      	ldr	r3, [r0, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	b530      	push	{r4, r5, lr}
 800bfb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfba:	b914      	cbnz	r4, 800bfc2 <__match+0x12>
 800bfbc:	6003      	str	r3, [r0, #0]
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	bd30      	pop	{r4, r5, pc}
 800bfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bfca:	2d19      	cmp	r5, #25
 800bfcc:	bf98      	it	ls
 800bfce:	3220      	addls	r2, #32
 800bfd0:	42a2      	cmp	r2, r4
 800bfd2:	d0f0      	beq.n	800bfb6 <__match+0x6>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	e7f3      	b.n	800bfc0 <__match+0x10>

0800bfd8 <__hexnan>:
 800bfd8:	680b      	ldr	r3, [r1, #0]
 800bfda:	6801      	ldr	r1, [r0, #0]
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	115e      	asrs	r6, r3, #5
 800bfe2:	f013 031f 	ands.w	r3, r3, #31
 800bfe6:	f04f 0500 	mov.w	r5, #0
 800bfea:	b087      	sub	sp, #28
 800bfec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bff0:	4682      	mov	sl, r0
 800bff2:	4690      	mov	r8, r2
 800bff4:	46ab      	mov	fp, r5
 800bff6:	bf18      	it	ne
 800bff8:	3604      	addne	r6, #4
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	9502      	str	r5, [sp, #8]
 800bffe:	1f37      	subs	r7, r6, #4
 800c000:	f846 5c04 	str.w	r5, [r6, #-4]
 800c004:	46b9      	mov	r9, r7
 800c006:	463c      	mov	r4, r7
 800c008:	1c4b      	adds	r3, r1, #1
 800c00a:	784a      	ldrb	r2, [r1, #1]
 800c00c:	9303      	str	r3, [sp, #12]
 800c00e:	b342      	cbz	r2, 800c062 <__hexnan+0x8a>
 800c010:	4610      	mov	r0, r2
 800c012:	9105      	str	r1, [sp, #20]
 800c014:	9204      	str	r2, [sp, #16]
 800c016:	f7ff fd96 	bl	800bb46 <__hexdig_fun>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d151      	bne.n	800c0c2 <__hexnan+0xea>
 800c01e:	9a04      	ldr	r2, [sp, #16]
 800c020:	9905      	ldr	r1, [sp, #20]
 800c022:	2a20      	cmp	r2, #32
 800c024:	d818      	bhi.n	800c058 <__hexnan+0x80>
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	459b      	cmp	fp, r3
 800c02a:	dd13      	ble.n	800c054 <__hexnan+0x7c>
 800c02c:	454c      	cmp	r4, r9
 800c02e:	d206      	bcs.n	800c03e <__hexnan+0x66>
 800c030:	2d07      	cmp	r5, #7
 800c032:	dc04      	bgt.n	800c03e <__hexnan+0x66>
 800c034:	462a      	mov	r2, r5
 800c036:	4649      	mov	r1, r9
 800c038:	4620      	mov	r0, r4
 800c03a:	f7ff ffa7 	bl	800bf8c <L_shift>
 800c03e:	4544      	cmp	r4, r8
 800c040:	d951      	bls.n	800c0e6 <__hexnan+0x10e>
 800c042:	2300      	movs	r3, #0
 800c044:	f1a4 0904 	sub.w	r9, r4, #4
 800c048:	f8cd b008 	str.w	fp, [sp, #8]
 800c04c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c050:	461d      	mov	r5, r3
 800c052:	464c      	mov	r4, r9
 800c054:	9903      	ldr	r1, [sp, #12]
 800c056:	e7d7      	b.n	800c008 <__hexnan+0x30>
 800c058:	2a29      	cmp	r2, #41	@ 0x29
 800c05a:	d156      	bne.n	800c10a <__hexnan+0x132>
 800c05c:	3102      	adds	r1, #2
 800c05e:	f8ca 1000 	str.w	r1, [sl]
 800c062:	f1bb 0f00 	cmp.w	fp, #0
 800c066:	d050      	beq.n	800c10a <__hexnan+0x132>
 800c068:	454c      	cmp	r4, r9
 800c06a:	d206      	bcs.n	800c07a <__hexnan+0xa2>
 800c06c:	2d07      	cmp	r5, #7
 800c06e:	dc04      	bgt.n	800c07a <__hexnan+0xa2>
 800c070:	462a      	mov	r2, r5
 800c072:	4649      	mov	r1, r9
 800c074:	4620      	mov	r0, r4
 800c076:	f7ff ff89 	bl	800bf8c <L_shift>
 800c07a:	4544      	cmp	r4, r8
 800c07c:	d935      	bls.n	800c0ea <__hexnan+0x112>
 800c07e:	f1a8 0204 	sub.w	r2, r8, #4
 800c082:	4623      	mov	r3, r4
 800c084:	f853 1b04 	ldr.w	r1, [r3], #4
 800c088:	429f      	cmp	r7, r3
 800c08a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c08e:	d2f9      	bcs.n	800c084 <__hexnan+0xac>
 800c090:	1b3b      	subs	r3, r7, r4
 800c092:	3e03      	subs	r6, #3
 800c094:	3401      	adds	r4, #1
 800c096:	2200      	movs	r2, #0
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	3304      	adds	r3, #4
 800c09e:	42b4      	cmp	r4, r6
 800c0a0:	bf88      	it	hi
 800c0a2:	2304      	movhi	r3, #4
 800c0a4:	4443      	add	r3, r8
 800c0a6:	f843 2b04 	str.w	r2, [r3], #4
 800c0aa:	429f      	cmp	r7, r3
 800c0ac:	d2fb      	bcs.n	800c0a6 <__hexnan+0xce>
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	b91b      	cbnz	r3, 800c0ba <__hexnan+0xe2>
 800c0b2:	4547      	cmp	r7, r8
 800c0b4:	d127      	bne.n	800c106 <__hexnan+0x12e>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	2005      	movs	r0, #5
 800c0bc:	b007      	add	sp, #28
 800c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c2:	3501      	adds	r5, #1
 800c0c4:	f10b 0b01 	add.w	fp, fp, #1
 800c0c8:	2d08      	cmp	r5, #8
 800c0ca:	dd05      	ble.n	800c0d8 <__hexnan+0x100>
 800c0cc:	4544      	cmp	r4, r8
 800c0ce:	d9c1      	bls.n	800c054 <__hexnan+0x7c>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	3c04      	subs	r4, #4
 800c0d4:	2501      	movs	r5, #1
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	6822      	ldr	r2, [r4, #0]
 800c0da:	f000 000f 	and.w	r0, r0, #15
 800c0de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0e2:	6020      	str	r0, [r4, #0]
 800c0e4:	e7b6      	b.n	800c054 <__hexnan+0x7c>
 800c0e6:	2508      	movs	r5, #8
 800c0e8:	e7b4      	b.n	800c054 <__hexnan+0x7c>
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0de      	beq.n	800c0ae <__hexnan+0xd6>
 800c0f0:	f1c3 0320 	rsb	r3, r3, #32
 800c0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f8:	40da      	lsrs	r2, r3
 800c0fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0fe:	4013      	ands	r3, r2
 800c100:	f846 3c04 	str.w	r3, [r6, #-4]
 800c104:	e7d3      	b.n	800c0ae <__hexnan+0xd6>
 800c106:	3f04      	subs	r7, #4
 800c108:	e7d1      	b.n	800c0ae <__hexnan+0xd6>
 800c10a:	2004      	movs	r0, #4
 800c10c:	e7d6      	b.n	800c0bc <__hexnan+0xe4>

0800c10e <__ascii_mbtowc>:
 800c10e:	b082      	sub	sp, #8
 800c110:	b901      	cbnz	r1, 800c114 <__ascii_mbtowc+0x6>
 800c112:	a901      	add	r1, sp, #4
 800c114:	b142      	cbz	r2, 800c128 <__ascii_mbtowc+0x1a>
 800c116:	b14b      	cbz	r3, 800c12c <__ascii_mbtowc+0x1e>
 800c118:	7813      	ldrb	r3, [r2, #0]
 800c11a:	600b      	str	r3, [r1, #0]
 800c11c:	7812      	ldrb	r2, [r2, #0]
 800c11e:	1e10      	subs	r0, r2, #0
 800c120:	bf18      	it	ne
 800c122:	2001      	movne	r0, #1
 800c124:	b002      	add	sp, #8
 800c126:	4770      	bx	lr
 800c128:	4610      	mov	r0, r2
 800c12a:	e7fb      	b.n	800c124 <__ascii_mbtowc+0x16>
 800c12c:	f06f 0001 	mvn.w	r0, #1
 800c130:	e7f8      	b.n	800c124 <__ascii_mbtowc+0x16>

0800c132 <_realloc_r>:
 800c132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	4607      	mov	r7, r0
 800c138:	4614      	mov	r4, r2
 800c13a:	460d      	mov	r5, r1
 800c13c:	b921      	cbnz	r1, 800c148 <_realloc_r+0x16>
 800c13e:	4611      	mov	r1, r2
 800c140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c144:	f7fb bf92 	b.w	800806c <_malloc_r>
 800c148:	b92a      	cbnz	r2, 800c156 <_realloc_r+0x24>
 800c14a:	4625      	mov	r5, r4
 800c14c:	f7fd feba 	bl	8009ec4 <_free_r>
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	f000 f840 	bl	800c1da <_malloc_usable_size_r>
 800c15a:	4284      	cmp	r4, r0
 800c15c:	4606      	mov	r6, r0
 800c15e:	d802      	bhi.n	800c166 <_realloc_r+0x34>
 800c160:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c164:	d8f4      	bhi.n	800c150 <_realloc_r+0x1e>
 800c166:	4621      	mov	r1, r4
 800c168:	4638      	mov	r0, r7
 800c16a:	f7fb ff7f 	bl	800806c <_malloc_r>
 800c16e:	4680      	mov	r8, r0
 800c170:	b908      	cbnz	r0, 800c176 <_realloc_r+0x44>
 800c172:	4645      	mov	r5, r8
 800c174:	e7ec      	b.n	800c150 <_realloc_r+0x1e>
 800c176:	42b4      	cmp	r4, r6
 800c178:	4622      	mov	r2, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	bf28      	it	cs
 800c17e:	4632      	movcs	r2, r6
 800c180:	f7fd f82b 	bl	80091da <memcpy>
 800c184:	4629      	mov	r1, r5
 800c186:	4638      	mov	r0, r7
 800c188:	f7fd fe9c 	bl	8009ec4 <_free_r>
 800c18c:	e7f1      	b.n	800c172 <_realloc_r+0x40>

0800c18e <__ascii_wctomb>:
 800c18e:	4603      	mov	r3, r0
 800c190:	4608      	mov	r0, r1
 800c192:	b141      	cbz	r1, 800c1a6 <__ascii_wctomb+0x18>
 800c194:	2aff      	cmp	r2, #255	@ 0xff
 800c196:	d904      	bls.n	800c1a2 <__ascii_wctomb+0x14>
 800c198:	228a      	movs	r2, #138	@ 0x8a
 800c19a:	f04f 30ff 	mov.w	r0, #4294967295
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	4770      	bx	lr
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	700a      	strb	r2, [r1, #0]
 800c1a6:	4770      	bx	lr

0800c1a8 <fiprintf>:
 800c1a8:	b40e      	push	{r1, r2, r3}
 800c1aa:	b503      	push	{r0, r1, lr}
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	4805      	ldr	r0, [pc, #20]	@ (800c1c8 <fiprintf+0x20>)
 800c1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b6:	6800      	ldr	r0, [r0, #0]
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	f000 f83f 	bl	800c23c <_vfiprintf_r>
 800c1be:	b002      	add	sp, #8
 800c1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c4:	b003      	add	sp, #12
 800c1c6:	4770      	bx	lr
 800c1c8:	20000058 	.word	0x20000058

0800c1cc <abort>:
 800c1cc:	2006      	movs	r0, #6
 800c1ce:	b508      	push	{r3, lr}
 800c1d0:	f000 fa08 	bl	800c5e4 <raise>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	f7f8 f88e 	bl	80042f6 <_exit>

0800c1da <_malloc_usable_size_r>:
 800c1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1de:	1f18      	subs	r0, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	bfbc      	itt	lt
 800c1e4:	580b      	ldrlt	r3, [r1, r0]
 800c1e6:	18c0      	addlt	r0, r0, r3
 800c1e8:	4770      	bx	lr

0800c1ea <__sfputc_r>:
 800c1ea:	6893      	ldr	r3, [r2, #8]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	b410      	push	{r4}
 800c1f2:	6093      	str	r3, [r2, #8]
 800c1f4:	da08      	bge.n	800c208 <__sfputc_r+0x1e>
 800c1f6:	6994      	ldr	r4, [r2, #24]
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	db01      	blt.n	800c200 <__sfputc_r+0x16>
 800c1fc:	290a      	cmp	r1, #10
 800c1fe:	d103      	bne.n	800c208 <__sfputc_r+0x1e>
 800c200:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c204:	f000 b932 	b.w	800c46c <__swbuf_r>
 800c208:	6813      	ldr	r3, [r2, #0]
 800c20a:	1c58      	adds	r0, r3, #1
 800c20c:	6010      	str	r0, [r2, #0]
 800c20e:	4608      	mov	r0, r1
 800c210:	7019      	strb	r1, [r3, #0]
 800c212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <__sfputs_r>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	4606      	mov	r6, r0
 800c21c:	460f      	mov	r7, r1
 800c21e:	4614      	mov	r4, r2
 800c220:	18d5      	adds	r5, r2, r3
 800c222:	42ac      	cmp	r4, r5
 800c224:	d101      	bne.n	800c22a <__sfputs_r+0x12>
 800c226:	2000      	movs	r0, #0
 800c228:	e007      	b.n	800c23a <__sfputs_r+0x22>
 800c22a:	463a      	mov	r2, r7
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	4630      	mov	r0, r6
 800c232:	f7ff ffda 	bl	800c1ea <__sfputc_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d1f3      	bne.n	800c222 <__sfputs_r+0xa>
 800c23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c23c <_vfiprintf_r>:
 800c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	460d      	mov	r5, r1
 800c242:	b09d      	sub	sp, #116	@ 0x74
 800c244:	4614      	mov	r4, r2
 800c246:	4698      	mov	r8, r3
 800c248:	4606      	mov	r6, r0
 800c24a:	b118      	cbz	r0, 800c254 <_vfiprintf_r+0x18>
 800c24c:	6a03      	ldr	r3, [r0, #32]
 800c24e:	b90b      	cbnz	r3, 800c254 <_vfiprintf_r+0x18>
 800c250:	f7fc fe8a 	bl	8008f68 <__sinit>
 800c254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c256:	07d9      	lsls	r1, r3, #31
 800c258:	d405      	bmi.n	800c266 <_vfiprintf_r+0x2a>
 800c25a:	89ab      	ldrh	r3, [r5, #12]
 800c25c:	059a      	lsls	r2, r3, #22
 800c25e:	d402      	bmi.n	800c266 <_vfiprintf_r+0x2a>
 800c260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c262:	f7fc ffaa 	bl	80091ba <__retarget_lock_acquire_recursive>
 800c266:	89ab      	ldrh	r3, [r5, #12]
 800c268:	071b      	lsls	r3, r3, #28
 800c26a:	d501      	bpl.n	800c270 <_vfiprintf_r+0x34>
 800c26c:	692b      	ldr	r3, [r5, #16]
 800c26e:	b99b      	cbnz	r3, 800c298 <_vfiprintf_r+0x5c>
 800c270:	4629      	mov	r1, r5
 800c272:	4630      	mov	r0, r6
 800c274:	f000 f938 	bl	800c4e8 <__swsetup_r>
 800c278:	b170      	cbz	r0, 800c298 <_vfiprintf_r+0x5c>
 800c27a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c27c:	07dc      	lsls	r4, r3, #31
 800c27e:	d504      	bpl.n	800c28a <_vfiprintf_r+0x4e>
 800c280:	f04f 30ff 	mov.w	r0, #4294967295
 800c284:	b01d      	add	sp, #116	@ 0x74
 800c286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28a:	89ab      	ldrh	r3, [r5, #12]
 800c28c:	0598      	lsls	r0, r3, #22
 800c28e:	d4f7      	bmi.n	800c280 <_vfiprintf_r+0x44>
 800c290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c292:	f7fc ff93 	bl	80091bc <__retarget_lock_release_recursive>
 800c296:	e7f3      	b.n	800c280 <_vfiprintf_r+0x44>
 800c298:	2300      	movs	r3, #0
 800c29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c29e:	f04f 0901 	mov.w	r9, #1
 800c2a2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c458 <_vfiprintf_r+0x21c>
 800c2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2ae:	2330      	movs	r3, #48	@ 0x30
 800c2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2b4:	4623      	mov	r3, r4
 800c2b6:	469a      	mov	sl, r3
 800c2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2bc:	b10a      	cbz	r2, 800c2c2 <_vfiprintf_r+0x86>
 800c2be:	2a25      	cmp	r2, #37	@ 0x25
 800c2c0:	d1f9      	bne.n	800c2b6 <_vfiprintf_r+0x7a>
 800c2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c2c6:	d00b      	beq.n	800c2e0 <_vfiprintf_r+0xa4>
 800c2c8:	465b      	mov	r3, fp
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7ff ffa2 	bl	800c218 <__sfputs_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	f000 80a7 	beq.w	800c428 <_vfiprintf_r+0x1ec>
 800c2da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2dc:	445a      	add	r2, fp
 800c2de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 809f 	beq.w	800c428 <_vfiprintf_r+0x1ec>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f0:	f10a 0a01 	add.w	sl, sl, #1
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c302:	4654      	mov	r4, sl
 800c304:	2205      	movs	r2, #5
 800c306:	4854      	ldr	r0, [pc, #336]	@ (800c458 <_vfiprintf_r+0x21c>)
 800c308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30c:	f7fc ff57 	bl	80091be <memchr>
 800c310:	9a04      	ldr	r2, [sp, #16]
 800c312:	b9d8      	cbnz	r0, 800c34c <_vfiprintf_r+0x110>
 800c314:	06d1      	lsls	r1, r2, #27
 800c316:	bf44      	itt	mi
 800c318:	2320      	movmi	r3, #32
 800c31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c31e:	0713      	lsls	r3, r2, #28
 800c320:	bf44      	itt	mi
 800c322:	232b      	movmi	r3, #43	@ 0x2b
 800c324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c328:	f89a 3000 	ldrb.w	r3, [sl]
 800c32c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c32e:	d015      	beq.n	800c35c <_vfiprintf_r+0x120>
 800c330:	9a07      	ldr	r2, [sp, #28]
 800c332:	4654      	mov	r4, sl
 800c334:	2000      	movs	r0, #0
 800c336:	f04f 0c0a 	mov.w	ip, #10
 800c33a:	4621      	mov	r1, r4
 800c33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c340:	3b30      	subs	r3, #48	@ 0x30
 800c342:	2b09      	cmp	r3, #9
 800c344:	d94b      	bls.n	800c3de <_vfiprintf_r+0x1a2>
 800c346:	b1b0      	cbz	r0, 800c376 <_vfiprintf_r+0x13a>
 800c348:	9207      	str	r2, [sp, #28]
 800c34a:	e014      	b.n	800c376 <_vfiprintf_r+0x13a>
 800c34c:	eba0 0308 	sub.w	r3, r0, r8
 800c350:	46a2      	mov	sl, r4
 800c352:	fa09 f303 	lsl.w	r3, r9, r3
 800c356:	4313      	orrs	r3, r2
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	e7d2      	b.n	800c302 <_vfiprintf_r+0xc6>
 800c35c:	9b03      	ldr	r3, [sp, #12]
 800c35e:	1d19      	adds	r1, r3, #4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	9103      	str	r1, [sp, #12]
 800c366:	bfbb      	ittet	lt
 800c368:	425b      	neglt	r3, r3
 800c36a:	f042 0202 	orrlt.w	r2, r2, #2
 800c36e:	9307      	strge	r3, [sp, #28]
 800c370:	9307      	strlt	r3, [sp, #28]
 800c372:	bfb8      	it	lt
 800c374:	9204      	strlt	r2, [sp, #16]
 800c376:	7823      	ldrb	r3, [r4, #0]
 800c378:	2b2e      	cmp	r3, #46	@ 0x2e
 800c37a:	d10a      	bne.n	800c392 <_vfiprintf_r+0x156>
 800c37c:	7863      	ldrb	r3, [r4, #1]
 800c37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c380:	d132      	bne.n	800c3e8 <_vfiprintf_r+0x1ac>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	3402      	adds	r4, #2
 800c386:	1d1a      	adds	r2, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c38e:	9203      	str	r2, [sp, #12]
 800c390:	9305      	str	r3, [sp, #20]
 800c392:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c468 <_vfiprintf_r+0x22c>
 800c396:	2203      	movs	r2, #3
 800c398:	7821      	ldrb	r1, [r4, #0]
 800c39a:	4650      	mov	r0, sl
 800c39c:	f7fc ff0f 	bl	80091be <memchr>
 800c3a0:	b138      	cbz	r0, 800c3b2 <_vfiprintf_r+0x176>
 800c3a2:	eba0 000a 	sub.w	r0, r0, sl
 800c3a6:	2240      	movs	r2, #64	@ 0x40
 800c3a8:	9b04      	ldr	r3, [sp, #16]
 800c3aa:	3401      	adds	r4, #1
 800c3ac:	4082      	lsls	r2, r0
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b6:	2206      	movs	r2, #6
 800c3b8:	4828      	ldr	r0, [pc, #160]	@ (800c45c <_vfiprintf_r+0x220>)
 800c3ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3be:	f7fc fefe 	bl	80091be <memchr>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d03f      	beq.n	800c446 <_vfiprintf_r+0x20a>
 800c3c6:	4b26      	ldr	r3, [pc, #152]	@ (800c460 <_vfiprintf_r+0x224>)
 800c3c8:	bb1b      	cbnz	r3, 800c412 <_vfiprintf_r+0x1d6>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3307      	adds	r3, #7
 800c3ce:	f023 0307 	bic.w	r3, r3, #7
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	9303      	str	r3, [sp, #12]
 800c3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d8:	443b      	add	r3, r7
 800c3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3dc:	e76a      	b.n	800c2b4 <_vfiprintf_r+0x78>
 800c3de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	e7a8      	b.n	800c33a <_vfiprintf_r+0xfe>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	3401      	adds	r4, #1
 800c3ec:	f04f 0c0a 	mov.w	ip, #10
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	9305      	str	r3, [sp, #20]
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3fa:	3a30      	subs	r2, #48	@ 0x30
 800c3fc:	2a09      	cmp	r2, #9
 800c3fe:	d903      	bls.n	800c408 <_vfiprintf_r+0x1cc>
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0c6      	beq.n	800c392 <_vfiprintf_r+0x156>
 800c404:	9105      	str	r1, [sp, #20]
 800c406:	e7c4      	b.n	800c392 <_vfiprintf_r+0x156>
 800c408:	fb0c 2101 	mla	r1, ip, r1, r2
 800c40c:	4604      	mov	r4, r0
 800c40e:	2301      	movs	r3, #1
 800c410:	e7f0      	b.n	800c3f4 <_vfiprintf_r+0x1b8>
 800c412:	ab03      	add	r3, sp, #12
 800c414:	462a      	mov	r2, r5
 800c416:	a904      	add	r1, sp, #16
 800c418:	4630      	mov	r0, r6
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	4b11      	ldr	r3, [pc, #68]	@ (800c464 <_vfiprintf_r+0x228>)
 800c41e:	f7fb ff4f 	bl	80082c0 <_printf_float>
 800c422:	4607      	mov	r7, r0
 800c424:	1c78      	adds	r0, r7, #1
 800c426:	d1d6      	bne.n	800c3d6 <_vfiprintf_r+0x19a>
 800c428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c42a:	07d9      	lsls	r1, r3, #31
 800c42c:	d405      	bmi.n	800c43a <_vfiprintf_r+0x1fe>
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	059a      	lsls	r2, r3, #22
 800c432:	d402      	bmi.n	800c43a <_vfiprintf_r+0x1fe>
 800c434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c436:	f7fc fec1 	bl	80091bc <__retarget_lock_release_recursive>
 800c43a:	89ab      	ldrh	r3, [r5, #12]
 800c43c:	065b      	lsls	r3, r3, #25
 800c43e:	f53f af1f 	bmi.w	800c280 <_vfiprintf_r+0x44>
 800c442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c444:	e71e      	b.n	800c284 <_vfiprintf_r+0x48>
 800c446:	ab03      	add	r3, sp, #12
 800c448:	462a      	mov	r2, r5
 800c44a:	a904      	add	r1, sp, #16
 800c44c:	4630      	mov	r0, r6
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	4b04      	ldr	r3, [pc, #16]	@ (800c464 <_vfiprintf_r+0x228>)
 800c452:	f7fc f9d1 	bl	80087f8 <_printf_i>
 800c456:	e7e4      	b.n	800c422 <_vfiprintf_r+0x1e6>
 800c458:	0800ccdd 	.word	0x0800ccdd
 800c45c:	0800cce7 	.word	0x0800cce7
 800c460:	080082c1 	.word	0x080082c1
 800c464:	0800c219 	.word	0x0800c219
 800c468:	0800cce3 	.word	0x0800cce3

0800c46c <__swbuf_r>:
 800c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46e:	460e      	mov	r6, r1
 800c470:	4614      	mov	r4, r2
 800c472:	4605      	mov	r5, r0
 800c474:	b118      	cbz	r0, 800c47e <__swbuf_r+0x12>
 800c476:	6a03      	ldr	r3, [r0, #32]
 800c478:	b90b      	cbnz	r3, 800c47e <__swbuf_r+0x12>
 800c47a:	f7fc fd75 	bl	8008f68 <__sinit>
 800c47e:	69a3      	ldr	r3, [r4, #24]
 800c480:	60a3      	str	r3, [r4, #8]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	071a      	lsls	r2, r3, #28
 800c486:	d501      	bpl.n	800c48c <__swbuf_r+0x20>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	b943      	cbnz	r3, 800c49e <__swbuf_r+0x32>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 f82a 	bl	800c4e8 <__swsetup_r>
 800c494:	b118      	cbz	r0, 800c49e <__swbuf_r+0x32>
 800c496:	f04f 37ff 	mov.w	r7, #4294967295
 800c49a:	4638      	mov	r0, r7
 800c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	b2f6      	uxtb	r6, r6
 800c4a2:	6922      	ldr	r2, [r4, #16]
 800c4a4:	4637      	mov	r7, r6
 800c4a6:	1a98      	subs	r0, r3, r2
 800c4a8:	6963      	ldr	r3, [r4, #20]
 800c4aa:	4283      	cmp	r3, r0
 800c4ac:	dc05      	bgt.n	800c4ba <__swbuf_r+0x4e>
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fa67 	bl	800b984 <_fflush_r>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d1ed      	bne.n	800c496 <__swbuf_r+0x2a>
 800c4ba:	68a3      	ldr	r3, [r4, #8]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	60a3      	str	r3, [r4, #8]
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	701e      	strb	r6, [r3, #0]
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	6962      	ldr	r2, [r4, #20]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d004      	beq.n	800c4da <__swbuf_r+0x6e>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	07db      	lsls	r3, r3, #31
 800c4d4:	d5e1      	bpl.n	800c49a <__swbuf_r+0x2e>
 800c4d6:	2e0a      	cmp	r6, #10
 800c4d8:	d1df      	bne.n	800c49a <__swbuf_r+0x2e>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f7ff fa51 	bl	800b984 <_fflush_r>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d0d9      	beq.n	800c49a <__swbuf_r+0x2e>
 800c4e6:	e7d6      	b.n	800c496 <__swbuf_r+0x2a>

0800c4e8 <__swsetup_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4b29      	ldr	r3, [pc, #164]	@ (800c590 <__swsetup_r+0xa8>)
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	b118      	cbz	r0, 800c4fc <__swsetup_r+0x14>
 800c4f4:	6a03      	ldr	r3, [r0, #32]
 800c4f6:	b90b      	cbnz	r3, 800c4fc <__swsetup_r+0x14>
 800c4f8:	f7fc fd36 	bl	8008f68 <__sinit>
 800c4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c500:	0719      	lsls	r1, r3, #28
 800c502:	d422      	bmi.n	800c54a <__swsetup_r+0x62>
 800c504:	06da      	lsls	r2, r3, #27
 800c506:	d407      	bmi.n	800c518 <__swsetup_r+0x30>
 800c508:	2209      	movs	r2, #9
 800c50a:	602a      	str	r2, [r5, #0]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	81a3      	strh	r3, [r4, #12]
 800c516:	e033      	b.n	800c580 <__swsetup_r+0x98>
 800c518:	0758      	lsls	r0, r3, #29
 800c51a:	d512      	bpl.n	800c542 <__swsetup_r+0x5a>
 800c51c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c51e:	b141      	cbz	r1, 800c532 <__swsetup_r+0x4a>
 800c520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <__swsetup_r+0x46>
 800c528:	4628      	mov	r0, r5
 800c52a:	f7fd fccb 	bl	8009ec4 <_free_r>
 800c52e:	2300      	movs	r3, #0
 800c530:	6363      	str	r3, [r4, #52]	@ 0x34
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c538:	81a3      	strh	r3, [r4, #12]
 800c53a:	2300      	movs	r3, #0
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f043 0308 	orr.w	r3, r3, #8
 800c548:	81a3      	strh	r3, [r4, #12]
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	b94b      	cbnz	r3, 800c562 <__swsetup_r+0x7a>
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c558:	d003      	beq.n	800c562 <__swsetup_r+0x7a>
 800c55a:	4621      	mov	r1, r4
 800c55c:	4628      	mov	r0, r5
 800c55e:	f000 f882 	bl	800c666 <__smakebuf_r>
 800c562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c566:	f013 0201 	ands.w	r2, r3, #1
 800c56a:	d00a      	beq.n	800c582 <__swsetup_r+0x9a>
 800c56c:	2200      	movs	r2, #0
 800c56e:	60a2      	str	r2, [r4, #8]
 800c570:	6962      	ldr	r2, [r4, #20]
 800c572:	4252      	negs	r2, r2
 800c574:	61a2      	str	r2, [r4, #24]
 800c576:	6922      	ldr	r2, [r4, #16]
 800c578:	b942      	cbnz	r2, 800c58c <__swsetup_r+0xa4>
 800c57a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c57e:	d1c5      	bne.n	800c50c <__swsetup_r+0x24>
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	0799      	lsls	r1, r3, #30
 800c584:	bf58      	it	pl
 800c586:	6962      	ldrpl	r2, [r4, #20]
 800c588:	60a2      	str	r2, [r4, #8]
 800c58a:	e7f4      	b.n	800c576 <__swsetup_r+0x8e>
 800c58c:	2000      	movs	r0, #0
 800c58e:	e7f7      	b.n	800c580 <__swsetup_r+0x98>
 800c590:	20000058 	.word	0x20000058

0800c594 <_raise_r>:
 800c594:	291f      	cmp	r1, #31
 800c596:	b538      	push	{r3, r4, r5, lr}
 800c598:	4605      	mov	r5, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	d904      	bls.n	800c5a8 <_raise_r+0x14>
 800c59e:	2316      	movs	r3, #22
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	bd38      	pop	{r3, r4, r5, pc}
 800c5a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5aa:	b112      	cbz	r2, 800c5b2 <_raise_r+0x1e>
 800c5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5b0:	b94b      	cbnz	r3, 800c5c6 <_raise_r+0x32>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 f830 	bl	800c618 <_getpid_r>
 800c5b8:	4622      	mov	r2, r4
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c2:	f000 b817 	b.w	800c5f4 <_kill_r>
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d00a      	beq.n	800c5e0 <_raise_r+0x4c>
 800c5ca:	1c59      	adds	r1, r3, #1
 800c5cc:	d103      	bne.n	800c5d6 <_raise_r+0x42>
 800c5ce:	2316      	movs	r3, #22
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	2001      	movs	r0, #1
 800c5d4:	e7e7      	b.n	800c5a6 <_raise_r+0x12>
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5de:	4798      	blx	r3
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e7e0      	b.n	800c5a6 <_raise_r+0x12>

0800c5e4 <raise>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	@ (800c5f0 <raise+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f7ff bfd3 	b.w	800c594 <_raise_r>
 800c5ee:	bf00      	nop
 800c5f0:	20000058 	.word	0x20000058

0800c5f4 <_kill_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4d06      	ldr	r5, [pc, #24]	@ (800c614 <_kill_r+0x20>)
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f7 fe68 	bl	80042d6 <_kill>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_kill_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_kill_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200008e4 	.word	0x200008e4

0800c618 <_getpid_r>:
 800c618:	f7f7 be55 	b.w	80042c6 <_getpid>

0800c61c <__swhatbuf_r>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	460c      	mov	r4, r1
 800c620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c624:	b096      	sub	sp, #88	@ 0x58
 800c626:	4615      	mov	r5, r2
 800c628:	2900      	cmp	r1, #0
 800c62a:	461e      	mov	r6, r3
 800c62c:	da0c      	bge.n	800c648 <__swhatbuf_r+0x2c>
 800c62e:	89a3      	ldrh	r3, [r4, #12]
 800c630:	2100      	movs	r1, #0
 800c632:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c636:	bf14      	ite	ne
 800c638:	2340      	movne	r3, #64	@ 0x40
 800c63a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c63e:	2000      	movs	r0, #0
 800c640:	6031      	str	r1, [r6, #0]
 800c642:	602b      	str	r3, [r5, #0]
 800c644:	b016      	add	sp, #88	@ 0x58
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	466a      	mov	r2, sp
 800c64a:	f000 f849 	bl	800c6e0 <_fstat_r>
 800c64e:	2800      	cmp	r0, #0
 800c650:	dbed      	blt.n	800c62e <__swhatbuf_r+0x12>
 800c652:	9901      	ldr	r1, [sp, #4]
 800c654:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c658:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c65c:	4259      	negs	r1, r3
 800c65e:	4159      	adcs	r1, r3
 800c660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c664:	e7eb      	b.n	800c63e <__swhatbuf_r+0x22>

0800c666 <__smakebuf_r>:
 800c666:	898b      	ldrh	r3, [r1, #12]
 800c668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c66a:	079d      	lsls	r5, r3, #30
 800c66c:	4606      	mov	r6, r0
 800c66e:	460c      	mov	r4, r1
 800c670:	d507      	bpl.n	800c682 <__smakebuf_r+0x1c>
 800c672:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	6123      	str	r3, [r4, #16]
 800c67a:	2301      	movs	r3, #1
 800c67c:	6163      	str	r3, [r4, #20]
 800c67e:	b003      	add	sp, #12
 800c680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c682:	ab01      	add	r3, sp, #4
 800c684:	466a      	mov	r2, sp
 800c686:	f7ff ffc9 	bl	800c61c <__swhatbuf_r>
 800c68a:	9f00      	ldr	r7, [sp, #0]
 800c68c:	4605      	mov	r5, r0
 800c68e:	4630      	mov	r0, r6
 800c690:	4639      	mov	r1, r7
 800c692:	f7fb fceb 	bl	800806c <_malloc_r>
 800c696:	b948      	cbnz	r0, 800c6ac <__smakebuf_r+0x46>
 800c698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69c:	059a      	lsls	r2, r3, #22
 800c69e:	d4ee      	bmi.n	800c67e <__smakebuf_r+0x18>
 800c6a0:	f023 0303 	bic.w	r3, r3, #3
 800c6a4:	f043 0302 	orr.w	r3, r3, #2
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	e7e2      	b.n	800c672 <__smakebuf_r+0xc>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	6020      	str	r0, [r4, #0]
 800c6b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6bc:	b15b      	cbz	r3, 800c6d6 <__smakebuf_r+0x70>
 800c6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f000 f81e 	bl	800c704 <_isatty_r>
 800c6c8:	b128      	cbz	r0, 800c6d6 <__smakebuf_r+0x70>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	f023 0303 	bic.w	r3, r3, #3
 800c6d0:	f043 0301 	orr.w	r3, r3, #1
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	431d      	orrs	r5, r3
 800c6da:	81a5      	strh	r5, [r4, #12]
 800c6dc:	e7cf      	b.n	800c67e <__smakebuf_r+0x18>
	...

0800c6e0 <_fstat_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4d06      	ldr	r5, [pc, #24]	@ (800c700 <_fstat_r+0x20>)
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	4608      	mov	r0, r1
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	602b      	str	r3, [r5, #0]
 800c6ee:	f7f7 fe52 	bl	8004396 <_fstat>
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	d102      	bne.n	800c6fc <_fstat_r+0x1c>
 800c6f6:	682b      	ldr	r3, [r5, #0]
 800c6f8:	b103      	cbz	r3, 800c6fc <_fstat_r+0x1c>
 800c6fa:	6023      	str	r3, [r4, #0]
 800c6fc:	bd38      	pop	{r3, r4, r5, pc}
 800c6fe:	bf00      	nop
 800c700:	200008e4 	.word	0x200008e4

0800c704 <_isatty_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	2300      	movs	r3, #0
 800c708:	4d05      	ldr	r5, [pc, #20]	@ (800c720 <_isatty_r+0x1c>)
 800c70a:	4604      	mov	r4, r0
 800c70c:	4608      	mov	r0, r1
 800c70e:	602b      	str	r3, [r5, #0]
 800c710:	f7f7 fe51 	bl	80043b6 <_isatty>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	d102      	bne.n	800c71e <_isatty_r+0x1a>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b103      	cbz	r3, 800c71e <_isatty_r+0x1a>
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	200008e4 	.word	0x200008e4

0800c724 <_init>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	bf00      	nop
 800c728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72a:	bc08      	pop	{r3}
 800c72c:	469e      	mov	lr, r3
 800c72e:	4770      	bx	lr

0800c730 <_fini>:
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c732:	bf00      	nop
 800c734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c736:	bc08      	pop	{r3}
 800c738:	469e      	mov	lr, r3
 800c73a:	4770      	bx	lr
