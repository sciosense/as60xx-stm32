
AS60xx_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a20c  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800a448  0800a448  0000b448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adbc  0800adbc  0000c254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc4  0800adc4  0000c254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800adc4  0800adc4  0000bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800adcc  0800adcc  0000bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800add4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000254  0800b028  0000c254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800b028  0000c92c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1b4  00000000  00000000  0000c28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326c  00000000  00000000  0002a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0002d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf5  00000000  00000000  0002e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000359ab  00000000  00000000  0002f4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001539e  00000000  00000000  00064e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00138630  00000000  00000000  0007a1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b2826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  001b286c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001b8594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000254 	.word	0x20000254
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a42c 	.word	0x0800a42c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000258 	.word	0x20000258
 8000274:	0800a42c 	.word	0x0800a42c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <_ZN8AS6031f1C1Ev>:

#include <stdint.h>

#include "as60xx.h"

class AS6031f1 : public AS60xx
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fc70 	bl	8001968 <_ZN6AS60xxC1Ev>
 8001088:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <_ZN8AS6031f1C1Ev+0x20>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	0800a928 	.word	0x0800a928

0800109c <AS60xx_Example_Setup>:
static AS6031f1 as6031f1;

static Result SerialPrint(const char str[]);

extern "C" void AS60xx_Example_Setup(UART_HandleTypeDef *uart, SPI_HandleTypeDef *spi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    huart = *uart;
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <AS60xx_Example_Setup+0x70>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	2394      	movs	r3, #148	@ 0x94
 80010b0:	461a      	mov	r2, r3
 80010b2:	f005 ff18 	bl	8006ee6 <memcpy>
    // Wait to allow terminal software to capture the output
    HAL_Delay(2000);
 80010b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ba:	f001 f9b3 	bl	8002424 <HAL_Delay>

    SerialPrint("Starting AS6031F1 03_AS6031F1_Example demo on STM32...\n");
 80010be:	4814      	ldr	r0, [pc, #80]	@ (8001110 <AS60xx_Example_Setup+0x74>)
 80010c0:	f000 f8b6 	bl	8001230 <_ZL11SerialPrintPKc>

    HAL_Delay(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 80010c4:	205e      	movs	r0, #94	@ 0x5e
 80010c6:	f001 f9ad 	bl	8002424 <HAL_Delay>

    as6031f1.begin(spi, SSN_Pin, SSN_GPIO_Port);
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <AS60xx_Example_Setup+0x78>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	6839      	ldr	r1, [r7, #0]
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <AS60xx_Example_Setup+0x7c>)
 80010d4:	f000 fc5c 	bl	8001990 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>

    if( as6031f1.reset() == RESULT_OK )
 80010d8:	480f      	ldr	r0, [pc, #60]	@ (8001118 <AS60xx_Example_Setup+0x7c>)
 80010da:	f000 fc8f 	bl	80019fc <_ZN6AS60xx5resetEv>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <AS60xx_Example_Setup+0x5a>
    {
        SerialPrint("AS6031F1 initialized properly\n");
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <AS60xx_Example_Setup+0x80>)
 80010f0:	f000 f89e 	bl	8001230 <_ZL11SerialPrintPKc>
 80010f4:	e002      	b.n	80010fc <AS60xx_Example_Setup+0x60>
    }
    else
    {
        SerialPrint("AS6031F1 initialization failed\n");
 80010f6:	480a      	ldr	r0, [pc, #40]	@ (8001120 <AS60xx_Example_Setup+0x84>)
 80010f8:	f000 f89a 	bl	8001230 <_ZL11SerialPrintPKc>
    }
    HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001100:	f001 f990 	bl	8002424 <HAL_Delay>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002f0 	.word	0x200002f0
 8001110:	0800a448 	.word	0x0800a448
 8001114:	42020800 	.word	0x42020800
 8001118:	20000384 	.word	0x20000384
 800111c:	0800a480 	.word	0x0800a480
 8001120:	0800a4a0 	.word	0x0800a4a0

08001124 <AS60xx_Example_Loop>:

extern "C" void AS60xx_Example_Loop()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
    As6031F1_ErrorFlag errorsToCheck[] = {FW_ERR_MEAS_NOT_OK, FW_ERR_BUBBLE};
 800112a:	4b38      	ldr	r3, [pc, #224]	@ (800120c <AS60xx_Example_Loop+0xe8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	80bb      	strh	r3, [r7, #4]
    uint8_t amountErrorsToCheck = (uint8_t)( sizeof(errorsToCheck) / sizeof(errorsToCheck[0]) );
 8001130:	2302      	movs	r3, #2
 8001132:	71bb      	strb	r3, [r7, #6]

    while( 1 )
    {
        if( !HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) )
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	4836      	ldr	r0, [pc, #216]	@ (8001210 <AS60xx_Example_Loop+0xec>)
 8001138:	f001 fc50 	bl	80029dc <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f3      	beq.n	8001134 <AS60xx_Example_Loop+0x10>
        {
            as6031f1.updateF1();
 800114c:	4831      	ldr	r0, [pc, #196]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 800114e:	f000 fa6f 	bl	8001630 <_ZN8AS6031f18updateF1Ev>
            
            // Print the accumulated flow in cubic meters
            sprintf(messageBuffer, "AccumulatedVolume[m3]:%0.6f\t", as6031f1.getF1VolumeM3());
 8001152:	4830      	ldr	r0, [pc, #192]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 8001154:	f000 fa7a 	bl	800164c <_ZN8AS6031f113getF1VolumeM3Ev>
 8001158:	ee10 3a10 	vmov	r3, s0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9f7 	bl	8000550 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	492c      	ldr	r1, [pc, #176]	@ (8001218 <AS60xx_Example_Loop+0xf4>)
 8001168:	482c      	ldr	r0, [pc, #176]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 800116a:	f005 fdb9 	bl	8006ce0 <siprintf>
            SerialPrint(messageBuffer);
 800116e:	482b      	ldr	r0, [pc, #172]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 8001170:	f000 f85e 	bl	8001230 <_ZL11SerialPrintPKc>
            
            // Print the current flow rate in litres per hour
            sprintf(messageBuffer, "FlowRate[l_per_hr]:%0.3f\t",    as6031f1.getF1InstantFlowLPerHr());
 8001174:	4827      	ldr	r0, [pc, #156]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 8001176:	f000 fa79 	bl	800166c <_ZN8AS6031f122getF1InstantFlowLPerHrEv>
 800117a:	ee10 3a10 	vmov	r3, s0
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9e6 	bl	8000550 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4925      	ldr	r1, [pc, #148]	@ (8001220 <AS60xx_Example_Loop+0xfc>)
 800118a:	4824      	ldr	r0, [pc, #144]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 800118c:	f005 fda8 	bl	8006ce0 <siprintf>
            SerialPrint(messageBuffer);
 8001190:	4822      	ldr	r0, [pc, #136]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 8001192:	f000 f84d 	bl	8001230 <_ZL11SerialPrintPKc>
            
            // Print the temperature in degrees celsius
            sprintf(messageBuffer, "Temperature[degC]:%0.2f\t",     as6031f1.getF1TemperatureDegC());
 8001196:	481f      	ldr	r0, [pc, #124]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 8001198:	f000 fa78 	bl	800168c <_ZN8AS6031f120getF1TemperatureDegCEv>
 800119c:	ee10 3a10 	vmov	r3, s0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9d5 	bl	8000550 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	491e      	ldr	r1, [pc, #120]	@ (8001224 <AS60xx_Example_Loop+0x100>)
 80011ac:	481b      	ldr	r0, [pc, #108]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 80011ae:	f005 fd97 	bl	8006ce0 <siprintf>
            SerialPrint(messageBuffer);
 80011b2:	481a      	ldr	r0, [pc, #104]	@ (800121c <AS60xx_Example_Loop+0xf8>)
 80011b4:	f000 f83c 	bl	8001230 <_ZL11SerialPrintPKc>

            for( uint8_t errorIdx = 0; errorIdx < amountErrorsToCheck; errorIdx++ )
 80011b8:	2300      	movs	r3, #0
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	e01e      	b.n	80011fc <AS60xx_Example_Loop+0xd8>
            {
                if( as6031f1.hasF1ErrorFlag(errorsToCheck[errorIdx]) )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3308      	adds	r3, #8
 80011c2:	443b      	add	r3, r7
 80011c4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4812      	ldr	r0, [pc, #72]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 80011cc:	f000 fa6e 	bl	80016ac <_ZN8AS6031f114hasF1ErrorFlagE18As6031F1_ErrorFlag>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00f      	beq.n	80011f6 <AS60xx_Example_Loop+0xd2>
                {
                    SerialPrint("\tError detected: ");
 80011d6:	4814      	ldr	r0, [pc, #80]	@ (8001228 <AS60xx_Example_Loop+0x104>)
 80011d8:	f000 f82a 	bl	8001230 <_ZL11SerialPrintPKc>
                    SerialPrint( as6031f1.errorF1ToString(errorsToCheck[errorIdx]) );
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	3308      	adds	r3, #8
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80011e6:	4619      	mov	r1, r3
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <AS60xx_Example_Loop+0xf0>)
 80011ea:	f000 fa77 	bl	80016dc <_ZN8AS6031f115errorF1ToStringE18As6031F1_ErrorFlag>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f81d 	bl	8001230 <_ZL11SerialPrintPKc>
            for( uint8_t errorIdx = 0; errorIdx < amountErrorsToCheck; errorIdx++ )
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3301      	adds	r3, #1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3dc      	bcc.n	80011be <AS60xx_Example_Loop+0x9a>
                }
            }
            SerialPrint("\n");
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <AS60xx_Example_Loop+0x108>)
 8001206:	f000 f813 	bl	8001230 <_ZL11SerialPrintPKc>
        }
    }
 800120a:	e793      	b.n	8001134 <AS60xx_Example_Loop+0x10>
 800120c:	0800a530 	.word	0x0800a530
 8001210:	42020800 	.word	0x42020800
 8001214:	20000384 	.word	0x20000384
 8001218:	0800a4c0 	.word	0x0800a4c0
 800121c:	20000270 	.word	0x20000270
 8001220:	0800a4e0 	.word	0x0800a4e0
 8001224:	0800a4fc 	.word	0x0800a4fc
 8001228:	0800a518 	.word	0x0800a518
 800122c:	0800a52c 	.word	0x0800a52c

08001230 <_ZL11SerialPrintPKc>:
}

static Result SerialPrint(const char str[])
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint8_t result = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef stmResult = HAL_UART_Transmit(&huart, (uint8_t*)str, strlen(str), 10);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff f81b 	bl	8000278 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	230a      	movs	r3, #10
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4813      	ldr	r0, [pc, #76]	@ (8001298 <_ZL11SerialPrintPKc+0x68>)
 800124c:	f004 f83a 	bl	80052c4 <HAL_UART_Transmit>
 8001250:	4603      	mov	r3, r0
 8001252:	73bb      	strb	r3, [r7, #14]
               
  switch( stmResult)
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d816      	bhi.n	8001288 <_ZL11SerialPrintPKc+0x58>
 800125a:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <_ZL11SerialPrintPKc+0x30>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	08001277 	.word	0x08001277
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001283 	.word	0x08001283
  {
    case HAL_OK:
      result = RESULT_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
      break;
 8001274:	e00a      	b.n	800128c <_ZL11SerialPrintPKc+0x5c>
    case HAL_ERROR:
      result = RESULT_IO_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
      break;
 800127a:	e007      	b.n	800128c <_ZL11SerialPrintPKc+0x5c>
    case HAL_BUSY:
      result = RESULT_IO_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
      break;
 8001280:	e004      	b.n	800128c <_ZL11SerialPrintPKc+0x5c>
    case HAL_TIMEOUT:
      result = RESULT_TIMEOUT;
 8001282:	2305      	movs	r3, #5
 8001284:	73fb      	strb	r3, [r7, #15]
      break;
 8001286:	e001      	b.n	800128c <_ZL11SerialPrintPKc+0x5c>
    default:
      result = RESULT_INVALID;
 8001288:	2302      	movs	r3, #2
 800128a:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002f0 	.word	0x200002f0

0800129c <_ZN8AS6031f1D1Ev>:
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <_ZN8AS6031f1D1Ev+0x20>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fb39 	bl	8001924 <_ZN6AS60xxD1Ev>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800a928 	.word	0x0800a928

080012c0 <_ZN8AS6031f1D0Ev>:
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffe7 	bl	800129c <_ZN8AS6031f1D1Ev>
 80012ce:	f44f 714c 	mov.w	r1, #816	@ 0x330
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f004 fd1a 	bl	8005d0c <_ZdlPvj>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <_Z41__static_initialization_and_destruction_0v>:
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
static AS6031f1 as6031f1;
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80012ea:	f7ff fec5 	bl	8001078 <_ZN8AS6031f1C1Ev>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000384 	.word	0x20000384

080012f8 <_Z41__static_initialization_and_destruction_1v>:
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
static AS6031f1 as6031f1;
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80012fe:	f7ff ffcd 	bl	800129c <_ZN8AS6031f1D1Ev>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000384 	.word	0x20000384

0800130c <_GLOBAL__sub_I_AS60xx_Example_Setup>:
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
 8001310:	f7ff ffe8 	bl	80012e4 <_Z41__static_initialization_and_destruction_0v>
 8001314:	bd80      	pop	{r7, pc}

08001316 <_GLOBAL__sub_D_AS60xx_Example_Setup>:
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
 800131a:	f7ff ffed 	bl	80012f8 <_Z41__static_initialization_and_destruction_1v>
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>:

    return (Result)write(valuesToWrite, 2);
}

static inline Result As60xx_Write_8_Bit_Address_Register(ScioSense_As60xx* as60xx, uint8_t address, uint32_t dataToWrite)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	460b      	mov	r3, r1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	72fb      	strb	r3, [r7, #11]
    uint8_t opcode = RC_RAA_WR;
 800132e:	235a      	movs	r3, #90	@ 0x5a
 8001330:	75fb      	strb	r3, [r7, #23]
    uint8_t valuesToWrite[6];
    valuesToWrite[0] = opcode;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	743b      	strb	r3, [r7, #16]
    valuesToWrite[1] = address;
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	747b      	strb	r3, [r7, #17]
    valuesToWrite[2] = (uint8_t)(dataToWrite>>24);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0e1b      	lsrs	r3, r3, #24
 800133e:	b2db      	uxtb	r3, r3
 8001340:	74bb      	strb	r3, [r7, #18]
    valuesToWrite[3] = (uint8_t)(dataToWrite>>16);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b2db      	uxtb	r3, r3
 8001348:	74fb      	strb	r3, [r7, #19]
    valuesToWrite[4] = (uint8_t)(dataToWrite>>8);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b2db      	uxtb	r3, r3
 8001350:	753b      	strb	r3, [r7, #20]
    valuesToWrite[5] = (uint8_t)(dataToWrite);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	757b      	strb	r3, [r7, #21]

    return (Result)write(valuesToWrite, 6);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	68d0      	ldr	r0, [r2, #12]
 8001360:	f107 0110 	add.w	r1, r7, #16
 8001364:	2206      	movs	r2, #6
 8001366:	4798      	blx	r3
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>:

    return readValue;
}

static inline uint32_t As60xx_Read_Register_1_Dword(ScioSense_As60xx* as60xx, uint16_t address)
{
 8001372:	b590      	push	{r4, r7, lr}
 8001374:	b089      	sub	sp, #36	@ 0x24
 8001376:	af02      	add	r7, sp, #8
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
    uint8_t dataToWrite[2];
    uint8_t dataRead[4];

    uint8_t opcode = RC_RAA_RD;
 800137e:	237a      	movs	r3, #122	@ 0x7a
 8001380:	75fb      	strb	r3, [r7, #23]
    if( address >= 0x100 )
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	2bff      	cmp	r3, #255	@ 0xff
 8001386:	d904      	bls.n	8001392 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x20>
    {
        // The request is to read from the NVRAM
        opcode  = RC_RAA_RD_NVRAM;
 8001388:	237b      	movs	r3, #123	@ 0x7b
 800138a:	75fb      	strb	r3, [r7, #23]
        address = address & 0x00FF;
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	807b      	strh	r3, [r7, #2]
    }

    dataToWrite[0] = opcode;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	733b      	strb	r3, [r7, #12]
    dataToWrite[1] = (uint8_t)address;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	737b      	strb	r3, [r7, #13]

    Result result = (Result)read(dataToWrite, 2, dataRead, 4);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681c      	ldr	r4, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68d8      	ldr	r0, [r3, #12]
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	f107 010c 	add.w	r1, r7, #12
 80013ac:	2204      	movs	r2, #4
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	2202      	movs	r2, #2
 80013b2:	47a0      	blx	r4
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

    uint32_t readValue = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]

    if ( result == RESULT_OK )
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10a      	bne.n	80013da <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt+0x68>
    {
        readValue = (dataRead[0]<<24) + (dataRead[1]<<16) + (dataRead[2]<<8) + (dataRead[3]);
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	061a      	lsls	r2, r3, #24
 80013c8:	7a7b      	ldrb	r3, [r7, #9]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	441a      	add	r2, r3
 80013ce:	7abb      	ldrb	r3, [r7, #10]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4413      	add	r3, r2
 80013d4:	7afa      	ldrb	r2, [r7, #11]
 80013d6:	4413      	add	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
    }

    return readValue;
 80013da:	693b      	ldr	r3, [r7, #16]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>:

static inline void As60xx_Read_Register_N_Dword(ScioSense_As60xx* as60xx, uint16_t address, uint32_t* outputData, uint16_t amountRegistersToRead)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	817b      	strh	r3, [r7, #10]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 80013f8:	2300      	movs	r3, #0
 80013fa:	82fb      	strh	r3, [r7, #22]
 80013fc:	e00f      	b.n	800141e <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x3a>
    {
        outputData[i] = As60xx_Read_Register_1_Dword(as60xx, address+i);
 80013fe:	897a      	ldrh	r2, [r7, #10]
 8001400:	8afb      	ldrh	r3, [r7, #22]
 8001402:	4413      	add	r3, r2
 8001404:	b299      	uxth	r1, r3
 8001406:	8afb      	ldrh	r3, [r7, #22]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	18d4      	adds	r4, r2, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff ffaf 	bl	8001372 <_ZL28As60xx_Read_Register_1_DwordP16ScioSense_As60xxt>
 8001414:	4603      	mov	r3, r0
 8001416:	6023      	str	r3, [r4, #0]
    for( uint16_t i=0; i<amountRegistersToRead; i++ )
 8001418:	8afb      	ldrh	r3, [r7, #22]
 800141a:	3301      	adds	r3, #1
 800141c:	82fb      	strh	r3, [r7, #22]
 800141e:	8afa      	ldrh	r2, [r7, #22]
 8001420:	893b      	ldrh	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3eb      	bcc.n	80013fe <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt+0x1a>
    }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <_ZL15As6031F1_UpdateP16ScioSense_As60xx>:
        tofValues[idx] = as60xx->FrontendDataBufferUltrasound[AS60XX_FDB_US_TOF_0_D_INDEX + idx];
    }
}

static inline Result As6031F1_Update(ScioSense_As60xx* as6031f1)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    As60xx_Read_Register_N_Dword(as6031f1, AS6031F1_RAM_RAM_R_FLOW_VOLUME_INT, as6031f1->F1AlgorithmOutput, AS6031F1_AMOUNT_OUTPUT_REGISTERS);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 800143e:	2328      	movs	r3, #40	@ 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffce 	bl	80013e4 <_ZL28As60xx_Read_Register_N_DwordP16ScioSense_As60xxtPmt>
    Result result = As60xx_Write_8_Bit_Address_Register(as6031f1, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_IF_CLR_CLEAR | AS60XX_DD_EF_CLR_CLEAR | AS60XX_DD_FES_CLR_CLEAR );
 8001448:	2207      	movs	r2, #7
 800144a:	21dd      	movs	r1, #221	@ 0xdd
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff67 	bl	8001320 <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
    return result;
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZL30As6031F1_Parse_Flow_Volume_IntP16ScioSense_As60xx>:

static inline int32_t As6031F1_Parse_Flow_Volume_Int(ScioSense_As60xx* as60xx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
    return (int32_t)(as60xx->F1AlgorithmOutput[AS6031F1_VOLUME_INT_INDEX]);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZL31As6031F1_Parse_Flow_Volume_FracP16ScioSense_As60xx>:

static inline uint32_t As6031F1_Parse_Flow_Volume_Frac(ScioSense_As60xx* as60xx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    return as60xx->F1AlgorithmOutput[AS6031F1_VOLUME_FRAC_INDEX];
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_ZL29As6031F1_Parse_Flow_Volume_M3P16ScioSense_As60xx>:

static inline float As6031F1_Parse_Flow_Volume_M3(ScioSense_As60xx* as60xx)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    float flowIntegerPartM3 = (float)As6031F1_Parse_Flow_Volume_Int(as60xx);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffde 	bl	8001462 <_ZL30As6031F1_Parse_Flow_Volume_IntP16ScioSense_As60xx>
 80014a6:	ee07 0a90 	vmov	s15, r0
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	edc7 7a04 	vstr	s15, [r7, #16]
    float flowFracPartM3 = (float)As6031F1_Parse_Flow_Volume_Frac(as60xx);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffe2 	bl	800147c <_ZL31As6031F1_Parse_Flow_Volume_FracP16ScioSense_As60xx>
 80014b8:	ee07 0a90 	vmov	s15, r0
 80014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c0:	edc7 7a03 	vstr	s15, [r7, #12]
    float flowVolumeM3 = flowIntegerPartM3 + flowFracPartM3 / AS6031F1_FD32_DIVIDER_FLOAT;
 80014c4:	6938      	ldr	r0, [r7, #16]
 80014c6:	f7ff f843 	bl	8000550 <__aeabi_f2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff f83e 	bl	8000550 <__aeabi_f2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_ZL29As6031F1_Parse_Flow_Volume_M3P16ScioSense_As60xx+0x88>)
 80014da:	f7ff f9bb 	bl	8000854 <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe fed5 	bl	8000294 <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb7d 	bl	8000bf0 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	617b      	str	r3, [r7, #20]
    if( flowVolumeM3 < 0 )
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	d502      	bpl.n	800150e <_ZL29As6031F1_Parse_Flow_Volume_M3P16ScioSense_As60xx+0x76>
    {
        flowVolumeM3 = 0;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
    }
    return flowVolumeM3;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	bf00      	nop
 8001520:	41f00000 	.word	0x41f00000

08001524 <_ZL37As6031F1_Parse_Flow_Rate_Filtered_RawP16ScioSense_As60xx>:
    }
    return flowRateLPerH;
}

static inline int32_t As6031F1_Parse_Flow_Rate_Filtered_Raw(ScioSense_As60xx* as60xx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    return (int32_t)(as60xx->F1AlgorithmOutput[AS6031F1_FILTERED_FLOW_LPH_INDEX]);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_ZL42As6031F1_Parse_Flow_Rate_Filtered_L_Per_HrP16ScioSense_As60xx>:

static inline float As6031F1_Parse_Flow_Rate_Filtered_L_Per_Hr(ScioSense_As60xx* as60xx)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    float flowRateLPerH = ((float)As6031F1_Parse_Flow_Rate_Filtered_Raw(as60xx)) / AS6031F1_FD16_DIVIDER_FLOAT;
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffeb 	bl	8001524 <_ZL37As6031F1_Parse_Flow_Rate_Filtered_RawP16ScioSense_As60xx>
 800154e:	ee07 0a90 	vmov	s15, r0
 8001552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fff9 	bl	8000550 <__aeabi_f2d>
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <_ZL42As6031F1_Parse_Flow_Rate_Filtered_L_Per_HrP16ScioSense_As60xx+0x5c>)
 8001564:	f7ff f976 	bl	8000854 <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb3e 	bl	8000bf0 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]
    if( flowRateLPerH < 0 )
 8001578:	edd7 7a03 	vldr	s15, [r7, #12]
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	d502      	bpl.n	800158c <_ZL42As6031F1_Parse_Flow_Rate_Filtered_L_Per_HrP16ScioSense_As60xx+0x4c>
    {
        flowRateLPerH = 0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
    }
    return flowRateLPerH;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ee07 3a90 	vmov	s15, r3
}
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40f00000 	.word	0x40f00000

080015a0 <_ZL30As6031F1_Parse_Temperature_RawP16ScioSense_As60xx>:

static inline uint32_t As6031F1_Parse_Temperature_Raw(ScioSense_As60xx* as60xx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    return as60xx->F1AlgorithmOutput[AS6031F1_TEMPERATURE_INDEX];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_ZL32As6031F1_Parse_Temperature_Deg_CP16ScioSense_As60xx>:

static inline float As6031F1_Parse_Temperature_Deg_C(ScioSense_As60xx* as60xx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    return ( ((float)As6031F1_Parse_Temperature_Raw(as60xx)) / AS6031F1_FD16_DIVIDER_FLOAT );
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffeb 	bl	80015a0 <_ZL30As6031F1_Parse_Temperature_RawP16ScioSense_As60xx>
 80015ca:	ee07 0a90 	vmov	s15, r0
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ffbb 	bl	8000550 <__aeabi_f2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_ZL32As6031F1_Parse_Temperature_Deg_CP16ScioSense_As60xx+0x44>)
 80015e0:	f7ff f938 	bl	8000854 <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fb00 	bl	8000bf0 <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	ee07 3a90 	vmov	s15, r3
}
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40f00000 	.word	0x40f00000

08001604 <_ZL21As6031F1_HasErrorFlagP16ScioSense_As60xx18As6031F1_ErrorFlag>:
    index = index % AS6031F1_AMOUNT_OUTPUT_REGISTERS;
    return as60xx->F1AlgorithmOutput[index];
}

static inline uint8_t As6031F1_HasErrorFlag(ScioSense_As60xx* as60xx, As6031F1_ErrorFlag errorFlag)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
    return (as60xx->F1AlgorithmOutput[AS6031F1_ERROR_FLAGS_INDEX]  >> errorFlag ) & 1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN8AS6031f18updateF1Ev>:
    "FWU checksum error",
    "FWA checksum error"
};

Result AS6031f1::updateF1()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    return As6031F1_Update(this);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3304      	adds	r3, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fef7 	bl	8001430 <_ZL15As6031F1_UpdateP16ScioSense_As60xx>
 8001642:	4603      	mov	r3, r0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN8AS6031f113getF1VolumeM3Ev>:
{
    return As6031F1_Parse_Error_Flags(this);
}

float AS6031f1::getF1VolumeM3()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    return As6031F1_Parse_Flow_Volume_M3(this);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3304      	adds	r3, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff1d 	bl	8001498 <_ZL29As6031F1_Parse_Flow_Volume_M3P16ScioSense_As60xx>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZN8AS6031f122getF1InstantFlowLPerHrEv>:

float AS6031f1::getF1InstantFlowLPerHr()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    return As6031F1_Parse_Flow_Rate_Filtered_L_Per_Hr(this);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff61 	bl	8001540 <_ZL42As6031F1_Parse_Flow_Rate_Filtered_L_Per_HrP16ScioSense_As60xx>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_ZN8AS6031f120getF1TemperatureDegCEv>:

float AS6031f1::getF1TemperatureDegC()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    return As6031F1_Parse_Temperature_Deg_C(this);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff8f 	bl	80015bc <_ZL32As6031F1_Parse_Temperature_Deg_CP16ScioSense_As60xx>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_ZN8AS6031f114hasF1ErrorFlagE18As6031F1_ErrorFlag>:

bool AS6031f1::hasF1ErrorFlag(As6031F1_ErrorFlag errorFlag)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
    
    return (bool)As6031F1_HasErrorFlag(this, errorFlag);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff9f 	bl	8001604 <_ZL21As6031F1_HasErrorFlagP16ScioSense_As60xx18As6031F1_ErrorFlag>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <_ZN8AS6031f115errorF1ToStringE18As6031F1_ErrorFlag>:

const char* AS6031f1::errorF1ToString(As6031F1_ErrorFlag errorFlag)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
    return as6031F1_ErrorNames[(uint8_t)errorFlag];
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <_ZN8AS6031f115errorF1ToStringE18As6031F1_ErrorFlag+0x20>)
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000

08001700 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>:
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
    valuesToWrite[0] = opcode;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	733b      	strb	r3, [r7, #12]
    return (Result)write(&valuesToWrite, 1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68d0      	ldr	r0, [r2, #12]
 8001718:	f107 010c 	add.w	r1, r7, #12
 800171c:	2201      	movs	r2, #1
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>:
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	460b      	mov	r3, r1
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	72fb      	strb	r3, [r7, #11]
    uint8_t opcode = RC_RAA_WR;
 8001738:	235a      	movs	r3, #90	@ 0x5a
 800173a:	75fb      	strb	r3, [r7, #23]
    valuesToWrite[0] = opcode;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	743b      	strb	r3, [r7, #16]
    valuesToWrite[1] = address;
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	747b      	strb	r3, [r7, #17]
    valuesToWrite[2] = (uint8_t)(dataToWrite>>24);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0e1b      	lsrs	r3, r3, #24
 8001748:	b2db      	uxtb	r3, r3
 800174a:	74bb      	strb	r3, [r7, #18]
    valuesToWrite[3] = (uint8_t)(dataToWrite>>16);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0c1b      	lsrs	r3, r3, #16
 8001750:	b2db      	uxtb	r3, r3
 8001752:	74fb      	strb	r3, [r7, #19]
    valuesToWrite[4] = (uint8_t)(dataToWrite>>8);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	b2db      	uxtb	r3, r3
 800175a:	753b      	strb	r3, [r7, #20]
    valuesToWrite[5] = (uint8_t)(dataToWrite);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	757b      	strb	r3, [r7, #21]
    return (Result)write(valuesToWrite, 6);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	68d0      	ldr	r0, [r2, #12]
 800176a:	f107 0110 	add.w	r1, r7, #16
 800176e:	2206      	movs	r2, #6
 8001770:	4798      	blx	r3
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>:
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b087      	sub	sp, #28
 8001780:	af02      	add	r7, sp, #8
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
    dataToWrite[0] = opcode;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	733b      	strb	r3, [r7, #12]
    Result result = (Result)read(dataToWrite, 1, dataRead, 1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68d8      	ldr	r0, [r3, #12]
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	f107 010c 	add.w	r1, r7, #12
 800179c:	2201      	movs	r2, #1
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	47a0      	blx	r4
 80017a4:	4603      	mov	r3, r0
 80017a6:	73bb      	strb	r3, [r7, #14]
    uint8_t readValue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
    if ( result == RESULT_OK )
 80017ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh+0x3c>
        readValue = dataRead[0];
 80017b4:	7a3b      	ldrb	r3, [r7, #8]
 80017b6:	73fb      	strb	r3, [r7, #15]
    return readValue;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}

080017c2 <_ZL12As60xx_ResetP16ScioSense_As60xx>:
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
    Result result = RESULT_IO_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
    As60xx_Write_Opcode(as60xx, RC_BM_REQ);
 80017ce:	2188      	movs	r1, #136	@ 0x88
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff95 	bl	8001700 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2019      	movs	r0, #25
 80017dc:	4798      	blx	r3
    As60xx_Write_Opcode(as60xx, RC_SYS_RST);
 80017de:	2199      	movs	r1, #153	@ 0x99
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff8d 	bl	8001700 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(25);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2019      	movs	r0, #25
 80017ec:	4798      	blx	r3
    As60xx_Write_8_Bit_Address_Register(as60xx, AS60XX_SHR_EXC_ADDRESS, AS60XX_DD_IF_CLR_CLEAR | AS60XX_DD_EF_CLR_CLEAR );
 80017ee:	2203      	movs	r2, #3
 80017f0:	21dd      	movs	r1, #221	@ 0xdd
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff99 	bl	800172a <_ZL35As60xx_Write_8_Bit_Address_RegisterP16ScioSense_As60xxhm>
    wait(25);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2019      	movs	r0, #25
 80017fe:	4798      	blx	r3
    As60xx_Write_Opcode(as60xx, RC_BM_RLS);
 8001800:	2187      	movs	r1, #135	@ 0x87
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff7c 	bl	8001700 <_ZL19As60xx_Write_OpcodeP16ScioSense_As60xxh>
    wait(AS60XX_BOOTUP_COMM_RELEASE_TIME_MAX_MS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	205e      	movs	r0, #94	@ 0x5e
 800180e:	4798      	blx	r3
    uint8_t sysStatus = As60xx_Read_1_Byte(as60xx, RC_RD_STATUS);
 8001810:	218f      	movs	r1, #143	@ 0x8f
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffb2 	bl	800177c <_ZL18As60xx_Read_1_ByteP16ScioSense_As60xxh>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]
    if( sysStatus & AS60XX_SYS_STATUS_RST_FLAG_Msk )
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <_ZL12As60xx_ResetP16ScioSense_As60xx+0x70>
        as60xx->State = AS60XX_STATE_RESET;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        result = RESULT_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
    return result;
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZL18As60xx_isConnectedP16ScioSense_As60xx>:
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
    return (as60xx->State != AS60XX_STATE_NOT_CONNECTED);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 800184c:	2bff      	cmp	r3, #255	@ 0xff
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_ZL25ScioSense_STM32_Spi_WritePvPht>:
    uint16_t            cs_pin;
    GPIO_TypeDef*       port;
} ScioSense_Stm32_Spi_Config;

static inline int8_t ScioSense_STM32_Spi_Write(void* config, uint8_t* data, const uint16_t size)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b088      	sub	sp, #32
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	4613      	mov	r3, r2
 800186e:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	889b      	ldrh	r3, [r3, #4]
 800187a:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	617b      	str	r3, [r7, #20]

    /* 1. Put CN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 8001882:	8b7b      	ldrh	r3, [r7, #26]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	6978      	ldr	r0, [r7, #20]
 800188a:	f001 f8bf 	bl	8002a0c <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, data, size, STM32_SPI_TIMEOUT_MS);
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	230a      	movs	r3, #10
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	69f8      	ldr	r0, [r7, #28]
 8001896:	f002 fecd 	bl	8004634 <HAL_SPI_Transmit>
    
    /* 3. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 800189a:	8b7b      	ldrh	r3, [r7, #26]
 800189c:	2201      	movs	r2, #1
 800189e:	4619      	mov	r1, r3
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f001 f8b3 	bl	8002a0c <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZL24ScioSense_STM32_Spi_ReadPvPhtS0_t>:

static inline int8_t ScioSense_STM32_Spi_Read(void* config, uint8_t* dataToWrite, const uint16_t sizeToWrite, uint8_t* dataToRead, const uint16_t sizeToRead)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	80fb      	strh	r3, [r7, #6]
    SPI_HandleTypeDef*  spi     = ((ScioSense_Stm32_Spi_Config*)config)->spi;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61fb      	str	r3, [r7, #28]
    uint16_t            cs_pin  = ((ScioSense_Stm32_Spi_Config*)config)->cs_pin;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	889b      	ldrh	r3, [r3, #4]
 80018ca:	837b      	strh	r3, [r7, #26]
    GPIO_TypeDef*       port    = ((ScioSense_Stm32_Spi_Config*)config)->port;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	617b      	str	r3, [r7, #20]

    /* 1. Put SSN low - Activate */
    HAL_GPIO_WritePin(port, cs_pin, SET_LOW);
 80018d2:	8b7b      	ldrh	r3, [r7, #26]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f001 f897 	bl	8002a0c <HAL_GPIO_WritePin>
    
    /* 2. Transmit register address */
    HAL_SPI_Transmit(spi, dataToWrite, sizeToWrite, STM32_SPI_TIMEOUT_MS);
 80018de:	88fa      	ldrh	r2, [r7, #6]
 80018e0:	230a      	movs	r3, #10
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	69f8      	ldr	r0, [r7, #28]
 80018e6:	f002 fea5 	bl	8004634 <HAL_SPI_Transmit>

    /* 3. Read the data */
    HAL_SPI_Receive(spi, dataToRead, sizeToRead, STM32_SPI_TIMEOUT_MS);
 80018ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80018ec:	230a      	movs	r3, #10
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	69f8      	ldr	r0, [r7, #28]
 80018f2:	f003 f8a1 	bl	8004a38 <HAL_SPI_Receive>
    
    /* 4. Put SSN high - Deactivate */
    HAL_GPIO_WritePin(port, cs_pin, SET_HIGH);
 80018f6:	8b7b      	ldrh	r3, [r7, #26]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	6978      	ldr	r0, [r7, #20]
 80018fe:	f001 f885 	bl	8002a0c <HAL_GPIO_WritePin>

    return 0; // RESULT_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZL20ScioSense_STM32_Waitm>:

static inline void ScioSense_STM32_Wait(uint32_t ms)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fd85 	bl	8002424 <HAL_Delay>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <_ZN6AS60xxD1Ev>:
    "NVM error in FWDU area",
    "NVM error in any FWA area",
    "CPU error"
};

AS60xx::~AS60xx() { }
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <_ZN6AS60xxD1Ev+0x1c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	0800a940 	.word	0x0800a940

08001944 <_ZN6AS60xxD0Ev>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe9 	bl	8001924 <_ZN6AS60xxD1Ev>
 8001952:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 f9d8 	bl	8005d0c <_ZdlPvj>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <_ZN6AS60xxC1Ev>:

AS60xx::AS60xx()
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4a06      	ldr	r2, [pc, #24]	@ (800198c <_ZN6AS60xxC1Ev+0x24>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
{
    State   = AS60XX_STATE_NOT_CONNECTED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	22ff      	movs	r2, #255	@ 0xff
 800197a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
}
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	0800a940 	.word	0x0800a940

08001990 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

void AS60xx::begin(SPI_HandleTypeDef* spi, uint16_t cs_pin, GPIO_TypeDef* port)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	80fb      	strh	r3, [r7, #6]
    spiConfig               = { 0 };
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
    spiConfig.spi           = spi;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
    spiConfig.cs_pin        = cs_pin;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	f8a3 2328 	strh.w	r2, [r3, #808]	@ 0x328
    spiConfig.port          = port;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c

    io.read    = ScioSense_STM32_Spi_Read;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x60>)
 80019ca:	605a      	str	r2, [r3, #4]
    io.write   = ScioSense_STM32_Spi_Write;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x64>)
 80019d0:	609a      	str	r2, [r3, #8]
    io.wait    = ScioSense_STM32_Wait;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <_ZN6AS60xx5beginEP19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x68>)
 80019d6:	60da      	str	r2, [r3, #12]
    io.config  = &spiConfig;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	611a      	str	r2, [r3, #16]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	080018b1 	.word	0x080018b1
 80019f4:	08001863 	.word	0x08001863
 80019f8:	0800190d 	.word	0x0800190d

080019fc <_ZN6AS60xx5resetEv>:

Result AS60xx::reset()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    return As60xx_Reset(this);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff feda 	bl	80017c2 <_ZL12As60xx_ResetP16ScioSense_As60xx>
 8001a0e:	4603      	mov	r3, r0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZN6AS60xx11isConnectedEv>:

    return isConnected();
}

bool AS60xx::isConnected()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    return (bool)As60xx_isConnected(this);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff0a 	bl	800183e <_ZL18As60xx_isConnectedP16ScioSense_As60xx>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f000 fc30 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f814 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f000 f92e 	bl	8001cac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a50:	f000 f870 	bl	8001b34 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a54:	f000 f8de 	bl	8001c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AS60xx_Example_Setup(&huart1, &hspi1);
 8001a58:	4904      	ldr	r1, [pc, #16]	@ (8001a6c <main+0x2c>)
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <main+0x30>)
 8001a5c:	f7ff fb1e 	bl	800109c <AS60xx_Example_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      AS60xx_Example_Loop(&huart1, &hspi1);
 8001a60:	4902      	ldr	r1, [pc, #8]	@ (8001a6c <main+0x2c>)
 8001a62:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <main+0x30>)
 8001a64:	f7ff fb5e 	bl	8001124 <AS60xx_Example_Loop>
 8001a68:	e7fa      	b.n	8001a60 <main+0x20>
 8001a6a:	bf00      	nop
 8001a6c:	200006b4 	.word	0x200006b4
 8001a70:	20000744 	.word	0x20000744

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	@ 0x50
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	2238      	movs	r2, #56	@ 0x38
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 f991 	bl	8006daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f002 fc96 	bl	80043cc <HAL_RCCEx_EpodBoosterClkConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001aa6:	f000 f97d 	bl	8001da4 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8001aaa:	f001 f805 	bl	8002ab8 <HAL_PWREx_EnableEpodBooster>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001ab4:	f000 f976 	bl	8001da4 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 ffbf 	bl	8002a3c <HAL_PWREx_ControlVoltageScaling>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001ac4:	f000 f96e 	bl	8001da4 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <SystemClock_Config+0xbc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <SystemClock_Config+0xbc>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f80f 	bl	8002b10 <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001af8:	f000 f954 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	231f      	movs	r3, #31
 8001afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fb4f 	bl	80031bc <HAL_RCC_ClockConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b24:	f000 f93e 	bl	8001da4 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3750      	adds	r7, #80	@ 0x50
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000

08001b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b44:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b46:	4a32      	ldr	r2, [pc, #200]	@ (8001c10 <MX_SPI1_Init+0xdc>)
 8001b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b4a:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b52:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b58:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b64:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b76:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd0:	480e      	ldr	r0, [pc, #56]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bd2:	f002 fc3f 	bl	8004454 <HAL_SPI_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8001bdc:	f000 f8e2 	bl	8001da4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001be4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <MX_SPI1_Init+0xd8>)
 8001bf4:	f003 fad5 	bl	80051a2 <HAL_SPIEx_SetConfigAutonomousMode>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8001bfe:	f000 f8d1 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200006b4 	.word	0x200006b4
 8001c10:	40013000 	.word	0x40013000

08001c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <MX_USART1_UART_Init+0x94>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c20:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5c:	4811      	ldr	r0, [pc, #68]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c5e:	f003 fae1 	bl	8005224 <HAL_UART_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c68:	f000 f89c 	bl	8001da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	480d      	ldr	r0, [pc, #52]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c70:	f003 ff82 	bl	8005b78 <HAL_UARTEx_SetTxFifoThreshold>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c7a:	f000 f893 	bl	8001da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c82:	f003 ffb7 	bl	8005bf4 <HAL_UARTEx_SetRxFifoThreshold>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c8c:	f000 f88a 	bl	8001da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <MX_USART1_UART_Init+0x90>)
 8001c92:	f003 ff38 	bl	8005b06 <HAL_UARTEx_DisableFifoMode>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c9c:	f000 f882 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000744 	.word	0x20000744
 8001ca8:	40013800 	.word	0x40013800

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc8:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <MX_GPIO_Init+0xec>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d22:	481e      	ldr	r0, [pc, #120]	@ (8001d9c <MX_GPIO_Init+0xf0>)
 8001d24:	f000 fe72 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTN_Pin */
  GPIO_InitStruct.Pin = INTN_Pin;
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTN_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4818      	ldr	r0, [pc, #96]	@ (8001d9c <MX_GPIO_Init+0xf0>)
 8001d3c:	f000 fcc4 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8001d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <MX_GPIO_Init+0xf0>)
 8001d56:	f000 fcb7 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 8001d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	480a      	ldr	r0, [pc, #40]	@ (8001d9c <MX_GPIO_Init+0xf0>)
 8001d74:	f000 fca8 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO5_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO5_Pin|GPIO4_Pin;
 8001d78:	2330      	movs	r3, #48	@ 0x30
 8001d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_GPIO_Init+0xf4>)
 8001d8c:	f000 fc9c 	bl	80026c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40030c00 	.word	0x40030c00
 8001d9c:	42020800 	.word	0x42020800
 8001da0:	42020400 	.word	0x42020400

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <Error_Handler+0x8>

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_MspInit+0x30>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbc:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_MspInit+0x30>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_MspInit+0x30>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40030c00 	.word	0x40030c00

08001de4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0a8      	sub	sp, #160	@ 0xa0
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2278      	movs	r2, #120	@ 0x78
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 ffd0 	bl	8006daa <memset>
  if(hspi->Instance==SPI1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <HAL_SPI_MspInit+0xbc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d141      	bne.n	8001e98 <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fb8a 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e2e:	f7ff ffb9 	bl	8001da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e3e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e56:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_SPI_MspInit+0xc0>)
 8001e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8001e6e:	23e0      	movs	r3, #224	@ 0xe0
 8001e70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e86:	2305      	movs	r3, #5
 8001e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <HAL_SPI_MspInit+0xc4>)
 8001e94:	f000 fc18 	bl	80026c8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e98:	bf00      	nop
 8001e9a:	37a0      	adds	r7, #160	@ 0xa0
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40030c00 	.word	0x40030c00
 8001ea8:	42020000 	.word	0x42020000

08001eac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0a8      	sub	sp, #160	@ 0xa0
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2278      	movs	r2, #120	@ 0x78
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 ff6c 	bl	8006daa <memset>
  if(huart->Instance==USART1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_UART_MspInit+0xbc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d141      	bne.n	8001f60 <HAL_UART_MspInit+0xb4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 fb27 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff ff56 	bl	8001da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f04:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f1c:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001f34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <HAL_UART_MspInit+0xc4>)
 8001f5c:	f000 fbb4 	bl	80026c8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f60:	bf00      	nop
 8001f62:	37a0      	adds	r7, #160	@ 0xa0
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40030c00 	.word	0x40030c00
 8001f70:	42020000 	.word	0x42020000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <NMI_Handler+0x4>

08001f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fca:	f000 fa0b 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_kill>:

int _kill(int pid, int sig)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fec:	f004 ff40 	bl	8006e70 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2216      	movs	r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_exit>:

void _exit (int status)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200a:	f04f 31ff 	mov.w	r1, #4294967295
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe7 	bl	8001fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <_exit+0x12>

08002018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e009      	b.n	8002078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf1      	blt.n	8002064 <_write+0x12>
  }
  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_close>:

int _close(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b2:	605a      	str	r2, [r3, #4]
  return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f004 fea4 	bl	8006e70 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20030000 	.word	0x20030000
 8002154:	00000400 	.word	0x00000400
 8002158:	200007d8 	.word	0x200007d8
 800215c:	20000930 	.word	0x20000930

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <SystemCoreClockUpdate+0xb8>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d034      	beq.n	8002200 <SystemCoreClockUpdate+0x7c>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d836      	bhi.n	8002208 <SystemCoreClockUpdate+0x84>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <SystemCoreClockUpdate+0x20>
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d02a      	beq.n	80021f8 <SystemCoreClockUpdate+0x74>
 80021a2:	e031      	b.n	8002208 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 80021a4:	4b25      	ldr	r3, [pc, #148]	@ (800223c <SystemCoreClockUpdate+0xb8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00f      	beq.n	80021d4 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da03      	bge.n	80021c2 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021bc:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <SystemCoreClockUpdate+0xc0>)
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e002      	b.n	80021c8 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021c4:	4a20      	ldr	r2, [pc, #128]	@ (8002248 <SystemCoreClockUpdate+0xc4>)
 80021c6:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	0f5b      	lsrs	r3, r3, #29
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	e009      	b.n	80021e8 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <SystemCoreClockUpdate+0xc0>)
 80021d8:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <SystemCoreClockUpdate+0xb8>)
 80021dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80021e0:	0b1b      	lsrs	r3, r3, #12
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 80021e8:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021f4:	6013      	str	r3, [r2, #0]
    break;
 80021f6:	e00c      	b.n	8002212 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 80021fa:	4a14      	ldr	r2, [pc, #80]	@ (800224c <SystemCoreClockUpdate+0xc8>)
 80021fc:	601a      	str	r2, [r3, #0]
    break;
 80021fe:	e008      	b.n	8002212 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8002200:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <SystemCoreClockUpdate+0xc8>)
 8002204:	601a      	str	r2, [r3, #0]
    break;
 8002206:	e004      	b.n	8002212 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8002208:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	601a      	str	r2, [r3, #0]
    break;
 8002210:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <SystemCoreClockUpdate+0xb8>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <SystemCoreClockUpdate+0xcc>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002220:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <SystemCoreClockUpdate+0xbc>)
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40030c00 	.word	0x40030c00
 8002240:	20000080 	.word	0x20000080
 8002244:	016e3600 	.word	0x016e3600
 8002248:	05b8d800 	.word	0x05b8d800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	0800a950 	.word	0x0800a950

08002254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800228c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002258:	f7ff ff82 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800225c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800225e:	e003      	b.n	8002268 <LoopCopyDataInit>

08002260 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002262:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002264:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002266:	3104      	adds	r1, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002268:	480a      	ldr	r0, [pc, #40]	@ (8002294 <LoopForever+0xa>)
	ldr	r3, =_edata
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <LoopForever+0xe>)
	adds	r2, r0, r1
 800226c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800226e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002270:	d3f6      	bcc.n	8002260 <CopyDataInit>
	ldr	r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002274:	e002      	b.n	800227c <LoopFillZerobss>

08002276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002276:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002278:	f842 3b04 	str.w	r3, [r2], #4

0800227c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <LoopForever+0x16>)
	cmp	r2, r3
 800227e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002280:	d3f9      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002282:	f004 fdfb 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002286:	f7ff fbdb 	bl	8001a40 <main>

0800228a <LoopForever>:

LoopForever:
    b LoopForever
 800228a:	e7fe      	b.n	800228a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800228c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002290:	0800add4 	.word	0x0800add4
	ldr	r0, =_sdata
 8002294:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002298:	20000254 	.word	0x20000254
	ldr	r2, =_sbss
 800229c:	20000254 	.word	0x20000254
	ldr	r3, = _ebss
 80022a0:	2000092c 	.word	0x2000092c

080022a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <HAL_Init+0x3c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <HAL_Init+0x3c>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f966 	bl	800258a <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80022be:	f7ff ff61 	bl	8002184 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80022c2:	2004      	movs	r0, #4
 80022c4:	f000 f9a8 	bl	8002618 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c8:	200f      	movs	r0, #15
 80022ca:	f000 f80d 	bl	80022e8 <HAL_InitTick>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e002      	b.n	80022de <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff fd6a 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80022f4:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_InitTick+0xe8>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e062      	b.n	80023c6 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_InitTick+0xec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d10c      	bne.n	8002326 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800230c:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <HAL_InitTick+0xf0>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <HAL_InitTick+0xe8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e03d      	b.n	80023a2 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8002326:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_InitTick+0xf4>)
 8002328:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800232c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002330:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002338:	d025      	beq.n	8002386 <HAL_InitTick+0x9e>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002340:	d82e      	bhi.n	80023a0 <HAL_InitTick+0xb8>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_InitTick+0x6a>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800234e:	d00d      	beq.n	800236c <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8002350:	e026      	b.n	80023a0 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_InitTick+0xf0>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <HAL_InitTick+0xe8>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002360:	fbb3 f3f1 	udiv	r3, r3, r1
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	60fb      	str	r3, [r7, #12]
        break;
 800236a:	e01a      	b.n	80023a2 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_InitTick+0xe8>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002376:	fbb3 f3f2 	udiv	r3, r3, r2
 800237a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	60fb      	str	r3, [r7, #12]
        break;
 8002384:	e00d      	b.n	80023a2 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_InitTick+0xe8>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002390:	fbb3 f3f2 	udiv	r3, r3, r2
 8002394:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	60fb      	str	r3, [r7, #12]
        break;
 800239e:	e000      	b.n	80023a2 <HAL_InitTick+0xba>
        break;
 80023a0:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f916 	bl	80025d4 <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e009      	b.n	80023c6 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b2:	2200      	movs	r2, #0
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	f000 f8f1 	bl	80025a0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <HAL_InitTick+0xf8>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000088 	.word	0x20000088
 80023d4:	e000e010 	.word	0xe000e010
 80023d8:	20000080 	.word	0x20000080
 80023dc:	40030c00 	.word	0x40030c00
 80023e0:	20000084 	.word	0x20000084

080023e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000088 	.word	0x20000088
 8002408:	200007dc 	.word	0x200007dc

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200007dc 	.word	0x200007dc

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000088 	.word	0x20000088

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff6a 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ae:	f7ff ff81 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025b2:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7ff ffb3 	bl	8002524 <NVIC_EncodePriority>
 80025be:	4602      	mov	r2, r0
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff82 	bl	80024d0 <__NVIC_SetPriority>
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e4:	d301      	bcc.n	80025ea <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00d      	b.n	8002606 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_SYSTICK_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_SYSTICK_Config+0x40>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_SYSTICK_Config+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <HAL_SYSTICK_Config+0x40>)
 80025fe:	f043 0303 	orr.w	r3, r3, #3
 8002602:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d844      	bhi.n	80026b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002626:	a201      	add	r2, pc, #4	@ (adr r2, 800262c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	0800264f 	.word	0x0800264f
 8002630:	0800266d 	.word	0x0800266d
 8002634:	0800268f 	.word	0x0800268f
 8002638:	080026b1 	.word	0x080026b1
 800263c:	08002641 	.word	0x08002641
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1e      	ldr	r2, [pc, #120]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6013      	str	r3, [r2, #0]
      break;
 800264c:	e031      	b.n	80026b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800265c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002662:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002666:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800266a:	e022      	b.n	80026b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800266c:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800267a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800267e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002688:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800268c:	e011      	b.n	80026b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800269c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80026a0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80026a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026aa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80026ae:	e000      	b.n	80026b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80026b0:	bf00      	nop
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010
 80026c4:	40030c00 	.word	0x40030c00

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026d6:	e162      	b.n	800299e <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8154 	beq.w	8002998 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d005      	beq.n	8002708 <HAL_GPIO_Init+0x40>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d130      	bne.n	800276a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800273e:	2201      	movs	r2, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0201 	and.w	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b03      	cmp	r3, #3
 8002774:	d109      	bne.n	800278a <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 800277e:	2b03      	cmp	r3, #3
 8002780:	d11b      	bne.n	80027ba <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d017      	beq.n	80027ba <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d123      	bne.n	800280e <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	08da      	lsrs	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3208      	adds	r2, #8
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a4 	beq.w	8002998 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002850:	4a5a      	ldr	r2, [pc, #360]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3318      	adds	r3, #24
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a52      	ldr	r2, [pc, #328]	@ (80029c0 <HAL_GPIO_Init+0x2f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d025      	beq.n	80028c8 <HAL_GPIO_Init+0x200>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a51      	ldr	r2, [pc, #324]	@ (80029c4 <HAL_GPIO_Init+0x2fc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01f      	beq.n	80028c4 <HAL_GPIO_Init+0x1fc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a50      	ldr	r2, [pc, #320]	@ (80029c8 <HAL_GPIO_Init+0x300>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d019      	beq.n	80028c0 <HAL_GPIO_Init+0x1f8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a4f      	ldr	r2, [pc, #316]	@ (80029cc <HAL_GPIO_Init+0x304>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_GPIO_Init+0x1f4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a4e      	ldr	r2, [pc, #312]	@ (80029d0 <HAL_GPIO_Init+0x308>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00d      	beq.n	80028b8 <HAL_GPIO_Init+0x1f0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a4d      	ldr	r2, [pc, #308]	@ (80029d4 <HAL_GPIO_Init+0x30c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <HAL_GPIO_Init+0x1ec>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a4c      	ldr	r2, [pc, #304]	@ (80029d8 <HAL_GPIO_Init+0x310>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_GPIO_Init+0x1e8>
 80028ac:	2307      	movs	r3, #7
 80028ae:	e00c      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028b0:	2310      	movs	r3, #16
 80028b2:	e00a      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028b4:	2306      	movs	r3, #6
 80028b6:	e008      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028b8:	2304      	movs	r3, #4
 80028ba:	e006      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028bc:	2303      	movs	r3, #3
 80028be:	e004      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e002      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_GPIO_Init+0x202>
 80028c8:	2300      	movs	r3, #0
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	f002 0203 	and.w	r2, r2, #3
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	4093      	lsls	r3, r2
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80028da:	4938      	ldr	r1, [pc, #224]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3318      	adds	r3, #24
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028e8:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 80028ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800290e:	4a2b      	ldr	r2, [pc, #172]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002916:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800293c:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002944:	4b1d      	ldr	r3, [pc, #116]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800296e:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f47f ae95 	bne.w	80026d8 <HAL_GPIO_Init+0x10>
  }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40032000 	.word	0x40032000
 80029c0:	42020000 	.word	0x42020000
 80029c4:	42020400 	.word	0x42020400
 80029c8:	42020800 	.word	0x42020800
 80029cc:	42020c00 	.word	0x42020c00
 80029d0:	42021000 	.word	0x42021000
 80029d4:	42021800 	.word	0x42021800
 80029d8:	42021c00 	.word	0x42021c00

080029dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e001      	b.n	80029fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8002a56:	4a15      	ldr	r2, [pc, #84]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2232      	movs	r2, #50	@ 0x32
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002a78:	e002      	b.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d002      	beq.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x58>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f2      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e000      	b.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40030800 	.word	0x40030800
 8002ab0:	20000080 	.word	0x20000080
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac8:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002aca:	f7ff fc9f 	bl	800240c <HAL_GetTick>
 8002ace:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002ad0:	e00f      	b.n	8002af2 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8002ad2:	f7ff fc9b 	bl	800240c <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d908      	bls.n	8002af2 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aec:	d001      	beq.n	8002af2 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e007      	b.n	8002b02 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002afe:	d1e8      	bne.n	8002ad2 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40030800 	.word	0x40030800

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e340      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b22:	4b98      	ldr	r3, [pc, #608]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80ad 	beq.w	8002c94 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 80a5 	bne.w	8002c94 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e32a      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04f      	beq.n	8002bf6 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x5e>
 8002b60:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a87      	ldr	r2, [pc, #540]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e02f      	b.n	8002bce <HAL_RCC_OscConfig+0xbe>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x82>
 8002b78:	4b82      	ldr	r3, [pc, #520]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a81      	ldr	r2, [pc, #516]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b7f      	ldr	r3, [pc, #508]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7e      	ldr	r2, [pc, #504]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e01d      	b.n	8002bce <HAL_RCC_OscConfig+0xbe>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0xa6>
 8002b9c:	4b79      	ldr	r3, [pc, #484]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a78      	ldr	r2, [pc, #480]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ba2:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0xbe>
 8002bb6:	4b73      	ldr	r3, [pc, #460]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a72      	ldr	r2, [pc, #456]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b70      	ldr	r3, [pc, #448]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7ff fc1d 	bl	800240c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd6:	f7ff fc19 	bl	800240c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	@ 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e2dd      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be8:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0xc6>
 8002bf4:	e04e      	b.n	8002c94 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0xfe>
 8002c00:	4b60      	ldr	r3, [pc, #384]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5f      	ldr	r2, [pc, #380]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0x15e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x122>
 8002c18:	4b5a      	ldr	r3, [pc, #360]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a59      	ldr	r2, [pc, #356]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b57      	ldr	r3, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e01d      	b.n	8002c6e <HAL_RCC_OscConfig+0x15e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x146>
 8002c3c:	4b51      	ldr	r3, [pc, #324]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a50      	ldr	r2, [pc, #320]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c42:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b4e      	ldr	r3, [pc, #312]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x15e>
 8002c56:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b48      	ldr	r3, [pc, #288]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a47      	ldr	r2, [pc, #284]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c68:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fbcd 	bl	800240c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c76:	f7ff fbc9 	bl	800240c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e28d      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c88:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d054      	beq.n	8002d4a <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d110      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e278      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	4930      	ldr	r1, [pc, #192]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	610b      	str	r3, [r1, #16]
 8002cc6:	e040      	b.n	8002d4a <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d023      	beq.n	8002d18 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fb96 	bl	800240c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7ff fb92 	bl	800240c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e256      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	491c      	ldr	r1, [pc, #112]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	610b      	str	r3, [r1, #16]
 8002d16:	e018      	b.n	8002d4a <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d18:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff fb72 	bl	800240c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7ff fb6e 	bl	800240c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e232      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d038      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7ff fb4f 	bl	800240c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7ff fb4b 	bl	800240c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d903      	bls.n	8002d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e20f      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
 8002d84:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d88:	4ba0      	ldr	r3, [pc, #640]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCC_OscConfig+0x262>
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d96:	4b9d      	ldr	r3, [pc, #628]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a9c      	ldr	r2, [pc, #624]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002d9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7ff fb33 	bl	800240c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002daa:	f7ff fb2f 	bl	800240c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1f3      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002dbc:	4b93      	ldr	r3, [pc, #588]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a7 	beq.w	8002f24 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002dda:	4b8c      	ldr	r3, [pc, #560]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d110      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b88      	ldr	r3, [pc, #544]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	4a87      	ldr	r2, [pc, #540]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002df8:	4b84      	ldr	r3, [pc, #528]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e0a:	4b81      	ldr	r3, [pc, #516]	@ (8003010 <HAL_RCC_OscConfig+0x500>)
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	4a80      	ldr	r2, [pc, #512]	@ (8003010 <HAL_RCC_OscConfig+0x500>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d051      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002e20:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e28:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8002e34:	4a75      	ldr	r2, [pc, #468]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7ff fae6 	bl	800240c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7ff fae2 	bl	800240c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1a4      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002e5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ed      	beq.n	8002e44 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01e      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff fac9 	bl	800240c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e18b      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002e8e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ed      	beq.n	8002e76 <HAL_RCC_OscConfig+0x366>
 8002e9a:	e038      	b.n	8002f0e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7ff fab6 	bl	800240c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e178      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002eb2:	4b56      	ldr	r3, [pc, #344]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002eb4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ed      	bne.n	8002e9c <HAL_RCC_OscConfig+0x38c>
 8002ec0:	e025      	b.n	8002f0e <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8002ec2:	4b52      	ldr	r3, [pc, #328]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002ec4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002ec8:	4a50      	ldr	r2, [pc, #320]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002eca:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002ece:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002ed4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fa93 	bl	800240c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7ff fa8f 	bl	800240c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e151      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f00:	4b42      	ldr	r3, [pc, #264]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f02:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ed      	bne.n	8002eea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f0e:	7efb      	ldrb	r3, [r7, #27]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d078      	beq.n	8003022 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f32:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002f36:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d050      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d023      	beq.n	8002f96 <HAL_RCC_OscConfig+0x486>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01e      	beq.n	8002f96 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7ff fa50 	bl	800240c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7ff fa4c 	bl	800240c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b14      	cmp	r3, #20
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e110      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002f82:	4b22      	ldr	r3, [pc, #136]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002f84:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7ff fa47 	bl	8002424 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002fb0:	4a16      	ldr	r2, [pc, #88]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7ff fa28 	bl	800240c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7ff fa24 	bl	800240c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b14      	cmp	r3, #20
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0e8      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002fd4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4b0>
 8002fe0:	e01f      	b.n	8003022 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002fea:	4a08      	ldr	r2, [pc, #32]	@ (800300c <HAL_RCC_OscConfig+0x4fc>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7ff fa0b 	bl	800240c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7ff fa07 	bl	800240c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b14      	cmp	r3, #20
 8003006:	d905      	bls.n	8003014 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0cb      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
 800300c:	40030c00 	.word	0x40030c00
 8003010:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8003014:	4b65      	ldr	r3, [pc, #404]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003016:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1eb      	bne.n	8002ffa <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d068      	beq.n	8003100 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b1      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8003040:	4b5a      	ldr	r3, [pc, #360]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a59      	ldr	r2, [pc, #356]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e03b      	b.n	80030ca <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8003052:	4b56      	ldr	r3, [pc, #344]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0305 	and.w	r3, r3, #5
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0a0      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8003062:	4b52      	ldr	r3, [pc, #328]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800306a:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	431a      	orrs	r2, r3
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800307e:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8003080:	4a4a      	ldr	r2, [pc, #296]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800308c:	f000 f982 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b46      	ldr	r3, [pc, #280]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4945      	ldr	r1, [pc, #276]	@ (80031b0 <HAL_RCC_OscConfig+0x6a0>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a44      	ldr	r2, [pc, #272]	@ (80031b4 <HAL_RCC_OscConfig+0x6a4>)
 80030a4:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <HAL_RCC_OscConfig+0x6a8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f91c 	bl	80022e8 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e074      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 80030ba:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3b      	ldr	r2, [pc, #236]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 80030c6:	2304      	movs	r3, #4
 80030c8:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ca:	f7ff f99f 	bl	800240c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80030d0:	e00f      	b.n	80030f2 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d2:	f7ff f99b 	bl	800240c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80030e0:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e058      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80030f2:	4b2e      	ldr	r3, [pc, #184]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1e8      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d04a      	beq.n	80031a2 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 800311a:	f023 0308 	bic.w	r3, r3, #8
 800311e:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e022      	b.n	800316c <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8003126:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0318 	and.w	r3, r3, #24
 800312e:	2b08      	cmp	r3, #8
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e036      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8003136:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 800313e:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003148:	4313      	orrs	r3, r2
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003154:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8003156:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003162:	f043 0308 	orr.w	r3, r3, #8
 8003166:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8003168:	2310      	movs	r3, #16
 800316a:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7ff f94e 	bl	800240c <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8003172:	e00f      	b.n	8003194 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003174:	f7ff f94a 	bl	800240c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d908      	bls.n	8003194 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e007      	b.n	80031a4 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_OscConfig+0x69c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d1e8      	bne.n	8003174 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40030c00 	.word	0x40030c00
 80031b0:	0800a950 	.word	0x0800a950
 80031b4:	20000080 	.word	0x20000080
 80031b8:	20000084 	.word	0x20000084

080031bc <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0d2      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b68      	ldr	r3, [pc, #416]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4966      	ldr	r1, [pc, #408]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b64      	ldr	r3, [pc, #400]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ba      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d040      	beq.n	800328e <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 800320c:	4b5d      	ldr	r3, [pc, #372]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d106      	bne.n	8003228 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0a6      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e09b      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e094      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324c:	4b4d      	ldr	r3, [pc, #308]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	494a      	ldr	r1, [pc, #296]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7ff f8d5 	bl	800240c <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003264:	e00a      	b.n	800327c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7ff f8d1 	bl	800240c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e07c      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800327c:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 020c 	and.w	r2, r3, #12
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	429a      	cmp	r2, r3
 800328c:	d1eb      	bne.n	8003266 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 030f 	bic.w	r3, r3, #15
 80032aa:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80032b6:	2301      	movs	r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032cc:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032ee:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80032fc:	2301      	movs	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d210      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 020f 	bic.w	r2, r3, #15
 8003336:	4912      	ldr	r1, [pc, #72]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e012      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003350:	f000 f820 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	490a      	ldr	r1, [pc, #40]	@ (8003388 <HAL_RCC_ClockConfig+0x1cc>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_ClockConfig+0x1d0>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_RCC_ClockConfig+0x1d4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ffba 	bl	80022e8 <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40022000 	.word	0x40022000
 8003384:	40030c00 	.word	0x40030c00
 8003388:	0800a950 	.word	0x0800a950
 800338c:	20000080 	.word	0x20000080
 8003390:	20000084 	.word	0x20000084

08003394 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b1e      	ldr	r3, [pc, #120]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x80>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x84>)
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	e029      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x84>)
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	e023      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 80033bc:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x80>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da02      	bge.n	80033d8 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 80033d2:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_GetSysClockFreq+0x88>)
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	e001      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x8c>)
 80033da:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0f5b      	lsrs	r3, r3, #29
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	e008      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_RCC_GetSysClockFreq+0x88>)
 80033ea:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80033ec:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x80>)
 80033ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80033f2:	0b1b      	lsrs	r3, r3, #12
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8003404:	683b      	ldr	r3, [r7, #0]
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40030c00 	.word	0x40030c00
 8003418:	00f42400 	.word	0x00f42400
 800341c:	016e3600 	.word	0x016e3600
 8003420:	05b8d800 	.word	0x05b8d800

08003424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003428:	f7ff ffb4 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_RCC_GetHCLKFreq+0x28>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	4906      	ldr	r1, [pc, #24]	@ (8003450 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x30>)
 8003440:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x30>)
 8003444:	681b      	ldr	r3, [r3, #0]
}
 8003446:	4618      	mov	r0, r3
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40030c00 	.word	0x40030c00
 8003450:	0800a950 	.word	0x0800a950
 8003454:	20000080 	.word	0x20000080

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800345c:	f7ff ffe2 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	@ (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40030c00 	.word	0x40030c00
 800347c:	0800a960 	.word	0x0800a960

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003484:	f7ff ffce 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40030c00 	.word	0x40030c00
 80034a4:	0800a960 	.word	0x0800a960

080034a8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80034ac:	f7ff ffba 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK3Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40030c00 	.word	0x40030c00
 80034cc:	0800a960 	.word	0x0800a960

080034d0 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_RCC_GetMSIKFreq+0x60>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_RCC_GetMSIKFreq+0x64>)
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 8003500:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_RCC_GetMSIKFreq+0x68>)
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	e008      	b.n	8003518 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_GetMSIKFreq+0x64>)
 8003508:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_GetMSIKFreq+0x60>)
 800350c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	607b      	str	r3, [r7, #4]

  return tmp;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40030c00 	.word	0x40030c00
 8003534:	016e3600 	.word	0x016e3600
 8003538:	05b8d800 	.word	0x05b8d800

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003550:	4bad      	ldr	r3, [pc, #692]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003552:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	49aa      	ldr	r1, [pc, #680]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003572:	4ba5      	ldr	r3, [pc, #660]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003574:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003578:	f023 0204 	bic.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	49a1      	ldr	r1, [pc, #644]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003594:	4b9c      	ldr	r3, [pc, #624]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003596:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800359a:	f023 0210 	bic.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4999      	ldr	r1, [pc, #612]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035b6:	4b94      	ldr	r3, [pc, #592]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80035bc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4990      	ldr	r1, [pc, #576]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 80035d8:	4b8b      	ldr	r3, [pc, #556]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80035de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4988      	ldr	r1, [pc, #544]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035fa:	4b83      	ldr	r3, [pc, #524]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003600:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	497f      	ldr	r1, [pc, #508]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361c:	4b7a      	ldr	r3, [pc, #488]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800361e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003622:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4977      	ldr	r1, [pc, #476]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003640:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003644:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	496e      	ldr	r1, [pc, #440]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8003660:	4b69      	ldr	r3, [pc, #420]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003662:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003666:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	4966      	ldr	r1, [pc, #408]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003682:	4b61      	ldr	r3, [pc, #388]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003684:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003688:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	495d      	ldr	r1, [pc, #372]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80036a4:	4b58      	ldr	r3, [pc, #352]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	4955      	ldr	r1, [pc, #340]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80036c6:	4b50      	ldr	r3, [pc, #320]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	494c      	ldr	r1, [pc, #304]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036e8:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	4944      	ldr	r1, [pc, #272]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800370c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	493b      	ldr	r1, [pc, #236]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 800372c:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800372e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003732:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373a:	4933      	ldr	r1, [pc, #204]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 800374e:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003750:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003754:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	492a      	ldr	r1, [pc, #168]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8003770:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003772:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	4922      	ldr	r1, [pc, #136]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8003792:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003794:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003798:	f023 0208 	bic.w	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a0:	4919      	ldr	r1, [pc, #100]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80037ba:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	4911      	ldr	r1, [pc, #68]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80037dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	4908      	ldr	r1, [pc, #32]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d019      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 80037f8:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80037fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	e002      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003806:	bf00      	nop
 8003808:	40030c00 	.word	0x40030c00
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	4980      	ldr	r1, [pc, #512]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8003816:	4b7e      	ldr	r3, [pc, #504]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003818:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800381c:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	497a      	ldr	r1, [pc, #488]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8003838:	4b75      	ldr	r3, [pc, #468]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800383a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800383e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	4972      	ldr	r1, [pc, #456]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 800385a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800385c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003860:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	4969      	ldr	r1, [pc, #420]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800387c:	4b64      	ldr	r3, [pc, #400]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800387e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388a:	4961      	ldr	r1, [pc, #388]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ac:	4958      	ldr	r1, [pc, #352]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ce:	4950      	ldr	r1, [pc, #320]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f0:	4947      	ldr	r1, [pc, #284]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f280 8082 	bge.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8003902:	4b43      	ldr	r3, [pc, #268]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003904:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003908:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800390a:	4b41      	ldr	r3, [pc, #260]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800390c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003914:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	d072      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8003924:	4b3a      	ldr	r3, [pc, #232]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d110      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003938:	4a35      	ldr	r2, [pc, #212]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003942:	4b33      	ldr	r3, [pc, #204]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003954:	4b2f      	ldr	r3, [pc, #188]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00f      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003968:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800396c:	4a28      	ldr	r2, [pc, #160]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003972:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b26      	ldr	r3, [pc, #152]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003978:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800397c:	4a24      	ldr	r2, [pc, #144]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003982:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800398c:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4313      	orrs	r3, r2
 800399e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a2:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 80039a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fd29 	bl	800240c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80039bc:	e011      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fe fd25 	bl	800240c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d908      	bls.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e012      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0e6      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039f0:	7efb      	ldrb	r3, [r7, #27]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fc:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40030c00 	.word	0x40030c00
 8003a14:	40030800 	.word	0x40030800

08003a18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a2a:	f000 8469 	beq.w	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a34:	f200 84a0 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3e:	f000 8420 	beq.w	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a48:	f200 8496 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a52:	f000 83d3 	beq.w	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a5c:	f200 848c 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a66:	f000 83b8 	beq.w	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a70:	f200 8482 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a7a:	f000 8378 	beq.w	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a84:	f200 8478 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8e:	f000 835d 	beq.w	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a98:	f200 846e 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aa2:	f000 8326 	beq.w	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aac:	f200 8464 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab6:	f000 82db 	beq.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac0:	f200 845a 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003aca:	f000 82b9 	beq.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ad4:	f200 8450 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ade:	f000 828c 	beq.w	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ae8:	f200 8446 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af2:	f000 8271 	beq.w	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afc:	f200 843c 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b06:	f000 8246 	beq.w	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	f200 8432 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b1a:	f000 8228 	beq.w	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b24:	f200 8428 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b2e:	f000 81ef 	beq.w	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	f200 841e 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b42:	f000 81ce 	beq.w	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4c:	f200 8414 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b56:	f000 8189 	beq.w	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b60:	f200 840a 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	f000 816e 	beq.w	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b74:	f200 8400 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7e:	f000 8121 	beq.w	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b88:	f200 83f6 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b92:	f000 8106 	beq.w	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9c:	f200 83ec 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b80      	cmp	r3, #128	@ 0x80
 8003ba4:	f000 80ec 	beq.w	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b80      	cmp	r3, #128	@ 0x80
 8003bac:	f200 83e4 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d84c      	bhi.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 83dd 	beq.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	2b1f      	cmp	r3, #31
 8003bc4:	f200 83d8 	bhi.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003c5b 	.word	0x08003c5b
 8003bd4:	08003c8b 	.word	0x08003c8b
 8003bd8:	08004379 	.word	0x08004379
 8003bdc:	08003cbb 	.word	0x08003cbb
 8003be0:	08004379 	.word	0x08004379
 8003be4:	08004379 	.word	0x08004379
 8003be8:	08004379 	.word	0x08004379
 8003bec:	08003ceb 	.word	0x08003ceb
 8003bf0:	08004379 	.word	0x08004379
 8003bf4:	08004379 	.word	0x08004379
 8003bf8:	08004379 	.word	0x08004379
 8003bfc:	08004379 	.word	0x08004379
 8003c00:	08004379 	.word	0x08004379
 8003c04:	08004379 	.word	0x08004379
 8003c08:	08004379 	.word	0x08004379
 8003c0c:	08003d1b 	.word	0x08003d1b
 8003c10:	08004379 	.word	0x08004379
 8003c14:	08004379 	.word	0x08004379
 8003c18:	08004379 	.word	0x08004379
 8003c1c:	08004379 	.word	0x08004379
 8003c20:	08004379 	.word	0x08004379
 8003c24:	08004379 	.word	0x08004379
 8003c28:	08004379 	.word	0x08004379
 8003c2c:	08004379 	.word	0x08004379
 8003c30:	08004379 	.word	0x08004379
 8003c34:	08004379 	.word	0x08004379
 8003c38:	08004379 	.word	0x08004379
 8003c3c:	08004379 	.word	0x08004379
 8003c40:	08004379 	.word	0x08004379
 8003c44:	08004379 	.word	0x08004379
 8003c48:	08004379 	.word	0x08004379
 8003c4c:	08003d3d 	.word	0x08003d3d
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b40      	cmp	r3, #64	@ 0x40
 8003c54:	f000 8083 	beq.w	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8003c58:	e38e      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003c5a:	4ba9      	ldr	r3, [pc, #676]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003c5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7ff fc08 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
      break;
 8003c72:	e383      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c74:	4ba2      	ldr	r3, [pc, #648]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c80:	f040 837c 	bne.w	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8003c84:	4b9f      	ldr	r3, [pc, #636]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003c86:	60fb      	str	r3, [r7, #12]
      break;
 8003c88:	e378      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003c8a:	4b9d      	ldr	r3, [pc, #628]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003c8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7ff fbdc 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]
      break;
 8003ca2:	e36d      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ca4:	4b96      	ldr	r3, [pc, #600]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb0:	f040 8366 	bne.w	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8003cb4:	4b93      	ldr	r3, [pc, #588]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003cb6:	60fb      	str	r3, [r7, #12]
      break;
 8003cb8:	e362      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003cba:	4b91      	ldr	r3, [pc, #580]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003cbc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7ff fbc4 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	60f8      	str	r0, [r7, #12]
      break;
 8003cd2:	e357      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cd4:	4b8a      	ldr	r3, [pc, #552]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce0:	f040 8350 	bne.w	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8003ce4:	4b87      	ldr	r3, [pc, #540]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003ce6:	60fb      	str	r3, [r7, #12]
      break;
 8003ce8:	e34c      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003cea:	4b85      	ldr	r3, [pc, #532]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003cec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7ff fbac 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d00:	60f8      	str	r0, [r7, #12]
      break;
 8003d02:	e341      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d04:	4b7e      	ldr	r3, [pc, #504]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d10:	f040 833a 	bne.w	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8003d14:	4b7b      	ldr	r3, [pc, #492]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003d16:	60fb      	str	r3, [r7, #12]
      break;
 8003d18:	e336      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003d1a:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003d1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7ff fb94 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d30:	60f8      	str	r0, [r7, #12]
      break;
 8003d32:	e340      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d34:	f7ff fbcc 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003d38:	60f8      	str	r0, [r7, #12]
      break;
 8003d3a:	e33c      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003d3c:	4b70      	ldr	r3, [pc, #448]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003d3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d46:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7ff fb83 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d52:	60f8      	str	r0, [r7, #12]
      break;
 8003d54:	e32f      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d56:	f7ff fbbb 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003d5a:	60f8      	str	r0, [r7, #12]
      break;
 8003d5c:	e32b      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003d5e:	4b68      	ldr	r3, [pc, #416]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003d60:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d68:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7ff fb72 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d74:	60f8      	str	r0, [r7, #12]
      break;
 8003d76:	e31e      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d78:	f7ff fbaa 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003d7c:	60f8      	str	r0, [r7, #12]
      break;
 8003d7e:	e31a      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003d80:	4b5f      	ldr	r3, [pc, #380]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003d82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003d92:	f7ff fb75 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8003d96:	60f8      	str	r0, [r7, #12]
      break;
 8003d98:	e30d      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d9a:	f7ff fb99 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003d9e:	60f8      	str	r0, [r7, #12]
      break;
 8003da0:	e309      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8003da2:	4b57      	ldr	r3, [pc, #348]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003da4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dac:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7ff fb50 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003db8:	60f8      	str	r0, [r7, #12]
      break;
 8003dba:	e2fc      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003dbc:	f7ff fb88 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003dc0:	60f8      	str	r0, [r7, #12]
      break;
 8003dc2:	e2f8      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003dc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003dca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003dce:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003dd6:	f7ff fb3f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003dda:	60f8      	str	r0, [r7, #12]
      break;
 8003ddc:	e2d6      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de4:	d116      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003de6:	4b46      	ldr	r3, [pc, #280]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003de8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f040 82cb 	bne.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 8003df6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003dfa:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003dfc:	4b40      	ldr	r3, [pc, #256]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003dfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	f040 82c0 	bne.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
      break;
 8003e12:	e2bb      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e1a:	d10a      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e1c:	4b38      	ldr	r3, [pc, #224]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e28:	f040 82b0 	bne.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8003e2c:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003e2e:	60fb      	str	r3, [r7, #12]
      break;
 8003e30:	e2ac      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e32:	4b33      	ldr	r3, [pc, #204]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003e34:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	f040 82a5 	bne.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e46:	60fb      	str	r3, [r7, #12]
      break;
 8003e48:	e2a0      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003e4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e54:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7ff fb10 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8003e60:	60f8      	str	r0, [r7, #12]
      break;
 8003e62:	e2a8      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003e64:	f7ff fb34 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003e68:	60f8      	str	r0, [r7, #12]
      break;
 8003e6a:	e2a4      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8003e6c:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e72:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e76:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8003e7e:	f7ff fad1 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003e82:	4603      	mov	r3, r0
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
      break;
 8003e88:	e282      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e92:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003e94:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	f040 8277 	bne.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea6:	60fb      	str	r3, [r7, #12]
      break;
 8003ea8:	e272      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb0:	f040 826e 	bne.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003eb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 8266 	bne.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8003ec4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003ec8:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003ecc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	f040 825b 	bne.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	09db      	lsrs	r3, r3, #7
 8003ede:	60fb      	str	r3, [r7, #12]
      break;
 8003ee0:	e256      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003ee4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eec:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8003ef6:	f7ff faeb 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003efa:	60f8      	str	r0, [r7, #12]
      break;
 8003efc:	e25b      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003efe:	bf00      	nop
 8003f00:	40030c00 	.word	0x40030c00
 8003f04:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8003f08:	f7ff fa44 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003f0c:	60f8      	str	r0, [r7, #12]
      break;
 8003f0e:	e252      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003f10:	4ba4      	ldr	r3, [pc, #656]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003f12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f16:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003f1a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003f22:	4ba0      	ldr	r3, [pc, #640]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2e:	f040 8231 	bne.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8003f32:	4b9d      	ldr	r3, [pc, #628]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8003f34:	60fb      	str	r3, [r7, #12]
      break;
 8003f36:	e22d      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f3e:	d103      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8003f40:	f7ff fac6 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003f44:	60f8      	str	r0, [r7, #12]
      break;
 8003f46:	e225      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f4e:	d10a      	bne.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f50:	4b94      	ldr	r3, [pc, #592]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f5c:	f040 821a 	bne.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8003f60:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003f62:	60fb      	str	r3, [r7, #12]
      break;
 8003f64:	e216      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f66:	f7ff fa15 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003f6a:	60f8      	str	r0, [r7, #12]
      break;
 8003f6c:	e212      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8003f6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f72:	f7ff fd51 	bl	8003a18 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f76:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8003f78:	4b8a      	ldr	r3, [pc, #552]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003f7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f8a:	f040 8205 	bne.w	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      break;
 8003f94:	e200      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8003f96:	4b83      	ldr	r3, [pc, #524]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003f98:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8003fa8:	f7ff fa3c 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003fac:	60f8      	str	r0, [r7, #12]
      break;
 8003fae:	e202      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d103      	bne.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003fb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003fba:	60fb      	str	r3, [r7, #12]
      break;
 8003fbc:	e1fb      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d103      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8003fc4:	f7ff fa84 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003fc8:	60f8      	str	r0, [r7, #12]
      break;
 8003fca:	e1f4      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003fcc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003fd0:	f7ff fd22 	bl	8003a18 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fd4:	60f8      	str	r0, [r7, #12]
      break;
 8003fd6:	e1ee      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8003fd8:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003fda:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fea:	f7ff fa35 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003fee:	60f8      	str	r0, [r7, #12]
      break;
 8003ff0:	e1e1      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003ff2:	f7ff fa6d 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8003ff6:	60f8      	str	r0, [r7, #12]
      break;
 8003ff8:	e1dd      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003ffc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004000:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004004:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 800400c:	f7ff fa60 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8004010:	60f8      	str	r0, [r7, #12]
      break;
 8004012:	e1c3      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b20      	cmp	r3, #32
 8004018:	d103      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800401a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800401e:	60fb      	str	r3, [r7, #12]
      break;
 8004020:	e1bc      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b40      	cmp	r3, #64	@ 0x40
 8004026:	f040 81b9 	bne.w	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800402a:	4b5e      	ldr	r3, [pc, #376]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004036:	f040 81b1 	bne.w	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 800403a:	4b5c      	ldr	r3, [pc, #368]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800403c:	60fb      	str	r3, [r7, #12]
      break;
 800403e:	e1ad      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004040:	4b58      	ldr	r3, [pc, #352]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004042:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800404a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004052:	4b54      	ldr	r3, [pc, #336]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405e:	f040 819f 	bne.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8004062:	4b51      	ldr	r3, [pc, #324]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004064:	60fb      	str	r3, [r7, #12]
      break;
 8004066:	e19b      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8004068:	f7ff fa32 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 800406c:	60f8      	str	r0, [r7, #12]
      break;
 800406e:	e197      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004070:	4b4c      	ldr	r3, [pc, #304]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004072:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800407a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8004082:	f7ff f9cf 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	e014      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004090:	d109      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800409e:	d109      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ac:	d102      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 80040ae:	f7ff fa0f 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 80040b2:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 80040b4:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80040b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80040ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80040be:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	e00c      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d2:	d202      	bcs.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 80040d4:	2301      	movs	r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	e005      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	0b1a      	lsrs	r2, r3, #12
 80040de:	4b34      	ldr	r3, [pc, #208]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	3302      	adds	r3, #2
 80040e4:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	60fb      	str	r3, [r7, #12]
      break;
 80040f0:	e161      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 80040f2:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80040f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80040f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004104:	d116      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004106:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004108:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	f040 8147 	bne.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8004116:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800411a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800411e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b04      	cmp	r3, #4
 8004128:	f040 813c 	bne.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
      break;
 8004132:	e137      	b.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004134:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004136:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	f040 8130 	bne.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8004144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004148:	60fb      	str	r3, [r7, #12]
      break;
 800414a:	e12b      	b.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800414e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004156:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 800415e:	f7ff f919 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8004162:	60f8      	str	r0, [r7, #12]
      break;
 8004164:	e127      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004166:	f7ff f9b3 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 800416a:	60f8      	str	r0, [r7, #12]
      break;
 800416c:	e123      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004170:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 8004180:	f7ff f992 	bl	80034a8 <HAL_RCC_GetPCLK3Freq>
 8004184:	60f8      	str	r0, [r7, #12]
      break;
 8004186:	e10f      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d112      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800418e:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419a:	f040 8105 	bne.w	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 800419e:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80041a0:	60fb      	str	r3, [r7, #12]
      break;
 80041a2:	e101      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 80041a4:	40030c00 	.word	0x40030c00
 80041a8:	02dc6c00 	.word	0x02dc6c00
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041ba:	4b81      	ldr	r3, [pc, #516]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80041bc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	f040 80ef 	bne.w	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 80041ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ce:	60fb      	str	r3, [r7, #12]
      break;
 80041d0:	e0ea      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 80041d2:	f7ff f97d 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 80041d6:	60f8      	str	r0, [r7, #12]
      break;
 80041d8:	e0e6      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041da:	4b79      	ldr	r3, [pc, #484]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80041dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 80041ec:	f7ff f95c 	bl	80034a8 <HAL_RCC_GetPCLK3Freq>
 80041f0:	60f8      	str	r0, [r7, #12]
      break;
 80041f2:	e0e0      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80041f4:	f7ff f96c 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 80041f8:	60f8      	str	r0, [r7, #12]
      break;
 80041fa:	e0dc      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80041fc:	4b70      	ldr	r3, [pc, #448]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80041fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 800420e:	f7ff f95f 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8004212:	60f8      	str	r0, [r7, #12]
      break;
 8004214:	e0ca      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d116      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800421e:	4b68      	ldr	r3, [pc, #416]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004220:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	f040 80bf 	bne.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 800422e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004232:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8004234:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004236:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	f040 80b4 	bne.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	09db      	lsrs	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
      break;
 800424a:	e0af      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004252:	d10a      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004254:	4b5a      	ldr	r3, [pc, #360]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004260:	f040 80a4 	bne.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8004264:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8004266:	60fb      	str	r3, [r7, #12]
      break;
 8004268:	e0a0      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800426a:	4b55      	ldr	r3, [pc, #340]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800426c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 8099 	bne.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427e:	60fb      	str	r3, [r7, #12]
      break;
 8004280:	e094      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004282:	4b4f      	ldr	r3, [pc, #316]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004284:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800428c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8004294:	f7ff f91c 	bl	80034d0 <HAL_RCC_GetMSIKFreq>
 8004298:	60f8      	str	r0, [r7, #12]
      break;
 800429a:	e089      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d114      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042a4:	4b46      	ldr	r3, [pc, #280]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80042a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d17e      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 80042b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042b6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80042b8:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80042ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d174      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	09db      	lsrs	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]
      break;
 80042cc:	e070      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d4:	d109      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042d6:	4b3a      	ldr	r3, [pc, #232]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e2:	d165      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 80042e4:	4b37      	ldr	r3, [pc, #220]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80042e6:	60fb      	str	r3, [r7, #12]
      break;
 80042e8:	e062      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042ea:	4b35      	ldr	r3, [pc, #212]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80042ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d15b      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 80042f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fc:	60fb      	str	r3, [r7, #12]
      break;
 80042fe:	e057      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004300:	4b2f      	ldr	r3, [pc, #188]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004302:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004312:	d10a      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004314:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004316:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d148      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004326:	60fb      	str	r3, [r7, #12]
      break;
 8004328:	e044      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004330:	d114      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004334:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d139      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8004340:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004344:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8004346:	4b1e      	ldr	r3, [pc, #120]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004348:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d12f      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	09db      	lsrs	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
      break;
 800435a:	e02b      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004362:	d127      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004370:	d120      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 8004372:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8004374:	60fb      	str	r3, [r7, #12]
      break;
 8004376:	e01d      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8004378:	bf00      	nop
 800437a:	e01c      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800437c:	bf00      	nop
 800437e:	e01a      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004380:	bf00      	nop
 8004382:	e018      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004384:	bf00      	nop
 8004386:	e016      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004388:	bf00      	nop
 800438a:	e014      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800438c:	bf00      	nop
 800438e:	e012      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004390:	bf00      	nop
 8004392:	e010      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004394:	bf00      	nop
 8004396:	e00e      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004398:	bf00      	nop
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800439c:	bf00      	nop
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043a0:	bf00      	nop
 80043a2:	e008      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043a4:	bf00      	nop
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80043b4:	bf00      	nop
  }

  return (frequency);
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40030c00 	.word	0x40030c00
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	0007a120 	.word	0x0007a120

080043cc <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 80043d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e027      	b.n	8004442 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d107      	bne.n	8004408 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e01c      	b.n	8004442 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d107      	bne.n	800441e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e011      	b.n	8004442 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 800441e:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8004438:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40030c00 	.word	0x40030c00

08004454 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0dc      	b.n	8004620 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6d      	ldr	r2, [pc, #436]	@ (8004628 <HAL_SPI_Init+0x1d4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d105      	bne.n	8004482 <HAL_SPI_Init+0x2e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d901      	bls.n	8004482 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e0ce      	b.n	8004620 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fe72 	bl	800516c <SPI_GetPacketSize>
 8004488:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a66      	ldr	r2, [pc, #408]	@ (8004628 <HAL_SPI_Init+0x1d4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d102      	bne.n	800449a <HAL_SPI_Init+0x46>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d80c      	bhi.n	80044b4 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800449e:	4a63      	ldr	r2, [pc, #396]	@ (800462c <HAL_SPI_Init+0x1d8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a61      	ldr	r2, [pc, #388]	@ (8004630 <HAL_SPI_Init+0x1dc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d104      	bne.n	80044b8 <HAL_SPI_Init+0x64>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d901      	bls.n	80044b8 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0b3      	b.n	8004620 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fd fc89 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80044f4:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044fe:	d119      	bne.n	8004534 <HAL_SPI_Init+0xe0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004508:	d103      	bne.n	8004512 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004522:	d107      	bne.n	8004534 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00f      	beq.n	8004560 <HAL_SPI_Init+0x10c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d90b      	bls.n	8004560 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e007      	b.n	8004570 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800456e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	431a      	orrs	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	ea42 0103 	orr.w	r1, r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	ea42 0103 	orr.w	r1, r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40002000 	.word	0x40002000
 800462c:	40013000 	.word	0x40013000
 8004630:	40003800 	.word	0x40003800

08004634 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3320      	adds	r3, #32
 800464a:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800464c:	f7fd fede 	bl	800240c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	e1e5      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_Transmit+0x3a>
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e1dd      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_SPI_Transmit+0x4c>
 800467c:	2302      	movs	r3, #2
 800467e:	e1d6      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2203      	movs	r2, #3
 800468c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80046d8:	d108      	bne.n	80046ec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e009      	b.n	8004700 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80046fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	88f9      	ldrh	r1, [r7, #6]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_SPI_Transmit+0x118>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800473a:	d107      	bne.n	800474c <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b0f      	cmp	r3, #15
 8004752:	d951      	bls.n	80047f8 <HAL_SPI_Transmit+0x1c4>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a8a      	ldr	r2, [pc, #552]	@ (8004984 <HAL_SPI_Transmit+0x350>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d045      	beq.n	80047ea <HAL_SPI_Transmit+0x1b6>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a89      	ldr	r2, [pc, #548]	@ (8004988 <HAL_SPI_Transmit+0x354>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d147      	bne.n	80047f8 <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004768:	e03f      	b.n	80047ea <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d114      	bne.n	80047a2 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80047a0:	e023      	b.n	80047ea <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a2:	f7fd fe33 	bl	800240c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d803      	bhi.n	80047ba <HAL_SPI_Transmit+0x186>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d102      	bne.n	80047c0 <HAL_SPI_Transmit+0x18c>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fc05 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e121      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1b9      	bne.n	800476a <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80047f6:	e0f4      	b.n	80049e2 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b07      	cmp	r3, #7
 80047fe:	f240 80e9 	bls.w	80049d4 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004802:	e05d      	b.n	80048c0 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d132      	bne.n	8004878 <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d918      	bls.n	8004850 <HAL_SPI_Transmit+0x21c>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d014      	beq.n	8004850 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b02      	subs	r3, #2
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800484e:	e037      	b.n	80048c0 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004876:	e023      	b.n	80048c0 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004878:	f7fd fdc8 	bl	800240c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d803      	bhi.n	8004890 <HAL_SPI_Transmit+0x25c>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Transmit+0x262>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d114      	bne.n	80048c0 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fb9a 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0b6      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d19b      	bne.n	8004804 <HAL_SPI_Transmit+0x1d0>
 80048cc:	e089      	b.n	80049e2 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d157      	bne.n	800498c <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d918      	bls.n	800491a <HAL_SPI_Transmit+0x2e6>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d914      	bls.n	800491a <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b04      	subs	r3, #4
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004918:	e05c      	b.n	80049d4 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d917      	bls.n	8004956 <HAL_SPI_Transmit+0x322>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b02      	subs	r3, #2
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004954:	e03e      	b.n	80049d4 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3320      	adds	r3, #32
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004980:	e028      	b.n	80049d4 <HAL_SPI_Transmit+0x3a0>
 8004982:	bf00      	nop
 8004984:	40013000 	.word	0x40013000
 8004988:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498c:	f7fd fd3e 	bl	800240c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d803      	bhi.n	80049a4 <HAL_SPI_Transmit+0x370>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d102      	bne.n	80049aa <HAL_SPI_Transmit+0x376>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d114      	bne.n	80049d4 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fb10 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e02c      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af76 	bne.w	80048ce <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2108      	movs	r1, #8
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fb8f 	bl	8005110 <SPI_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fae1 	bl	8004fd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3330      	adds	r3, #48	@ 0x30
 8004a5a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a5c:	f7fd fcd6 	bl	800240c <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e2aa      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Receive+0x46>
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e2a2      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_Receive+0x58>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e29b      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004ae8:	d108      	bne.n	8004afc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e009      	b.n	8004b10 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004b0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	88f9      	ldrh	r1, [r7, #6]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10c      	bne.n	8004b5c <HAL_SPI_Receive+0x124>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4a:	d107      	bne.n	8004b5c <HAL_SPI_Receive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	f240 8090 	bls.w	8004c86 <HAL_SPI_Receive+0x24e>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a8b      	ldr	r2, [pc, #556]	@ (8004d98 <HAL_SPI_Receive+0x360>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f000 8082 	beq.w	8004c76 <HAL_SPI_Receive+0x23e>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a89      	ldr	r2, [pc, #548]	@ (8004d9c <HAL_SPI_Receive+0x364>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 8084 	bne.w	8004c86 <HAL_SPI_Receive+0x24e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004b7e:	e07a      	b.n	8004c76 <HAL_SPI_Receive+0x23e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d114      	bne.n	8004bc0 <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ba0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004bbe:	e05a      	b.n	8004c76 <HAL_SPI_Receive+0x23e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8bfa      	ldrh	r2, [r7, #30]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d919      	bls.n	8004c02 <HAL_SPI_Receive+0x1ca>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d014      	beq.n	8004c02 <HAL_SPI_Receive+0x1ca>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004be2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be8:	1d1a      	adds	r2, r3, #4
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004c00:	e039      	b.n	8004c76 <HAL_SPI_Receive+0x23e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_SPI_Receive+0x1f6>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1a:	d12c      	bne.n	8004c76 <HAL_SPI_Receive+0x23e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c2a:	619a      	str	r2, [r3, #24]
 8004c2c:	e023      	b.n	8004c76 <HAL_SPI_Receive+0x23e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c2e:	f7fd fbed 	bl	800240c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d803      	bhi.n	8004c46 <HAL_SPI_Receive+0x20e>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_Receive+0x214>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d114      	bne.n	8004c76 <HAL_SPI_Receive+0x23e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f9bf 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1a8      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f af7e 	bne.w	8004b80 <HAL_SPI_Receive+0x148>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004c84:	e18d      	b.n	8004fa2 <HAL_SPI_Receive+0x56a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	f240 8182 	bls.w	8004f94 <HAL_SPI_Receive+0x55c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004c90:	e0aa      	b.n	8004de8 <HAL_SPI_Receive+0x3b0>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d114      	bne.n	8004cd2 <HAL_SPI_Receive+0x29a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004cd0:	e08a      	b.n	8004de8 <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8bfa      	ldrh	r2, [r7, #30]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d924      	bls.n	8004d2a <HAL_SPI_Receive+0x2f2>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01f      	beq.n	8004d2a <HAL_SPI_Receive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d10:	1c9a      	adds	r2, r3, #2
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b02      	subs	r3, #2
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004d28:	e05e      	b.n	8004de8 <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d119      	bne.n	8004d6a <HAL_SPI_Receive+0x332>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d014      	beq.n	8004d6a <HAL_SPI_Receive+0x332>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004d68:	e03e      	b.n	8004de8 <HAL_SPI_Receive+0x3b0>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_SPI_Receive+0x368>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d82:	d131      	bne.n	8004de8 <HAL_SPI_Receive+0x3b0>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d92:	619a      	str	r2, [r3, #24]
 8004d94:	e028      	b.n	8004de8 <HAL_SPI_Receive+0x3b0>
 8004d96:	bf00      	nop
 8004d98:	40013000 	.word	0x40013000
 8004d9c:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da0:	f7fd fb34 	bl	800240c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d803      	bhi.n	8004db8 <HAL_SPI_Receive+0x380>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Receive+0x386>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d114      	bne.n	8004de8 <HAL_SPI_Receive+0x3b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f906 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0ef      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af4e 	bne.w	8004c92 <HAL_SPI_Receive+0x25a>
 8004df6:	e0d4      	b.n	8004fa2 <HAL_SPI_Receive+0x56a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d117      	bne.n	8004e3e <HAL_SPI_Receive+0x406>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004e3c:	e0aa      	b.n	8004f94 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8bfa      	ldrh	r2, [r7, #30]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d946      	bls.n	8004eda <HAL_SPI_Receive+0x4a2>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d041      	beq.n	8004eda <HAL_SPI_Receive+0x4a2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004ed8:	e05c      	b.n	8004f94 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d81c      	bhi.n	8004f20 <HAL_SPI_Receive+0x4e8>
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d017      	beq.n	8004f20 <HAL_SPI_Receive+0x4e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004f1e:	e039      	b.n	8004f94 <HAL_SPI_Receive+0x55c>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_SPI_Receive+0x514>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d12c      	bne.n	8004f94 <HAL_SPI_Receive+0x55c>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	e023      	b.n	8004f94 <HAL_SPI_Receive+0x55c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4c:	f7fd fa5e 	bl	800240c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d803      	bhi.n	8004f64 <HAL_SPI_Receive+0x52c>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Receive+0x532>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d114      	bne.n	8004f94 <HAL_SPI_Receive+0x55c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f830 	bl	8004fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e019      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f af2b 	bne.w	8004df8 <HAL_SPI_Receive+0x3c0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f814 	bl	8004fd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_SPI_Receive+0x58e>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_SPI_Receive+0x590>
  }
  else
  {
    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0210 	orr.w	r2, r2, #16
 8004ffe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005032:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b04      	cmp	r3, #4
 800503e:	d014      	beq.n	800506a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00f      	beq.n	800506a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005050:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0220 	orr.w	r2, r2, #32
 8005068:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d014      	beq.n	80050a0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00f      	beq.n	80050a0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005086:	f043 0204 	orr.w	r2, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800509e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00f      	beq.n	80050ca <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050b0:	f043 0201 	orr.w	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050da:	f043 0208 	orr.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005120:	e010      	b.n	8005144 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005122:	f7fd f973 	bl	800240c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d803      	bhi.n	800513a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d102      	bne.n	8005140 <SPI_WaitOnFlagUntilTimeout+0x30>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e00f      	b.n	8005164 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	429a      	cmp	r2, r3
 8005160:	d0df      	beq.n	8005122 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	3301      	adds	r3, #1
 8005184:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3307      	adds	r3, #7
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	fb02 f303 	mul.w	r3, r2, r3
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d12e      	bne.n	8005216 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e028      	b.n	8005218 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80051f2:	ea42 0103 	orr.w	r1, r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e042      	b.n	80052bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fc fe2f 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2224      	movs	r2, #36	@ 0x24
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa2a 	bl	80056c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8b3 	bl	80053e0 <UART_SetConfig>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e01b      	b.n	80052bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 faa9 	bl	800580c <UART_CheckIdleState>
 80052ba:	4603      	mov	r3, r0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	@ 0x28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d17b      	bne.n	80053d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_Transmit+0x26>
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e074      	b.n	80053d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	@ 0x21
 80052fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fd f885 	bl	800240c <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e030      	b.n	800539c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	@ 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fb0b 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e03d      	b.n	80053d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	3302      	adds	r3, #2
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e007      	b.n	800538a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1c8      	bne.n	800533a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2140      	movs	r1, #64	@ 0x40
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fad4 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e006      	b.n	80053d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e4:	b08e      	sub	sp, #56	@ 0x38
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4313      	orrs	r3, r2
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b9b      	ldr	r3, [pc, #620]	@ (800567c <UART_SetConfig+0x29c>)
 8005410:	4013      	ands	r3, r2
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005418:	430b      	orrs	r3, r1
 800541a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a90      	ldr	r2, [pc, #576]	@ (8005680 <UART_SetConfig+0x2a0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005448:	4313      	orrs	r3, r2
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005456:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005460:	430b      	orrs	r3, r1
 8005462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	f023 010f 	bic.w	r1, r3, #15
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a81      	ldr	r2, [pc, #516]	@ (8005684 <UART_SetConfig+0x2a4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d102      	bne.n	800548a <UART_SetConfig+0xaa>
 8005484:	2301      	movs	r3, #1
 8005486:	633b      	str	r3, [r7, #48]	@ 0x30
 8005488:	e022      	b.n	80054d0 <UART_SetConfig+0xf0>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7e      	ldr	r2, [pc, #504]	@ (8005688 <UART_SetConfig+0x2a8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d102      	bne.n	800549a <UART_SetConfig+0xba>
 8005494:	2302      	movs	r3, #2
 8005496:	633b      	str	r3, [r7, #48]	@ 0x30
 8005498:	e01a      	b.n	80054d0 <UART_SetConfig+0xf0>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a7b      	ldr	r2, [pc, #492]	@ (800568c <UART_SetConfig+0x2ac>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d102      	bne.n	80054aa <UART_SetConfig+0xca>
 80054a4:	2304      	movs	r3, #4
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a8:	e012      	b.n	80054d0 <UART_SetConfig+0xf0>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a78      	ldr	r2, [pc, #480]	@ (8005690 <UART_SetConfig+0x2b0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d102      	bne.n	80054ba <UART_SetConfig+0xda>
 80054b4:	2308      	movs	r3, #8
 80054b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b8:	e00a      	b.n	80054d0 <UART_SetConfig+0xf0>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a70      	ldr	r2, [pc, #448]	@ (8005680 <UART_SetConfig+0x2a0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <UART_SetConfig+0xec>
 80054c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80054c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ca:	e001      	b.n	80054d0 <UART_SetConfig+0xf0>
 80054cc:	2300      	movs	r3, #0
 80054ce:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005680 <UART_SetConfig+0x2a0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d16c      	bne.n	80055b4 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80054da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054dc:	f7fe fa9c 	bl	8003a18 <HAL_RCCEx_GetPeriphCLKFreq>
 80054e0:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80da 	beq.w	800569e <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	4a69      	ldr	r2, [pc, #420]	@ (8005694 <UART_SetConfig+0x2b4>)
 80054f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fc:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	429a      	cmp	r2, r3
 800550c:	d305      	bcc.n	800551a <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005520:	e0bd      	b.n	800569e <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	2200      	movs	r2, #0
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	60fa      	str	r2, [r7, #12]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	4a59      	ldr	r2, [pc, #356]	@ (8005694 <UART_SetConfig+0x2b4>)
 8005530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005534:	b29b      	uxth	r3, r3
 8005536:	2200      	movs	r2, #0
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005544:	f7fb fba4 	bl	8000c90 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	020b      	lsls	r3, r1, #8
 800555a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800555e:	0202      	lsls	r2, r0, #8
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	6849      	ldr	r1, [r1, #4]
 8005564:	0849      	lsrs	r1, r1, #1
 8005566:	2000      	movs	r0, #0
 8005568:	460c      	mov	r4, r1
 800556a:	4605      	mov	r5, r0
 800556c:	eb12 0804 	adds.w	r8, r2, r4
 8005570:	eb43 0905 	adc.w	r9, r3, r5
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	469a      	mov	sl, r3
 800557c:	4693      	mov	fp, r2
 800557e:	4652      	mov	r2, sl
 8005580:	465b      	mov	r3, fp
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fb fb83 	bl	8000c90 <__aeabi_uldivmod>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4613      	mov	r3, r2
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005598:	d308      	bcc.n	80055ac <UART_SetConfig+0x1cc>
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a0:	d204      	bcs.n	80055ac <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	e078      	b.n	800569e <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80055b2:	e074      	b.n	800569e <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055bc:	d137      	bne.n	800562e <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80055be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055c0:	f7fe fa2a 	bl	8003a18 <HAL_RCCEx_GetPeriphCLKFreq>
 80055c4:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d068      	beq.n	800569e <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	4a30      	ldr	r2, [pc, #192]	@ (8005694 <UART_SetConfig+0x2b4>)
 80055d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d6:	461a      	mov	r2, r3
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	fbb3 f3f2 	udiv	r3, r3, r2
 80055de:	005a      	lsls	r2, r3, #1
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	441a      	add	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	2b0f      	cmp	r3, #15
 80055f6:	d916      	bls.n	8005626 <UART_SetConfig+0x246>
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055fe:	d212      	bcs.n	8005626 <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	b29b      	uxth	r3, r3
 8005604:	f023 030f 	bic.w	r3, r3, #15
 8005608:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	b29b      	uxth	r3, r3
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	b29a      	uxth	r2, r3
 8005616:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005618:	4313      	orrs	r3, r2
 800561a:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e03b      	b.n	800569e <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800562c:	e037      	b.n	800569e <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800562e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005630:	f7fe f9f2 	bl	8003a18 <HAL_RCCEx_GetPeriphCLKFreq>
 8005634:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	2b00      	cmp	r3, #0
 800563a:	d030      	beq.n	800569e <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <UART_SetConfig+0x2b4>)
 8005642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005646:	461a      	mov	r2, r3
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	fbb3 f2f2 	udiv	r2, r3, r2
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	441a      	add	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d918      	bls.n	8005698 <UART_SetConfig+0x2b8>
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800566c:	d214      	bcs.n	8005698 <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	b29a      	uxth	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e011      	b.n	800569e <UART_SetConfig+0x2be>
 800567a:	bf00      	nop
 800567c:	cfff69f3 	.word	0xcfff69f3
 8005680:	40042400 	.word	0x40042400
 8005684:	40013800 	.word	0x40013800
 8005688:	40004800 	.word	0x40004800
 800568c:	40004c00 	.word	0x40004c00
 8005690:	40005000 	.word	0x40005000
 8005694:	0800a968 	.word	0x0800a968
      }
      else
      {
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3738      	adds	r7, #56	@ 0x38
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01a      	beq.n	80057de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c6:	d10a      	bne.n	80057de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b098      	sub	sp, #96	@ 0x60
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800581c:	f7fc fdf6 	bl	800240c <HAL_GetTick>
 8005820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d12f      	bne.n	8005890 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005838:	2200      	movs	r2, #0
 800583a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f88e 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d022      	beq.n	8005890 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800585e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
 800586a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e063      	b.n	8005958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d149      	bne.n	8005932 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a6:	2200      	movs	r2, #0
 80058a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f857 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03c      	beq.n	8005932 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	623b      	str	r3, [r7, #32]
   return(result);
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	69b9      	ldr	r1, [r7, #24]
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	617b      	str	r3, [r7, #20]
   return(result);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e012      	b.n	8005958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3758      	adds	r7, #88	@ 0x58
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005970:	e04f      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d04b      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc fd47 	bl	800240c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x30>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e04e      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d037      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b80      	cmp	r3, #128	@ 0x80
 80059a6:	d034      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d031      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d110      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f838 	bl	8005a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2208      	movs	r2, #8
 80059ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e029      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ec:	d111      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f81e 	bl	8005a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e00f      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d0a0      	beq.n	8005972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b095      	sub	sp, #84	@ 0x54
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e3      	bne.n	8005a74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d118      	bne.n	8005ae6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005afa:	bf00      	nop
 8005afc:	3754      	adds	r7, #84	@ 0x54
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_UARTEx_DisableFifoMode+0x16>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e027      	b.n	8005b6c <HAL_UARTEx_DisableFifoMode+0x66>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e02d      	b.n	8005bec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2224      	movs	r2, #36	@ 0x24
 8005b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f84f 	bl	8005c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e02d      	b.n	8005c68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	@ 0x24
 8005c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f811 	bl	8005c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c90:	e031      	b.n	8005cf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c92:	2308      	movs	r3, #8
 8005c94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c96:	2308      	movs	r3, #8
 8005c98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	0e5b      	lsrs	r3, r3, #25
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	0f5b      	lsrs	r3, r3, #29
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	7b3a      	ldrb	r2, [r7, #12]
 8005cbe:	4911      	ldr	r1, [pc, #68]	@ (8005d04 <UARTEx_SetNbDataToProcess+0x94>)
 8005cc0:	5c8a      	ldrb	r2, [r1, r2]
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cc6:	7b3a      	ldrb	r2, [r7, #12]
 8005cc8:	490f      	ldr	r1, [pc, #60]	@ (8005d08 <UARTEx_SetNbDataToProcess+0x98>)
 8005cca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ccc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	7b7a      	ldrb	r2, [r7, #13]
 8005cdc:	4909      	ldr	r1, [pc, #36]	@ (8005d04 <UARTEx_SetNbDataToProcess+0x94>)
 8005cde:	5c8a      	ldrb	r2, [r1, r2]
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ce4:	7b7a      	ldrb	r2, [r7, #13]
 8005ce6:	4908      	ldr	r1, [pc, #32]	@ (8005d08 <UARTEx_SetNbDataToProcess+0x98>)
 8005ce8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	0800a980 	.word	0x0800a980
 8005d08:	0800a988 	.word	0x0800a988

08005d0c <_ZdlPvj>:
 8005d0c:	f000 b800 	b.w	8005d10 <_ZdlPv>

08005d10 <_ZdlPv>:
 8005d10:	f000 b808 	b.w	8005d24 <free>

08005d14 <malloc>:
 8005d14:	4b02      	ldr	r3, [pc, #8]	@ (8005d20 <malloc+0xc>)
 8005d16:	4601      	mov	r1, r0
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f000 b82d 	b.w	8005d78 <_malloc_r>
 8005d1e:	bf00      	nop
 8005d20:	20000098 	.word	0x20000098

08005d24 <free>:
 8005d24:	4b02      	ldr	r3, [pc, #8]	@ (8005d30 <free+0xc>)
 8005d26:	4601      	mov	r1, r0
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f001 bf4f 	b.w	8007bcc <_free_r>
 8005d2e:	bf00      	nop
 8005d30:	20000098 	.word	0x20000098

08005d34 <sbrk_aligned>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4e0f      	ldr	r6, [pc, #60]	@ (8005d74 <sbrk_aligned+0x40>)
 8005d38:	460c      	mov	r4, r1
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	6831      	ldr	r1, [r6, #0]
 8005d3e:	b911      	cbnz	r1, 8005d46 <sbrk_aligned+0x12>
 8005d40:	f001 f874 	bl	8006e2c <_sbrk_r>
 8005d44:	6030      	str	r0, [r6, #0]
 8005d46:	4621      	mov	r1, r4
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f001 f86f 	bl	8006e2c <_sbrk_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	d103      	bne.n	8005d5a <sbrk_aligned+0x26>
 8005d52:	f04f 34ff 	mov.w	r4, #4294967295
 8005d56:	4620      	mov	r0, r4
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	1cc4      	adds	r4, r0, #3
 8005d5c:	f024 0403 	bic.w	r4, r4, #3
 8005d60:	42a0      	cmp	r0, r4
 8005d62:	d0f8      	beq.n	8005d56 <sbrk_aligned+0x22>
 8005d64:	1a21      	subs	r1, r4, r0
 8005d66:	4628      	mov	r0, r5
 8005d68:	f001 f860 	bl	8006e2c <_sbrk_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d1f2      	bne.n	8005d56 <sbrk_aligned+0x22>
 8005d70:	e7ef      	b.n	8005d52 <sbrk_aligned+0x1e>
 8005d72:	bf00      	nop
 8005d74:	200007e0 	.word	0x200007e0

08005d78 <_malloc_r>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	1ccd      	adds	r5, r1, #3
 8005d7e:	4606      	mov	r6, r0
 8005d80:	f025 0503 	bic.w	r5, r5, #3
 8005d84:	3508      	adds	r5, #8
 8005d86:	2d0c      	cmp	r5, #12
 8005d88:	bf38      	it	cc
 8005d8a:	250c      	movcc	r5, #12
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	db01      	blt.n	8005d94 <_malloc_r+0x1c>
 8005d90:	42a9      	cmp	r1, r5
 8005d92:	d904      	bls.n	8005d9e <_malloc_r+0x26>
 8005d94:	230c      	movs	r3, #12
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e74 <_malloc_r+0xfc>
 8005da2:	f000 f869 	bl	8005e78 <__malloc_lock>
 8005da6:	f8d8 3000 	ldr.w	r3, [r8]
 8005daa:	461c      	mov	r4, r3
 8005dac:	bb44      	cbnz	r4, 8005e00 <_malloc_r+0x88>
 8005dae:	4629      	mov	r1, r5
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff ffbf 	bl	8005d34 <sbrk_aligned>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	4604      	mov	r4, r0
 8005dba:	d158      	bne.n	8005e6e <_malloc_r+0xf6>
 8005dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8005dc0:	4627      	mov	r7, r4
 8005dc2:	2f00      	cmp	r7, #0
 8005dc4:	d143      	bne.n	8005e4e <_malloc_r+0xd6>
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	d04b      	beq.n	8005e62 <_malloc_r+0xea>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	4639      	mov	r1, r7
 8005dce:	4630      	mov	r0, r6
 8005dd0:	eb04 0903 	add.w	r9, r4, r3
 8005dd4:	f001 f82a 	bl	8006e2c <_sbrk_r>
 8005dd8:	4581      	cmp	r9, r0
 8005dda:	d142      	bne.n	8005e62 <_malloc_r+0xea>
 8005ddc:	6821      	ldr	r1, [r4, #0]
 8005dde:	4630      	mov	r0, r6
 8005de0:	1a6d      	subs	r5, r5, r1
 8005de2:	4629      	mov	r1, r5
 8005de4:	f7ff ffa6 	bl	8005d34 <sbrk_aligned>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d03a      	beq.n	8005e62 <_malloc_r+0xea>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	442b      	add	r3, r5
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	f8d8 3000 	ldr.w	r3, [r8]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	bb62      	cbnz	r2, 8005e54 <_malloc_r+0xdc>
 8005dfa:	f8c8 7000 	str.w	r7, [r8]
 8005dfe:	e00f      	b.n	8005e20 <_malloc_r+0xa8>
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	1b52      	subs	r2, r2, r5
 8005e04:	d420      	bmi.n	8005e48 <_malloc_r+0xd0>
 8005e06:	2a0b      	cmp	r2, #11
 8005e08:	d917      	bls.n	8005e3a <_malloc_r+0xc2>
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	6025      	str	r5, [r4, #0]
 8005e10:	bf18      	it	ne
 8005e12:	6059      	strne	r1, [r3, #4]
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	bf08      	it	eq
 8005e18:	f8c8 1000 	streq.w	r1, [r8]
 8005e1c:	5162      	str	r2, [r4, r5]
 8005e1e:	604b      	str	r3, [r1, #4]
 8005e20:	4630      	mov	r0, r6
 8005e22:	f000 f82f 	bl	8005e84 <__malloc_unlock>
 8005e26:	f104 000b 	add.w	r0, r4, #11
 8005e2a:	1d23      	adds	r3, r4, #4
 8005e2c:	f020 0007 	bic.w	r0, r0, #7
 8005e30:	1ac2      	subs	r2, r0, r3
 8005e32:	bf1c      	itt	ne
 8005e34:	1a1b      	subne	r3, r3, r0
 8005e36:	50a3      	strne	r3, [r4, r2]
 8005e38:	e7af      	b.n	8005d9a <_malloc_r+0x22>
 8005e3a:	6862      	ldr	r2, [r4, #4]
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	bf0c      	ite	eq
 8005e40:	f8c8 2000 	streq.w	r2, [r8]
 8005e44:	605a      	strne	r2, [r3, #4]
 8005e46:	e7eb      	b.n	8005e20 <_malloc_r+0xa8>
 8005e48:	4623      	mov	r3, r4
 8005e4a:	6864      	ldr	r4, [r4, #4]
 8005e4c:	e7ae      	b.n	8005dac <_malloc_r+0x34>
 8005e4e:	463c      	mov	r4, r7
 8005e50:	687f      	ldr	r7, [r7, #4]
 8005e52:	e7b6      	b.n	8005dc2 <_malloc_r+0x4a>
 8005e54:	461a      	mov	r2, r3
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d1fb      	bne.n	8005e54 <_malloc_r+0xdc>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6053      	str	r3, [r2, #4]
 8005e60:	e7de      	b.n	8005e20 <_malloc_r+0xa8>
 8005e62:	230c      	movs	r3, #12
 8005e64:	4630      	mov	r0, r6
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	f000 f80c 	bl	8005e84 <__malloc_unlock>
 8005e6c:	e794      	b.n	8005d98 <_malloc_r+0x20>
 8005e6e:	6005      	str	r5, [r0, #0]
 8005e70:	e7d6      	b.n	8005e20 <_malloc_r+0xa8>
 8005e72:	bf00      	nop
 8005e74:	200007e4 	.word	0x200007e4

08005e78 <__malloc_lock>:
 8005e78:	4801      	ldr	r0, [pc, #4]	@ (8005e80 <__malloc_lock+0x8>)
 8005e7a:	f001 b824 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20000928 	.word	0x20000928

08005e84 <__malloc_unlock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	@ (8005e8c <__malloc_unlock+0x8>)
 8005e86:	f001 b81f 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000928 	.word	0x20000928

08005e90 <__cvt>:
 8005e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	ec57 6b10 	vmov	r6, r7, d0
 8005e98:	2f00      	cmp	r7, #0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	bfb4      	ite	lt
 8005ea2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ea6:	2300      	movge	r3, #0
 8005ea8:	4691      	mov	r9, r2
 8005eaa:	bfbf      	itttt	lt
 8005eac:	4632      	movlt	r2, r6
 8005eae:	461f      	movlt	r7, r3
 8005eb0:	232d      	movlt	r3, #45	@ 0x2d
 8005eb2:	4616      	movlt	r6, r2
 8005eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005eb8:	700b      	strb	r3, [r1, #0]
 8005eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ebc:	f023 0820 	bic.w	r8, r3, #32
 8005ec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ec4:	d005      	beq.n	8005ed2 <__cvt+0x42>
 8005ec6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005eca:	d100      	bne.n	8005ece <__cvt+0x3e>
 8005ecc:	3401      	adds	r4, #1
 8005ece:	2102      	movs	r1, #2
 8005ed0:	e000      	b.n	8005ed4 <__cvt+0x44>
 8005ed2:	2103      	movs	r1, #3
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	ab02      	add	r3, sp, #8
 8005edc:	ec47 6b10 	vmov	d0, r6, r7
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4653      	mov	r3, sl
 8005ee4:	f001 f8a0 	bl	8007028 <_dtoa_r>
 8005ee8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005eec:	4605      	mov	r5, r0
 8005eee:	d119      	bne.n	8005f24 <__cvt+0x94>
 8005ef0:	f019 0f01 	tst.w	r9, #1
 8005ef4:	d00e      	beq.n	8005f14 <__cvt+0x84>
 8005ef6:	eb00 0904 	add.w	r9, r0, r4
 8005efa:	2200      	movs	r2, #0
 8005efc:	2300      	movs	r3, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fde5 	bl	8000ad0 <__aeabi_dcmpeq>
 8005f06:	b108      	cbz	r0, 8005f0c <__cvt+0x7c>
 8005f08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f0c:	2230      	movs	r2, #48	@ 0x30
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	454b      	cmp	r3, r9
 8005f12:	d31e      	bcc.n	8005f52 <__cvt+0xc2>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	4628      	mov	r0, r5
 8005f18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f1a:	1b5b      	subs	r3, r3, r5
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	b004      	add	sp, #16
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f28:	eb00 0904 	add.w	r9, r0, r4
 8005f2c:	d1e5      	bne.n	8005efa <__cvt+0x6a>
 8005f2e:	7803      	ldrb	r3, [r0, #0]
 8005f30:	2b30      	cmp	r3, #48	@ 0x30
 8005f32:	d10a      	bne.n	8005f4a <__cvt+0xba>
 8005f34:	2200      	movs	r2, #0
 8005f36:	2300      	movs	r3, #0
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fdc8 	bl	8000ad0 <__aeabi_dcmpeq>
 8005f40:	b918      	cbnz	r0, 8005f4a <__cvt+0xba>
 8005f42:	f1c4 0401 	rsb	r4, r4, #1
 8005f46:	f8ca 4000 	str.w	r4, [sl]
 8005f4a:	f8da 3000 	ldr.w	r3, [sl]
 8005f4e:	4499      	add	r9, r3
 8005f50:	e7d3      	b.n	8005efa <__cvt+0x6a>
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	9103      	str	r1, [sp, #12]
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e7d9      	b.n	8005f0e <__cvt+0x7e>

08005f5a <__exponent>:
 8005f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	7002      	strb	r2, [r0, #0]
 8005f60:	bfba      	itte	lt
 8005f62:	4249      	neglt	r1, r1
 8005f64:	232d      	movlt	r3, #45	@ 0x2d
 8005f66:	232b      	movge	r3, #43	@ 0x2b
 8005f68:	2909      	cmp	r1, #9
 8005f6a:	7043      	strb	r3, [r0, #1]
 8005f6c:	dd28      	ble.n	8005fc0 <__exponent+0x66>
 8005f6e:	f10d 0307 	add.w	r3, sp, #7
 8005f72:	270a      	movs	r7, #10
 8005f74:	461d      	mov	r5, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f7e:	fb07 1416 	mls	r4, r7, r6, r1
 8005f82:	3430      	adds	r4, #48	@ 0x30
 8005f84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f88:	460c      	mov	r4, r1
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	2c63      	cmp	r4, #99	@ 0x63
 8005f8e:	dcf2      	bgt.n	8005f76 <__exponent+0x1c>
 8005f90:	3130      	adds	r1, #48	@ 0x30
 8005f92:	1e94      	subs	r4, r2, #2
 8005f94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f98:	1c41      	adds	r1, r0, #1
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	42ab      	cmp	r3, r5
 8005f9e:	d30a      	bcc.n	8005fb6 <__exponent+0x5c>
 8005fa0:	f10d 0309 	add.w	r3, sp, #9
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	42ac      	cmp	r4, r5
 8005fa8:	bf88      	it	hi
 8005faa:	2300      	movhi	r3, #0
 8005fac:	3302      	adds	r3, #2
 8005fae:	4403      	add	r3, r0
 8005fb0:	1a18      	subs	r0, r3, r0
 8005fb2:	b003      	add	sp, #12
 8005fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005fba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005fbe:	e7ed      	b.n	8005f9c <__exponent+0x42>
 8005fc0:	2330      	movs	r3, #48	@ 0x30
 8005fc2:	3130      	adds	r1, #48	@ 0x30
 8005fc4:	7083      	strb	r3, [r0, #2]
 8005fc6:	1d03      	adds	r3, r0, #4
 8005fc8:	70c1      	strb	r1, [r0, #3]
 8005fca:	e7f1      	b.n	8005fb0 <__exponent+0x56>

08005fcc <_printf_float>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	b08d      	sub	sp, #52	@ 0x34
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005fdc:	4605      	mov	r5, r0
 8005fde:	f000 feed 	bl	8006dbc <_localeconv_r>
 8005fe2:	6803      	ldr	r3, [r0, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	f7fa f946 	bl	8000278 <strlen>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9005      	str	r0, [sp, #20]
 8005ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff6:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ffa:	3307      	adds	r3, #7
 8005ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8006000:	f023 0307 	bic.w	r3, r3, #7
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	f8c8 2000 	str.w	r2, [r8]
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006014:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006018:	f8cd 8018 	str.w	r8, [sp, #24]
 800601c:	9307      	str	r3, [sp, #28]
 800601e:	4b9d      	ldr	r3, [pc, #628]	@ (8006294 <_printf_float+0x2c8>)
 8006020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006024:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006028:	f7fa fd84 	bl	8000b34 <__aeabi_dcmpun>
 800602c:	bb70      	cbnz	r0, 800608c <_printf_float+0xc0>
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	4b98      	ldr	r3, [pc, #608]	@ (8006294 <_printf_float+0x2c8>)
 8006034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006038:	f7fa fd5e 	bl	8000af8 <__aeabi_dcmple>
 800603c:	bb30      	cbnz	r0, 800608c <_printf_float+0xc0>
 800603e:	2200      	movs	r2, #0
 8006040:	2300      	movs	r3, #0
 8006042:	4640      	mov	r0, r8
 8006044:	4649      	mov	r1, r9
 8006046:	f7fa fd4d 	bl	8000ae4 <__aeabi_dcmplt>
 800604a:	b110      	cbz	r0, 8006052 <_printf_float+0x86>
 800604c:	232d      	movs	r3, #45	@ 0x2d
 800604e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006052:	4a91      	ldr	r2, [pc, #580]	@ (8006298 <_printf_float+0x2cc>)
 8006054:	4b91      	ldr	r3, [pc, #580]	@ (800629c <_printf_float+0x2d0>)
 8006056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800605a:	bf8c      	ite	hi
 800605c:	4690      	movhi	r8, r2
 800605e:	4698      	movls	r8, r3
 8006060:	2303      	movs	r3, #3
 8006062:	f04f 0900 	mov.w	r9, #0
 8006066:	6123      	str	r3, [r4, #16]
 8006068:	f02b 0304 	bic.w	r3, fp, #4
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	4633      	mov	r3, r6
 8006070:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006072:	4621      	mov	r1, r4
 8006074:	4628      	mov	r0, r5
 8006076:	9700      	str	r7, [sp, #0]
 8006078:	f000 f9d2 	bl	8006420 <_printf_common>
 800607c:	3001      	adds	r0, #1
 800607e:	f040 808d 	bne.w	800619c <_printf_float+0x1d0>
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
 8006086:	b00d      	add	sp, #52	@ 0x34
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa fd4e 	bl	8000b34 <__aeabi_dcmpun>
 8006098:	b140      	cbz	r0, 80060ac <_printf_float+0xe0>
 800609a:	464b      	mov	r3, r9
 800609c:	4a80      	ldr	r2, [pc, #512]	@ (80062a0 <_printf_float+0x2d4>)
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbc      	itt	lt
 80060a2:	232d      	movlt	r3, #45	@ 0x2d
 80060a4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060a8:	4b7e      	ldr	r3, [pc, #504]	@ (80062a4 <_printf_float+0x2d8>)
 80060aa:	e7d4      	b.n	8006056 <_printf_float+0x8a>
 80060ac:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	9206      	str	r2, [sp, #24]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	d13b      	bne.n	8006130 <_printf_float+0x164>
 80060b8:	2306      	movs	r3, #6
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80060c0:	2300      	movs	r3, #0
 80060c2:	4628      	mov	r0, r5
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	9303      	str	r3, [sp, #12]
 80060c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80060ca:	e9cd a301 	strd	sl, r3, [sp, #4]
 80060ce:	ab09      	add	r3, sp, #36	@ 0x24
 80060d0:	ec49 8b10 	vmov	d0, r8, r9
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80060da:	6861      	ldr	r1, [r4, #4]
 80060dc:	f7ff fed8 	bl	8005e90 <__cvt>
 80060e0:	9b06      	ldr	r3, [sp, #24]
 80060e2:	4680      	mov	r8, r0
 80060e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060e6:	2b47      	cmp	r3, #71	@ 0x47
 80060e8:	d129      	bne.n	800613e <_printf_float+0x172>
 80060ea:	1cc8      	adds	r0, r1, #3
 80060ec:	db02      	blt.n	80060f4 <_printf_float+0x128>
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	4299      	cmp	r1, r3
 80060f2:	dd41      	ble.n	8006178 <_printf_float+0x1ac>
 80060f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80060f8:	fa5f fa8a 	uxtb.w	sl, sl
 80060fc:	3901      	subs	r1, #1
 80060fe:	4652      	mov	r2, sl
 8006100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006104:	9109      	str	r1, [sp, #36]	@ 0x24
 8006106:	f7ff ff28 	bl	8005f5a <__exponent>
 800610a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800610c:	4681      	mov	r9, r0
 800610e:	1813      	adds	r3, r2, r0
 8006110:	2a01      	cmp	r2, #1
 8006112:	6123      	str	r3, [r4, #16]
 8006114:	dc02      	bgt.n	800611c <_printf_float+0x150>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	07d2      	lsls	r2, r2, #31
 800611a:	d501      	bpl.n	8006120 <_printf_float+0x154>
 800611c:	3301      	adds	r3, #1
 800611e:	6123      	str	r3, [r4, #16]
 8006120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0a2      	beq.n	800606e <_printf_float+0xa2>
 8006128:	232d      	movs	r3, #45	@ 0x2d
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800612e:	e79e      	b.n	800606e <_printf_float+0xa2>
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2a47      	cmp	r2, #71	@ 0x47
 8006134:	d1c2      	bne.n	80060bc <_printf_float+0xf0>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1c0      	bne.n	80060bc <_printf_float+0xf0>
 800613a:	2301      	movs	r3, #1
 800613c:	e7bd      	b.n	80060ba <_printf_float+0xee>
 800613e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006142:	d9db      	bls.n	80060fc <_printf_float+0x130>
 8006144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006148:	d118      	bne.n	800617c <_printf_float+0x1b0>
 800614a:	2900      	cmp	r1, #0
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	dd0b      	ble.n	8006168 <_printf_float+0x19c>
 8006150:	6121      	str	r1, [r4, #16]
 8006152:	b913      	cbnz	r3, 800615a <_printf_float+0x18e>
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	07d0      	lsls	r0, r2, #31
 8006158:	d502      	bpl.n	8006160 <_printf_float+0x194>
 800615a:	3301      	adds	r3, #1
 800615c:	440b      	add	r3, r1
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	f04f 0900 	mov.w	r9, #0
 8006164:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006166:	e7db      	b.n	8006120 <_printf_float+0x154>
 8006168:	b913      	cbnz	r3, 8006170 <_printf_float+0x1a4>
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	07d2      	lsls	r2, r2, #31
 800616e:	d501      	bpl.n	8006174 <_printf_float+0x1a8>
 8006170:	3302      	adds	r3, #2
 8006172:	e7f4      	b.n	800615e <_printf_float+0x192>
 8006174:	2301      	movs	r3, #1
 8006176:	e7f2      	b.n	800615e <_printf_float+0x192>
 8006178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800617c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800617e:	4299      	cmp	r1, r3
 8006180:	db05      	blt.n	800618e <_printf_float+0x1c2>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	6121      	str	r1, [r4, #16]
 8006186:	07d8      	lsls	r0, r3, #31
 8006188:	d5ea      	bpl.n	8006160 <_printf_float+0x194>
 800618a:	1c4b      	adds	r3, r1, #1
 800618c:	e7e7      	b.n	800615e <_printf_float+0x192>
 800618e:	2900      	cmp	r1, #0
 8006190:	bfd4      	ite	le
 8006192:	f1c1 0202 	rsble	r2, r1, #2
 8006196:	2201      	movgt	r2, #1
 8006198:	4413      	add	r3, r2
 800619a:	e7e0      	b.n	800615e <_printf_float+0x192>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	055a      	lsls	r2, r3, #21
 80061a0:	d407      	bmi.n	80061b2 <_printf_float+0x1e6>
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	4642      	mov	r2, r8
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	d12b      	bne.n	8006208 <_printf_float+0x23c>
 80061b0:	e767      	b.n	8006082 <_printf_float+0xb6>
 80061b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061b6:	f240 80dd 	bls.w	8006374 <_printf_float+0x3a8>
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061c2:	f7fa fc85 	bl	8000ad0 <__aeabi_dcmpeq>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d033      	beq.n	8006232 <_printf_float+0x266>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4a36      	ldr	r2, [pc, #216]	@ (80062a8 <_printf_float+0x2dc>)
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	f43f af54 	beq.w	8006082 <_printf_float+0xb6>
 80061da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80061de:	4543      	cmp	r3, r8
 80061e0:	db02      	blt.n	80061e8 <_printf_float+0x21c>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	07d8      	lsls	r0, r3, #31
 80061e6:	d50f      	bpl.n	8006208 <_printf_float+0x23c>
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af45 	beq.w	8006082 <_printf_float+0xb6>
 80061f8:	f04f 0900 	mov.w	r9, #0
 80061fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006200:	f104 0a1a 	add.w	sl, r4, #26
 8006204:	45c8      	cmp	r8, r9
 8006206:	dc09      	bgt.n	800621c <_printf_float+0x250>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	079b      	lsls	r3, r3, #30
 800620c:	f100 8103 	bmi.w	8006416 <_printf_float+0x44a>
 8006210:	68e0      	ldr	r0, [r4, #12]
 8006212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006214:	4298      	cmp	r0, r3
 8006216:	bfb8      	it	lt
 8006218:	4618      	movlt	r0, r3
 800621a:	e734      	b.n	8006086 <_printf_float+0xba>
 800621c:	2301      	movs	r3, #1
 800621e:	4652      	mov	r2, sl
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af2b 	beq.w	8006082 <_printf_float+0xb6>
 800622c:	f109 0901 	add.w	r9, r9, #1
 8006230:	e7e8      	b.n	8006204 <_printf_float+0x238>
 8006232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	dc39      	bgt.n	80062ac <_printf_float+0x2e0>
 8006238:	2301      	movs	r3, #1
 800623a:	4a1b      	ldr	r2, [pc, #108]	@ (80062a8 <_printf_float+0x2dc>)
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f af1d 	beq.w	8006082 <_printf_float+0xb6>
 8006248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800624c:	ea59 0303 	orrs.w	r3, r9, r3
 8006250:	d102      	bne.n	8006258 <_printf_float+0x28c>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	07d9      	lsls	r1, r3, #31
 8006256:	d5d7      	bpl.n	8006208 <_printf_float+0x23c>
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	f43f af0d 	beq.w	8006082 <_printf_float+0xb6>
 8006268:	f04f 0a00 	mov.w	sl, #0
 800626c:	f104 0b1a 	add.w	fp, r4, #26
 8006270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006272:	425b      	negs	r3, r3
 8006274:	4553      	cmp	r3, sl
 8006276:	dc01      	bgt.n	800627c <_printf_float+0x2b0>
 8006278:	464b      	mov	r3, r9
 800627a:	e793      	b.n	80061a4 <_printf_float+0x1d8>
 800627c:	2301      	movs	r3, #1
 800627e:	465a      	mov	r2, fp
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	f43f aefb 	beq.w	8006082 <_printf_float+0xb6>
 800628c:	f10a 0a01 	add.w	sl, sl, #1
 8006290:	e7ee      	b.n	8006270 <_printf_float+0x2a4>
 8006292:	bf00      	nop
 8006294:	7fefffff 	.word	0x7fefffff
 8006298:	0800a994 	.word	0x0800a994
 800629c:	0800a990 	.word	0x0800a990
 80062a0:	0800a99c 	.word	0x0800a99c
 80062a4:	0800a998 	.word	0x0800a998
 80062a8:	0800a9a0 	.word	0x0800a9a0
 80062ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062b2:	4553      	cmp	r3, sl
 80062b4:	bfa8      	it	ge
 80062b6:	4653      	movge	r3, sl
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	4699      	mov	r9, r3
 80062bc:	dc36      	bgt.n	800632c <_printf_float+0x360>
 80062be:	f04f 0b00 	mov.w	fp, #0
 80062c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c6:	f104 021a 	add.w	r2, r4, #26
 80062ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062cc:	9306      	str	r3, [sp, #24]
 80062ce:	eba3 0309 	sub.w	r3, r3, r9
 80062d2:	455b      	cmp	r3, fp
 80062d4:	dc31      	bgt.n	800633a <_printf_float+0x36e>
 80062d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d8:	459a      	cmp	sl, r3
 80062da:	dc3a      	bgt.n	8006352 <_printf_float+0x386>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	07da      	lsls	r2, r3, #31
 80062e0:	d437      	bmi.n	8006352 <_printf_float+0x386>
 80062e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e4:	ebaa 0903 	sub.w	r9, sl, r3
 80062e8:	9b06      	ldr	r3, [sp, #24]
 80062ea:	ebaa 0303 	sub.w	r3, sl, r3
 80062ee:	4599      	cmp	r9, r3
 80062f0:	bfa8      	it	ge
 80062f2:	4699      	movge	r9, r3
 80062f4:	f1b9 0f00 	cmp.w	r9, #0
 80062f8:	dc33      	bgt.n	8006362 <_printf_float+0x396>
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006302:	f104 0b1a 	add.w	fp, r4, #26
 8006306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006308:	ebaa 0303 	sub.w	r3, sl, r3
 800630c:	eba3 0309 	sub.w	r3, r3, r9
 8006310:	4543      	cmp	r3, r8
 8006312:	f77f af79 	ble.w	8006208 <_printf_float+0x23c>
 8006316:	2301      	movs	r3, #1
 8006318:	465a      	mov	r2, fp
 800631a:	4631      	mov	r1, r6
 800631c:	4628      	mov	r0, r5
 800631e:	47b8      	blx	r7
 8006320:	3001      	adds	r0, #1
 8006322:	f43f aeae 	beq.w	8006082 <_printf_float+0xb6>
 8006326:	f108 0801 	add.w	r8, r8, #1
 800632a:	e7ec      	b.n	8006306 <_printf_float+0x33a>
 800632c:	4642      	mov	r2, r8
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	d1c2      	bne.n	80062be <_printf_float+0x2f2>
 8006338:	e6a3      	b.n	8006082 <_printf_float+0xb6>
 800633a:	2301      	movs	r3, #1
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	9206      	str	r2, [sp, #24]
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f ae9c 	beq.w	8006082 <_printf_float+0xb6>
 800634a:	f10b 0b01 	add.w	fp, fp, #1
 800634e:	9a06      	ldr	r2, [sp, #24]
 8006350:	e7bb      	b.n	80062ca <_printf_float+0x2fe>
 8006352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	d1c0      	bne.n	80062e2 <_printf_float+0x316>
 8006360:	e68f      	b.n	8006082 <_printf_float+0xb6>
 8006362:	9a06      	ldr	r2, [sp, #24]
 8006364:	464b      	mov	r3, r9
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	4442      	add	r2, r8
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	d1c3      	bne.n	80062fa <_printf_float+0x32e>
 8006372:	e686      	b.n	8006082 <_printf_float+0xb6>
 8006374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006378:	f1ba 0f01 	cmp.w	sl, #1
 800637c:	dc01      	bgt.n	8006382 <_printf_float+0x3b6>
 800637e:	07db      	lsls	r3, r3, #31
 8006380:	d536      	bpl.n	80063f0 <_printf_float+0x424>
 8006382:	2301      	movs	r3, #1
 8006384:	4642      	mov	r2, r8
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae78 	beq.w	8006082 <_printf_float+0xb6>
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae70 	beq.w	8006082 <_printf_float+0xb6>
 80063a2:	2200      	movs	r2, #0
 80063a4:	2300      	movs	r3, #0
 80063a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ae:	f7fa fb8f 	bl	8000ad0 <__aeabi_dcmpeq>
 80063b2:	b9c0      	cbnz	r0, 80063e6 <_printf_float+0x41a>
 80063b4:	4653      	mov	r3, sl
 80063b6:	f108 0201 	add.w	r2, r8, #1
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	d10c      	bne.n	80063de <_printf_float+0x412>
 80063c4:	e65d      	b.n	8006082 <_printf_float+0xb6>
 80063c6:	2301      	movs	r3, #1
 80063c8:	465a      	mov	r2, fp
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae56 	beq.w	8006082 <_printf_float+0xb6>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	45d0      	cmp	r8, sl
 80063dc:	dbf3      	blt.n	80063c6 <_printf_float+0x3fa>
 80063de:	464b      	mov	r3, r9
 80063e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80063e4:	e6df      	b.n	80061a6 <_printf_float+0x1da>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 0b1a 	add.w	fp, r4, #26
 80063ee:	e7f4      	b.n	80063da <_printf_float+0x40e>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4642      	mov	r2, r8
 80063f4:	e7e1      	b.n	80063ba <_printf_float+0x3ee>
 80063f6:	2301      	movs	r3, #1
 80063f8:	464a      	mov	r2, r9
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f ae3e 	beq.w	8006082 <_printf_float+0xb6>
 8006406:	f108 0801 	add.w	r8, r8, #1
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800640e:	1a5b      	subs	r3, r3, r1
 8006410:	4543      	cmp	r3, r8
 8006412:	dcf0      	bgt.n	80063f6 <_printf_float+0x42a>
 8006414:	e6fc      	b.n	8006210 <_printf_float+0x244>
 8006416:	f04f 0800 	mov.w	r8, #0
 800641a:	f104 0919 	add.w	r9, r4, #25
 800641e:	e7f4      	b.n	800640a <_printf_float+0x43e>

08006420 <_printf_common>:
 8006420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006424:	4616      	mov	r6, r2
 8006426:	4698      	mov	r8, r3
 8006428:	688a      	ldr	r2, [r1, #8]
 800642a:	4607      	mov	r7, r0
 800642c:	690b      	ldr	r3, [r1, #16]
 800642e:	460c      	mov	r4, r1
 8006430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006434:	4293      	cmp	r3, r2
 8006436:	bfb8      	it	lt
 8006438:	4613      	movlt	r3, r2
 800643a:	6033      	str	r3, [r6, #0]
 800643c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006440:	b10a      	cbz	r2, 8006446 <_printf_common+0x26>
 8006442:	3301      	adds	r3, #1
 8006444:	6033      	str	r3, [r6, #0]
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	0699      	lsls	r1, r3, #26
 800644a:	bf42      	ittt	mi
 800644c:	6833      	ldrmi	r3, [r6, #0]
 800644e:	3302      	addmi	r3, #2
 8006450:	6033      	strmi	r3, [r6, #0]
 8006452:	6825      	ldr	r5, [r4, #0]
 8006454:	f015 0506 	ands.w	r5, r5, #6
 8006458:	d106      	bne.n	8006468 <_printf_common+0x48>
 800645a:	f104 0a19 	add.w	sl, r4, #25
 800645e:	68e3      	ldr	r3, [r4, #12]
 8006460:	6832      	ldr	r2, [r6, #0]
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	42ab      	cmp	r3, r5
 8006466:	dc2b      	bgt.n	80064c0 <_printf_common+0xa0>
 8006468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	3b00      	subs	r3, #0
 8006470:	bf18      	it	ne
 8006472:	2301      	movne	r3, #1
 8006474:	0692      	lsls	r2, r2, #26
 8006476:	d430      	bmi.n	80064da <_printf_common+0xba>
 8006478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800647c:	4641      	mov	r1, r8
 800647e:	4638      	mov	r0, r7
 8006480:	47c8      	blx	r9
 8006482:	3001      	adds	r0, #1
 8006484:	d023      	beq.n	80064ce <_printf_common+0xae>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	341a      	adds	r4, #26
 800648a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800648e:	f003 0306 	and.w	r3, r3, #6
 8006492:	2b04      	cmp	r3, #4
 8006494:	bf0a      	itet	eq
 8006496:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800649a:	2500      	movne	r5, #0
 800649c:	6833      	ldreq	r3, [r6, #0]
 800649e:	f04f 0600 	mov.w	r6, #0
 80064a2:	bf08      	it	eq
 80064a4:	1aed      	subeq	r5, r5, r3
 80064a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064aa:	bf08      	it	eq
 80064ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bfc4      	itt	gt
 80064b4:	1a9b      	subgt	r3, r3, r2
 80064b6:	18ed      	addgt	r5, r5, r3
 80064b8:	42b5      	cmp	r5, r6
 80064ba:	d11a      	bne.n	80064f2 <_printf_common+0xd2>
 80064bc:	2000      	movs	r0, #0
 80064be:	e008      	b.n	80064d2 <_printf_common+0xb2>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4652      	mov	r2, sl
 80064c4:	4641      	mov	r1, r8
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c8      	blx	r9
 80064ca:	3001      	adds	r0, #1
 80064cc:	d103      	bne.n	80064d6 <_printf_common+0xb6>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d6:	3501      	adds	r5, #1
 80064d8:	e7c1      	b.n	800645e <_printf_common+0x3e>
 80064da:	18e1      	adds	r1, r4, r3
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	2030      	movs	r0, #48	@ 0x30
 80064e0:	3302      	adds	r3, #2
 80064e2:	4422      	add	r2, r4
 80064e4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064f0:	e7c2      	b.n	8006478 <_printf_common+0x58>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4622      	mov	r2, r4
 80064f6:	4641      	mov	r1, r8
 80064f8:	4638      	mov	r0, r7
 80064fa:	47c8      	blx	r9
 80064fc:	3001      	adds	r0, #1
 80064fe:	d0e6      	beq.n	80064ce <_printf_common+0xae>
 8006500:	3601      	adds	r6, #1
 8006502:	e7d9      	b.n	80064b8 <_printf_common+0x98>

08006504 <_printf_i>:
 8006504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	7e0f      	ldrb	r7, [r1, #24]
 800650a:	4691      	mov	r9, r2
 800650c:	4680      	mov	r8, r0
 800650e:	460c      	mov	r4, r1
 8006510:	2f78      	cmp	r7, #120	@ 0x78
 8006512:	469a      	mov	sl, r3
 8006514:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800651a:	d807      	bhi.n	800652c <_printf_i+0x28>
 800651c:	2f62      	cmp	r7, #98	@ 0x62
 800651e:	d80a      	bhi.n	8006536 <_printf_i+0x32>
 8006520:	2f00      	cmp	r7, #0
 8006522:	f000 80d1 	beq.w	80066c8 <_printf_i+0x1c4>
 8006526:	2f58      	cmp	r7, #88	@ 0x58
 8006528:	f000 80b8 	beq.w	800669c <_printf_i+0x198>
 800652c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006534:	e03a      	b.n	80065ac <_printf_i+0xa8>
 8006536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800653a:	2b15      	cmp	r3, #21
 800653c:	d8f6      	bhi.n	800652c <_printf_i+0x28>
 800653e:	a101      	add	r1, pc, #4	@ (adr r1, 8006544 <_printf_i+0x40>)
 8006540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006544:	0800659d 	.word	0x0800659d
 8006548:	080065b1 	.word	0x080065b1
 800654c:	0800652d 	.word	0x0800652d
 8006550:	0800652d 	.word	0x0800652d
 8006554:	0800652d 	.word	0x0800652d
 8006558:	0800652d 	.word	0x0800652d
 800655c:	080065b1 	.word	0x080065b1
 8006560:	0800652d 	.word	0x0800652d
 8006564:	0800652d 	.word	0x0800652d
 8006568:	0800652d 	.word	0x0800652d
 800656c:	0800652d 	.word	0x0800652d
 8006570:	080066af 	.word	0x080066af
 8006574:	080065db 	.word	0x080065db
 8006578:	08006669 	.word	0x08006669
 800657c:	0800652d 	.word	0x0800652d
 8006580:	0800652d 	.word	0x0800652d
 8006584:	080066d1 	.word	0x080066d1
 8006588:	0800652d 	.word	0x0800652d
 800658c:	080065db 	.word	0x080065db
 8006590:	0800652d 	.word	0x0800652d
 8006594:	0800652d 	.word	0x0800652d
 8006598:	08006671 	.word	0x08006671
 800659c:	6833      	ldr	r3, [r6, #0]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6032      	str	r2, [r6, #0]
 80065a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065ac:	2301      	movs	r3, #1
 80065ae:	e09c      	b.n	80066ea <_printf_i+0x1e6>
 80065b0:	6833      	ldr	r3, [r6, #0]
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	1d19      	adds	r1, r3, #4
 80065b6:	6031      	str	r1, [r6, #0]
 80065b8:	0606      	lsls	r6, r0, #24
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0xbc>
 80065bc:	681d      	ldr	r5, [r3, #0]
 80065be:	e003      	b.n	80065c8 <_printf_i+0xc4>
 80065c0:	0645      	lsls	r5, r0, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0xb8>
 80065c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	da03      	bge.n	80065d4 <_printf_i+0xd0>
 80065cc:	232d      	movs	r3, #45	@ 0x2d
 80065ce:	426d      	negs	r5, r5
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065d4:	4858      	ldr	r0, [pc, #352]	@ (8006738 <_printf_i+0x234>)
 80065d6:	230a      	movs	r3, #10
 80065d8:	e011      	b.n	80065fe <_printf_i+0xfa>
 80065da:	6821      	ldr	r1, [r4, #0]
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	0608      	lsls	r0, r1, #24
 80065e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065e4:	d402      	bmi.n	80065ec <_printf_i+0xe8>
 80065e6:	0649      	lsls	r1, r1, #25
 80065e8:	bf48      	it	mi
 80065ea:	b2ad      	uxthmi	r5, r5
 80065ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	4851      	ldr	r0, [pc, #324]	@ (8006738 <_printf_i+0x234>)
 80065f2:	bf14      	ite	ne
 80065f4:	230a      	movne	r3, #10
 80065f6:	2308      	moveq	r3, #8
 80065f8:	2100      	movs	r1, #0
 80065fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065fe:	6866      	ldr	r6, [r4, #4]
 8006600:	2e00      	cmp	r6, #0
 8006602:	60a6      	str	r6, [r4, #8]
 8006604:	db05      	blt.n	8006612 <_printf_i+0x10e>
 8006606:	6821      	ldr	r1, [r4, #0]
 8006608:	432e      	orrs	r6, r5
 800660a:	f021 0104 	bic.w	r1, r1, #4
 800660e:	6021      	str	r1, [r4, #0]
 8006610:	d04b      	beq.n	80066aa <_printf_i+0x1a6>
 8006612:	4616      	mov	r6, r2
 8006614:	fbb5 f1f3 	udiv	r1, r5, r3
 8006618:	fb03 5711 	mls	r7, r3, r1, r5
 800661c:	5dc7      	ldrb	r7, [r0, r7]
 800661e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006622:	462f      	mov	r7, r5
 8006624:	460d      	mov	r5, r1
 8006626:	42bb      	cmp	r3, r7
 8006628:	d9f4      	bls.n	8006614 <_printf_i+0x110>
 800662a:	2b08      	cmp	r3, #8
 800662c:	d10b      	bne.n	8006646 <_printf_i+0x142>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	07df      	lsls	r7, r3, #31
 8006632:	d508      	bpl.n	8006646 <_printf_i+0x142>
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	6861      	ldr	r1, [r4, #4]
 8006638:	4299      	cmp	r1, r3
 800663a:	bfde      	ittt	le
 800663c:	2330      	movle	r3, #48	@ 0x30
 800663e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006642:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006646:	1b92      	subs	r2, r2, r6
 8006648:	6122      	str	r2, [r4, #16]
 800664a:	464b      	mov	r3, r9
 800664c:	aa03      	add	r2, sp, #12
 800664e:	4621      	mov	r1, r4
 8006650:	4640      	mov	r0, r8
 8006652:	f8cd a000 	str.w	sl, [sp]
 8006656:	f7ff fee3 	bl	8006420 <_printf_common>
 800665a:	3001      	adds	r0, #1
 800665c:	d14a      	bne.n	80066f4 <_printf_i+0x1f0>
 800665e:	f04f 30ff 	mov.w	r0, #4294967295
 8006662:	b004      	add	sp, #16
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	f043 0320 	orr.w	r3, r3, #32
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	2778      	movs	r7, #120	@ 0x78
 8006672:	4832      	ldr	r0, [pc, #200]	@ (800673c <_printf_i+0x238>)
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800667a:	061f      	lsls	r7, r3, #24
 800667c:	6831      	ldr	r1, [r6, #0]
 800667e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006682:	d402      	bmi.n	800668a <_printf_i+0x186>
 8006684:	065f      	lsls	r7, r3, #25
 8006686:	bf48      	it	mi
 8006688:	b2ad      	uxthmi	r5, r5
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	07d9      	lsls	r1, r3, #31
 800668e:	bf44      	itt	mi
 8006690:	f043 0320 	orrmi.w	r3, r3, #32
 8006694:	6023      	strmi	r3, [r4, #0]
 8006696:	b11d      	cbz	r5, 80066a0 <_printf_i+0x19c>
 8006698:	2310      	movs	r3, #16
 800669a:	e7ad      	b.n	80065f8 <_printf_i+0xf4>
 800669c:	4826      	ldr	r0, [pc, #152]	@ (8006738 <_printf_i+0x234>)
 800669e:	e7e9      	b.n	8006674 <_printf_i+0x170>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f023 0320 	bic.w	r3, r3, #32
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	e7f6      	b.n	8006698 <_printf_i+0x194>
 80066aa:	4616      	mov	r6, r2
 80066ac:	e7bd      	b.n	800662a <_printf_i+0x126>
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	6825      	ldr	r5, [r4, #0]
 80066b2:	1d18      	adds	r0, r3, #4
 80066b4:	6961      	ldr	r1, [r4, #20]
 80066b6:	6030      	str	r0, [r6, #0]
 80066b8:	062e      	lsls	r6, r5, #24
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	d501      	bpl.n	80066c2 <_printf_i+0x1be>
 80066be:	6019      	str	r1, [r3, #0]
 80066c0:	e002      	b.n	80066c8 <_printf_i+0x1c4>
 80066c2:	0668      	lsls	r0, r5, #25
 80066c4:	d5fb      	bpl.n	80066be <_printf_i+0x1ba>
 80066c6:	8019      	strh	r1, [r3, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	4616      	mov	r6, r2
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	e7bc      	b.n	800664a <_printf_i+0x146>
 80066d0:	6833      	ldr	r3, [r6, #0]
 80066d2:	2100      	movs	r1, #0
 80066d4:	1d1a      	adds	r2, r3, #4
 80066d6:	6032      	str	r2, [r6, #0]
 80066d8:	681e      	ldr	r6, [r3, #0]
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 fbf4 	bl	8006eca <memchr>
 80066e2:	b108      	cbz	r0, 80066e8 <_printf_i+0x1e4>
 80066e4:	1b80      	subs	r0, r0, r6
 80066e6:	6060      	str	r0, [r4, #4]
 80066e8:	6863      	ldr	r3, [r4, #4]
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	2300      	movs	r3, #0
 80066ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066f2:	e7aa      	b.n	800664a <_printf_i+0x146>
 80066f4:	6923      	ldr	r3, [r4, #16]
 80066f6:	4632      	mov	r2, r6
 80066f8:	4649      	mov	r1, r9
 80066fa:	4640      	mov	r0, r8
 80066fc:	47d0      	blx	sl
 80066fe:	3001      	adds	r0, #1
 8006700:	d0ad      	beq.n	800665e <_printf_i+0x15a>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	079b      	lsls	r3, r3, #30
 8006706:	d413      	bmi.n	8006730 <_printf_i+0x22c>
 8006708:	68e0      	ldr	r0, [r4, #12]
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	4298      	cmp	r0, r3
 800670e:	bfb8      	it	lt
 8006710:	4618      	movlt	r0, r3
 8006712:	e7a6      	b.n	8006662 <_printf_i+0x15e>
 8006714:	2301      	movs	r3, #1
 8006716:	4632      	mov	r2, r6
 8006718:	4649      	mov	r1, r9
 800671a:	4640      	mov	r0, r8
 800671c:	47d0      	blx	sl
 800671e:	3001      	adds	r0, #1
 8006720:	d09d      	beq.n	800665e <_printf_i+0x15a>
 8006722:	3501      	adds	r5, #1
 8006724:	68e3      	ldr	r3, [r4, #12]
 8006726:	9903      	ldr	r1, [sp, #12]
 8006728:	1a5b      	subs	r3, r3, r1
 800672a:	42ab      	cmp	r3, r5
 800672c:	dcf2      	bgt.n	8006714 <_printf_i+0x210>
 800672e:	e7eb      	b.n	8006708 <_printf_i+0x204>
 8006730:	2500      	movs	r5, #0
 8006732:	f104 0619 	add.w	r6, r4, #25
 8006736:	e7f5      	b.n	8006724 <_printf_i+0x220>
 8006738:	0800a9a2 	.word	0x0800a9a2
 800673c:	0800a9b3 	.word	0x0800a9b3

08006740 <_scanf_float>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	b087      	sub	sp, #28
 8006746:	4691      	mov	r9, r2
 8006748:	4680      	mov	r8, r0
 800674a:	460c      	mov	r4, r1
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	688b      	ldr	r3, [r1, #8]
 8006750:	1e5a      	subs	r2, r3, #1
 8006752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006756:	460a      	mov	r2, r1
 8006758:	bf89      	itett	hi
 800675a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800675e:	f04f 0b00 	movls.w	fp, #0
 8006762:	eb03 0b05 	addhi.w	fp, r3, r5
 8006766:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800676a:	f04f 0500 	mov.w	r5, #0
 800676e:	bf88      	it	hi
 8006770:	608b      	strhi	r3, [r1, #8]
 8006772:	680b      	ldr	r3, [r1, #0]
 8006774:	46aa      	mov	sl, r5
 8006776:	462f      	mov	r7, r5
 8006778:	9502      	str	r5, [sp, #8]
 800677a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800677e:	f842 3b1c 	str.w	r3, [r2], #28
 8006782:	4616      	mov	r6, r2
 8006784:	9201      	str	r2, [sp, #4]
 8006786:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800678a:	68a2      	ldr	r2, [r4, #8]
 800678c:	b15a      	cbz	r2, 80067a6 <_scanf_float+0x66>
 800678e:	f8d9 3000 	ldr.w	r3, [r9]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b4e      	cmp	r3, #78	@ 0x4e
 8006796:	d863      	bhi.n	8006860 <_scanf_float+0x120>
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d83b      	bhi.n	8006814 <_scanf_float+0xd4>
 800679c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80067a0:	b2c8      	uxtb	r0, r1
 80067a2:	280e      	cmp	r0, #14
 80067a4:	d939      	bls.n	800681a <_scanf_float+0xda>
 80067a6:	b11f      	cbz	r7, 80067b0 <_scanf_float+0x70>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b4:	f1ba 0f01 	cmp.w	sl, #1
 80067b8:	f200 8115 	bhi.w	80069e6 <_scanf_float+0x2a6>
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	429e      	cmp	r6, r3
 80067c0:	f200 8106 	bhi.w	80069d0 <_scanf_float+0x290>
 80067c4:	2001      	movs	r0, #1
 80067c6:	b007      	add	sp, #28
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80067d0:	2a0d      	cmp	r2, #13
 80067d2:	d8e8      	bhi.n	80067a6 <_scanf_float+0x66>
 80067d4:	a101      	add	r1, pc, #4	@ (adr r1, 80067dc <_scanf_float+0x9c>)
 80067d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067da:	bf00      	nop
 80067dc:	08006925 	.word	0x08006925
 80067e0:	080067a7 	.word	0x080067a7
 80067e4:	080067a7 	.word	0x080067a7
 80067e8:	080067a7 	.word	0x080067a7
 80067ec:	08006981 	.word	0x08006981
 80067f0:	0800695b 	.word	0x0800695b
 80067f4:	080067a7 	.word	0x080067a7
 80067f8:	080067a7 	.word	0x080067a7
 80067fc:	08006933 	.word	0x08006933
 8006800:	080067a7 	.word	0x080067a7
 8006804:	080067a7 	.word	0x080067a7
 8006808:	080067a7 	.word	0x080067a7
 800680c:	080067a7 	.word	0x080067a7
 8006810:	080068ef 	.word	0x080068ef
 8006814:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006818:	e7da      	b.n	80067d0 <_scanf_float+0x90>
 800681a:	290e      	cmp	r1, #14
 800681c:	d8c3      	bhi.n	80067a6 <_scanf_float+0x66>
 800681e:	a001      	add	r0, pc, #4	@ (adr r0, 8006824 <_scanf_float+0xe4>)
 8006820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006824:	080068df 	.word	0x080068df
 8006828:	080067a7 	.word	0x080067a7
 800682c:	080068df 	.word	0x080068df
 8006830:	0800696f 	.word	0x0800696f
 8006834:	080067a7 	.word	0x080067a7
 8006838:	08006881 	.word	0x08006881
 800683c:	080068c5 	.word	0x080068c5
 8006840:	080068c5 	.word	0x080068c5
 8006844:	080068c5 	.word	0x080068c5
 8006848:	080068c5 	.word	0x080068c5
 800684c:	080068c5 	.word	0x080068c5
 8006850:	080068c5 	.word	0x080068c5
 8006854:	080068c5 	.word	0x080068c5
 8006858:	080068c5 	.word	0x080068c5
 800685c:	080068c5 	.word	0x080068c5
 8006860:	2b6e      	cmp	r3, #110	@ 0x6e
 8006862:	d809      	bhi.n	8006878 <_scanf_float+0x138>
 8006864:	2b60      	cmp	r3, #96	@ 0x60
 8006866:	d8b1      	bhi.n	80067cc <_scanf_float+0x8c>
 8006868:	2b54      	cmp	r3, #84	@ 0x54
 800686a:	d07b      	beq.n	8006964 <_scanf_float+0x224>
 800686c:	2b59      	cmp	r3, #89	@ 0x59
 800686e:	d19a      	bne.n	80067a6 <_scanf_float+0x66>
 8006870:	2d07      	cmp	r5, #7
 8006872:	d198      	bne.n	80067a6 <_scanf_float+0x66>
 8006874:	2508      	movs	r5, #8
 8006876:	e02f      	b.n	80068d8 <_scanf_float+0x198>
 8006878:	2b74      	cmp	r3, #116	@ 0x74
 800687a:	d073      	beq.n	8006964 <_scanf_float+0x224>
 800687c:	2b79      	cmp	r3, #121	@ 0x79
 800687e:	e7f6      	b.n	800686e <_scanf_float+0x12e>
 8006880:	6821      	ldr	r1, [r4, #0]
 8006882:	05c8      	lsls	r0, r1, #23
 8006884:	d51e      	bpl.n	80068c4 <_scanf_float+0x184>
 8006886:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800688a:	3701      	adds	r7, #1
 800688c:	6021      	str	r1, [r4, #0]
 800688e:	f1bb 0f00 	cmp.w	fp, #0
 8006892:	d003      	beq.n	800689c <_scanf_float+0x15c>
 8006894:	3201      	adds	r2, #1
 8006896:	f10b 3bff 	add.w	fp, fp, #4294967295
 800689a:	60a2      	str	r2, [r4, #8]
 800689c:	68a3      	ldr	r3, [r4, #8]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60a3      	str	r3, [r4, #8]
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	3301      	adds	r3, #1
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80068b4:	f340 8083 	ble.w	80069be <_scanf_float+0x27e>
 80068b8:	f8d9 3000 	ldr.w	r3, [r9]
 80068bc:	3301      	adds	r3, #1
 80068be:	f8c9 3000 	str.w	r3, [r9]
 80068c2:	e762      	b.n	800678a <_scanf_float+0x4a>
 80068c4:	eb1a 0105 	adds.w	r1, sl, r5
 80068c8:	f47f af6d 	bne.w	80067a6 <_scanf_float+0x66>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	460d      	mov	r5, r1
 80068d0:	468a      	mov	sl, r1
 80068d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	f806 3b01 	strb.w	r3, [r6], #1
 80068dc:	e7de      	b.n	800689c <_scanf_float+0x15c>
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	0610      	lsls	r0, r2, #24
 80068e2:	f57f af60 	bpl.w	80067a6 <_scanf_float+0x66>
 80068e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ea:	6022      	str	r2, [r4, #0]
 80068ec:	e7f4      	b.n	80068d8 <_scanf_float+0x198>
 80068ee:	f1ba 0f00 	cmp.w	sl, #0
 80068f2:	d10c      	bne.n	800690e <_scanf_float+0x1ce>
 80068f4:	b977      	cbnz	r7, 8006914 <_scanf_float+0x1d4>
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006900:	d108      	bne.n	8006914 <_scanf_float+0x1d4>
 8006902:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006906:	f04f 0a01 	mov.w	sl, #1
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	e7e4      	b.n	80068d8 <_scanf_float+0x198>
 800690e:	f1ba 0f02 	cmp.w	sl, #2
 8006912:	d051      	beq.n	80069b8 <_scanf_float+0x278>
 8006914:	2d01      	cmp	r5, #1
 8006916:	d002      	beq.n	800691e <_scanf_float+0x1de>
 8006918:	2d04      	cmp	r5, #4
 800691a:	f47f af44 	bne.w	80067a6 <_scanf_float+0x66>
 800691e:	3501      	adds	r5, #1
 8006920:	b2ed      	uxtb	r5, r5
 8006922:	e7d9      	b.n	80068d8 <_scanf_float+0x198>
 8006924:	f1ba 0f01 	cmp.w	sl, #1
 8006928:	f47f af3d 	bne.w	80067a6 <_scanf_float+0x66>
 800692c:	f04f 0a02 	mov.w	sl, #2
 8006930:	e7d2      	b.n	80068d8 <_scanf_float+0x198>
 8006932:	b975      	cbnz	r5, 8006952 <_scanf_float+0x212>
 8006934:	2f00      	cmp	r7, #0
 8006936:	f47f af37 	bne.w	80067a8 <_scanf_float+0x68>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006940:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006944:	f040 8103 	bne.w	8006b4e <_scanf_float+0x40e>
 8006948:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800694c:	2501      	movs	r5, #1
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	e7c2      	b.n	80068d8 <_scanf_float+0x198>
 8006952:	2d03      	cmp	r5, #3
 8006954:	d0e3      	beq.n	800691e <_scanf_float+0x1de>
 8006956:	2d05      	cmp	r5, #5
 8006958:	e7df      	b.n	800691a <_scanf_float+0x1da>
 800695a:	2d02      	cmp	r5, #2
 800695c:	f47f af23 	bne.w	80067a6 <_scanf_float+0x66>
 8006960:	2503      	movs	r5, #3
 8006962:	e7b9      	b.n	80068d8 <_scanf_float+0x198>
 8006964:	2d06      	cmp	r5, #6
 8006966:	f47f af1e 	bne.w	80067a6 <_scanf_float+0x66>
 800696a:	2507      	movs	r5, #7
 800696c:	e7b4      	b.n	80068d8 <_scanf_float+0x198>
 800696e:	6822      	ldr	r2, [r4, #0]
 8006970:	0591      	lsls	r1, r2, #22
 8006972:	f57f af18 	bpl.w	80067a6 <_scanf_float+0x66>
 8006976:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800697a:	9702      	str	r7, [sp, #8]
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	e7ab      	b.n	80068d8 <_scanf_float+0x198>
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006986:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800698a:	d005      	beq.n	8006998 <_scanf_float+0x258>
 800698c:	0550      	lsls	r0, r2, #21
 800698e:	f57f af0a 	bpl.w	80067a6 <_scanf_float+0x66>
 8006992:	2f00      	cmp	r7, #0
 8006994:	f000 80db 	beq.w	8006b4e <_scanf_float+0x40e>
 8006998:	0591      	lsls	r1, r2, #22
 800699a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800699e:	bf58      	it	pl
 80069a0:	9902      	ldrpl	r1, [sp, #8]
 80069a2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80069a6:	bf58      	it	pl
 80069a8:	1a79      	subpl	r1, r7, r1
 80069aa:	6022      	str	r2, [r4, #0]
 80069ac:	f04f 0700 	mov.w	r7, #0
 80069b0:	bf58      	it	pl
 80069b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069b6:	e78f      	b.n	80068d8 <_scanf_float+0x198>
 80069b8:	f04f 0a03 	mov.w	sl, #3
 80069bc:	e78c      	b.n	80068d8 <_scanf_float+0x198>
 80069be:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	4798      	blx	r3
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f43f aede 	beq.w	800678a <_scanf_float+0x4a>
 80069ce:	e6ea      	b.n	80067a6 <_scanf_float+0x66>
 80069d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069d4:	464a      	mov	r2, r9
 80069d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069da:	4640      	mov	r0, r8
 80069dc:	4798      	blx	r3
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	e6ea      	b.n	80067bc <_scanf_float+0x7c>
 80069e6:	1e6b      	subs	r3, r5, #1
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	d824      	bhi.n	8006a36 <_scanf_float+0x2f6>
 80069ec:	2d02      	cmp	r5, #2
 80069ee:	d836      	bhi.n	8006a5e <_scanf_float+0x31e>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	429e      	cmp	r6, r3
 80069f4:	f67f aee6 	bls.w	80067c4 <_scanf_float+0x84>
 80069f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069fc:	464a      	mov	r2, r9
 80069fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a02:	4640      	mov	r0, r8
 8006a04:	4798      	blx	r3
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	e7f0      	b.n	80069f0 <_scanf_float+0x2b0>
 8006a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a12:	464a      	mov	r2, r9
 8006a14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4798      	blx	r3
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a26:	fa5f fa8a 	uxtb.w	sl, sl
 8006a2a:	f1ba 0f02 	cmp.w	sl, #2
 8006a2e:	d1ee      	bne.n	8006a0e <_scanf_float+0x2ce>
 8006a30:	3d03      	subs	r5, #3
 8006a32:	b2ed      	uxtb	r5, r5
 8006a34:	1b76      	subs	r6, r6, r5
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	05da      	lsls	r2, r3, #23
 8006a3a:	d52f      	bpl.n	8006a9c <_scanf_float+0x35c>
 8006a3c:	055b      	lsls	r3, r3, #21
 8006a3e:	d511      	bpl.n	8006a64 <_scanf_float+0x324>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	429e      	cmp	r6, r3
 8006a44:	f67f aebe 	bls.w	80067c4 <_scanf_float+0x84>
 8006a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a4c:	464a      	mov	r2, r9
 8006a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a52:	4640      	mov	r0, r8
 8006a54:	4798      	blx	r3
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	e7f0      	b.n	8006a40 <_scanf_float+0x300>
 8006a5e:	46aa      	mov	sl, r5
 8006a60:	46b3      	mov	fp, r6
 8006a62:	e7de      	b.n	8006a22 <_scanf_float+0x2e2>
 8006a64:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a68:	1e75      	subs	r5, r6, #1
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	2965      	cmp	r1, #101	@ 0x65
 8006a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	d00c      	beq.n	8006a90 <_scanf_float+0x350>
 8006a76:	2945      	cmp	r1, #69	@ 0x45
 8006a78:	d00a      	beq.n	8006a90 <_scanf_float+0x350>
 8006a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a7e:	464a      	mov	r2, r9
 8006a80:	4640      	mov	r0, r8
 8006a82:	1eb5      	subs	r5, r6, #2
 8006a84:	4798      	blx	r3
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	462e      	mov	r6, r5
 8006a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a96:	464a      	mov	r2, r9
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4798      	blx	r3
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	f012 0210 	ands.w	r2, r2, #16
 8006aa2:	d001      	beq.n	8006aa8 <_scanf_float+0x368>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e68e      	b.n	80067c6 <_scanf_float+0x86>
 8006aa8:	7032      	strb	r2, [r6, #0]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab4:	d125      	bne.n	8006b02 <_scanf_float+0x3c2>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	429f      	cmp	r7, r3
 8006aba:	d00a      	beq.n	8006ad2 <_scanf_float+0x392>
 8006abc:	1bda      	subs	r2, r3, r7
 8006abe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ac2:	4924      	ldr	r1, [pc, #144]	@ (8006b54 <_scanf_float+0x414>)
 8006ac4:	429e      	cmp	r6, r3
 8006ac6:	bf28      	it	cs
 8006ac8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 f907 	bl	8006ce0 <siprintf>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	9901      	ldr	r1, [sp, #4]
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f002 fb7a 	bl	80091d0 <_strtod_r>
 8006adc:	6821      	ldr	r1, [r4, #0]
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	f011 0f02 	tst.w	r1, #2
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	ec57 6b10 	vmov	r6, r7, d0
 8006aea:	f103 0204 	add.w	r2, r3, #4
 8006aee:	d015      	beq.n	8006b1c <_scanf_float+0x3dc>
 8006af0:	9903      	ldr	r1, [sp, #12]
 8006af2:	600a      	str	r2, [r1, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	e9c3 6700 	strd	r6, r7, [r3]
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60e3      	str	r3, [r4, #12]
 8006b00:	e7d0      	b.n	8006aa4 <_scanf_float+0x364>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0e4      	beq.n	8006ad2 <_scanf_float+0x392>
 8006b08:	9905      	ldr	r1, [sp, #20]
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	3101      	adds	r1, #1
 8006b10:	f002 fbde 	bl	80092d0 <_strtol_r>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	9e05      	ldr	r6, [sp, #20]
 8006b18:	1ac2      	subs	r2, r0, r3
 8006b1a:	e7d0      	b.n	8006abe <_scanf_float+0x37e>
 8006b1c:	f011 0f04 	tst.w	r1, #4
 8006b20:	9903      	ldr	r1, [sp, #12]
 8006b22:	600a      	str	r2, [r1, #0]
 8006b24:	d1e6      	bne.n	8006af4 <_scanf_float+0x3b4>
 8006b26:	681d      	ldr	r5, [r3, #0]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4639      	mov	r1, r7
 8006b30:	f7fa f800 	bl	8000b34 <__aeabi_dcmpun>
 8006b34:	b128      	cbz	r0, 8006b42 <_scanf_float+0x402>
 8006b36:	4808      	ldr	r0, [pc, #32]	@ (8006b58 <_scanf_float+0x418>)
 8006b38:	f000 f9e2 	bl	8006f00 <nanf>
 8006b3c:	ed85 0a00 	vstr	s0, [r5]
 8006b40:	e7db      	b.n	8006afa <_scanf_float+0x3ba>
 8006b42:	4630      	mov	r0, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	f7fa f853 	bl	8000bf0 <__aeabi_d2f>
 8006b4a:	6028      	str	r0, [r5, #0]
 8006b4c:	e7d5      	b.n	8006afa <_scanf_float+0x3ba>
 8006b4e:	2700      	movs	r7, #0
 8006b50:	e62e      	b.n	80067b0 <_scanf_float+0x70>
 8006b52:	bf00      	nop
 8006b54:	0800a9c4 	.word	0x0800a9c4
 8006b58:	0800ab05 	.word	0x0800ab05

08006b5c <std>:
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	4604      	mov	r4, r0
 8006b62:	6083      	str	r3, [r0, #8]
 8006b64:	8181      	strh	r1, [r0, #12]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b6a:	81c2      	strh	r2, [r0, #14]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	6183      	str	r3, [r0, #24]
 8006b70:	e9c0 3300 	strd	r3, r3, [r0]
 8006b74:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b78:	305c      	adds	r0, #92	@ 0x5c
 8006b7a:	f000 f916 	bl	8006daa <memset>
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <std+0x58>)
 8006b80:	6224      	str	r4, [r4, #32]
 8006b82:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b84:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb8 <std+0x5c>)
 8006b86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b88:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <std+0x60>)
 8006b8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <std+0x64>)
 8006b8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b90:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <std+0x68>)
 8006b92:	429c      	cmp	r4, r3
 8006b94:	d006      	beq.n	8006ba4 <std+0x48>
 8006b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b9a:	4294      	cmp	r4, r2
 8006b9c:	d002      	beq.n	8006ba4 <std+0x48>
 8006b9e:	33d0      	adds	r3, #208	@ 0xd0
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d105      	bne.n	8006bb0 <std+0x54>
 8006ba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bac:	f000 b98a 	b.w	8006ec4 <__retarget_lock_init_recursive>
 8006bb0:	bd10      	pop	{r4, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08006d25 	.word	0x08006d25
 8006bb8:	08006d47 	.word	0x08006d47
 8006bbc:	08006d7f 	.word	0x08006d7f
 8006bc0:	08006da3 	.word	0x08006da3
 8006bc4:	200007e8 	.word	0x200007e8

08006bc8 <stdio_exit_handler>:
 8006bc8:	4a02      	ldr	r2, [pc, #8]	@ (8006bd4 <stdio_exit_handler+0xc>)
 8006bca:	4903      	ldr	r1, [pc, #12]	@ (8006bd8 <stdio_exit_handler+0x10>)
 8006bcc:	4803      	ldr	r0, [pc, #12]	@ (8006bdc <stdio_exit_handler+0x14>)
 8006bce:	f000 b869 	b.w	8006ca4 <_fwalk_sglue>
 8006bd2:	bf00      	nop
 8006bd4:	2000008c 	.word	0x2000008c
 8006bd8:	0800968d 	.word	0x0800968d
 8006bdc:	2000009c 	.word	0x2000009c

08006be0 <cleanup_stdio>:
 8006be0:	6841      	ldr	r1, [r0, #4]
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <cleanup_stdio+0x34>)
 8006be4:	4299      	cmp	r1, r3
 8006be6:	b510      	push	{r4, lr}
 8006be8:	4604      	mov	r4, r0
 8006bea:	d001      	beq.n	8006bf0 <cleanup_stdio+0x10>
 8006bec:	f002 fd4e 	bl	800968c <_fflush_r>
 8006bf0:	68a1      	ldr	r1, [r4, #8]
 8006bf2:	4b09      	ldr	r3, [pc, #36]	@ (8006c18 <cleanup_stdio+0x38>)
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <cleanup_stdio+0x1e>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f002 fd47 	bl	800968c <_fflush_r>
 8006bfe:	68e1      	ldr	r1, [r4, #12]
 8006c00:	4b06      	ldr	r3, [pc, #24]	@ (8006c1c <cleanup_stdio+0x3c>)
 8006c02:	4299      	cmp	r1, r3
 8006c04:	d004      	beq.n	8006c10 <cleanup_stdio+0x30>
 8006c06:	4620      	mov	r0, r4
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	f002 bd3e 	b.w	800968c <_fflush_r>
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	200007e8 	.word	0x200007e8
 8006c18:	20000850 	.word	0x20000850
 8006c1c:	200008b8 	.word	0x200008b8

08006c20 <global_stdio_init.part.0>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <global_stdio_init.part.0+0x30>)
 8006c24:	2104      	movs	r1, #4
 8006c26:	4c0b      	ldr	r4, [pc, #44]	@ (8006c54 <global_stdio_init.part.0+0x34>)
 8006c28:	4a0b      	ldr	r2, [pc, #44]	@ (8006c58 <global_stdio_init.part.0+0x38>)
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7ff ff94 	bl	8006b5c <std>
 8006c34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c38:	2201      	movs	r2, #1
 8006c3a:	2109      	movs	r1, #9
 8006c3c:	f7ff ff8e 	bl	8006b5c <std>
 8006c40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c44:	2202      	movs	r2, #2
 8006c46:	2112      	movs	r1, #18
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c4c:	f7ff bf86 	b.w	8006b5c <std>
 8006c50:	20000920 	.word	0x20000920
 8006c54:	200007e8 	.word	0x200007e8
 8006c58:	08006bc9 	.word	0x08006bc9

08006c5c <__sfp_lock_acquire>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	@ (8006c64 <__sfp_lock_acquire+0x8>)
 8006c5e:	f000 b932 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8006c62:	bf00      	nop
 8006c64:	20000929 	.word	0x20000929

08006c68 <__sfp_lock_release>:
 8006c68:	4801      	ldr	r0, [pc, #4]	@ (8006c70 <__sfp_lock_release+0x8>)
 8006c6a:	f000 b92d 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20000929 	.word	0x20000929

08006c74 <__sinit>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	4604      	mov	r4, r0
 8006c78:	f7ff fff0 	bl	8006c5c <__sfp_lock_acquire>
 8006c7c:	6a23      	ldr	r3, [r4, #32]
 8006c7e:	b11b      	cbz	r3, 8006c88 <__sinit+0x14>
 8006c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c84:	f7ff bff0 	b.w	8006c68 <__sfp_lock_release>
 8006c88:	4b04      	ldr	r3, [pc, #16]	@ (8006c9c <__sinit+0x28>)
 8006c8a:	6223      	str	r3, [r4, #32]
 8006c8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <__sinit+0x2c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f5      	bne.n	8006c80 <__sinit+0xc>
 8006c94:	f7ff ffc4 	bl	8006c20 <global_stdio_init.part.0>
 8006c98:	e7f2      	b.n	8006c80 <__sinit+0xc>
 8006c9a:	bf00      	nop
 8006c9c:	08006be1 	.word	0x08006be1
 8006ca0:	20000920 	.word	0x20000920

08006ca4 <_fwalk_sglue>:
 8006ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca8:	4607      	mov	r7, r0
 8006caa:	4688      	mov	r8, r1
 8006cac:	4614      	mov	r4, r2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb8:	d505      	bpl.n	8006cc6 <_fwalk_sglue+0x22>
 8006cba:	6824      	ldr	r4, [r4, #0]
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	d1f7      	bne.n	8006cb0 <_fwalk_sglue+0xc>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	89ab      	ldrh	r3, [r5, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d907      	bls.n	8006cdc <_fwalk_sglue+0x38>
 8006ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	d003      	beq.n	8006cdc <_fwalk_sglue+0x38>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	47c0      	blx	r8
 8006cda:	4306      	orrs	r6, r0
 8006cdc:	3568      	adds	r5, #104	@ 0x68
 8006cde:	e7e9      	b.n	8006cb4 <_fwalk_sglue+0x10>

08006ce0 <siprintf>:
 8006ce0:	b40e      	push	{r1, r2, r3}
 8006ce2:	b510      	push	{r4, lr}
 8006ce4:	b09d      	sub	sp, #116	@ 0x74
 8006ce6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cea:	2400      	movs	r4, #0
 8006cec:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006cee:	9002      	str	r0, [sp, #8]
 8006cf0:	9006      	str	r0, [sp, #24]
 8006cf2:	9107      	str	r1, [sp, #28]
 8006cf4:	9104      	str	r1, [sp, #16]
 8006cf6:	4809      	ldr	r0, [pc, #36]	@ (8006d1c <siprintf+0x3c>)
 8006cf8:	4909      	ldr	r1, [pc, #36]	@ (8006d20 <siprintf+0x40>)
 8006cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfe:	9105      	str	r1, [sp, #20]
 8006d00:	a902      	add	r1, sp, #8
 8006d02:	6800      	ldr	r0, [r0, #0]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d08:	f002 fb40 	bl	800938c <_svfiprintf_r>
 8006d0c:	9b02      	ldr	r3, [sp, #8]
 8006d0e:	701c      	strb	r4, [r3, #0]
 8006d10:	b01d      	add	sp, #116	@ 0x74
 8006d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d16:	b003      	add	sp, #12
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000098 	.word	0x20000098
 8006d20:	ffff0208 	.word	0xffff0208

08006d24 <__sread>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	f000 f86c 	bl	8006e08 <_read_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	bfab      	itete	ge
 8006d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d36:	89a3      	ldrhlt	r3, [r4, #12]
 8006d38:	181b      	addge	r3, r3, r0
 8006d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d3e:	bfac      	ite	ge
 8006d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d42:	81a3      	strhlt	r3, [r4, #12]
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__swrite>:
 8006d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	05db      	lsls	r3, r3, #23
 8006d54:	4616      	mov	r6, r2
 8006d56:	d505      	bpl.n	8006d64 <__swrite+0x1e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	f000 f840 	bl	8006de4 <_lseek_r>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	4632      	mov	r2, r6
 8006d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	463b      	mov	r3, r7
 8006d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	f000 b867 	b.w	8006e4c <_write_r>

08006d7e <__sseek>:
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	460c      	mov	r4, r1
 8006d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d86:	f000 f82d 	bl	8006de4 <_lseek_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	bf15      	itete	ne
 8006d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d9a:	81a3      	strheq	r3, [r4, #12]
 8006d9c:	bf18      	it	ne
 8006d9e:	81a3      	strhne	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__sclose>:
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 b80d 	b.w	8006dc4 <_close_r>

08006daa <memset>:
 8006daa:	4402      	add	r2, r0
 8006dac:	4603      	mov	r3, r0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d100      	bne.n	8006db4 <memset+0xa>
 8006db2:	4770      	bx	lr
 8006db4:	f803 1b01 	strb.w	r1, [r3], #1
 8006db8:	e7f9      	b.n	8006dae <memset+0x4>
	...

08006dbc <_localeconv_r>:
 8006dbc:	4800      	ldr	r0, [pc, #0]	@ (8006dc0 <_localeconv_r+0x4>)
 8006dbe:	4770      	bx	lr
 8006dc0:	200001d8 	.word	0x200001d8

08006dc4 <_close_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4d05      	ldr	r5, [pc, #20]	@ (8006de0 <_close_r+0x1c>)
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fb f95b 	bl	800208a <_close>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_close_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_close_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000924 	.word	0x20000924

08006de4 <_lseek_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	4d06      	ldr	r5, [pc, #24]	@ (8006e04 <_lseek_r+0x20>)
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fb f970 	bl	80020d8 <_lseek>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_lseek_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_lseek_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20000924 	.word	0x20000924

08006e08 <_read_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4d06      	ldr	r5, [pc, #24]	@ (8006e28 <_read_r+0x20>)
 8006e0e:	4608      	mov	r0, r1
 8006e10:	4611      	mov	r1, r2
 8006e12:	2200      	movs	r2, #0
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7fb f8fe 	bl	8002018 <_read>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_read_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_read_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000924 	.word	0x20000924

08006e2c <_sbrk_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4d05      	ldr	r5, [pc, #20]	@ (8006e48 <_sbrk_r+0x1c>)
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fb f95c 	bl	80020f4 <_sbrk>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_sbrk_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_sbrk_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000924 	.word	0x20000924

08006e4c <_write_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4d06      	ldr	r5, [pc, #24]	@ (8006e6c <_write_r+0x20>)
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb f8f9 	bl	8002052 <_write>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_write_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_write_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000924 	.word	0x20000924

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	@ (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000098 	.word	0x20000098

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006eb4 <__libc_init_array+0x38>)
 8006e80:	2600      	movs	r6, #0
 8006e82:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb8 <__libc_init_array+0x3c>)
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006ebc <__libc_init_array+0x40>)
 8006e8e:	2600      	movs	r6, #0
 8006e90:	4c0b      	ldr	r4, [pc, #44]	@ (8006ec0 <__libc_init_array+0x44>)
 8006e92:	f003 facb 	bl	800a42c <_init>
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	4798      	blx	r3
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	3601      	adds	r6, #1
 8006eb0:	4798      	blx	r3
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	0800adc4 	.word	0x0800adc4
 8006eb8:	0800adc4 	.word	0x0800adc4
 8006ebc:	0800adc4 	.word	0x0800adc4
 8006ec0:	0800adcc 	.word	0x0800adcc

08006ec4 <__retarget_lock_init_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <__retarget_lock_acquire_recursive>:
 8006ec6:	4770      	bx	lr

08006ec8 <__retarget_lock_release_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <memchr>:
 8006eca:	b2c9      	uxtb	r1, r1
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4402      	add	r2, r0
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	d101      	bne.n	8006edc <memchr+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e003      	b.n	8006ee4 <memchr+0x1a>
 8006edc:	7804      	ldrb	r4, [r0, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	428c      	cmp	r4, r1
 8006ee2:	d1f6      	bne.n	8006ed2 <memchr+0x8>
 8006ee4:	bd10      	pop	{r4, pc}

08006ee6 <memcpy>:
 8006ee6:	440a      	add	r2, r1
 8006ee8:	1e43      	subs	r3, r0, #1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d100      	bne.n	8006ef0 <memcpy+0xa>
 8006eee:	4770      	bx	lr
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efc:	d1f9      	bne.n	8006ef2 <memcpy+0xc>
 8006efe:	bd10      	pop	{r4, pc}

08006f00 <nanf>:
 8006f00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f08 <nanf+0x8>
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	7fc00000 	.word	0x7fc00000

08006f0c <quorem>:
 8006f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	6903      	ldr	r3, [r0, #16]
 8006f12:	4607      	mov	r7, r0
 8006f14:	690c      	ldr	r4, [r1, #16]
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	f2c0 8083 	blt.w	8007022 <quorem+0x116>
 8006f1c:	3c01      	subs	r4, #1
 8006f1e:	f100 0514 	add.w	r5, r0, #20
 8006f22:	f101 0814 	add.w	r8, r1, #20
 8006f26:	00a3      	lsls	r3, r4, #2
 8006f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f44:	d331      	bcc.n	8006faa <quorem+0x9e>
 8006f46:	f04f 0a00 	mov.w	sl, #0
 8006f4a:	46c4      	mov	ip, r8
 8006f4c:	46ae      	mov	lr, r5
 8006f4e:	46d3      	mov	fp, sl
 8006f50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f54:	b298      	uxth	r0, r3
 8006f56:	45e1      	cmp	r9, ip
 8006f58:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8006f5c:	fb06 a000 	mla	r0, r6, r0, sl
 8006f60:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8006f64:	b280      	uxth	r0, r0
 8006f66:	fb06 2303 	mla	r3, r6, r3, r2
 8006f6a:	f8de 2000 	ldr.w	r2, [lr]
 8006f6e:	b292      	uxth	r2, r2
 8006f70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f74:	eba2 0200 	sub.w	r2, r2, r0
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f8de 0000 	ldr.w	r0, [lr]
 8006f7e:	445a      	add	r2, fp
 8006f80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f84:	b292      	uxth	r2, r2
 8006f86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f92:	f84e 2b04 	str.w	r2, [lr], #4
 8006f96:	d2db      	bcs.n	8006f50 <quorem+0x44>
 8006f98:	9b00      	ldr	r3, [sp, #0]
 8006f9a:	58eb      	ldr	r3, [r5, r3]
 8006f9c:	b92b      	cbnz	r3, 8006faa <quorem+0x9e>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	d330      	bcc.n	800700a <quorem+0xfe>
 8006fa8:	613c      	str	r4, [r7, #16]
 8006faa:	4638      	mov	r0, r7
 8006fac:	f001 f918 	bl	80081e0 <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	db26      	blt.n	8007002 <quorem+0xf6>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fbc:	f8d1 c000 	ldr.w	ip, [r1]
 8006fc0:	fa1f fe82 	uxth.w	lr, r2
 8006fc4:	45c1      	cmp	r9, r8
 8006fc6:	fa1f f38c 	uxth.w	r3, ip
 8006fca:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006fce:	eba3 030e 	sub.w	r3, r3, lr
 8006fd2:	4403      	add	r3, r0
 8006fd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fe6:	f841 3b04 	str.w	r3, [r1], #4
 8006fea:	d2e5      	bcs.n	8006fb8 <quorem+0xac>
 8006fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff4:	b922      	cbnz	r2, 8007000 <quorem+0xf4>
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	d30b      	bcc.n	8007016 <quorem+0x10a>
 8006ffe:	613c      	str	r4, [r7, #16]
 8007000:	3601      	adds	r6, #1
 8007002:	4630      	mov	r0, r6
 8007004:	b003      	add	sp, #12
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	3b04      	subs	r3, #4
 800700e:	2a00      	cmp	r2, #0
 8007010:	d1ca      	bne.n	8006fa8 <quorem+0x9c>
 8007012:	3c01      	subs	r4, #1
 8007014:	e7c5      	b.n	8006fa2 <quorem+0x96>
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	3b04      	subs	r3, #4
 800701a:	2a00      	cmp	r2, #0
 800701c:	d1ef      	bne.n	8006ffe <quorem+0xf2>
 800701e:	3c01      	subs	r4, #1
 8007020:	e7ea      	b.n	8006ff8 <quorem+0xec>
 8007022:	2000      	movs	r0, #0
 8007024:	e7ee      	b.n	8007004 <quorem+0xf8>
	...

08007028 <_dtoa_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	69c7      	ldr	r7, [r0, #28]
 800702e:	b097      	sub	sp, #92	@ 0x5c
 8007030:	4681      	mov	r9, r0
 8007032:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007034:	9107      	str	r1, [sp, #28]
 8007036:	920c      	str	r2, [sp, #48]	@ 0x30
 8007038:	9311      	str	r3, [sp, #68]	@ 0x44
 800703a:	ec55 4b10 	vmov	r4, r5, d0
 800703e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007042:	b97f      	cbnz	r7, 8007064 <_dtoa_r+0x3c>
 8007044:	2010      	movs	r0, #16
 8007046:	f7fe fe65 	bl	8005d14 <malloc>
 800704a:	4602      	mov	r2, r0
 800704c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007050:	b920      	cbnz	r0, 800705c <_dtoa_r+0x34>
 8007052:	4ba9      	ldr	r3, [pc, #676]	@ (80072f8 <_dtoa_r+0x2d0>)
 8007054:	21ef      	movs	r1, #239	@ 0xef
 8007056:	48a9      	ldr	r0, [pc, #676]	@ (80072fc <_dtoa_r+0x2d4>)
 8007058:	f002 fb76 	bl	8009748 <__assert_func>
 800705c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007060:	6007      	str	r7, [r0, #0]
 8007062:	60c7      	str	r7, [r0, #12]
 8007064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007068:	6819      	ldr	r1, [r3, #0]
 800706a:	b159      	cbz	r1, 8007084 <_dtoa_r+0x5c>
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	2301      	movs	r3, #1
 8007070:	4648      	mov	r0, r9
 8007072:	4093      	lsls	r3, r2
 8007074:	604a      	str	r2, [r1, #4]
 8007076:	608b      	str	r3, [r1, #8]
 8007078:	f000 fe32 	bl	8007ce0 <_Bfree>
 800707c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	1e2b      	subs	r3, r5, #0
 8007086:	bfb7      	itett	lt
 8007088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800708c:	2300      	movge	r3, #0
 800708e:	2201      	movlt	r2, #1
 8007090:	9305      	strlt	r3, [sp, #20]
 8007092:	bfa8      	it	ge
 8007094:	6033      	strge	r3, [r6, #0]
 8007096:	9f05      	ldr	r7, [sp, #20]
 8007098:	4b99      	ldr	r3, [pc, #612]	@ (8007300 <_dtoa_r+0x2d8>)
 800709a:	bfb8      	it	lt
 800709c:	6032      	strlt	r2, [r6, #0]
 800709e:	43bb      	bics	r3, r7
 80070a0:	d112      	bne.n	80070c8 <_dtoa_r+0xa0>
 80070a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070ae:	4323      	orrs	r3, r4
 80070b0:	f000 855a 	beq.w	8007b68 <_dtoa_r+0xb40>
 80070b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070b6:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007314 <_dtoa_r+0x2ec>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 855c 	beq.w	8007b78 <_dtoa_r+0xb50>
 80070c0:	f10a 0303 	add.w	r3, sl, #3
 80070c4:	f000 bd56 	b.w	8007b74 <_dtoa_r+0xb4c>
 80070c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	ec51 0b17 	vmov	r0, r1, d7
 80070d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80070d8:	f7f9 fcfa 	bl	8000ad0 <__aeabi_dcmpeq>
 80070dc:	4680      	mov	r8, r0
 80070de:	b158      	cbz	r0, 80070f8 <_dtoa_r+0xd0>
 80070e0:	2301      	movs	r3, #1
 80070e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070e8:	b113      	cbz	r3, 80070f0 <_dtoa_r+0xc8>
 80070ea:	4b86      	ldr	r3, [pc, #536]	@ (8007304 <_dtoa_r+0x2dc>)
 80070ec:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007318 <_dtoa_r+0x2f0>
 80070f4:	f000 bd40 	b.w	8007b78 <_dtoa_r+0xb50>
 80070f8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070fc:	aa14      	add	r2, sp, #80	@ 0x50
 80070fe:	a915      	add	r1, sp, #84	@ 0x54
 8007100:	4648      	mov	r0, r9
 8007102:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007106:	f001 f993 	bl	8008430 <__d2b>
 800710a:	9002      	str	r0, [sp, #8]
 800710c:	2e00      	cmp	r6, #0
 800710e:	d076      	beq.n	80071fe <_dtoa_r+0x1d6>
 8007110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007112:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007116:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800711a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800711e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007126:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800712a:	4619      	mov	r1, r3
 800712c:	2200      	movs	r2, #0
 800712e:	4b76      	ldr	r3, [pc, #472]	@ (8007308 <_dtoa_r+0x2e0>)
 8007130:	f7f9 f8ae 	bl	8000290 <__aeabi_dsub>
 8007134:	a36a      	add	r3, pc, #424	@ (adr r3, 80072e0 <_dtoa_r+0x2b8>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 fa61 	bl	8000600 <__aeabi_dmul>
 800713e:	a36a      	add	r3, pc, #424	@ (adr r3, 80072e8 <_dtoa_r+0x2c0>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 f8a6 	bl	8000294 <__adddf3>
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
 800714c:	4630      	mov	r0, r6
 800714e:	f7f9 f9ed 	bl	800052c <__aeabi_i2d>
 8007152:	a367      	add	r3, pc, #412	@ (adr r3, 80072f0 <_dtoa_r+0x2c8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 fa52 	bl	8000600 <__aeabi_dmul>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4620      	mov	r0, r4
 8007162:	4629      	mov	r1, r5
 8007164:	f7f9 f896 	bl	8000294 <__adddf3>
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	f7f9 fcf8 	bl	8000b60 <__aeabi_d2iz>
 8007170:	2200      	movs	r2, #0
 8007172:	4607      	mov	r7, r0
 8007174:	2300      	movs	r3, #0
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 fcb3 	bl	8000ae4 <__aeabi_dcmplt>
 800717e:	b140      	cbz	r0, 8007192 <_dtoa_r+0x16a>
 8007180:	4638      	mov	r0, r7
 8007182:	f7f9 f9d3 	bl	800052c <__aeabi_i2d>
 8007186:	4622      	mov	r2, r4
 8007188:	462b      	mov	r3, r5
 800718a:	f7f9 fca1 	bl	8000ad0 <__aeabi_dcmpeq>
 800718e:	b900      	cbnz	r0, 8007192 <_dtoa_r+0x16a>
 8007190:	3f01      	subs	r7, #1
 8007192:	2f16      	cmp	r7, #22
 8007194:	d852      	bhi.n	800723c <_dtoa_r+0x214>
 8007196:	4b5d      	ldr	r3, [pc, #372]	@ (800730c <_dtoa_r+0x2e4>)
 8007198:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800719c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 fc9e 	bl	8000ae4 <__aeabi_dcmplt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d049      	beq.n	8007240 <_dtoa_r+0x218>
 80071ac:	3f01      	subs	r7, #1
 80071ae:	2300      	movs	r3, #0
 80071b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80071b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	bf4c      	ite	mi
 80071ba:	f1c3 0301 	rsbmi	r3, r3, #1
 80071be:	2300      	movpl	r3, #0
 80071c0:	9206      	str	r2, [sp, #24]
 80071c2:	bf45      	ittet	mi
 80071c4:	9300      	strmi	r3, [sp, #0]
 80071c6:	2300      	movmi	r3, #0
 80071c8:	9300      	strpl	r3, [sp, #0]
 80071ca:	9306      	strmi	r3, [sp, #24]
 80071cc:	2f00      	cmp	r7, #0
 80071ce:	db39      	blt.n	8007244 <_dtoa_r+0x21c>
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	970d      	str	r7, [sp, #52]	@ 0x34
 80071d4:	443b      	add	r3, r7
 80071d6:	9306      	str	r3, [sp, #24]
 80071d8:	2300      	movs	r3, #0
 80071da:	9308      	str	r3, [sp, #32]
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d863      	bhi.n	80072aa <_dtoa_r+0x282>
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	bfc5      	ittet	gt
 80071e6:	3b04      	subgt	r3, #4
 80071e8:	2400      	movgt	r4, #0
 80071ea:	2401      	movle	r4, #1
 80071ec:	9307      	strgt	r3, [sp, #28]
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	3b02      	subs	r3, #2
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d865      	bhi.n	80072c2 <_dtoa_r+0x29a>
 80071f6:	e8df f003 	tbb	[pc, r3]
 80071fa:	5654      	.short	0x5654
 80071fc:	2d39      	.short	0x2d39
 80071fe:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007202:	441e      	add	r6, r3
 8007204:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007208:	2b20      	cmp	r3, #32
 800720a:	bfc9      	itett	gt
 800720c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007210:	f1c3 0320 	rsble	r3, r3, #32
 8007214:	409f      	lslgt	r7, r3
 8007216:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800721a:	bfd8      	it	le
 800721c:	fa04 f003 	lslle.w	r0, r4, r3
 8007220:	f106 36ff 	add.w	r6, r6, #4294967295
 8007224:	bfc4      	itt	gt
 8007226:	fa24 f303 	lsrgt.w	r3, r4, r3
 800722a:	ea47 0003 	orrgt.w	r0, r7, r3
 800722e:	f7f9 f96d 	bl	800050c <__aeabi_ui2d>
 8007232:	2201      	movs	r2, #1
 8007234:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007238:	9212      	str	r2, [sp, #72]	@ 0x48
 800723a:	e776      	b.n	800712a <_dtoa_r+0x102>
 800723c:	2301      	movs	r3, #1
 800723e:	e7b7      	b.n	80071b0 <_dtoa_r+0x188>
 8007240:	9010      	str	r0, [sp, #64]	@ 0x40
 8007242:	e7b6      	b.n	80071b2 <_dtoa_r+0x18a>
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	1bdb      	subs	r3, r3, r7
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	427b      	negs	r3, r7
 800724c:	9308      	str	r3, [sp, #32]
 800724e:	2300      	movs	r3, #0
 8007250:	930d      	str	r3, [sp, #52]	@ 0x34
 8007252:	e7c3      	b.n	80071dc <_dtoa_r+0x1b4>
 8007254:	2301      	movs	r3, #1
 8007256:	9309      	str	r3, [sp, #36]	@ 0x24
 8007258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800725a:	eb07 0b03 	add.w	fp, r7, r3
 800725e:	f10b 0301 	add.w	r3, fp, #1
 8007262:	2b01      	cmp	r3, #1
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	bfb8      	it	lt
 8007268:	2301      	movlt	r3, #1
 800726a:	e006      	b.n	800727a <_dtoa_r+0x252>
 800726c:	2301      	movs	r3, #1
 800726e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd28      	ble.n	80072c8 <_dtoa_r+0x2a0>
 8007276:	469b      	mov	fp, r3
 8007278:	9303      	str	r3, [sp, #12]
 800727a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800727e:	2100      	movs	r1, #0
 8007280:	2204      	movs	r2, #4
 8007282:	f102 0514 	add.w	r5, r2, #20
 8007286:	429d      	cmp	r5, r3
 8007288:	d926      	bls.n	80072d8 <_dtoa_r+0x2b0>
 800728a:	6041      	str	r1, [r0, #4]
 800728c:	4648      	mov	r0, r9
 800728e:	f000 fce7 	bl	8007c60 <_Balloc>
 8007292:	4682      	mov	sl, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d141      	bne.n	800731c <_dtoa_r+0x2f4>
 8007298:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <_dtoa_r+0x2e8>)
 800729a:	4602      	mov	r2, r0
 800729c:	f240 11af 	movw	r1, #431	@ 0x1af
 80072a0:	e6d9      	b.n	8007056 <_dtoa_r+0x2e>
 80072a2:	2300      	movs	r3, #0
 80072a4:	e7e3      	b.n	800726e <_dtoa_r+0x246>
 80072a6:	2300      	movs	r3, #0
 80072a8:	e7d5      	b.n	8007256 <_dtoa_r+0x22e>
 80072aa:	2401      	movs	r4, #1
 80072ac:	2300      	movs	r3, #0
 80072ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	f04f 3bff 	mov.w	fp, #4294967295
 80072b6:	2200      	movs	r2, #0
 80072b8:	2312      	movs	r3, #18
 80072ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80072be:	920c      	str	r2, [sp, #48]	@ 0x30
 80072c0:	e7db      	b.n	800727a <_dtoa_r+0x252>
 80072c2:	2301      	movs	r3, #1
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	e7f4      	b.n	80072b2 <_dtoa_r+0x28a>
 80072c8:	f04f 0b01 	mov.w	fp, #1
 80072cc:	465b      	mov	r3, fp
 80072ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80072d2:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80072d6:	e7d0      	b.n	800727a <_dtoa_r+0x252>
 80072d8:	3101      	adds	r1, #1
 80072da:	0052      	lsls	r2, r2, #1
 80072dc:	e7d1      	b.n	8007282 <_dtoa_r+0x25a>
 80072de:	bf00      	nop
 80072e0:	636f4361 	.word	0x636f4361
 80072e4:	3fd287a7 	.word	0x3fd287a7
 80072e8:	8b60c8b3 	.word	0x8b60c8b3
 80072ec:	3fc68a28 	.word	0x3fc68a28
 80072f0:	509f79fb 	.word	0x509f79fb
 80072f4:	3fd34413 	.word	0x3fd34413
 80072f8:	0800a9d6 	.word	0x0800a9d6
 80072fc:	0800a9ed 	.word	0x0800a9ed
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	0800a9a1 	.word	0x0800a9a1
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	0800aba0 	.word	0x0800aba0
 8007310:	0800aa45 	.word	0x0800aa45
 8007314:	0800a9d2 	.word	0x0800a9d2
 8007318:	0800a9a0 	.word	0x0800a9a0
 800731c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007320:	6018      	str	r0, [r3, #0]
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	2b0e      	cmp	r3, #14
 8007326:	f200 80a1 	bhi.w	800746c <_dtoa_r+0x444>
 800732a:	2c00      	cmp	r4, #0
 800732c:	f000 809e 	beq.w	800746c <_dtoa_r+0x444>
 8007330:	2f00      	cmp	r7, #0
 8007332:	dd33      	ble.n	800739c <_dtoa_r+0x374>
 8007334:	f007 020f 	and.w	r2, r7, #15
 8007338:	4b9b      	ldr	r3, [pc, #620]	@ (80075a8 <_dtoa_r+0x580>)
 800733a:	05f8      	lsls	r0, r7, #23
 800733c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007344:	ed93 7b00 	vldr	d7, [r3]
 8007348:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800734c:	d516      	bpl.n	800737c <_dtoa_r+0x354>
 800734e:	4b97      	ldr	r3, [pc, #604]	@ (80075ac <_dtoa_r+0x584>)
 8007350:	f004 040f 	and.w	r4, r4, #15
 8007354:	2603      	movs	r6, #3
 8007356:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800735a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800735e:	f7f9 fa79 	bl	8000854 <__aeabi_ddiv>
 8007362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007366:	4d91      	ldr	r5, [pc, #580]	@ (80075ac <_dtoa_r+0x584>)
 8007368:	b954      	cbnz	r4, 8007380 <_dtoa_r+0x358>
 800736a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800736e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007372:	f7f9 fa6f 	bl	8000854 <__aeabi_ddiv>
 8007376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737a:	e028      	b.n	80073ce <_dtoa_r+0x3a6>
 800737c:	2602      	movs	r6, #2
 800737e:	e7f2      	b.n	8007366 <_dtoa_r+0x33e>
 8007380:	07e1      	lsls	r1, r4, #31
 8007382:	d508      	bpl.n	8007396 <_dtoa_r+0x36e>
 8007384:	3601      	adds	r6, #1
 8007386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800738a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738e:	f7f9 f937 	bl	8000600 <__aeabi_dmul>
 8007392:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007396:	1064      	asrs	r4, r4, #1
 8007398:	3508      	adds	r5, #8
 800739a:	e7e5      	b.n	8007368 <_dtoa_r+0x340>
 800739c:	f000 80af 	beq.w	80074fe <_dtoa_r+0x4d6>
 80073a0:	427c      	negs	r4, r7
 80073a2:	4b81      	ldr	r3, [pc, #516]	@ (80075a8 <_dtoa_r+0x580>)
 80073a4:	4d81      	ldr	r5, [pc, #516]	@ (80075ac <_dtoa_r+0x584>)
 80073a6:	2602      	movs	r6, #2
 80073a8:	f004 020f 	and.w	r2, r4, #15
 80073ac:	1124      	asrs	r4, r4, #4
 80073ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f9 f921 	bl	8000600 <__aeabi_dmul>
 80073be:	2300      	movs	r3, #0
 80073c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f040 808f 	bne.w	80074e8 <_dtoa_r+0x4c0>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1d3      	bne.n	8007376 <_dtoa_r+0x34e>
 80073ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8094 	beq.w	8007502 <_dtoa_r+0x4da>
 80073da:	2200      	movs	r2, #0
 80073dc:	4b74      	ldr	r3, [pc, #464]	@ (80075b0 <_dtoa_r+0x588>)
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f9 fb7f 	bl	8000ae4 <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f000 808b 	beq.w	8007502 <_dtoa_r+0x4da>
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8087 	beq.w	8007502 <_dtoa_r+0x4da>
 80073f4:	f1bb 0f00 	cmp.w	fp, #0
 80073f8:	dd34      	ble.n	8007464 <_dtoa_r+0x43c>
 80073fa:	4620      	mov	r0, r4
 80073fc:	f107 38ff 	add.w	r8, r7, #4294967295
 8007400:	3601      	adds	r6, #1
 8007402:	465c      	mov	r4, fp
 8007404:	2200      	movs	r2, #0
 8007406:	4b6b      	ldr	r3, [pc, #428]	@ (80075b4 <_dtoa_r+0x58c>)
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 f8f9 	bl	8000600 <__aeabi_dmul>
 800740e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007412:	4630      	mov	r0, r6
 8007414:	f7f9 f88a 	bl	800052c <__aeabi_i2d>
 8007418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741c:	f7f9 f8f0 	bl	8000600 <__aeabi_dmul>
 8007420:	2200      	movs	r2, #0
 8007422:	4b65      	ldr	r3, [pc, #404]	@ (80075b8 <_dtoa_r+0x590>)
 8007424:	f7f8 ff36 	bl	8000294 <__adddf3>
 8007428:	4605      	mov	r5, r0
 800742a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800742e:	2c00      	cmp	r4, #0
 8007430:	d16a      	bne.n	8007508 <_dtoa_r+0x4e0>
 8007432:	2200      	movs	r2, #0
 8007434:	4b61      	ldr	r3, [pc, #388]	@ (80075bc <_dtoa_r+0x594>)
 8007436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743a:	f7f8 ff29 	bl	8000290 <__aeabi_dsub>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007446:	462a      	mov	r2, r5
 8007448:	4633      	mov	r3, r6
 800744a:	f7f9 fb69 	bl	8000b20 <__aeabi_dcmpgt>
 800744e:	2800      	cmp	r0, #0
 8007450:	f040 8298 	bne.w	8007984 <_dtoa_r+0x95c>
 8007454:	462a      	mov	r2, r5
 8007456:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800745a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745e:	f7f9 fb41 	bl	8000ae4 <__aeabi_dcmplt>
 8007462:	bb38      	cbnz	r0, 80074b4 <_dtoa_r+0x48c>
 8007464:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007468:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800746c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800746e:	2b00      	cmp	r3, #0
 8007470:	f2c0 8157 	blt.w	8007722 <_dtoa_r+0x6fa>
 8007474:	2f0e      	cmp	r7, #14
 8007476:	f300 8154 	bgt.w	8007722 <_dtoa_r+0x6fa>
 800747a:	4b4b      	ldr	r3, [pc, #300]	@ (80075a8 <_dtoa_r+0x580>)
 800747c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007480:	ed93 7b00 	vldr	d7, [r3]
 8007484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007486:	2b00      	cmp	r3, #0
 8007488:	ed8d 7b00 	vstr	d7, [sp]
 800748c:	f280 80e5 	bge.w	800765a <_dtoa_r+0x632>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f300 80e1 	bgt.w	800765a <_dtoa_r+0x632>
 8007498:	d10c      	bne.n	80074b4 <_dtoa_r+0x48c>
 800749a:	2200      	movs	r2, #0
 800749c:	4b47      	ldr	r3, [pc, #284]	@ (80075bc <_dtoa_r+0x594>)
 800749e:	ec51 0b17 	vmov	r0, r1, d7
 80074a2:	f7f9 f8ad 	bl	8000600 <__aeabi_dmul>
 80074a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074aa:	f7f9 fb2f 	bl	8000b0c <__aeabi_dcmpge>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f000 8266 	beq.w	8007980 <_dtoa_r+0x958>
 80074b4:	2400      	movs	r4, #0
 80074b6:	4625      	mov	r5, r4
 80074b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ba:	4656      	mov	r6, sl
 80074bc:	ea6f 0803 	mvn.w	r8, r3
 80074c0:	2700      	movs	r7, #0
 80074c2:	4621      	mov	r1, r4
 80074c4:	4648      	mov	r0, r9
 80074c6:	f000 fc0b 	bl	8007ce0 <_Bfree>
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	f000 80bd 	beq.w	800764a <_dtoa_r+0x622>
 80074d0:	b12f      	cbz	r7, 80074de <_dtoa_r+0x4b6>
 80074d2:	42af      	cmp	r7, r5
 80074d4:	d003      	beq.n	80074de <_dtoa_r+0x4b6>
 80074d6:	4639      	mov	r1, r7
 80074d8:	4648      	mov	r0, r9
 80074da:	f000 fc01 	bl	8007ce0 <_Bfree>
 80074de:	4629      	mov	r1, r5
 80074e0:	4648      	mov	r0, r9
 80074e2:	f000 fbfd 	bl	8007ce0 <_Bfree>
 80074e6:	e0b0      	b.n	800764a <_dtoa_r+0x622>
 80074e8:	07e2      	lsls	r2, r4, #31
 80074ea:	d505      	bpl.n	80074f8 <_dtoa_r+0x4d0>
 80074ec:	3601      	adds	r6, #1
 80074ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074f2:	f7f9 f885 	bl	8000600 <__aeabi_dmul>
 80074f6:	2301      	movs	r3, #1
 80074f8:	1064      	asrs	r4, r4, #1
 80074fa:	3508      	adds	r5, #8
 80074fc:	e762      	b.n	80073c4 <_dtoa_r+0x39c>
 80074fe:	2602      	movs	r6, #2
 8007500:	e765      	b.n	80073ce <_dtoa_r+0x3a6>
 8007502:	46b8      	mov	r8, r7
 8007504:	9c03      	ldr	r4, [sp, #12]
 8007506:	e784      	b.n	8007412 <_dtoa_r+0x3ea>
 8007508:	4b27      	ldr	r3, [pc, #156]	@ (80075a8 <_dtoa_r+0x580>)
 800750a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800750c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007510:	4454      	add	r4, sl
 8007512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007516:	2900      	cmp	r1, #0
 8007518:	d054      	beq.n	80075c4 <_dtoa_r+0x59c>
 800751a:	2000      	movs	r0, #0
 800751c:	4928      	ldr	r1, [pc, #160]	@ (80075c0 <_dtoa_r+0x598>)
 800751e:	f7f9 f999 	bl	8000854 <__aeabi_ddiv>
 8007522:	4633      	mov	r3, r6
 8007524:	4656      	mov	r6, sl
 8007526:	462a      	mov	r2, r5
 8007528:	f7f8 feb2 	bl	8000290 <__aeabi_dsub>
 800752c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007534:	f7f9 fb14 	bl	8000b60 <__aeabi_d2iz>
 8007538:	4605      	mov	r5, r0
 800753a:	f7f8 fff7 	bl	800052c <__aeabi_i2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	3530      	adds	r5, #48	@ 0x30
 8007544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007548:	f7f8 fea2 	bl	8000290 <__aeabi_dsub>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	f806 5b01 	strb.w	r5, [r6], #1
 8007554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800755c:	f7f9 fac2 	bl	8000ae4 <__aeabi_dcmplt>
 8007560:	2800      	cmp	r0, #0
 8007562:	d172      	bne.n	800764a <_dtoa_r+0x622>
 8007564:	2000      	movs	r0, #0
 8007566:	4912      	ldr	r1, [pc, #72]	@ (80075b0 <_dtoa_r+0x588>)
 8007568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756c:	f7f8 fe90 	bl	8000290 <__aeabi_dsub>
 8007570:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007574:	f7f9 fab6 	bl	8000ae4 <__aeabi_dcmplt>
 8007578:	2800      	cmp	r0, #0
 800757a:	f040 80b4 	bne.w	80076e6 <_dtoa_r+0x6be>
 800757e:	42a6      	cmp	r6, r4
 8007580:	f43f af70 	beq.w	8007464 <_dtoa_r+0x43c>
 8007584:	2200      	movs	r2, #0
 8007586:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <_dtoa_r+0x58c>)
 8007588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800758c:	f7f9 f838 	bl	8000600 <__aeabi_dmul>
 8007590:	2200      	movs	r2, #0
 8007592:	4b08      	ldr	r3, [pc, #32]	@ (80075b4 <_dtoa_r+0x58c>)
 8007594:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759c:	f7f9 f830 	bl	8000600 <__aeabi_dmul>
 80075a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075a4:	e7c4      	b.n	8007530 <_dtoa_r+0x508>
 80075a6:	bf00      	nop
 80075a8:	0800aba0 	.word	0x0800aba0
 80075ac:	0800ab78 	.word	0x0800ab78
 80075b0:	3ff00000 	.word	0x3ff00000
 80075b4:	40240000 	.word	0x40240000
 80075b8:	401c0000 	.word	0x401c0000
 80075bc:	40140000 	.word	0x40140000
 80075c0:	3fe00000 	.word	0x3fe00000
 80075c4:	4631      	mov	r1, r6
 80075c6:	4656      	mov	r6, sl
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7f9 f819 	bl	8000600 <__aeabi_dmul>
 80075ce:	9413      	str	r4, [sp, #76]	@ 0x4c
 80075d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d8:	f7f9 fac2 	bl	8000b60 <__aeabi_d2iz>
 80075dc:	4605      	mov	r5, r0
 80075de:	f7f8 ffa5 	bl	800052c <__aeabi_i2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	3530      	adds	r5, #48	@ 0x30
 80075e6:	460b      	mov	r3, r1
 80075e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ec:	f7f8 fe50 	bl	8000290 <__aeabi_dsub>
 80075f0:	f806 5b01 	strb.w	r5, [r6], #1
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	d124      	bne.n	800764e <_dtoa_r+0x626>
 8007604:	4baf      	ldr	r3, [pc, #700]	@ (80078c4 <_dtoa_r+0x89c>)
 8007606:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800760a:	f7f8 fe43 	bl	8000294 <__adddf3>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007616:	f7f9 fa83 	bl	8000b20 <__aeabi_dcmpgt>
 800761a:	2800      	cmp	r0, #0
 800761c:	d163      	bne.n	80076e6 <_dtoa_r+0x6be>
 800761e:	2000      	movs	r0, #0
 8007620:	49a8      	ldr	r1, [pc, #672]	@ (80078c4 <_dtoa_r+0x89c>)
 8007622:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007626:	f7f8 fe33 	bl	8000290 <__aeabi_dsub>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007632:	f7f9 fa57 	bl	8000ae4 <__aeabi_dcmplt>
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f af14 	beq.w	8007464 <_dtoa_r+0x43c>
 800763c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800763e:	1e73      	subs	r3, r6, #1
 8007640:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007642:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007646:	2b30      	cmp	r3, #48	@ 0x30
 8007648:	d0f8      	beq.n	800763c <_dtoa_r+0x614>
 800764a:	4647      	mov	r7, r8
 800764c:	e03b      	b.n	80076c6 <_dtoa_r+0x69e>
 800764e:	4b9e      	ldr	r3, [pc, #632]	@ (80078c8 <_dtoa_r+0x8a0>)
 8007650:	f7f8 ffd6 	bl	8000600 <__aeabi_dmul>
 8007654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007658:	e7bc      	b.n	80075d4 <_dtoa_r+0x5ac>
 800765a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800765e:	4656      	mov	r6, sl
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007668:	f7f9 f8f4 	bl	8000854 <__aeabi_ddiv>
 800766c:	f7f9 fa78 	bl	8000b60 <__aeabi_d2iz>
 8007670:	4680      	mov	r8, r0
 8007672:	f7f8 ff5b 	bl	800052c <__aeabi_i2d>
 8007676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767a:	f7f8 ffc1 	bl	8000600 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	4620      	mov	r0, r4
 8007682:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007686:	460b      	mov	r3, r1
 8007688:	4629      	mov	r1, r5
 800768a:	f7f8 fe01 	bl	8000290 <__aeabi_dsub>
 800768e:	9d03      	ldr	r5, [sp, #12]
 8007690:	f806 4b01 	strb.w	r4, [r6], #1
 8007694:	eba6 040a 	sub.w	r4, r6, sl
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	42a5      	cmp	r5, r4
 800769e:	d133      	bne.n	8007708 <_dtoa_r+0x6e0>
 80076a0:	f7f8 fdf8 	bl	8000294 <__adddf3>
 80076a4:	4604      	mov	r4, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ac:	f7f9 fa38 	bl	8000b20 <__aeabi_dcmpgt>
 80076b0:	b9c0      	cbnz	r0, 80076e4 <_dtoa_r+0x6bc>
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ba:	f7f9 fa09 	bl	8000ad0 <__aeabi_dcmpeq>
 80076be:	b110      	cbz	r0, 80076c6 <_dtoa_r+0x69e>
 80076c0:	f018 0f01 	tst.w	r8, #1
 80076c4:	d10e      	bne.n	80076e4 <_dtoa_r+0x6bc>
 80076c6:	9902      	ldr	r1, [sp, #8]
 80076c8:	4648      	mov	r0, r9
 80076ca:	f000 fb09 	bl	8007ce0 <_Bfree>
 80076ce:	2300      	movs	r3, #0
 80076d0:	3701      	adds	r7, #1
 80076d2:	7033      	strb	r3, [r6, #0]
 80076d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076d6:	601f      	str	r7, [r3, #0]
 80076d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 824c 	beq.w	8007b78 <_dtoa_r+0xb50>
 80076e0:	601e      	str	r6, [r3, #0]
 80076e2:	e249      	b.n	8007b78 <_dtoa_r+0xb50>
 80076e4:	46b8      	mov	r8, r7
 80076e6:	4633      	mov	r3, r6
 80076e8:	461e      	mov	r6, r3
 80076ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ee:	2a39      	cmp	r2, #57	@ 0x39
 80076f0:	d106      	bne.n	8007700 <_dtoa_r+0x6d8>
 80076f2:	459a      	cmp	sl, r3
 80076f4:	d1f8      	bne.n	80076e8 <_dtoa_r+0x6c0>
 80076f6:	2230      	movs	r2, #48	@ 0x30
 80076f8:	f108 0801 	add.w	r8, r8, #1
 80076fc:	f88a 2000 	strb.w	r2, [sl]
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	3201      	adds	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e7a0      	b.n	800764a <_dtoa_r+0x622>
 8007708:	2200      	movs	r2, #0
 800770a:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <_dtoa_r+0x8a0>)
 800770c:	f7f8 ff78 	bl	8000600 <__aeabi_dmul>
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	4604      	mov	r4, r0
 8007716:	460d      	mov	r5, r1
 8007718:	f7f9 f9da 	bl	8000ad0 <__aeabi_dcmpeq>
 800771c:	2800      	cmp	r0, #0
 800771e:	d09f      	beq.n	8007660 <_dtoa_r+0x638>
 8007720:	e7d1      	b.n	80076c6 <_dtoa_r+0x69e>
 8007722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007724:	2a00      	cmp	r2, #0
 8007726:	f000 80ea 	beq.w	80078fe <_dtoa_r+0x8d6>
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	2a01      	cmp	r2, #1
 800772e:	f300 80cd 	bgt.w	80078cc <_dtoa_r+0x8a4>
 8007732:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007734:	2a00      	cmp	r2, #0
 8007736:	f000 80c1 	beq.w	80078bc <_dtoa_r+0x894>
 800773a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800773e:	9c08      	ldr	r4, [sp, #32]
 8007740:	9e00      	ldr	r6, [sp, #0]
 8007742:	9a00      	ldr	r2, [sp, #0]
 8007744:	2101      	movs	r1, #1
 8007746:	4648      	mov	r0, r9
 8007748:	441a      	add	r2, r3
 800774a:	9200      	str	r2, [sp, #0]
 800774c:	9a06      	ldr	r2, [sp, #24]
 800774e:	441a      	add	r2, r3
 8007750:	9206      	str	r2, [sp, #24]
 8007752:	f000 fbc5 	bl	8007ee0 <__i2b>
 8007756:	4605      	mov	r5, r0
 8007758:	b166      	cbz	r6, 8007774 <_dtoa_r+0x74c>
 800775a:	9b06      	ldr	r3, [sp, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd09      	ble.n	8007774 <_dtoa_r+0x74c>
 8007760:	42b3      	cmp	r3, r6
 8007762:	9a00      	ldr	r2, [sp, #0]
 8007764:	bfa8      	it	ge
 8007766:	4633      	movge	r3, r6
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	1af6      	subs	r6, r6, r3
 800776c:	9200      	str	r2, [sp, #0]
 800776e:	9a06      	ldr	r2, [sp, #24]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	9b08      	ldr	r3, [sp, #32]
 8007776:	b30b      	cbz	r3, 80077bc <_dtoa_r+0x794>
 8007778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80c6 	beq.w	800790c <_dtoa_r+0x8e4>
 8007780:	2c00      	cmp	r4, #0
 8007782:	f000 80c0 	beq.w	8007906 <_dtoa_r+0x8de>
 8007786:	4629      	mov	r1, r5
 8007788:	4622      	mov	r2, r4
 800778a:	4648      	mov	r0, r9
 800778c:	f000 fc62 	bl	8008054 <__pow5mult>
 8007790:	9a02      	ldr	r2, [sp, #8]
 8007792:	4601      	mov	r1, r0
 8007794:	4605      	mov	r5, r0
 8007796:	4648      	mov	r0, r9
 8007798:	f000 fbb8 	bl	8007f0c <__multiply>
 800779c:	9902      	ldr	r1, [sp, #8]
 800779e:	4680      	mov	r8, r0
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fa9d 	bl	8007ce0 <_Bfree>
 80077a6:	9b08      	ldr	r3, [sp, #32]
 80077a8:	1b1b      	subs	r3, r3, r4
 80077aa:	9308      	str	r3, [sp, #32]
 80077ac:	f000 80b1 	beq.w	8007912 <_dtoa_r+0x8ea>
 80077b0:	9a08      	ldr	r2, [sp, #32]
 80077b2:	4641      	mov	r1, r8
 80077b4:	4648      	mov	r0, r9
 80077b6:	f000 fc4d 	bl	8008054 <__pow5mult>
 80077ba:	9002      	str	r0, [sp, #8]
 80077bc:	2101      	movs	r1, #1
 80077be:	4648      	mov	r0, r9
 80077c0:	f000 fb8e 	bl	8007ee0 <__i2b>
 80077c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077c6:	4604      	mov	r4, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 81d9 	beq.w	8007b80 <_dtoa_r+0xb58>
 80077ce:	461a      	mov	r2, r3
 80077d0:	4601      	mov	r1, r0
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fc3e 	bl	8008054 <__pow5mult>
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	4604      	mov	r4, r0
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f300 809f 	bgt.w	8007920 <_dtoa_r+0x8f8>
 80077e2:	9b04      	ldr	r3, [sp, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8097 	bne.w	8007918 <_dtoa_r+0x8f0>
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8093 	bne.w	800791c <_dtoa_r+0x8f4>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077fc:	0d1b      	lsrs	r3, r3, #20
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	b133      	cbz	r3, 8007810 <_dtoa_r+0x7e8>
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	3301      	adds	r3, #1
 800780c:	9306      	str	r3, [sp, #24]
 800780e:	2301      	movs	r3, #1
 8007810:	9308      	str	r3, [sp, #32]
 8007812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 81b9 	beq.w	8007b8c <_dtoa_r+0xb64>
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007820:	6918      	ldr	r0, [r3, #16]
 8007822:	f000 fb11 	bl	8007e48 <__hi0bits>
 8007826:	f1c0 0020 	rsb	r0, r0, #32
 800782a:	9b06      	ldr	r3, [sp, #24]
 800782c:	4418      	add	r0, r3
 800782e:	f010 001f 	ands.w	r0, r0, #31
 8007832:	f000 8082 	beq.w	800793a <_dtoa_r+0x912>
 8007836:	f1c0 0320 	rsb	r3, r0, #32
 800783a:	2b04      	cmp	r3, #4
 800783c:	dd73      	ble.n	8007926 <_dtoa_r+0x8fe>
 800783e:	f1c0 001c 	rsb	r0, r0, #28
 8007842:	9b00      	ldr	r3, [sp, #0]
 8007844:	4403      	add	r3, r0
 8007846:	4406      	add	r6, r0
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	4403      	add	r3, r0
 800784e:	9306      	str	r3, [sp, #24]
 8007850:	9b00      	ldr	r3, [sp, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd05      	ble.n	8007862 <_dtoa_r+0x83a>
 8007856:	461a      	mov	r2, r3
 8007858:	9902      	ldr	r1, [sp, #8]
 800785a:	4648      	mov	r0, r9
 800785c:	f000 fc54 	bl	8008108 <__lshift>
 8007860:	9002      	str	r0, [sp, #8]
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd05      	ble.n	8007874 <_dtoa_r+0x84c>
 8007868:	4621      	mov	r1, r4
 800786a:	461a      	mov	r2, r3
 800786c:	4648      	mov	r0, r9
 800786e:	f000 fc4b 	bl	8008108 <__lshift>
 8007872:	4604      	mov	r4, r0
 8007874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d061      	beq.n	800793e <_dtoa_r+0x916>
 800787a:	4621      	mov	r1, r4
 800787c:	9802      	ldr	r0, [sp, #8]
 800787e:	f000 fcaf 	bl	80081e0 <__mcmp>
 8007882:	2800      	cmp	r0, #0
 8007884:	da5b      	bge.n	800793e <_dtoa_r+0x916>
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	9902      	ldr	r1, [sp, #8]
 800788c:	4648      	mov	r0, r9
 800788e:	f000 fa49 	bl	8007d24 <__multadd>
 8007892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007894:	f107 38ff 	add.w	r8, r7, #4294967295
 8007898:	9002      	str	r0, [sp, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8178 	beq.w	8007b90 <_dtoa_r+0xb68>
 80078a0:	4629      	mov	r1, r5
 80078a2:	2300      	movs	r3, #0
 80078a4:	220a      	movs	r2, #10
 80078a6:	4648      	mov	r0, r9
 80078a8:	f000 fa3c 	bl	8007d24 <__multadd>
 80078ac:	f1bb 0f00 	cmp.w	fp, #0
 80078b0:	4605      	mov	r5, r0
 80078b2:	dc6f      	bgt.n	8007994 <_dtoa_r+0x96c>
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	dc49      	bgt.n	800794e <_dtoa_r+0x926>
 80078ba:	e06b      	b.n	8007994 <_dtoa_r+0x96c>
 80078bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078c2:	e73c      	b.n	800773e <_dtoa_r+0x716>
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	40240000 	.word	0x40240000
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	1e5c      	subs	r4, r3, #1
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	db09      	blt.n	80078ea <_dtoa_r+0x8c2>
 80078d6:	1b1c      	subs	r4, r3, r4
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f6bf af30 	bge.w	8007740 <_dtoa_r+0x718>
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	9a03      	ldr	r2, [sp, #12]
 80078e4:	1a9e      	subs	r6, r3, r2
 80078e6:	2300      	movs	r3, #0
 80078e8:	e72b      	b.n	8007742 <_dtoa_r+0x71a>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078ee:	1ae3      	subs	r3, r4, r3
 80078f0:	9408      	str	r4, [sp, #32]
 80078f2:	9e00      	ldr	r6, [sp, #0]
 80078f4:	2400      	movs	r4, #0
 80078f6:	441a      	add	r2, r3
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	920d      	str	r2, [sp, #52]	@ 0x34
 80078fc:	e721      	b.n	8007742 <_dtoa_r+0x71a>
 80078fe:	9c08      	ldr	r4, [sp, #32]
 8007900:	9e00      	ldr	r6, [sp, #0]
 8007902:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007904:	e728      	b.n	8007758 <_dtoa_r+0x730>
 8007906:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800790a:	e751      	b.n	80077b0 <_dtoa_r+0x788>
 800790c:	9a08      	ldr	r2, [sp, #32]
 800790e:	9902      	ldr	r1, [sp, #8]
 8007910:	e750      	b.n	80077b4 <_dtoa_r+0x78c>
 8007912:	f8cd 8008 	str.w	r8, [sp, #8]
 8007916:	e751      	b.n	80077bc <_dtoa_r+0x794>
 8007918:	2300      	movs	r3, #0
 800791a:	e779      	b.n	8007810 <_dtoa_r+0x7e8>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	e777      	b.n	8007810 <_dtoa_r+0x7e8>
 8007920:	2300      	movs	r3, #0
 8007922:	9308      	str	r3, [sp, #32]
 8007924:	e779      	b.n	800781a <_dtoa_r+0x7f2>
 8007926:	d093      	beq.n	8007850 <_dtoa_r+0x828>
 8007928:	331c      	adds	r3, #28
 800792a:	9a00      	ldr	r2, [sp, #0]
 800792c:	441a      	add	r2, r3
 800792e:	441e      	add	r6, r3
 8007930:	9200      	str	r2, [sp, #0]
 8007932:	9a06      	ldr	r2, [sp, #24]
 8007934:	441a      	add	r2, r3
 8007936:	9206      	str	r2, [sp, #24]
 8007938:	e78a      	b.n	8007850 <_dtoa_r+0x828>
 800793a:	4603      	mov	r3, r0
 800793c:	e7f4      	b.n	8007928 <_dtoa_r+0x900>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	46b8      	mov	r8, r7
 8007942:	2b00      	cmp	r3, #0
 8007944:	dc20      	bgt.n	8007988 <_dtoa_r+0x960>
 8007946:	469b      	mov	fp, r3
 8007948:	9b07      	ldr	r3, [sp, #28]
 800794a:	2b02      	cmp	r3, #2
 800794c:	dd1e      	ble.n	800798c <_dtoa_r+0x964>
 800794e:	f1bb 0f00 	cmp.w	fp, #0
 8007952:	f47f adb1 	bne.w	80074b8 <_dtoa_r+0x490>
 8007956:	4621      	mov	r1, r4
 8007958:	465b      	mov	r3, fp
 800795a:	2205      	movs	r2, #5
 800795c:	4648      	mov	r0, r9
 800795e:	f000 f9e1 	bl	8007d24 <__multadd>
 8007962:	4601      	mov	r1, r0
 8007964:	4604      	mov	r4, r0
 8007966:	9802      	ldr	r0, [sp, #8]
 8007968:	f000 fc3a 	bl	80081e0 <__mcmp>
 800796c:	2800      	cmp	r0, #0
 800796e:	f77f ada3 	ble.w	80074b8 <_dtoa_r+0x490>
 8007972:	4656      	mov	r6, sl
 8007974:	2331      	movs	r3, #49	@ 0x31
 8007976:	f108 0801 	add.w	r8, r8, #1
 800797a:	f806 3b01 	strb.w	r3, [r6], #1
 800797e:	e59f      	b.n	80074c0 <_dtoa_r+0x498>
 8007980:	46b8      	mov	r8, r7
 8007982:	9c03      	ldr	r4, [sp, #12]
 8007984:	4625      	mov	r5, r4
 8007986:	e7f4      	b.n	8007972 <_dtoa_r+0x94a>
 8007988:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800798c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8102 	beq.w	8007b98 <_dtoa_r+0xb70>
 8007994:	2e00      	cmp	r6, #0
 8007996:	dd05      	ble.n	80079a4 <_dtoa_r+0x97c>
 8007998:	4629      	mov	r1, r5
 800799a:	4632      	mov	r2, r6
 800799c:	4648      	mov	r0, r9
 800799e:	f000 fbb3 	bl	8008108 <__lshift>
 80079a2:	4605      	mov	r5, r0
 80079a4:	9b08      	ldr	r3, [sp, #32]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d05c      	beq.n	8007a64 <_dtoa_r+0xa3c>
 80079aa:	6869      	ldr	r1, [r5, #4]
 80079ac:	4648      	mov	r0, r9
 80079ae:	f000 f957 	bl	8007c60 <_Balloc>
 80079b2:	4606      	mov	r6, r0
 80079b4:	b928      	cbnz	r0, 80079c2 <_dtoa_r+0x99a>
 80079b6:	4b83      	ldr	r3, [pc, #524]	@ (8007bc4 <_dtoa_r+0xb9c>)
 80079b8:	4602      	mov	r2, r0
 80079ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079be:	f7ff bb4a 	b.w	8007056 <_dtoa_r+0x2e>
 80079c2:	692a      	ldr	r2, [r5, #16]
 80079c4:	f105 010c 	add.w	r1, r5, #12
 80079c8:	300c      	adds	r0, #12
 80079ca:	3202      	adds	r2, #2
 80079cc:	0092      	lsls	r2, r2, #2
 80079ce:	f7ff fa8a 	bl	8006ee6 <memcpy>
 80079d2:	2201      	movs	r2, #1
 80079d4:	4631      	mov	r1, r6
 80079d6:	4648      	mov	r0, r9
 80079d8:	f000 fb96 	bl	8008108 <__lshift>
 80079dc:	f10a 0301 	add.w	r3, sl, #1
 80079e0:	462f      	mov	r7, r5
 80079e2:	4605      	mov	r5, r0
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	eb0a 030b 	add.w	r3, sl, fp
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	9b00      	ldr	r3, [sp, #0]
 80079f6:	4621      	mov	r1, r4
 80079f8:	9802      	ldr	r0, [sp, #8]
 80079fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80079fe:	f7ff fa85 	bl	8006f0c <quorem>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4639      	mov	r1, r7
 8007a06:	9003      	str	r0, [sp, #12]
 8007a08:	3330      	adds	r3, #48	@ 0x30
 8007a0a:	9802      	ldr	r0, [sp, #8]
 8007a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0e:	f000 fbe7 	bl	80081e0 <__mcmp>
 8007a12:	462a      	mov	r2, r5
 8007a14:	9004      	str	r0, [sp, #16]
 8007a16:	4621      	mov	r1, r4
 8007a18:	4648      	mov	r0, r9
 8007a1a:	f000 fbfd 	bl	8008218 <__mdiff>
 8007a1e:	68c2      	ldr	r2, [r0, #12]
 8007a20:	4606      	mov	r6, r0
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	bb02      	cbnz	r2, 8007a68 <_dtoa_r+0xa40>
 8007a26:	4601      	mov	r1, r0
 8007a28:	9802      	ldr	r0, [sp, #8]
 8007a2a:	f000 fbd9 	bl	80081e0 <__mcmp>
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	4602      	mov	r2, r0
 8007a32:	4631      	mov	r1, r6
 8007a34:	4648      	mov	r0, r9
 8007a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3a:	f000 f951 	bl	8007ce0 <_Bfree>
 8007a3e:	9b07      	ldr	r3, [sp, #28]
 8007a40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a42:	9e00      	ldr	r6, [sp, #0]
 8007a44:	ea42 0103 	orr.w	r1, r2, r3
 8007a48:	9b06      	ldr	r3, [sp, #24]
 8007a4a:	4319      	orrs	r1, r3
 8007a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4e:	d10d      	bne.n	8007a6c <_dtoa_r+0xa44>
 8007a50:	2b39      	cmp	r3, #57	@ 0x39
 8007a52:	d027      	beq.n	8007aa4 <_dtoa_r+0xa7c>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	dd01      	ble.n	8007a5e <_dtoa_r+0xa36>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	3331      	adds	r3, #49	@ 0x31
 8007a5e:	f88b 3000 	strb.w	r3, [fp]
 8007a62:	e52e      	b.n	80074c2 <_dtoa_r+0x49a>
 8007a64:	4628      	mov	r0, r5
 8007a66:	e7b9      	b.n	80079dc <_dtoa_r+0x9b4>
 8007a68:	2201      	movs	r2, #1
 8007a6a:	e7e2      	b.n	8007a32 <_dtoa_r+0xa0a>
 8007a6c:	9904      	ldr	r1, [sp, #16]
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	db04      	blt.n	8007a7c <_dtoa_r+0xa54>
 8007a72:	9807      	ldr	r0, [sp, #28]
 8007a74:	4301      	orrs	r1, r0
 8007a76:	9806      	ldr	r0, [sp, #24]
 8007a78:	4301      	orrs	r1, r0
 8007a7a:	d120      	bne.n	8007abe <_dtoa_r+0xa96>
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	ddee      	ble.n	8007a5e <_dtoa_r+0xa36>
 8007a80:	2201      	movs	r2, #1
 8007a82:	9902      	ldr	r1, [sp, #8]
 8007a84:	4648      	mov	r0, r9
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	f000 fb3e 	bl	8008108 <__lshift>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	9002      	str	r0, [sp, #8]
 8007a90:	f000 fba6 	bl	80081e0 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	dc02      	bgt.n	8007aa0 <_dtoa_r+0xa78>
 8007a9a:	d1e0      	bne.n	8007a5e <_dtoa_r+0xa36>
 8007a9c:	07da      	lsls	r2, r3, #31
 8007a9e:	d5de      	bpl.n	8007a5e <_dtoa_r+0xa36>
 8007aa0:	2b39      	cmp	r3, #57	@ 0x39
 8007aa2:	d1da      	bne.n	8007a5a <_dtoa_r+0xa32>
 8007aa4:	2339      	movs	r3, #57	@ 0x39
 8007aa6:	f88b 3000 	strb.w	r3, [fp]
 8007aaa:	4633      	mov	r3, r6
 8007aac:	461e      	mov	r6, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ab4:	2a39      	cmp	r2, #57	@ 0x39
 8007ab6:	d04f      	beq.n	8007b58 <_dtoa_r+0xb30>
 8007ab8:	3201      	adds	r2, #1
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e501      	b.n	80074c2 <_dtoa_r+0x49a>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	dd03      	ble.n	8007aca <_dtoa_r+0xaa2>
 8007ac2:	2b39      	cmp	r3, #57	@ 0x39
 8007ac4:	d0ee      	beq.n	8007aa4 <_dtoa_r+0xa7c>
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	e7c9      	b.n	8007a5e <_dtoa_r+0xa36>
 8007aca:	9a00      	ldr	r2, [sp, #0]
 8007acc:	9908      	ldr	r1, [sp, #32]
 8007ace:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ad2:	428a      	cmp	r2, r1
 8007ad4:	d029      	beq.n	8007b2a <_dtoa_r+0xb02>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	220a      	movs	r2, #10
 8007ada:	9902      	ldr	r1, [sp, #8]
 8007adc:	4648      	mov	r0, r9
 8007ade:	f000 f921 	bl	8007d24 <__multadd>
 8007ae2:	42af      	cmp	r7, r5
 8007ae4:	9002      	str	r0, [sp, #8]
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	f04f 020a 	mov.w	r2, #10
 8007aee:	4639      	mov	r1, r7
 8007af0:	4648      	mov	r0, r9
 8007af2:	d107      	bne.n	8007b04 <_dtoa_r+0xadc>
 8007af4:	f000 f916 	bl	8007d24 <__multadd>
 8007af8:	4607      	mov	r7, r0
 8007afa:	4605      	mov	r5, r0
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	3301      	adds	r3, #1
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	e777      	b.n	80079f4 <_dtoa_r+0x9cc>
 8007b04:	f000 f90e 	bl	8007d24 <__multadd>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	220a      	movs	r2, #10
 8007b10:	4648      	mov	r0, r9
 8007b12:	f000 f907 	bl	8007d24 <__multadd>
 8007b16:	4605      	mov	r5, r0
 8007b18:	e7f0      	b.n	8007afc <_dtoa_r+0xad4>
 8007b1a:	f1bb 0f00 	cmp.w	fp, #0
 8007b1e:	f04f 0700 	mov.w	r7, #0
 8007b22:	bfcc      	ite	gt
 8007b24:	465e      	movgt	r6, fp
 8007b26:	2601      	movle	r6, #1
 8007b28:	4456      	add	r6, sl
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	9902      	ldr	r1, [sp, #8]
 8007b2e:	4648      	mov	r0, r9
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	f000 fae9 	bl	8008108 <__lshift>
 8007b36:	4621      	mov	r1, r4
 8007b38:	9002      	str	r0, [sp, #8]
 8007b3a:	f000 fb51 	bl	80081e0 <__mcmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	dcb3      	bgt.n	8007aaa <_dtoa_r+0xa82>
 8007b42:	d102      	bne.n	8007b4a <_dtoa_r+0xb22>
 8007b44:	9b00      	ldr	r3, [sp, #0]
 8007b46:	07db      	lsls	r3, r3, #31
 8007b48:	d4af      	bmi.n	8007aaa <_dtoa_r+0xa82>
 8007b4a:	4633      	mov	r3, r6
 8007b4c:	461e      	mov	r6, r3
 8007b4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b52:	2a30      	cmp	r2, #48	@ 0x30
 8007b54:	d0fa      	beq.n	8007b4c <_dtoa_r+0xb24>
 8007b56:	e4b4      	b.n	80074c2 <_dtoa_r+0x49a>
 8007b58:	459a      	cmp	sl, r3
 8007b5a:	d1a7      	bne.n	8007aac <_dtoa_r+0xa84>
 8007b5c:	2331      	movs	r3, #49	@ 0x31
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	f88a 3000 	strb.w	r3, [sl]
 8007b66:	e4ac      	b.n	80074c2 <_dtoa_r+0x49a>
 8007b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b6a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007bc8 <_dtoa_r+0xba0>
 8007b6e:	b11b      	cbz	r3, 8007b78 <_dtoa_r+0xb50>
 8007b70:	f10a 0308 	add.w	r3, sl, #8
 8007b74:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4650      	mov	r0, sl
 8007b7a:	b017      	add	sp, #92	@ 0x5c
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	f77f ae2d 	ble.w	80077e2 <_dtoa_r+0x7ba>
 8007b88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b8a:	9308      	str	r3, [sp, #32]
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	e64c      	b.n	800782a <_dtoa_r+0x802>
 8007b90:	f1bb 0f00 	cmp.w	fp, #0
 8007b94:	f77f aed8 	ble.w	8007948 <_dtoa_r+0x920>
 8007b98:	4656      	mov	r6, sl
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	9802      	ldr	r0, [sp, #8]
 8007b9e:	f7ff f9b5 	bl	8006f0c <quorem>
 8007ba2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007ba6:	f806 3b01 	strb.w	r3, [r6], #1
 8007baa:	eba6 020a 	sub.w	r2, r6, sl
 8007bae:	4593      	cmp	fp, r2
 8007bb0:	ddb3      	ble.n	8007b1a <_dtoa_r+0xaf2>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	220a      	movs	r2, #10
 8007bb6:	9902      	ldr	r1, [sp, #8]
 8007bb8:	4648      	mov	r0, r9
 8007bba:	f000 f8b3 	bl	8007d24 <__multadd>
 8007bbe:	9002      	str	r0, [sp, #8]
 8007bc0:	e7eb      	b.n	8007b9a <_dtoa_r+0xb72>
 8007bc2:	bf00      	nop
 8007bc4:	0800aa45 	.word	0x0800aa45
 8007bc8:	0800a9c9 	.word	0x0800a9c9

08007bcc <_free_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d041      	beq.n	8007c58 <_free_r+0x8c>
 8007bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd8:	1f0c      	subs	r4, r1, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfb8      	it	lt
 8007bde:	18e4      	addlt	r4, r4, r3
 8007be0:	f7fe f94a 	bl	8005e78 <__malloc_lock>
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <_free_r+0x90>)
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	b933      	cbnz	r3, 8007bf8 <_free_r+0x2c>
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	6014      	str	r4, [r2, #0]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf4:	f7fe b946 	b.w	8005e84 <__malloc_unlock>
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d908      	bls.n	8007c0e <_free_r+0x42>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf01      	itttt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	e7ed      	b.n	8007bea <_free_r+0x1e>
 8007c0e:	461a      	mov	r2, r3
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b10b      	cbz	r3, 8007c18 <_free_r+0x4c>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d9fa      	bls.n	8007c0e <_free_r+0x42>
 8007c18:	6811      	ldr	r1, [r2, #0]
 8007c1a:	1850      	adds	r0, r2, r1
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d10b      	bne.n	8007c38 <_free_r+0x6c>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	4401      	add	r1, r0
 8007c24:	1850      	adds	r0, r2, r1
 8007c26:	6011      	str	r1, [r2, #0]
 8007c28:	4283      	cmp	r3, r0
 8007c2a:	d1e0      	bne.n	8007bee <_free_r+0x22>
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4408      	add	r0, r1
 8007c32:	6053      	str	r3, [r2, #4]
 8007c34:	6010      	str	r0, [r2, #0]
 8007c36:	e7da      	b.n	8007bee <_free_r+0x22>
 8007c38:	d902      	bls.n	8007c40 <_free_r+0x74>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	e7d6      	b.n	8007bee <_free_r+0x22>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf02      	ittt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6063      	str	r3, [r4, #4]
 8007c50:	bf08      	it	eq
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	6054      	str	r4, [r2, #4]
 8007c56:	e7ca      	b.n	8007bee <_free_r+0x22>
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200007e4 	.word	0x200007e4

08007c60 <_Balloc>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	69c6      	ldr	r6, [r0, #28]
 8007c64:	4604      	mov	r4, r0
 8007c66:	460d      	mov	r5, r1
 8007c68:	b976      	cbnz	r6, 8007c88 <_Balloc+0x28>
 8007c6a:	2010      	movs	r0, #16
 8007c6c:	f7fe f852 	bl	8005d14 <malloc>
 8007c70:	4602      	mov	r2, r0
 8007c72:	61e0      	str	r0, [r4, #28]
 8007c74:	b920      	cbnz	r0, 8007c80 <_Balloc+0x20>
 8007c76:	4b18      	ldr	r3, [pc, #96]	@ (8007cd8 <_Balloc+0x78>)
 8007c78:	216b      	movs	r1, #107	@ 0x6b
 8007c7a:	4818      	ldr	r0, [pc, #96]	@ (8007cdc <_Balloc+0x7c>)
 8007c7c:	f001 fd64 	bl	8009748 <__assert_func>
 8007c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c84:	6006      	str	r6, [r0, #0]
 8007c86:	60c6      	str	r6, [r0, #12]
 8007c88:	69e6      	ldr	r6, [r4, #28]
 8007c8a:	68f3      	ldr	r3, [r6, #12]
 8007c8c:	b183      	cbz	r3, 8007cb0 <_Balloc+0x50>
 8007c8e:	69e3      	ldr	r3, [r4, #28]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c96:	b9b8      	cbnz	r0, 8007cc8 <_Balloc+0x68>
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	fa01 f605 	lsl.w	r6, r1, r5
 8007ca0:	1d72      	adds	r2, r6, #5
 8007ca2:	0092      	lsls	r2, r2, #2
 8007ca4:	f001 fd6e 	bl	8009784 <_calloc_r>
 8007ca8:	b160      	cbz	r0, 8007cc4 <_Balloc+0x64>
 8007caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cae:	e00e      	b.n	8007cce <_Balloc+0x6e>
 8007cb0:	2221      	movs	r2, #33	@ 0x21
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f001 fd65 	bl	8009784 <_calloc_r>
 8007cba:	69e3      	ldr	r3, [r4, #28]
 8007cbc:	60f0      	str	r0, [r6, #12]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e4      	bne.n	8007c8e <_Balloc+0x2e>
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	6802      	ldr	r2, [r0, #0]
 8007cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cd4:	e7f7      	b.n	8007cc6 <_Balloc+0x66>
 8007cd6:	bf00      	nop
 8007cd8:	0800a9d6 	.word	0x0800a9d6
 8007cdc:	0800aa56 	.word	0x0800aa56

08007ce0 <_Bfree>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	69c6      	ldr	r6, [r0, #28]
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	b976      	cbnz	r6, 8007d08 <_Bfree+0x28>
 8007cea:	2010      	movs	r0, #16
 8007cec:	f7fe f812 	bl	8005d14 <malloc>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	61e8      	str	r0, [r5, #28]
 8007cf4:	b920      	cbnz	r0, 8007d00 <_Bfree+0x20>
 8007cf6:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <_Bfree+0x3c>)
 8007cf8:	218f      	movs	r1, #143	@ 0x8f
 8007cfa:	4809      	ldr	r0, [pc, #36]	@ (8007d20 <_Bfree+0x40>)
 8007cfc:	f001 fd24 	bl	8009748 <__assert_func>
 8007d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d04:	6006      	str	r6, [r0, #0]
 8007d06:	60c6      	str	r6, [r0, #12]
 8007d08:	b13c      	cbz	r4, 8007d1a <_Bfree+0x3a>
 8007d0a:	69eb      	ldr	r3, [r5, #28]
 8007d0c:	6862      	ldr	r2, [r4, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d14:	6021      	str	r1, [r4, #0]
 8007d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	0800a9d6 	.word	0x0800a9d6
 8007d20:	0800aa56 	.word	0x0800aa56

08007d24 <__multadd>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	f101 0c14 	add.w	ip, r1, #20
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	461e      	mov	r6, r3
 8007d32:	690d      	ldr	r5, [r1, #16]
 8007d34:	2000      	movs	r0, #0
 8007d36:	f8dc 3000 	ldr.w	r3, [ip]
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	b299      	uxth	r1, r3
 8007d3e:	4285      	cmp	r5, r0
 8007d40:	fb02 6101 	mla	r1, r2, r1, r6
 8007d44:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d48:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8007d4c:	b289      	uxth	r1, r1
 8007d4e:	fb02 3306 	mla	r3, r2, r6, r3
 8007d52:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d5e:	dcea      	bgt.n	8007d36 <__multadd+0x12>
 8007d60:	b30e      	cbz	r6, 8007da6 <__multadd+0x82>
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dc19      	bgt.n	8007d9c <__multadd+0x78>
 8007d68:	6861      	ldr	r1, [r4, #4]
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f7ff ff77 	bl	8007c60 <_Balloc>
 8007d72:	4680      	mov	r8, r0
 8007d74:	b928      	cbnz	r0, 8007d82 <__multadd+0x5e>
 8007d76:	4602      	mov	r2, r0
 8007d78:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <__multadd+0x88>)
 8007d7a:	21ba      	movs	r1, #186	@ 0xba
 8007d7c:	480c      	ldr	r0, [pc, #48]	@ (8007db0 <__multadd+0x8c>)
 8007d7e:	f001 fce3 	bl	8009748 <__assert_func>
 8007d82:	6922      	ldr	r2, [r4, #16]
 8007d84:	f104 010c 	add.w	r1, r4, #12
 8007d88:	300c      	adds	r0, #12
 8007d8a:	3202      	adds	r2, #2
 8007d8c:	0092      	lsls	r2, r2, #2
 8007d8e:	f7ff f8aa 	bl	8006ee6 <memcpy>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4644      	mov	r4, r8
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7ff ffa2 	bl	8007ce0 <_Bfree>
 8007d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007da0:	3501      	adds	r5, #1
 8007da2:	615e      	str	r6, [r3, #20]
 8007da4:	6125      	str	r5, [r4, #16]
 8007da6:	4620      	mov	r0, r4
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dac:	0800aa45 	.word	0x0800aa45
 8007db0:	0800aa56 	.word	0x0800aa56

08007db4 <__s2b>:
 8007db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	4615      	mov	r5, r2
 8007dba:	461f      	mov	r7, r3
 8007dbc:	2209      	movs	r2, #9
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dca:	2201      	movs	r2, #1
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	db09      	blt.n	8007de4 <__s2b+0x30>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ff45 	bl	8007c60 <_Balloc>
 8007dd6:	b940      	cbnz	r0, 8007dea <__s2b+0x36>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <__s2b+0x8c>)
 8007ddc:	21d3      	movs	r1, #211	@ 0xd3
 8007dde:	4819      	ldr	r0, [pc, #100]	@ (8007e44 <__s2b+0x90>)
 8007de0:	f001 fcb2 	bl	8009748 <__assert_func>
 8007de4:	0052      	lsls	r2, r2, #1
 8007de6:	3101      	adds	r1, #1
 8007de8:	e7f0      	b.n	8007dcc <__s2b+0x18>
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	2d09      	cmp	r5, #9
 8007dee:	6143      	str	r3, [r0, #20]
 8007df0:	f04f 0301 	mov.w	r3, #1
 8007df4:	6103      	str	r3, [r0, #16]
 8007df6:	dd16      	ble.n	8007e26 <__s2b+0x72>
 8007df8:	f104 0909 	add.w	r9, r4, #9
 8007dfc:	442c      	add	r4, r5
 8007dfe:	46c8      	mov	r8, r9
 8007e00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e04:	4601      	mov	r1, r0
 8007e06:	220a      	movs	r2, #10
 8007e08:	4630      	mov	r0, r6
 8007e0a:	3b30      	subs	r3, #48	@ 0x30
 8007e0c:	f7ff ff8a 	bl	8007d24 <__multadd>
 8007e10:	45a0      	cmp	r8, r4
 8007e12:	d1f5      	bne.n	8007e00 <__s2b+0x4c>
 8007e14:	f1a5 0408 	sub.w	r4, r5, #8
 8007e18:	444c      	add	r4, r9
 8007e1a:	1b2d      	subs	r5, r5, r4
 8007e1c:	1963      	adds	r3, r4, r5
 8007e1e:	42bb      	cmp	r3, r7
 8007e20:	db04      	blt.n	8007e2c <__s2b+0x78>
 8007e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e26:	340a      	adds	r4, #10
 8007e28:	2509      	movs	r5, #9
 8007e2a:	e7f6      	b.n	8007e1a <__s2b+0x66>
 8007e2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e30:	4601      	mov	r1, r0
 8007e32:	220a      	movs	r2, #10
 8007e34:	4630      	mov	r0, r6
 8007e36:	3b30      	subs	r3, #48	@ 0x30
 8007e38:	f7ff ff74 	bl	8007d24 <__multadd>
 8007e3c:	e7ee      	b.n	8007e1c <__s2b+0x68>
 8007e3e:	bf00      	nop
 8007e40:	0800aa45 	.word	0x0800aa45
 8007e44:	0800aa56 	.word	0x0800aa56

08007e48 <__hi0bits>:
 8007e48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	bf36      	itet	cc
 8007e50:	0403      	lslcc	r3, r0, #16
 8007e52:	2000      	movcs	r0, #0
 8007e54:	2010      	movcc	r0, #16
 8007e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e5a:	bf3c      	itt	cc
 8007e5c:	021b      	lslcc	r3, r3, #8
 8007e5e:	3008      	addcc	r0, #8
 8007e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e64:	bf3c      	itt	cc
 8007e66:	011b      	lslcc	r3, r3, #4
 8007e68:	3004      	addcc	r0, #4
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6e:	bf3c      	itt	cc
 8007e70:	009b      	lslcc	r3, r3, #2
 8007e72:	3002      	addcc	r0, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	db05      	blt.n	8007e84 <__hi0bits+0x3c>
 8007e78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e7c:	f100 0001 	add.w	r0, r0, #1
 8007e80:	bf08      	it	eq
 8007e82:	2020      	moveq	r0, #32
 8007e84:	4770      	bx	lr

08007e86 <__lo0bits>:
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	4602      	mov	r2, r0
 8007e8a:	f013 0007 	ands.w	r0, r3, #7
 8007e8e:	d00b      	beq.n	8007ea8 <__lo0bits+0x22>
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d421      	bmi.n	8007ed8 <__lo0bits+0x52>
 8007e94:	0798      	lsls	r0, r3, #30
 8007e96:	bf47      	ittee	mi
 8007e98:	085b      	lsrmi	r3, r3, #1
 8007e9a:	2001      	movmi	r0, #1
 8007e9c:	089b      	lsrpl	r3, r3, #2
 8007e9e:	2002      	movpl	r0, #2
 8007ea0:	bf4c      	ite	mi
 8007ea2:	6013      	strmi	r3, [r2, #0]
 8007ea4:	6013      	strpl	r3, [r2, #0]
 8007ea6:	4770      	bx	lr
 8007ea8:	b299      	uxth	r1, r3
 8007eaa:	b909      	cbnz	r1, 8007eb0 <__lo0bits+0x2a>
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	2010      	movs	r0, #16
 8007eb0:	b2d9      	uxtb	r1, r3
 8007eb2:	b909      	cbnz	r1, 8007eb8 <__lo0bits+0x32>
 8007eb4:	3008      	adds	r0, #8
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	bf04      	itt	eq
 8007ebc:	091b      	lsreq	r3, r3, #4
 8007ebe:	3004      	addeq	r0, #4
 8007ec0:	0799      	lsls	r1, r3, #30
 8007ec2:	bf04      	itt	eq
 8007ec4:	089b      	lsreq	r3, r3, #2
 8007ec6:	3002      	addeq	r0, #2
 8007ec8:	07d9      	lsls	r1, r3, #31
 8007eca:	d403      	bmi.n	8007ed4 <__lo0bits+0x4e>
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	f100 0001 	add.w	r0, r0, #1
 8007ed2:	d003      	beq.n	8007edc <__lo0bits+0x56>
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	4770      	bx	lr
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4770      	bx	lr
 8007edc:	2020      	movs	r0, #32
 8007ede:	4770      	bx	lr

08007ee0 <__i2b>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	f7ff febb 	bl	8007c60 <_Balloc>
 8007eea:	4602      	mov	r2, r0
 8007eec:	b928      	cbnz	r0, 8007efa <__i2b+0x1a>
 8007eee:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <__i2b+0x24>)
 8007ef0:	f240 1145 	movw	r1, #325	@ 0x145
 8007ef4:	4804      	ldr	r0, [pc, #16]	@ (8007f08 <__i2b+0x28>)
 8007ef6:	f001 fc27 	bl	8009748 <__assert_func>
 8007efa:	2301      	movs	r3, #1
 8007efc:	6144      	str	r4, [r0, #20]
 8007efe:	6103      	str	r3, [r0, #16]
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	bf00      	nop
 8007f04:	0800aa45 	.word	0x0800aa45
 8007f08:	0800aa56 	.word	0x0800aa56

08007f0c <__multiply>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	4617      	mov	r7, r2
 8007f12:	690a      	ldr	r2, [r1, #16]
 8007f14:	4689      	mov	r9, r1
 8007f16:	b085      	sub	sp, #20
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	bfa2      	ittt	ge
 8007f1e:	463b      	movge	r3, r7
 8007f20:	460f      	movge	r7, r1
 8007f22:	4699      	movge	r9, r3
 8007f24:	693d      	ldr	r5, [r7, #16]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	eb05 060a 	add.w	r6, r5, sl
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfb8      	it	lt
 8007f36:	3101      	addlt	r1, #1
 8007f38:	f7ff fe92 	bl	8007c60 <_Balloc>
 8007f3c:	b930      	cbnz	r0, 8007f4c <__multiply+0x40>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4b42      	ldr	r3, [pc, #264]	@ (800804c <__multiply+0x140>)
 8007f42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f46:	4842      	ldr	r0, [pc, #264]	@ (8008050 <__multiply+0x144>)
 8007f48:	f001 fbfe 	bl	8009748 <__assert_func>
 8007f4c:	f100 0414 	add.w	r4, r0, #20
 8007f50:	2200      	movs	r2, #0
 8007f52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007f56:	4623      	mov	r3, r4
 8007f58:	4573      	cmp	r3, lr
 8007f5a:	d320      	bcc.n	8007f9e <__multiply+0x92>
 8007f5c:	f107 0814 	add.w	r8, r7, #20
 8007f60:	f109 0114 	add.w	r1, r9, #20
 8007f64:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007f68:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007f6c:	9302      	str	r3, [sp, #8]
 8007f6e:	1beb      	subs	r3, r5, r7
 8007f70:	3715      	adds	r7, #21
 8007f72:	3b15      	subs	r3, #21
 8007f74:	f023 0303 	bic.w	r3, r3, #3
 8007f78:	3304      	adds	r3, #4
 8007f7a:	42bd      	cmp	r5, r7
 8007f7c:	bf38      	it	cc
 8007f7e:	2304      	movcc	r3, #4
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	9103      	str	r1, [sp, #12]
 8007f86:	428b      	cmp	r3, r1
 8007f88:	d80c      	bhi.n	8007fa4 <__multiply+0x98>
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	dd03      	ble.n	8007f96 <__multiply+0x8a>
 8007f8e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d057      	beq.n	8008046 <__multiply+0x13a>
 8007f96:	6106      	str	r6, [r0, #16]
 8007f98:	b005      	add	sp, #20
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9e:	f843 2b04 	str.w	r2, [r3], #4
 8007fa2:	e7d9      	b.n	8007f58 <__multiply+0x4c>
 8007fa4:	f8b1 a000 	ldrh.w	sl, [r1]
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	d021      	beq.n	8007ff2 <__multiply+0xe6>
 8007fae:	46c4      	mov	ip, r8
 8007fb0:	46a1      	mov	r9, r4
 8007fb2:	2700      	movs	r7, #0
 8007fb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8007fbc:	fa1f fb82 	uxth.w	fp, r2
 8007fc0:	4565      	cmp	r5, ip
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007fc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007fcc:	443b      	add	r3, r7
 8007fce:	f8d9 7000 	ldr.w	r7, [r9]
 8007fd2:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8007fd6:	fb0a 7202 	mla	r2, sl, r2, r7
 8007fda:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe8:	f849 3b04 	str.w	r3, [r9], #4
 8007fec:	d8e2      	bhi.n	8007fb4 <__multiply+0xa8>
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	50e7      	str	r7, [r4, r3]
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	3104      	adds	r1, #4
 8007ff6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	d020      	beq.n	8008042 <__multiply+0x136>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	4647      	mov	r7, r8
 8008004:	46a4      	mov	ip, r4
 8008006:	f04f 0a00 	mov.w	sl, #0
 800800a:	f8b7 b000 	ldrh.w	fp, [r7]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008014:	fb09 220b 	mla	r2, r9, fp, r2
 8008018:	4452      	add	r2, sl
 800801a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801e:	f84c 3b04 	str.w	r3, [ip], #4
 8008022:	f857 3b04 	ldr.w	r3, [r7], #4
 8008026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800802a:	f8bc 3000 	ldrh.w	r3, [ip]
 800802e:	42bd      	cmp	r5, r7
 8008030:	fb09 330a 	mla	r3, r9, sl, r3
 8008034:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800803c:	d8e5      	bhi.n	800800a <__multiply+0xfe>
 800803e:	9a01      	ldr	r2, [sp, #4]
 8008040:	50a3      	str	r3, [r4, r2]
 8008042:	3404      	adds	r4, #4
 8008044:	e79d      	b.n	8007f82 <__multiply+0x76>
 8008046:	3e01      	subs	r6, #1
 8008048:	e79f      	b.n	8007f8a <__multiply+0x7e>
 800804a:	bf00      	nop
 800804c:	0800aa45 	.word	0x0800aa45
 8008050:	0800aa56 	.word	0x0800aa56

08008054 <__pow5mult>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4615      	mov	r5, r2
 800805a:	f012 0203 	ands.w	r2, r2, #3
 800805e:	4607      	mov	r7, r0
 8008060:	460e      	mov	r6, r1
 8008062:	d007      	beq.n	8008074 <__pow5mult+0x20>
 8008064:	3a01      	subs	r2, #1
 8008066:	4c25      	ldr	r4, [pc, #148]	@ (80080fc <__pow5mult+0xa8>)
 8008068:	2300      	movs	r3, #0
 800806a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800806e:	f7ff fe59 	bl	8007d24 <__multadd>
 8008072:	4606      	mov	r6, r0
 8008074:	10ad      	asrs	r5, r5, #2
 8008076:	d03d      	beq.n	80080f4 <__pow5mult+0xa0>
 8008078:	69fc      	ldr	r4, [r7, #28]
 800807a:	b97c      	cbnz	r4, 800809c <__pow5mult+0x48>
 800807c:	2010      	movs	r0, #16
 800807e:	f7fd fe49 	bl	8005d14 <malloc>
 8008082:	4602      	mov	r2, r0
 8008084:	61f8      	str	r0, [r7, #28]
 8008086:	b928      	cbnz	r0, 8008094 <__pow5mult+0x40>
 8008088:	4b1d      	ldr	r3, [pc, #116]	@ (8008100 <__pow5mult+0xac>)
 800808a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800808e:	481d      	ldr	r0, [pc, #116]	@ (8008104 <__pow5mult+0xb0>)
 8008090:	f001 fb5a 	bl	8009748 <__assert_func>
 8008094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008098:	6004      	str	r4, [r0, #0]
 800809a:	60c4      	str	r4, [r0, #12]
 800809c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080a4:	b94c      	cbnz	r4, 80080ba <__pow5mult+0x66>
 80080a6:	f240 2171 	movw	r1, #625	@ 0x271
 80080aa:	4638      	mov	r0, r7
 80080ac:	f7ff ff18 	bl	8007ee0 <__i2b>
 80080b0:	2300      	movs	r3, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	07eb      	lsls	r3, r5, #31
 80080c0:	d50a      	bpl.n	80080d8 <__pow5mult+0x84>
 80080c2:	4631      	mov	r1, r6
 80080c4:	4622      	mov	r2, r4
 80080c6:	4638      	mov	r0, r7
 80080c8:	f7ff ff20 	bl	8007f0c <__multiply>
 80080cc:	4680      	mov	r8, r0
 80080ce:	4631      	mov	r1, r6
 80080d0:	4638      	mov	r0, r7
 80080d2:	4646      	mov	r6, r8
 80080d4:	f7ff fe04 	bl	8007ce0 <_Bfree>
 80080d8:	106d      	asrs	r5, r5, #1
 80080da:	d00b      	beq.n	80080f4 <__pow5mult+0xa0>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	b938      	cbnz	r0, 80080f0 <__pow5mult+0x9c>
 80080e0:	4622      	mov	r2, r4
 80080e2:	4621      	mov	r1, r4
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff ff11 	bl	8007f0c <__multiply>
 80080ea:	6020      	str	r0, [r4, #0]
 80080ec:	f8c0 9000 	str.w	r9, [r0]
 80080f0:	4604      	mov	r4, r0
 80080f2:	e7e4      	b.n	80080be <__pow5mult+0x6a>
 80080f4:	4630      	mov	r0, r6
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	bf00      	nop
 80080fc:	0800ab68 	.word	0x0800ab68
 8008100:	0800a9d6 	.word	0x0800a9d6
 8008104:	0800aa56 	.word	0x0800aa56

08008108 <__lshift>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	4607      	mov	r7, r0
 8008110:	4691      	mov	r9, r2
 8008112:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6849      	ldr	r1, [r1, #4]
 800811a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	f108 0601 	add.w	r6, r8, #1
 8008124:	42b3      	cmp	r3, r6
 8008126:	db0b      	blt.n	8008140 <__lshift+0x38>
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff fd99 	bl	8007c60 <_Balloc>
 800812e:	4605      	mov	r5, r0
 8008130:	b948      	cbnz	r0, 8008146 <__lshift+0x3e>
 8008132:	4602      	mov	r2, r0
 8008134:	4b28      	ldr	r3, [pc, #160]	@ (80081d8 <__lshift+0xd0>)
 8008136:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800813a:	4828      	ldr	r0, [pc, #160]	@ (80081dc <__lshift+0xd4>)
 800813c:	f001 fb04 	bl	8009748 <__assert_func>
 8008140:	3101      	adds	r1, #1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	e7ee      	b.n	8008124 <__lshift+0x1c>
 8008146:	2300      	movs	r3, #0
 8008148:	f100 0114 	add.w	r1, r0, #20
 800814c:	f100 0210 	add.w	r2, r0, #16
 8008150:	4618      	mov	r0, r3
 8008152:	4553      	cmp	r3, sl
 8008154:	db33      	blt.n	80081be <__lshift+0xb6>
 8008156:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800815a:	f104 0314 	add.w	r3, r4, #20
 800815e:	6920      	ldr	r0, [r4, #16]
 8008160:	f019 091f 	ands.w	r9, r9, #31
 8008164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800816c:	d02b      	beq.n	80081c6 <__lshift+0xbe>
 800816e:	f1c9 0e20 	rsb	lr, r9, #32
 8008172:	468a      	mov	sl, r1
 8008174:	2200      	movs	r2, #0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	fa00 f009 	lsl.w	r0, r0, r9
 800817c:	4310      	orrs	r0, r2
 800817e:	f84a 0b04 	str.w	r0, [sl], #4
 8008182:	f853 2b04 	ldr.w	r2, [r3], #4
 8008186:	459c      	cmp	ip, r3
 8008188:	fa22 f20e 	lsr.w	r2, r2, lr
 800818c:	d8f3      	bhi.n	8008176 <__lshift+0x6e>
 800818e:	ebac 0304 	sub.w	r3, ip, r4
 8008192:	f104 0015 	add.w	r0, r4, #21
 8008196:	3b15      	subs	r3, #21
 8008198:	f023 0303 	bic.w	r3, r3, #3
 800819c:	3304      	adds	r3, #4
 800819e:	4560      	cmp	r0, ip
 80081a0:	bf88      	it	hi
 80081a2:	2304      	movhi	r3, #4
 80081a4:	50ca      	str	r2, [r1, r3]
 80081a6:	b10a      	cbz	r2, 80081ac <__lshift+0xa4>
 80081a8:	f108 0602 	add.w	r6, r8, #2
 80081ac:	3e01      	subs	r6, #1
 80081ae:	4638      	mov	r0, r7
 80081b0:	4621      	mov	r1, r4
 80081b2:	612e      	str	r6, [r5, #16]
 80081b4:	f7ff fd94 	bl	8007ce0 <_Bfree>
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	3301      	adds	r3, #1
 80081c0:	f842 0f04 	str.w	r0, [r2, #4]!
 80081c4:	e7c5      	b.n	8008152 <__lshift+0x4a>
 80081c6:	3904      	subs	r1, #4
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	459c      	cmp	ip, r3
 80081ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80081d2:	d8f9      	bhi.n	80081c8 <__lshift+0xc0>
 80081d4:	e7ea      	b.n	80081ac <__lshift+0xa4>
 80081d6:	bf00      	nop
 80081d8:	0800aa45 	.word	0x0800aa45
 80081dc:	0800aa56 	.word	0x0800aa56

080081e0 <__mcmp>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	690a      	ldr	r2, [r1, #16]
 80081e4:	6900      	ldr	r0, [r0, #16]
 80081e6:	1a80      	subs	r0, r0, r2
 80081e8:	b530      	push	{r4, r5, lr}
 80081ea:	d10e      	bne.n	800820a <__mcmp+0x2a>
 80081ec:	3314      	adds	r3, #20
 80081ee:	3114      	adds	r1, #20
 80081f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008200:	4295      	cmp	r5, r2
 8008202:	d003      	beq.n	800820c <__mcmp+0x2c>
 8008204:	d205      	bcs.n	8008212 <__mcmp+0x32>
 8008206:	f04f 30ff 	mov.w	r0, #4294967295
 800820a:	bd30      	pop	{r4, r5, pc}
 800820c:	42a3      	cmp	r3, r4
 800820e:	d3f3      	bcc.n	80081f8 <__mcmp+0x18>
 8008210:	e7fb      	b.n	800820a <__mcmp+0x2a>
 8008212:	2001      	movs	r0, #1
 8008214:	e7f9      	b.n	800820a <__mcmp+0x2a>
	...

08008218 <__mdiff>:
 8008218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	4689      	mov	r9, r1
 800821e:	4606      	mov	r6, r0
 8008220:	4611      	mov	r1, r2
 8008222:	4614      	mov	r4, r2
 8008224:	4648      	mov	r0, r9
 8008226:	f7ff ffdb 	bl	80081e0 <__mcmp>
 800822a:	1e05      	subs	r5, r0, #0
 800822c:	d112      	bne.n	8008254 <__mdiff+0x3c>
 800822e:	4629      	mov	r1, r5
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fd15 	bl	8007c60 <_Balloc>
 8008236:	4602      	mov	r2, r0
 8008238:	b928      	cbnz	r0, 8008246 <__mdiff+0x2e>
 800823a:	4b41      	ldr	r3, [pc, #260]	@ (8008340 <__mdiff+0x128>)
 800823c:	f240 2137 	movw	r1, #567	@ 0x237
 8008240:	4840      	ldr	r0, [pc, #256]	@ (8008344 <__mdiff+0x12c>)
 8008242:	f001 fa81 	bl	8009748 <__assert_func>
 8008246:	2301      	movs	r3, #1
 8008248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800824c:	4610      	mov	r0, r2
 800824e:	b003      	add	sp, #12
 8008250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008254:	bfbc      	itt	lt
 8008256:	464b      	movlt	r3, r9
 8008258:	46a1      	movlt	r9, r4
 800825a:	4630      	mov	r0, r6
 800825c:	bfb8      	it	lt
 800825e:	2501      	movlt	r5, #1
 8008260:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008264:	bfb4      	ite	lt
 8008266:	461c      	movlt	r4, r3
 8008268:	2500      	movge	r5, #0
 800826a:	f7ff fcf9 	bl	8007c60 <_Balloc>
 800826e:	4602      	mov	r2, r0
 8008270:	b918      	cbnz	r0, 800827a <__mdiff+0x62>
 8008272:	4b33      	ldr	r3, [pc, #204]	@ (8008340 <__mdiff+0x128>)
 8008274:	f240 2145 	movw	r1, #581	@ 0x245
 8008278:	e7e2      	b.n	8008240 <__mdiff+0x28>
 800827a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800827e:	f104 0e14 	add.w	lr, r4, #20
 8008282:	6926      	ldr	r6, [r4, #16]
 8008284:	f100 0b14 	add.w	fp, r0, #20
 8008288:	60c5      	str	r5, [r0, #12]
 800828a:	f109 0514 	add.w	r5, r9, #20
 800828e:	f109 0310 	add.w	r3, r9, #16
 8008292:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008296:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800829a:	46d9      	mov	r9, fp
 800829c:	f04f 0c00 	mov.w	ip, #0
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082a8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082ac:	4576      	cmp	r6, lr
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	fa1f f38a 	uxth.w	r3, sl
 80082b4:	4619      	mov	r1, r3
 80082b6:	b283      	uxth	r3, r0
 80082b8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80082bc:	eba1 0303 	sub.w	r3, r1, r3
 80082c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082c4:	4463      	add	r3, ip
 80082c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082d4:	f849 3b04 	str.w	r3, [r9], #4
 80082d8:	d8e3      	bhi.n	80082a2 <__mdiff+0x8a>
 80082da:	1b33      	subs	r3, r6, r4
 80082dc:	3415      	adds	r4, #21
 80082de:	3b15      	subs	r3, #21
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	3304      	adds	r3, #4
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	bf38      	it	cc
 80082ea:	2304      	movcc	r3, #4
 80082ec:	441d      	add	r5, r3
 80082ee:	445b      	add	r3, fp
 80082f0:	462c      	mov	r4, r5
 80082f2:	461e      	mov	r6, r3
 80082f4:	4544      	cmp	r4, r8
 80082f6:	d30e      	bcc.n	8008316 <__mdiff+0xfe>
 80082f8:	f108 0103 	add.w	r1, r8, #3
 80082fc:	1b49      	subs	r1, r1, r5
 80082fe:	3d03      	subs	r5, #3
 8008300:	f021 0103 	bic.w	r1, r1, #3
 8008304:	45a8      	cmp	r8, r5
 8008306:	bf38      	it	cc
 8008308:	2100      	movcc	r1, #0
 800830a:	440b      	add	r3, r1
 800830c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008310:	b199      	cbz	r1, 800833a <__mdiff+0x122>
 8008312:	6117      	str	r7, [r2, #16]
 8008314:	e79a      	b.n	800824c <__mdiff+0x34>
 8008316:	f854 1b04 	ldr.w	r1, [r4], #4
 800831a:	46e6      	mov	lr, ip
 800831c:	fa1f fc81 	uxth.w	ip, r1
 8008320:	0c08      	lsrs	r0, r1, #16
 8008322:	4471      	add	r1, lr
 8008324:	44f4      	add	ip, lr
 8008326:	b289      	uxth	r1, r1
 8008328:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800832c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008330:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008334:	f846 1b04 	str.w	r1, [r6], #4
 8008338:	e7dc      	b.n	80082f4 <__mdiff+0xdc>
 800833a:	3f01      	subs	r7, #1
 800833c:	e7e6      	b.n	800830c <__mdiff+0xf4>
 800833e:	bf00      	nop
 8008340:	0800aa45 	.word	0x0800aa45
 8008344:	0800aa56 	.word	0x0800aa56

08008348 <__ulp>:
 8008348:	b082      	sub	sp, #8
 800834a:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <__ulp+0x48>)
 800834c:	ed8d 0b00 	vstr	d0, [sp]
 8008350:	9a01      	ldr	r2, [sp, #4]
 8008352:	4013      	ands	r3, r2
 8008354:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc08      	bgt.n	800836e <__ulp+0x26>
 800835c:	425b      	negs	r3, r3
 800835e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008362:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008366:	da04      	bge.n	8008372 <__ulp+0x2a>
 8008368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800836c:	4113      	asrs	r3, r2
 800836e:	2200      	movs	r2, #0
 8008370:	e008      	b.n	8008384 <__ulp+0x3c>
 8008372:	f1a2 0314 	sub.w	r3, r2, #20
 8008376:	2b1e      	cmp	r3, #30
 8008378:	bfd6      	itet	le
 800837a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800837e:	2201      	movgt	r2, #1
 8008380:	40da      	lsrle	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	ec41 0b10 	vmov	d0, r0, r1
 800838c:	b002      	add	sp, #8
 800838e:	4770      	bx	lr
 8008390:	7ff00000 	.word	0x7ff00000

08008394 <__b2d>:
 8008394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008398:	6906      	ldr	r6, [r0, #16]
 800839a:	f100 0814 	add.w	r8, r0, #20
 800839e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80083a2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083a6:	1f37      	subs	r7, r6, #4
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7ff fd4d 	bl	8007e48 <__hi0bits>
 80083ae:	f1c0 0320 	rsb	r3, r0, #32
 80083b2:	280a      	cmp	r0, #10
 80083b4:	600b      	str	r3, [r1, #0]
 80083b6:	491d      	ldr	r1, [pc, #116]	@ (800842c <__b2d+0x98>)
 80083b8:	dc16      	bgt.n	80083e8 <__b2d+0x54>
 80083ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80083be:	45b8      	cmp	r8, r7
 80083c0:	f100 0015 	add.w	r0, r0, #21
 80083c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80083c8:	fa02 f000 	lsl.w	r0, r2, r0
 80083cc:	ea43 0501 	orr.w	r5, r3, r1
 80083d0:	bf34      	ite	cc
 80083d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083d6:	2300      	movcs	r3, #0
 80083d8:	fa23 f30c 	lsr.w	r3, r3, ip
 80083dc:	4303      	orrs	r3, r0
 80083de:	461c      	mov	r4, r3
 80083e0:	ec45 4b10 	vmov	d0, r4, r5
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	45b8      	cmp	r8, r7
 80083ea:	bf3a      	itte	cc
 80083ec:	f1a6 0708 	subcc.w	r7, r6, #8
 80083f0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083f4:	2300      	movcs	r3, #0
 80083f6:	380b      	subs	r0, #11
 80083f8:	d014      	beq.n	8008424 <__b2d+0x90>
 80083fa:	f1c0 0120 	rsb	r1, r0, #32
 80083fe:	4082      	lsls	r2, r0
 8008400:	4547      	cmp	r7, r8
 8008402:	fa23 f401 	lsr.w	r4, r3, r1
 8008406:	fa03 f300 	lsl.w	r3, r3, r0
 800840a:	ea42 0204 	orr.w	r2, r2, r4
 800840e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008412:	bf8c      	ite	hi
 8008414:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008418:	2200      	movls	r2, #0
 800841a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800841e:	40ca      	lsrs	r2, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	e7dc      	b.n	80083de <__b2d+0x4a>
 8008424:	ea42 0501 	orr.w	r5, r2, r1
 8008428:	e7d9      	b.n	80083de <__b2d+0x4a>
 800842a:	bf00      	nop
 800842c:	3ff00000 	.word	0x3ff00000

08008430 <__d2b>:
 8008430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008434:	460f      	mov	r7, r1
 8008436:	2101      	movs	r1, #1
 8008438:	4616      	mov	r6, r2
 800843a:	ec59 8b10 	vmov	r8, r9, d0
 800843e:	f7ff fc0f 	bl	8007c60 <_Balloc>
 8008442:	4604      	mov	r4, r0
 8008444:	b930      	cbnz	r0, 8008454 <__d2b+0x24>
 8008446:	4602      	mov	r2, r0
 8008448:	4b23      	ldr	r3, [pc, #140]	@ (80084d8 <__d2b+0xa8>)
 800844a:	f240 310f 	movw	r1, #783	@ 0x30f
 800844e:	4823      	ldr	r0, [pc, #140]	@ (80084dc <__d2b+0xac>)
 8008450:	f001 f97a 	bl	8009748 <__assert_func>
 8008454:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800845c:	b10d      	cbz	r5, 8008462 <__d2b+0x32>
 800845e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	f1b8 0300 	subs.w	r3, r8, #0
 8008468:	d023      	beq.n	80084b2 <__d2b+0x82>
 800846a:	4668      	mov	r0, sp
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	f7ff fd0a 	bl	8007e86 <__lo0bits>
 8008472:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008476:	b1d0      	cbz	r0, 80084ae <__d2b+0x7e>
 8008478:	f1c0 0320 	rsb	r3, r0, #32
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	40c2      	lsrs	r2, r0
 8008482:	430b      	orrs	r3, r1
 8008484:	9201      	str	r2, [sp, #4]
 8008486:	6163      	str	r3, [r4, #20]
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	61a3      	str	r3, [r4, #24]
 800848e:	bf0c      	ite	eq
 8008490:	2201      	moveq	r2, #1
 8008492:	2202      	movne	r2, #2
 8008494:	6122      	str	r2, [r4, #16]
 8008496:	b1a5      	cbz	r5, 80084c2 <__d2b+0x92>
 8008498:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800849c:	4405      	add	r5, r0
 800849e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084a2:	603d      	str	r5, [r7, #0]
 80084a4:	6030      	str	r0, [r6, #0]
 80084a6:	4620      	mov	r0, r4
 80084a8:	b003      	add	sp, #12
 80084aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ae:	6161      	str	r1, [r4, #20]
 80084b0:	e7ea      	b.n	8008488 <__d2b+0x58>
 80084b2:	a801      	add	r0, sp, #4
 80084b4:	f7ff fce7 	bl	8007e86 <__lo0bits>
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	3020      	adds	r0, #32
 80084bc:	2201      	movs	r2, #1
 80084be:	6163      	str	r3, [r4, #20]
 80084c0:	e7e8      	b.n	8008494 <__d2b+0x64>
 80084c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ca:	6038      	str	r0, [r7, #0]
 80084cc:	6918      	ldr	r0, [r3, #16]
 80084ce:	f7ff fcbb 	bl	8007e48 <__hi0bits>
 80084d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084d6:	e7e5      	b.n	80084a4 <__d2b+0x74>
 80084d8:	0800aa45 	.word	0x0800aa45
 80084dc:	0800aa56 	.word	0x0800aa56

080084e0 <__ratio>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b085      	sub	sp, #20
 80084e6:	e9cd 1000 	strd	r1, r0, [sp]
 80084ea:	a902      	add	r1, sp, #8
 80084ec:	f7ff ff52 	bl	8008394 <__b2d>
 80084f0:	a903      	add	r1, sp, #12
 80084f2:	9800      	ldr	r0, [sp, #0]
 80084f4:	ec55 4b10 	vmov	r4, r5, d0
 80084f8:	f7ff ff4c 	bl	8008394 <__b2d>
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	462f      	mov	r7, r5
 8008500:	4620      	mov	r0, r4
 8008502:	6919      	ldr	r1, [r3, #16]
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	1ac9      	subs	r1, r1, r3
 800850a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800850e:	ec5b ab10 	vmov	sl, fp, d0
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	46d9      	mov	r9, fp
 8008516:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfcd      	iteet	gt
 800851e:	462a      	movgt	r2, r5
 8008520:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008524:	465a      	movle	r2, fp
 8008526:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800852a:	bfd8      	it	le
 800852c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008530:	4652      	mov	r2, sl
 8008532:	4639      	mov	r1, r7
 8008534:	464b      	mov	r3, r9
 8008536:	f7f8 f98d 	bl	8000854 <__aeabi_ddiv>
 800853a:	ec41 0b10 	vmov	d0, r0, r1
 800853e:	b005      	add	sp, #20
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008544 <__copybits>:
 8008544:	3901      	subs	r1, #1
 8008546:	f102 0314 	add.w	r3, r2, #20
 800854a:	1149      	asrs	r1, r1, #5
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	3101      	adds	r1, #1
 8008550:	6914      	ldr	r4, [r2, #16]
 8008552:	1f05      	subs	r5, r0, #4
 8008554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800855c:	42a3      	cmp	r3, r4
 800855e:	d30c      	bcc.n	800857a <__copybits+0x36>
 8008560:	1aa3      	subs	r3, r4, r2
 8008562:	3211      	adds	r2, #17
 8008564:	3b11      	subs	r3, #17
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	42a2      	cmp	r2, r4
 800856c:	bf88      	it	hi
 800856e:	2300      	movhi	r3, #0
 8008570:	4418      	add	r0, r3
 8008572:	2300      	movs	r3, #0
 8008574:	4288      	cmp	r0, r1
 8008576:	d305      	bcc.n	8008584 <__copybits+0x40>
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	f853 6b04 	ldr.w	r6, [r3], #4
 800857e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008582:	e7eb      	b.n	800855c <__copybits+0x18>
 8008584:	f840 3b04 	str.w	r3, [r0], #4
 8008588:	e7f4      	b.n	8008574 <__copybits+0x30>

0800858a <__any_on>:
 800858a:	f100 0214 	add.w	r2, r0, #20
 800858e:	114b      	asrs	r3, r1, #5
 8008590:	6900      	ldr	r0, [r0, #16]
 8008592:	4298      	cmp	r0, r3
 8008594:	b510      	push	{r4, lr}
 8008596:	db11      	blt.n	80085bc <__any_on+0x32>
 8008598:	dd0a      	ble.n	80085b0 <__any_on+0x26>
 800859a:	f011 011f 	ands.w	r1, r1, #31
 800859e:	d007      	beq.n	80085b0 <__any_on+0x26>
 80085a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085a4:	fa24 f001 	lsr.w	r0, r4, r1
 80085a8:	fa00 f101 	lsl.w	r1, r0, r1
 80085ac:	428c      	cmp	r4, r1
 80085ae:	d10b      	bne.n	80085c8 <__any_on+0x3e>
 80085b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d803      	bhi.n	80085c0 <__any_on+0x36>
 80085b8:	2000      	movs	r0, #0
 80085ba:	bd10      	pop	{r4, pc}
 80085bc:	4603      	mov	r3, r0
 80085be:	e7f7      	b.n	80085b0 <__any_on+0x26>
 80085c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085c4:	2900      	cmp	r1, #0
 80085c6:	d0f5      	beq.n	80085b4 <__any_on+0x2a>
 80085c8:	2001      	movs	r0, #1
 80085ca:	e7f6      	b.n	80085ba <__any_on+0x30>

080085cc <sulp>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	4616      	mov	r6, r2
 80085d4:	ec45 4b10 	vmov	d0, r4, r5
 80085d8:	f7ff feb6 	bl	8008348 <__ulp>
 80085dc:	ec51 0b10 	vmov	r0, r1, d0
 80085e0:	b17e      	cbz	r6, 8008602 <sulp+0x36>
 80085e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dd09      	ble.n	8008602 <sulp+0x36>
 80085ee:	051b      	lsls	r3, r3, #20
 80085f0:	2400      	movs	r4, #0
 80085f2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80085f6:	4622      	mov	r2, r4
 80085f8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80085fc:	462b      	mov	r3, r5
 80085fe:	f7f7 ffff 	bl	8000600 <__aeabi_dmul>
 8008602:	ec41 0b10 	vmov	d0, r0, r1
 8008606:	bd70      	pop	{r4, r5, r6, pc}

08008608 <_strtod_l>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	b09f      	sub	sp, #124	@ 0x7c
 800860e:	460c      	mov	r4, r1
 8008610:	f04f 0a00 	mov.w	sl, #0
 8008614:	f04f 0b00 	mov.w	fp, #0
 8008618:	9217      	str	r2, [sp, #92]	@ 0x5c
 800861a:	2200      	movs	r2, #0
 800861c:	9005      	str	r0, [sp, #20]
 800861e:	921a      	str	r2, [sp, #104]	@ 0x68
 8008620:	460a      	mov	r2, r1
 8008622:	9219      	str	r2, [sp, #100]	@ 0x64
 8008624:	7811      	ldrb	r1, [r2, #0]
 8008626:	292b      	cmp	r1, #43	@ 0x2b
 8008628:	d04a      	beq.n	80086c0 <_strtod_l+0xb8>
 800862a:	d838      	bhi.n	800869e <_strtod_l+0x96>
 800862c:	290d      	cmp	r1, #13
 800862e:	d832      	bhi.n	8008696 <_strtod_l+0x8e>
 8008630:	2908      	cmp	r1, #8
 8008632:	d832      	bhi.n	800869a <_strtod_l+0x92>
 8008634:	2900      	cmp	r1, #0
 8008636:	d03b      	beq.n	80086b0 <_strtod_l+0xa8>
 8008638:	2200      	movs	r2, #0
 800863a:	920e      	str	r2, [sp, #56]	@ 0x38
 800863c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800863e:	782a      	ldrb	r2, [r5, #0]
 8008640:	2a30      	cmp	r2, #48	@ 0x30
 8008642:	f040 80b2 	bne.w	80087aa <_strtod_l+0x1a2>
 8008646:	786a      	ldrb	r2, [r5, #1]
 8008648:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800864c:	2a58      	cmp	r2, #88	@ 0x58
 800864e:	d16e      	bne.n	800872e <_strtod_l+0x126>
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	a919      	add	r1, sp, #100	@ 0x64
 8008654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008656:	4a90      	ldr	r2, [pc, #576]	@ (8008898 <_strtod_l+0x290>)
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	ab1a      	add	r3, sp, #104	@ 0x68
 800865c:	9805      	ldr	r0, [sp, #20]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008662:	f001 f909 	bl	8009878 <__gethex>
 8008666:	f010 060f 	ands.w	r6, r0, #15
 800866a:	4604      	mov	r4, r0
 800866c:	d005      	beq.n	800867a <_strtod_l+0x72>
 800866e:	2e06      	cmp	r6, #6
 8008670:	d128      	bne.n	80086c4 <_strtod_l+0xbc>
 8008672:	3501      	adds	r5, #1
 8008674:	2300      	movs	r3, #0
 8008676:	9519      	str	r5, [sp, #100]	@ 0x64
 8008678:	930e      	str	r3, [sp, #56]	@ 0x38
 800867a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800867c:	2b00      	cmp	r3, #0
 800867e:	f040 858e 	bne.w	800919e <_strtod_l+0xb96>
 8008682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008684:	b1cb      	cbz	r3, 80086ba <_strtod_l+0xb2>
 8008686:	4652      	mov	r2, sl
 8008688:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800868c:	ec43 2b10 	vmov	d0, r2, r3
 8008690:	b01f      	add	sp, #124	@ 0x7c
 8008692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008696:	2920      	cmp	r1, #32
 8008698:	d1ce      	bne.n	8008638 <_strtod_l+0x30>
 800869a:	3201      	adds	r2, #1
 800869c:	e7c1      	b.n	8008622 <_strtod_l+0x1a>
 800869e:	292d      	cmp	r1, #45	@ 0x2d
 80086a0:	d1ca      	bne.n	8008638 <_strtod_l+0x30>
 80086a2:	2101      	movs	r1, #1
 80086a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80086a6:	1c51      	adds	r1, r2, #1
 80086a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80086aa:	7852      	ldrb	r2, [r2, #1]
 80086ac:	2a00      	cmp	r2, #0
 80086ae:	d1c5      	bne.n	800863c <_strtod_l+0x34>
 80086b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 8570 	bne.w	800919a <_strtod_l+0xb92>
 80086ba:	4652      	mov	r2, sl
 80086bc:	465b      	mov	r3, fp
 80086be:	e7e5      	b.n	800868c <_strtod_l+0x84>
 80086c0:	2100      	movs	r1, #0
 80086c2:	e7ef      	b.n	80086a4 <_strtod_l+0x9c>
 80086c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80086c6:	b13a      	cbz	r2, 80086d8 <_strtod_l+0xd0>
 80086c8:	2135      	movs	r1, #53	@ 0x35
 80086ca:	a81c      	add	r0, sp, #112	@ 0x70
 80086cc:	f7ff ff3a 	bl	8008544 <__copybits>
 80086d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086d2:	9805      	ldr	r0, [sp, #20]
 80086d4:	f7ff fb04 	bl	8007ce0 <_Bfree>
 80086d8:	3e01      	subs	r6, #1
 80086da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80086dc:	2e04      	cmp	r6, #4
 80086de:	d806      	bhi.n	80086ee <_strtod_l+0xe6>
 80086e0:	e8df f006 	tbb	[pc, r6]
 80086e4:	201d0314 	.word	0x201d0314
 80086e8:	14          	.byte	0x14
 80086e9:	00          	.byte	0x00
 80086ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80086ee:	05e1      	lsls	r1, r4, #23
 80086f0:	bf48      	it	mi
 80086f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80086f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086fa:	0d1b      	lsrs	r3, r3, #20
 80086fc:	051b      	lsls	r3, r3, #20
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1bb      	bne.n	800867a <_strtod_l+0x72>
 8008702:	f7fe fbb5 	bl	8006e70 <__errno>
 8008706:	2322      	movs	r3, #34	@ 0x22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	e7b6      	b.n	800867a <_strtod_l+0x72>
 800870c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800871c:	e7e7      	b.n	80086ee <_strtod_l+0xe6>
 800871e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80088a0 <_strtod_l+0x298>
 8008722:	e7e4      	b.n	80086ee <_strtod_l+0xe6>
 8008724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008728:	f04f 3aff 	mov.w	sl, #4294967295
 800872c:	e7df      	b.n	80086ee <_strtod_l+0xe6>
 800872e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	9219      	str	r2, [sp, #100]	@ 0x64
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b30      	cmp	r3, #48	@ 0x30
 8008738:	d0f9      	beq.n	800872e <_strtod_l+0x126>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d09d      	beq.n	800867a <_strtod_l+0x72>
 800873e:	2301      	movs	r3, #1
 8008740:	2700      	movs	r7, #0
 8008742:	9308      	str	r3, [sp, #32]
 8008744:	220a      	movs	r2, #10
 8008746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008748:	46b9      	mov	r9, r7
 800874a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800874c:	930c      	str	r3, [sp, #48]	@ 0x30
 800874e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008750:	7805      	ldrb	r5, [r0, #0]
 8008752:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008756:	b2d9      	uxtb	r1, r3
 8008758:	2909      	cmp	r1, #9
 800875a:	d928      	bls.n	80087ae <_strtod_l+0x1a6>
 800875c:	2201      	movs	r2, #1
 800875e:	494f      	ldr	r1, [pc, #316]	@ (800889c <_strtod_l+0x294>)
 8008760:	f000 ffd6 	bl	8009710 <strncmp>
 8008764:	2800      	cmp	r0, #0
 8008766:	d032      	beq.n	80087ce <_strtod_l+0x1c6>
 8008768:	2000      	movs	r0, #0
 800876a:	462a      	mov	r2, r5
 800876c:	464d      	mov	r5, r9
 800876e:	4603      	mov	r3, r0
 8008770:	900a      	str	r0, [sp, #40]	@ 0x28
 8008772:	2a65      	cmp	r2, #101	@ 0x65
 8008774:	d001      	beq.n	800877a <_strtod_l+0x172>
 8008776:	2a45      	cmp	r2, #69	@ 0x45
 8008778:	d114      	bne.n	80087a4 <_strtod_l+0x19c>
 800877a:	b91d      	cbnz	r5, 8008784 <_strtod_l+0x17c>
 800877c:	9a08      	ldr	r2, [sp, #32]
 800877e:	4302      	orrs	r2, r0
 8008780:	d096      	beq.n	80086b0 <_strtod_l+0xa8>
 8008782:	2500      	movs	r5, #0
 8008784:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008786:	1c62      	adds	r2, r4, #1
 8008788:	9219      	str	r2, [sp, #100]	@ 0x64
 800878a:	7862      	ldrb	r2, [r4, #1]
 800878c:	2a2b      	cmp	r2, #43	@ 0x2b
 800878e:	d079      	beq.n	8008884 <_strtod_l+0x27c>
 8008790:	2a2d      	cmp	r2, #45	@ 0x2d
 8008792:	d07d      	beq.n	8008890 <_strtod_l+0x288>
 8008794:	f04f 0c00 	mov.w	ip, #0
 8008798:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800879c:	2909      	cmp	r1, #9
 800879e:	f240 8085 	bls.w	80088ac <_strtod_l+0x2a4>
 80087a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	e0a5      	b.n	80088f6 <_strtod_l+0x2ee>
 80087aa:	2300      	movs	r3, #0
 80087ac:	e7c8      	b.n	8008740 <_strtod_l+0x138>
 80087ae:	f1b9 0f08 	cmp.w	r9, #8
 80087b2:	f100 0001 	add.w	r0, r0, #1
 80087b6:	f109 0901 	add.w	r9, r9, #1
 80087ba:	bfd4      	ite	le
 80087bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80087be:	fb02 3707 	mlagt	r7, r2, r7, r3
 80087c2:	9019      	str	r0, [sp, #100]	@ 0x64
 80087c4:	bfdc      	itt	le
 80087c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80087ca:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80087cc:	e7bf      	b.n	800874e <_strtod_l+0x146>
 80087ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80087d4:	785a      	ldrb	r2, [r3, #1]
 80087d6:	f1b9 0f00 	cmp.w	r9, #0
 80087da:	d03a      	beq.n	8008852 <_strtod_l+0x24a>
 80087dc:	464d      	mov	r5, r9
 80087de:	900a      	str	r0, [sp, #40]	@ 0x28
 80087e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d912      	bls.n	800880e <_strtod_l+0x206>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e7c2      	b.n	8008772 <_strtod_l+0x16a>
 80087ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ee:	3001      	adds	r0, #1
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80087f4:	785a      	ldrb	r2, [r3, #1]
 80087f6:	2a30      	cmp	r2, #48	@ 0x30
 80087f8:	d0f8      	beq.n	80087ec <_strtod_l+0x1e4>
 80087fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80087fe:	2b08      	cmp	r3, #8
 8008800:	f200 84d2 	bhi.w	80091a8 <_strtod_l+0xba0>
 8008804:	900a      	str	r0, [sp, #40]	@ 0x28
 8008806:	2000      	movs	r0, #0
 8008808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800880a:	4605      	mov	r5, r0
 800880c:	930c      	str	r3, [sp, #48]	@ 0x30
 800880e:	3a30      	subs	r2, #48	@ 0x30
 8008810:	f100 0301 	add.w	r3, r0, #1
 8008814:	d017      	beq.n	8008846 <_strtod_l+0x23e>
 8008816:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008818:	462e      	mov	r6, r5
 800881a:	f04f 0e0a 	mov.w	lr, #10
 800881e:	4419      	add	r1, r3
 8008820:	910a      	str	r1, [sp, #40]	@ 0x28
 8008822:	1c71      	adds	r1, r6, #1
 8008824:	eba1 0c05 	sub.w	ip, r1, r5
 8008828:	4563      	cmp	r3, ip
 800882a:	dc14      	bgt.n	8008856 <_strtod_l+0x24e>
 800882c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008830:	182b      	adds	r3, r5, r0
 8008832:	3501      	adds	r5, #1
 8008834:	2b08      	cmp	r3, #8
 8008836:	4405      	add	r5, r0
 8008838:	dc1a      	bgt.n	8008870 <_strtod_l+0x268>
 800883a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800883c:	230a      	movs	r3, #10
 800883e:	fb03 2301 	mla	r3, r3, r1, r2
 8008842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008844:	2300      	movs	r3, #0
 8008846:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008848:	4618      	mov	r0, r3
 800884a:	1c51      	adds	r1, r2, #1
 800884c:	9119      	str	r1, [sp, #100]	@ 0x64
 800884e:	7852      	ldrb	r2, [r2, #1]
 8008850:	e7c6      	b.n	80087e0 <_strtod_l+0x1d8>
 8008852:	4648      	mov	r0, r9
 8008854:	e7cf      	b.n	80087f6 <_strtod_l+0x1ee>
 8008856:	2e08      	cmp	r6, #8
 8008858:	dc05      	bgt.n	8008866 <_strtod_l+0x25e>
 800885a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800885c:	fb0e f606 	mul.w	r6, lr, r6
 8008860:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008862:	460e      	mov	r6, r1
 8008864:	e7dd      	b.n	8008822 <_strtod_l+0x21a>
 8008866:	2910      	cmp	r1, #16
 8008868:	bfd8      	it	le
 800886a:	fb0e f707 	mulle.w	r7, lr, r7
 800886e:	e7f8      	b.n	8008862 <_strtod_l+0x25a>
 8008870:	2b0f      	cmp	r3, #15
 8008872:	bfdc      	itt	le
 8008874:	230a      	movle	r3, #10
 8008876:	fb03 2707 	mlale	r7, r3, r7, r2
 800887a:	e7e3      	b.n	8008844 <_strtod_l+0x23c>
 800887c:	2300      	movs	r3, #0
 800887e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008880:	2301      	movs	r3, #1
 8008882:	e77b      	b.n	800877c <_strtod_l+0x174>
 8008884:	f04f 0c00 	mov.w	ip, #0
 8008888:	1ca2      	adds	r2, r4, #2
 800888a:	9219      	str	r2, [sp, #100]	@ 0x64
 800888c:	78a2      	ldrb	r2, [r4, #2]
 800888e:	e783      	b.n	8008798 <_strtod_l+0x190>
 8008890:	f04f 0c01 	mov.w	ip, #1
 8008894:	e7f8      	b.n	8008888 <_strtod_l+0x280>
 8008896:	bf00      	nop
 8008898:	0800ac7c 	.word	0x0800ac7c
 800889c:	0800aaaf 	.word	0x0800aaaf
 80088a0:	7ff00000 	.word	0x7ff00000
 80088a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088a6:	1c51      	adds	r1, r2, #1
 80088a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80088aa:	7852      	ldrb	r2, [r2, #1]
 80088ac:	2a30      	cmp	r2, #48	@ 0x30
 80088ae:	d0f9      	beq.n	80088a4 <_strtod_l+0x29c>
 80088b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80088b4:	2908      	cmp	r1, #8
 80088b6:	f63f af75 	bhi.w	80087a4 <_strtod_l+0x19c>
 80088ba:	3a30      	subs	r2, #48	@ 0x30
 80088bc:	f04f 080a 	mov.w	r8, #10
 80088c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80088c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088c8:	1c56      	adds	r6, r2, #1
 80088ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80088cc:	7852      	ldrb	r2, [r2, #1]
 80088ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80088d2:	f1be 0f09 	cmp.w	lr, #9
 80088d6:	d939      	bls.n	800894c <_strtod_l+0x344>
 80088d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80088da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80088de:	1a76      	subs	r6, r6, r1
 80088e0:	2e08      	cmp	r6, #8
 80088e2:	dc03      	bgt.n	80088ec <_strtod_l+0x2e4>
 80088e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088e6:	4588      	cmp	r8, r1
 80088e8:	bfa8      	it	ge
 80088ea:	4688      	movge	r8, r1
 80088ec:	f1bc 0f00 	cmp.w	ip, #0
 80088f0:	d001      	beq.n	80088f6 <_strtod_l+0x2ee>
 80088f2:	f1c8 0800 	rsb	r8, r8, #0
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	d14e      	bne.n	8008998 <_strtod_l+0x390>
 80088fa:	9908      	ldr	r1, [sp, #32]
 80088fc:	4308      	orrs	r0, r1
 80088fe:	f47f aebc 	bne.w	800867a <_strtod_l+0x72>
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f aed4 	bne.w	80086b0 <_strtod_l+0xa8>
 8008908:	2a69      	cmp	r2, #105	@ 0x69
 800890a:	d028      	beq.n	800895e <_strtod_l+0x356>
 800890c:	dc25      	bgt.n	800895a <_strtod_l+0x352>
 800890e:	2a49      	cmp	r2, #73	@ 0x49
 8008910:	d025      	beq.n	800895e <_strtod_l+0x356>
 8008912:	2a4e      	cmp	r2, #78	@ 0x4e
 8008914:	f47f aecc 	bne.w	80086b0 <_strtod_l+0xa8>
 8008918:	499a      	ldr	r1, [pc, #616]	@ (8008b84 <_strtod_l+0x57c>)
 800891a:	a819      	add	r0, sp, #100	@ 0x64
 800891c:	f001 f9cc 	bl	8009cb8 <__match>
 8008920:	2800      	cmp	r0, #0
 8008922:	f43f aec5 	beq.w	80086b0 <_strtod_l+0xa8>
 8008926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b28      	cmp	r3, #40	@ 0x28
 800892c:	d12e      	bne.n	800898c <_strtod_l+0x384>
 800892e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008930:	4995      	ldr	r1, [pc, #596]	@ (8008b88 <_strtod_l+0x580>)
 8008932:	a819      	add	r0, sp, #100	@ 0x64
 8008934:	f001 f9d4 	bl	8009ce0 <__hexnan>
 8008938:	2805      	cmp	r0, #5
 800893a:	d127      	bne.n	800898c <_strtod_l+0x384>
 800893c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800893e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008942:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008946:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800894a:	e696      	b.n	800867a <_strtod_l+0x72>
 800894c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800894e:	fb08 2101 	mla	r1, r8, r1, r2
 8008952:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008956:	9209      	str	r2, [sp, #36]	@ 0x24
 8008958:	e7b5      	b.n	80088c6 <_strtod_l+0x2be>
 800895a:	2a6e      	cmp	r2, #110	@ 0x6e
 800895c:	e7da      	b.n	8008914 <_strtod_l+0x30c>
 800895e:	498b      	ldr	r1, [pc, #556]	@ (8008b8c <_strtod_l+0x584>)
 8008960:	a819      	add	r0, sp, #100	@ 0x64
 8008962:	f001 f9a9 	bl	8009cb8 <__match>
 8008966:	2800      	cmp	r0, #0
 8008968:	f43f aea2 	beq.w	80086b0 <_strtod_l+0xa8>
 800896c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800896e:	a819      	add	r0, sp, #100	@ 0x64
 8008970:	4987      	ldr	r1, [pc, #540]	@ (8008b90 <_strtod_l+0x588>)
 8008972:	3b01      	subs	r3, #1
 8008974:	9319      	str	r3, [sp, #100]	@ 0x64
 8008976:	f001 f99f 	bl	8009cb8 <__match>
 800897a:	b910      	cbnz	r0, 8008982 <_strtod_l+0x37a>
 800897c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800897e:	3301      	adds	r3, #1
 8008980:	9319      	str	r3, [sp, #100]	@ 0x64
 8008982:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008ba0 <_strtod_l+0x598>
 8008986:	f04f 0a00 	mov.w	sl, #0
 800898a:	e676      	b.n	800867a <_strtod_l+0x72>
 800898c:	4881      	ldr	r0, [pc, #516]	@ (8008b94 <_strtod_l+0x58c>)
 800898e:	f000 fed3 	bl	8009738 <nan>
 8008992:	ec5b ab10 	vmov	sl, fp, d0
 8008996:	e670      	b.n	800867a <_strtod_l+0x72>
 8008998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	bf08      	it	eq
 80089a0:	46a9      	moveq	r9, r5
 80089a2:	2d10      	cmp	r5, #16
 80089a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80089a6:	eba8 0303 	sub.w	r3, r8, r3
 80089aa:	462c      	mov	r4, r5
 80089ac:	bfa8      	it	ge
 80089ae:	2410      	movge	r4, #16
 80089b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b2:	f7f7 fdab 	bl	800050c <__aeabi_ui2d>
 80089b6:	2d09      	cmp	r5, #9
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	dc13      	bgt.n	80089e6 <_strtod_l+0x3de>
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f43f ae5a 	beq.w	800867a <_strtod_l+0x72>
 80089c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c8:	dd78      	ble.n	8008abc <_strtod_l+0x4b4>
 80089ca:	2b16      	cmp	r3, #22
 80089cc:	dc5f      	bgt.n	8008a8e <_strtod_l+0x486>
 80089ce:	4972      	ldr	r1, [pc, #456]	@ (8008b98 <_strtod_l+0x590>)
 80089d0:	4652      	mov	r2, sl
 80089d2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089d6:	465b      	mov	r3, fp
 80089d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089dc:	f7f7 fe10 	bl	8000600 <__aeabi_dmul>
 80089e0:	4682      	mov	sl, r0
 80089e2:	468b      	mov	fp, r1
 80089e4:	e649      	b.n	800867a <_strtod_l+0x72>
 80089e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008b98 <_strtod_l+0x590>)
 80089e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80089f0:	f7f7 fe06 	bl	8000600 <__aeabi_dmul>
 80089f4:	4682      	mov	sl, r0
 80089f6:	468b      	mov	fp, r1
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7f7 fd87 	bl	800050c <__aeabi_ui2d>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4650      	mov	r0, sl
 8008a04:	4659      	mov	r1, fp
 8008a06:	f7f7 fc45 	bl	8000294 <__adddf3>
 8008a0a:	2d0f      	cmp	r5, #15
 8008a0c:	4682      	mov	sl, r0
 8008a0e:	468b      	mov	fp, r1
 8008a10:	ddd5      	ble.n	80089be <_strtod_l+0x3b6>
 8008a12:	1b2c      	subs	r4, r5, r4
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	441c      	add	r4, r3
 8008a18:	2c00      	cmp	r4, #0
 8008a1a:	f340 8093 	ble.w	8008b44 <_strtod_l+0x53c>
 8008a1e:	f014 030f 	ands.w	r3, r4, #15
 8008a22:	d00a      	beq.n	8008a3a <_strtod_l+0x432>
 8008a24:	495c      	ldr	r1, [pc, #368]	@ (8008b98 <_strtod_l+0x590>)
 8008a26:	4652      	mov	r2, sl
 8008a28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a2c:	465b      	mov	r3, fp
 8008a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a32:	f7f7 fde5 	bl	8000600 <__aeabi_dmul>
 8008a36:	4682      	mov	sl, r0
 8008a38:	468b      	mov	fp, r1
 8008a3a:	f034 040f 	bics.w	r4, r4, #15
 8008a3e:	d073      	beq.n	8008b28 <_strtod_l+0x520>
 8008a40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008a44:	dd49      	ble.n	8008ada <_strtod_l+0x4d2>
 8008a46:	2400      	movs	r4, #0
 8008a48:	46a0      	mov	r8, r4
 8008a4a:	46a1      	mov	r9, r4
 8008a4c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a4e:	2322      	movs	r3, #34	@ 0x22
 8008a50:	9a05      	ldr	r2, [sp, #20]
 8008a52:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008ba0 <_strtod_l+0x598>
 8008a56:	f04f 0a00 	mov.w	sl, #0
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f43f ae0b 	beq.w	800867a <_strtod_l+0x72>
 8008a64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a66:	9805      	ldr	r0, [sp, #20]
 8008a68:	f7ff f93a 	bl	8007ce0 <_Bfree>
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	9805      	ldr	r0, [sp, #20]
 8008a70:	f7ff f936 	bl	8007ce0 <_Bfree>
 8008a74:	4641      	mov	r1, r8
 8008a76:	9805      	ldr	r0, [sp, #20]
 8008a78:	f7ff f932 	bl	8007ce0 <_Bfree>
 8008a7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a7e:	9805      	ldr	r0, [sp, #20]
 8008a80:	f7ff f92e 	bl	8007ce0 <_Bfree>
 8008a84:	4621      	mov	r1, r4
 8008a86:	9805      	ldr	r0, [sp, #20]
 8008a88:	f7ff f92a 	bl	8007ce0 <_Bfree>
 8008a8c:	e5f5      	b.n	800867a <_strtod_l+0x72>
 8008a8e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a94:	4293      	cmp	r3, r2
 8008a96:	dbbc      	blt.n	8008a12 <_strtod_l+0x40a>
 8008a98:	f1c5 050f 	rsb	r5, r5, #15
 8008a9c:	4c3e      	ldr	r4, [pc, #248]	@ (8008b98 <_strtod_l+0x590>)
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	465b      	mov	r3, fp
 8008aa2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aaa:	f7f7 fda9 	bl	8000600 <__aeabi_dmul>
 8008aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab0:	1b5d      	subs	r5, r3, r5
 8008ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008aba:	e78f      	b.n	80089dc <_strtod_l+0x3d4>
 8008abc:	3316      	adds	r3, #22
 8008abe:	dba8      	blt.n	8008a12 <_strtod_l+0x40a>
 8008ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	4659      	mov	r1, fp
 8008ac6:	eba3 0808 	sub.w	r8, r3, r8
 8008aca:	4b33      	ldr	r3, [pc, #204]	@ (8008b98 <_strtod_l+0x590>)
 8008acc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ad0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ad4:	f7f7 febe 	bl	8000854 <__aeabi_ddiv>
 8008ad8:	e782      	b.n	80089e0 <_strtod_l+0x3d8>
 8008ada:	2300      	movs	r3, #0
 8008adc:	1124      	asrs	r4, r4, #4
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	4f2e      	ldr	r7, [pc, #184]	@ (8008b9c <_strtod_l+0x594>)
 8008ae4:	461e      	mov	r6, r3
 8008ae6:	2c01      	cmp	r4, #1
 8008ae8:	dc21      	bgt.n	8008b2e <_strtod_l+0x526>
 8008aea:	b10b      	cbz	r3, 8008af0 <_strtod_l+0x4e8>
 8008aec:	4682      	mov	sl, r0
 8008aee:	468b      	mov	fp, r1
 8008af0:	492a      	ldr	r1, [pc, #168]	@ (8008b9c <_strtod_l+0x594>)
 8008af2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008af6:	4652      	mov	r2, sl
 8008af8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008afc:	465b      	mov	r3, fp
 8008afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b02:	f7f7 fd7d 	bl	8000600 <__aeabi_dmul>
 8008b06:	4b26      	ldr	r3, [pc, #152]	@ (8008ba0 <_strtod_l+0x598>)
 8008b08:	460a      	mov	r2, r1
 8008b0a:	4682      	mov	sl, r0
 8008b0c:	400b      	ands	r3, r1
 8008b0e:	4925      	ldr	r1, [pc, #148]	@ (8008ba4 <_strtod_l+0x59c>)
 8008b10:	428b      	cmp	r3, r1
 8008b12:	d898      	bhi.n	8008a46 <_strtod_l+0x43e>
 8008b14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	bf86      	itte	hi
 8008b1c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008ba8 <_strtod_l+0x5a0>
 8008b20:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9308      	str	r3, [sp, #32]
 8008b2c:	e076      	b.n	8008c1c <_strtod_l+0x614>
 8008b2e:	07e2      	lsls	r2, r4, #31
 8008b30:	d504      	bpl.n	8008b3c <_strtod_l+0x534>
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	f7f7 fd63 	bl	8000600 <__aeabi_dmul>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	1064      	asrs	r4, r4, #1
 8008b40:	3708      	adds	r7, #8
 8008b42:	e7d0      	b.n	8008ae6 <_strtod_l+0x4de>
 8008b44:	d0f0      	beq.n	8008b28 <_strtod_l+0x520>
 8008b46:	4264      	negs	r4, r4
 8008b48:	f014 020f 	ands.w	r2, r4, #15
 8008b4c:	d00a      	beq.n	8008b64 <_strtod_l+0x55c>
 8008b4e:	4b12      	ldr	r3, [pc, #72]	@ (8008b98 <_strtod_l+0x590>)
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fe7a 	bl	8000854 <__aeabi_ddiv>
 8008b60:	4682      	mov	sl, r0
 8008b62:	468b      	mov	fp, r1
 8008b64:	1124      	asrs	r4, r4, #4
 8008b66:	d0df      	beq.n	8008b28 <_strtod_l+0x520>
 8008b68:	2c1f      	cmp	r4, #31
 8008b6a:	dd1f      	ble.n	8008bac <_strtod_l+0x5a4>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	46a0      	mov	r8, r4
 8008b70:	46a1      	mov	r9, r4
 8008b72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b74:	2322      	movs	r3, #34	@ 0x22
 8008b76:	9a05      	ldr	r2, [sp, #20]
 8008b78:	f04f 0a00 	mov.w	sl, #0
 8008b7c:	f04f 0b00 	mov.w	fp, #0
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e76b      	b.n	8008a5c <_strtod_l+0x454>
 8008b84:	0800a99d 	.word	0x0800a99d
 8008b88:	0800ac68 	.word	0x0800ac68
 8008b8c:	0800a995 	.word	0x0800a995
 8008b90:	0800a9cc 	.word	0x0800a9cc
 8008b94:	0800ab05 	.word	0x0800ab05
 8008b98:	0800aba0 	.word	0x0800aba0
 8008b9c:	0800ab78 	.word	0x0800ab78
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	7ca00000 	.word	0x7ca00000
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	f014 0310 	ands.w	r3, r4, #16
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	4ea9      	ldr	r6, [pc, #676]	@ (8008e5c <_strtod_l+0x854>)
 8008bb6:	bf18      	it	ne
 8008bb8:	236a      	movne	r3, #106	@ 0x6a
 8008bba:	9308      	str	r3, [sp, #32]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	07e7      	lsls	r7, r4, #31
 8008bc0:	d504      	bpl.n	8008bcc <_strtod_l+0x5c4>
 8008bc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bc6:	f7f7 fd1b 	bl	8000600 <__aeabi_dmul>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	1064      	asrs	r4, r4, #1
 8008bce:	f106 0608 	add.w	r6, r6, #8
 8008bd2:	d1f4      	bne.n	8008bbe <_strtod_l+0x5b6>
 8008bd4:	b10b      	cbz	r3, 8008bda <_strtod_l+0x5d2>
 8008bd6:	4682      	mov	sl, r0
 8008bd8:	468b      	mov	fp, r1
 8008bda:	9b08      	ldr	r3, [sp, #32]
 8008bdc:	b1b3      	cbz	r3, 8008c0c <_strtod_l+0x604>
 8008bde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008be2:	4659      	mov	r1, fp
 8008be4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd0f      	ble.n	8008c0c <_strtod_l+0x604>
 8008bec:	2b1f      	cmp	r3, #31
 8008bee:	dd56      	ble.n	8008c9e <_strtod_l+0x696>
 8008bf0:	2b34      	cmp	r3, #52	@ 0x34
 8008bf2:	f04f 0a00 	mov.w	sl, #0
 8008bf6:	bfdb      	ittet	le
 8008bf8:	f04f 33ff 	movle.w	r3, #4294967295
 8008bfc:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008c00:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008c04:	4093      	lslle	r3, r2
 8008c06:	bfd8      	it	le
 8008c08:	ea03 0b01 	andle.w	fp, r3, r1
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4650      	mov	r0, sl
 8008c12:	4659      	mov	r1, fp
 8008c14:	f7f7 ff5c 	bl	8000ad0 <__aeabi_dcmpeq>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1a7      	bne.n	8008b6c <_strtod_l+0x564>
 8008c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c1e:	464a      	mov	r2, r9
 8008c20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462b      	mov	r3, r5
 8008c26:	9805      	ldr	r0, [sp, #20]
 8008c28:	f7ff f8c4 	bl	8007db4 <__s2b>
 8008c2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f43f af09 	beq.w	8008a46 <_strtod_l+0x43e>
 8008c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c36:	2400      	movs	r4, #0
 8008c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	eba3 0308 	sub.w	r3, r3, r8
 8008c40:	46a0      	mov	r8, r4
 8008c42:	bfa8      	it	ge
 8008c44:	2300      	movge	r3, #0
 8008c46:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c4c:	9316      	str	r3, [sp, #88]	@ 0x58
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c50:	9805      	ldr	r0, [sp, #20]
 8008c52:	6859      	ldr	r1, [r3, #4]
 8008c54:	f7ff f804 	bl	8007c60 <_Balloc>
 8008c58:	4681      	mov	r9, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aef7 	beq.w	8008a4e <_strtod_l+0x446>
 8008c60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c62:	300c      	adds	r0, #12
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	f103 010c 	add.w	r1, r3, #12
 8008c6a:	3202      	adds	r2, #2
 8008c6c:	0092      	lsls	r2, r2, #2
 8008c6e:	f7fe f93a 	bl	8006ee6 <memcpy>
 8008c72:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c74:	a91b      	add	r1, sp, #108	@ 0x6c
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	ec4b ab10 	vmov	d0, sl, fp
 8008c7c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008c80:	f7ff fbd6 	bl	8008430 <__d2b>
 8008c84:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f aee1 	beq.w	8008a4e <_strtod_l+0x446>
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	9805      	ldr	r0, [sp, #20]
 8008c90:	f7ff f926 	bl	8007ee0 <__i2b>
 8008c94:	4680      	mov	r8, r0
 8008c96:	b948      	cbnz	r0, 8008cac <_strtod_l+0x6a4>
 8008c98:	f04f 0800 	mov.w	r8, #0
 8008c9c:	e6d7      	b.n	8008a4e <_strtod_l+0x446>
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	ea03 0a0a 	and.w	sl, r3, sl
 8008caa:	e7af      	b.n	8008c0c <_strtod_l+0x604>
 8008cac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008cae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	bfa9      	itett	ge
 8008cb4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008cb6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008cb8:	18ef      	addge	r7, r5, r3
 8008cba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008cbc:	bfb8      	it	lt
 8008cbe:	1b5e      	sublt	r6, r3, r5
 8008cc0:	9b08      	ldr	r3, [sp, #32]
 8008cc2:	bfb8      	it	lt
 8008cc4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008cc6:	1aed      	subs	r5, r5, r3
 8008cc8:	4b65      	ldr	r3, [pc, #404]	@ (8008e60 <_strtod_l+0x858>)
 8008cca:	4415      	add	r5, r2
 8008ccc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008cd0:	3d01      	subs	r5, #1
 8008cd2:	429d      	cmp	r5, r3
 8008cd4:	da4f      	bge.n	8008d76 <_strtod_l+0x76e>
 8008cd6:	1b5b      	subs	r3, r3, r5
 8008cd8:	2101      	movs	r1, #1
 8008cda:	2b1f      	cmp	r3, #31
 8008cdc:	eba2 0203 	sub.w	r2, r2, r3
 8008ce0:	dc3d      	bgt.n	8008d5e <_strtod_l+0x756>
 8008ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cec:	18bd      	adds	r5, r7, r2
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	4416      	add	r6, r2
 8008cf2:	42af      	cmp	r7, r5
 8008cf4:	441e      	add	r6, r3
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	bfa8      	it	ge
 8008cfa:	462b      	movge	r3, r5
 8008cfc:	42b3      	cmp	r3, r6
 8008cfe:	bfa8      	it	ge
 8008d00:	4633      	movge	r3, r6
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfc2      	ittt	gt
 8008d06:	1aed      	subgt	r5, r5, r3
 8008d08:	1af6      	subgt	r6, r6, r3
 8008d0a:	1aff      	subgt	r7, r7, r3
 8008d0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dd16      	ble.n	8008d40 <_strtod_l+0x738>
 8008d12:	4641      	mov	r1, r8
 8008d14:	461a      	mov	r2, r3
 8008d16:	9805      	ldr	r0, [sp, #20]
 8008d18:	f7ff f99c 	bl	8008054 <__pow5mult>
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d0ba      	beq.n	8008c98 <_strtod_l+0x690>
 8008d22:	4601      	mov	r1, r0
 8008d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d26:	9805      	ldr	r0, [sp, #20]
 8008d28:	f7ff f8f0 	bl	8007f0c <__multiply>
 8008d2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f43f ae8d 	beq.w	8008a4e <_strtod_l+0x446>
 8008d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d36:	9805      	ldr	r0, [sp, #20]
 8008d38:	f7fe ffd2 	bl	8007ce0 <_Bfree>
 8008d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	dc1d      	bgt.n	8008d80 <_strtod_l+0x778>
 8008d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dd23      	ble.n	8008d92 <_strtod_l+0x78a>
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008d4e:	9805      	ldr	r0, [sp, #20]
 8008d50:	f7ff f980 	bl	8008054 <__pow5mult>
 8008d54:	4681      	mov	r9, r0
 8008d56:	b9e0      	cbnz	r0, 8008d92 <_strtod_l+0x78a>
 8008d58:	f04f 0900 	mov.w	r9, #0
 8008d5c:	e677      	b.n	8008a4e <_strtod_l+0x446>
 8008d5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008d62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008d64:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008d68:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008d6c:	35e2      	adds	r5, #226	@ 0xe2
 8008d6e:	fa01 f305 	lsl.w	r3, r1, r5
 8008d72:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d74:	e7ba      	b.n	8008cec <_strtod_l+0x6e4>
 8008d76:	2300      	movs	r3, #0
 8008d78:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d7e:	e7b5      	b.n	8008cec <_strtod_l+0x6e4>
 8008d80:	462a      	mov	r2, r5
 8008d82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d84:	9805      	ldr	r0, [sp, #20]
 8008d86:	f7ff f9bf 	bl	8008108 <__lshift>
 8008d8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1d9      	bne.n	8008d44 <_strtod_l+0x73c>
 8008d90:	e65d      	b.n	8008a4e <_strtod_l+0x446>
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	dd07      	ble.n	8008da6 <_strtod_l+0x79e>
 8008d96:	4649      	mov	r1, r9
 8008d98:	4632      	mov	r2, r6
 8008d9a:	9805      	ldr	r0, [sp, #20]
 8008d9c:	f7ff f9b4 	bl	8008108 <__lshift>
 8008da0:	4681      	mov	r9, r0
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d0d8      	beq.n	8008d58 <_strtod_l+0x750>
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	dd08      	ble.n	8008dbc <_strtod_l+0x7b4>
 8008daa:	4641      	mov	r1, r8
 8008dac:	463a      	mov	r2, r7
 8008dae:	9805      	ldr	r0, [sp, #20]
 8008db0:	f7ff f9aa 	bl	8008108 <__lshift>
 8008db4:	4680      	mov	r8, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f ae49 	beq.w	8008a4e <_strtod_l+0x446>
 8008dbc:	464a      	mov	r2, r9
 8008dbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dc0:	9805      	ldr	r0, [sp, #20]
 8008dc2:	f7ff fa29 	bl	8008218 <__mdiff>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f43f ae40 	beq.w	8008a4e <_strtod_l+0x446>
 8008dce:	68c3      	ldr	r3, [r0, #12]
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60c3      	str	r3, [r0, #12]
 8008dd8:	f7ff fa02 	bl	80081e0 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	da45      	bge.n	8008e6c <_strtod_l+0x864>
 8008de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de2:	ea53 030a 	orrs.w	r3, r3, sl
 8008de6:	d16b      	bne.n	8008ec0 <_strtod_l+0x8b8>
 8008de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d167      	bne.n	8008ec0 <_strtod_l+0x8b8>
 8008df0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008df4:	0d1b      	lsrs	r3, r3, #20
 8008df6:	051b      	lsls	r3, r3, #20
 8008df8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dfc:	d960      	bls.n	8008ec0 <_strtod_l+0x8b8>
 8008dfe:	6963      	ldr	r3, [r4, #20]
 8008e00:	b913      	cbnz	r3, 8008e08 <_strtod_l+0x800>
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	dd5b      	ble.n	8008ec0 <_strtod_l+0x8b8>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	9805      	ldr	r0, [sp, #20]
 8008e0e:	f7ff f97b 	bl	8008108 <__lshift>
 8008e12:	4641      	mov	r1, r8
 8008e14:	4604      	mov	r4, r0
 8008e16:	f7ff f9e3 	bl	80081e0 <__mcmp>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	dd50      	ble.n	8008ec0 <_strtod_l+0x8b8>
 8008e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e22:	9a08      	ldr	r2, [sp, #32]
 8008e24:	0d1b      	lsrs	r3, r3, #20
 8008e26:	051b      	lsls	r3, r3, #20
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d06a      	beq.n	8008f02 <_strtod_l+0x8fa>
 8008e2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e30:	d867      	bhi.n	8008f02 <_strtod_l+0x8fa>
 8008e32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008e36:	f67f ae9d 	bls.w	8008b74 <_strtod_l+0x56c>
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e64 <_strtod_l+0x85c>)
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	2200      	movs	r2, #0
 8008e42:	f7f7 fbdd 	bl	8000600 <__aeabi_dmul>
 8008e46:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <_strtod_l+0x860>)
 8008e48:	4682      	mov	sl, r0
 8008e4a:	468b      	mov	fp, r1
 8008e4c:	400b      	ands	r3, r1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f47f ae08 	bne.w	8008a64 <_strtod_l+0x45c>
 8008e54:	2322      	movs	r3, #34	@ 0x22
 8008e56:	9a05      	ldr	r2, [sp, #20]
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e603      	b.n	8008a64 <_strtod_l+0x45c>
 8008e5c:	0800ac90 	.word	0x0800ac90
 8008e60:	fffffc02 	.word	0xfffffc02
 8008e64:	39500000 	.word	0x39500000
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008e70:	d165      	bne.n	8008f3e <_strtod_l+0x936>
 8008e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e78:	b35a      	cbz	r2, 8008ed2 <_strtod_l+0x8ca>
 8008e7a:	4a9f      	ldr	r2, [pc, #636]	@ (80090f8 <_strtod_l+0xaf0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d12b      	bne.n	8008ed8 <_strtod_l+0x8d0>
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	4651      	mov	r1, sl
 8008e84:	b303      	cbz	r3, 8008ec8 <_strtod_l+0x8c0>
 8008e86:	465a      	mov	r2, fp
 8008e88:	4b9c      	ldr	r3, [pc, #624]	@ (80090fc <_strtod_l+0xaf4>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e94:	d81b      	bhi.n	8008ece <_strtod_l+0x8c6>
 8008e96:	0d1b      	lsrs	r3, r3, #20
 8008e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d119      	bne.n	8008ed8 <_strtod_l+0x8d0>
 8008ea4:	4b96      	ldr	r3, [pc, #600]	@ (8009100 <_strtod_l+0xaf8>)
 8008ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d102      	bne.n	8008eb2 <_strtod_l+0x8aa>
 8008eac:	3101      	adds	r1, #1
 8008eae:	f43f adce 	beq.w	8008a4e <_strtod_l+0x446>
 8008eb2:	4b92      	ldr	r3, [pc, #584]	@ (80090fc <_strtod_l+0xaf4>)
 8008eb4:	f04f 0a00 	mov.w	sl, #0
 8008eb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008eba:	401a      	ands	r2, r3
 8008ebc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1b9      	bne.n	8008e3a <_strtod_l+0x832>
 8008ec6:	e5cd      	b.n	8008a64 <_strtod_l+0x45c>
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	e7e8      	b.n	8008ea0 <_strtod_l+0x898>
 8008ece:	4613      	mov	r3, r2
 8008ed0:	e7e6      	b.n	8008ea0 <_strtod_l+0x898>
 8008ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ed6:	d0a2      	beq.n	8008e1e <_strtod_l+0x816>
 8008ed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008eda:	b1db      	cbz	r3, 8008f14 <_strtod_l+0x90c>
 8008edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ede:	4213      	tst	r3, r2
 8008ee0:	d0ee      	beq.n	8008ec0 <_strtod_l+0x8b8>
 8008ee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	9a08      	ldr	r2, [sp, #32]
 8008ee8:	4659      	mov	r1, fp
 8008eea:	b1bb      	cbz	r3, 8008f1c <_strtod_l+0x914>
 8008eec:	f7ff fb6e 	bl	80085cc <sulp>
 8008ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ef4:	ec53 2b10 	vmov	r2, r3, d0
 8008ef8:	f7f7 f9cc 	bl	8000294 <__adddf3>
 8008efc:	4682      	mov	sl, r0
 8008efe:	468b      	mov	fp, r1
 8008f00:	e7de      	b.n	8008ec0 <_strtod_l+0x8b8>
 8008f02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008f06:	f04f 3aff 	mov.w	sl, #4294967295
 8008f0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f12:	e7d5      	b.n	8008ec0 <_strtod_l+0x8b8>
 8008f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f16:	ea13 0f0a 	tst.w	r3, sl
 8008f1a:	e7e1      	b.n	8008ee0 <_strtod_l+0x8d8>
 8008f1c:	f7ff fb56 	bl	80085cc <sulp>
 8008f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f24:	ec53 2b10 	vmov	r2, r3, d0
 8008f28:	f7f7 f9b2 	bl	8000290 <__aeabi_dsub>
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	f7f7 fdcc 	bl	8000ad0 <__aeabi_dcmpeq>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d0c1      	beq.n	8008ec0 <_strtod_l+0x8b8>
 8008f3c:	e61a      	b.n	8008b74 <_strtod_l+0x56c>
 8008f3e:	4641      	mov	r1, r8
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7ff facd 	bl	80084e0 <__ratio>
 8008f46:	2200      	movs	r2, #0
 8008f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008f4c:	ec57 6b10 	vmov	r6, r7, d0
 8008f50:	4630      	mov	r0, r6
 8008f52:	4639      	mov	r1, r7
 8008f54:	f7f7 fdd0 	bl	8000af8 <__aeabi_dcmple>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d06f      	beq.n	800903c <_strtod_l+0xa34>
 8008f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d17a      	bne.n	8009058 <_strtod_l+0xa50>
 8008f62:	f1ba 0f00 	cmp.w	sl, #0
 8008f66:	d158      	bne.n	800901a <_strtod_l+0xa12>
 8008f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d15a      	bne.n	8009028 <_strtod_l+0xa20>
 8008f72:	2200      	movs	r2, #0
 8008f74:	4b63      	ldr	r3, [pc, #396]	@ (8009104 <_strtod_l+0xafc>)
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fdb3 	bl	8000ae4 <__aeabi_dcmplt>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d159      	bne.n	8009036 <_strtod_l+0xa2e>
 8008f82:	4630      	mov	r0, r6
 8008f84:	4639      	mov	r1, r7
 8008f86:	2200      	movs	r2, #0
 8008f88:	4b5f      	ldr	r3, [pc, #380]	@ (8009108 <_strtod_l+0xb00>)
 8008f8a:	f7f7 fb39 	bl	8000600 <__aeabi_dmul>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008f96:	9606      	str	r6, [sp, #24]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	4d58      	ldr	r5, [pc, #352]	@ (80090fc <_strtod_l+0xaf4>)
 8008f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa6:	401d      	ands	r5, r3
 8008fa8:	4b58      	ldr	r3, [pc, #352]	@ (800910c <_strtod_l+0xb04>)
 8008faa:	429d      	cmp	r5, r3
 8008fac:	f040 80b2 	bne.w	8009114 <_strtod_l+0xb0c>
 8008fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008fb6:	ec4b ab10 	vmov	d0, sl, fp
 8008fba:	f7ff f9c5 	bl	8008348 <__ulp>
 8008fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fc2:	ec51 0b10 	vmov	r0, r1, d0
 8008fc6:	f7f7 fb1b 	bl	8000600 <__aeabi_dmul>
 8008fca:	4652      	mov	r2, sl
 8008fcc:	465b      	mov	r3, fp
 8008fce:	f7f7 f961 	bl	8000294 <__adddf3>
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4949      	ldr	r1, [pc, #292]	@ (80090fc <_strtod_l+0xaf4>)
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8009110 <_strtod_l+0xb08>)
 8008fda:	4019      	ands	r1, r3
 8008fdc:	4291      	cmp	r1, r2
 8008fde:	d942      	bls.n	8009066 <_strtod_l+0xa5e>
 8008fe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fe2:	4b47      	ldr	r3, [pc, #284]	@ (8009100 <_strtod_l+0xaf8>)
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d103      	bne.n	8008ff0 <_strtod_l+0x9e8>
 8008fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fea:	3301      	adds	r3, #1
 8008fec:	f43f ad2f 	beq.w	8008a4e <_strtod_l+0x446>
 8008ff0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009100 <_strtod_l+0xaf8>
 8008ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ffa:	9805      	ldr	r0, [sp, #20]
 8008ffc:	f7fe fe70 	bl	8007ce0 <_Bfree>
 8009000:	4649      	mov	r1, r9
 8009002:	9805      	ldr	r0, [sp, #20]
 8009004:	f7fe fe6c 	bl	8007ce0 <_Bfree>
 8009008:	4641      	mov	r1, r8
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	f7fe fe68 	bl	8007ce0 <_Bfree>
 8009010:	4621      	mov	r1, r4
 8009012:	9805      	ldr	r0, [sp, #20]
 8009014:	f7fe fe64 	bl	8007ce0 <_Bfree>
 8009018:	e619      	b.n	8008c4e <_strtod_l+0x646>
 800901a:	f1ba 0f01 	cmp.w	sl, #1
 800901e:	d103      	bne.n	8009028 <_strtod_l+0xa20>
 8009020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	f43f ada6 	beq.w	8008b74 <_strtod_l+0x56c>
 8009028:	2600      	movs	r6, #0
 800902a:	4f36      	ldr	r7, [pc, #216]	@ (8009104 <_strtod_l+0xafc>)
 800902c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80090d8 <_strtod_l+0xad0>
 8009030:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009034:	e7b1      	b.n	8008f9a <_strtod_l+0x992>
 8009036:	2600      	movs	r6, #0
 8009038:	4f33      	ldr	r7, [pc, #204]	@ (8009108 <_strtod_l+0xb00>)
 800903a:	e7aa      	b.n	8008f92 <_strtod_l+0x98a>
 800903c:	4b32      	ldr	r3, [pc, #200]	@ (8009108 <_strtod_l+0xb00>)
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 fadc 	bl	8000600 <__aeabi_dmul>
 8009048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d09f      	beq.n	8008f92 <_strtod_l+0x98a>
 8009052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009056:	e7a0      	b.n	8008f9a <_strtod_l+0x992>
 8009058:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80090e0 <_strtod_l+0xad8>
 800905c:	ec57 6b17 	vmov	r6, r7, d7
 8009060:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009064:	e799      	b.n	8008f9a <_strtod_l+0x992>
 8009066:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800906a:	9b08      	ldr	r3, [sp, #32]
 800906c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1c1      	bne.n	8008ff8 <_strtod_l+0x9f0>
 8009074:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009078:	0d1b      	lsrs	r3, r3, #20
 800907a:	051b      	lsls	r3, r3, #20
 800907c:	429d      	cmp	r5, r3
 800907e:	d1bb      	bne.n	8008ff8 <_strtod_l+0x9f0>
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fe1c 	bl	8000cc0 <__aeabi_d2lz>
 8009088:	f7f7 fa8c 	bl	80005a4 <__aeabi_l2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009098:	f7f7 f8fa 	bl	8000290 <__aeabi_dsub>
 800909c:	460b      	mov	r3, r1
 800909e:	4602      	mov	r2, r0
 80090a0:	ea46 060a 	orr.w	r6, r6, sl
 80090a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80090a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090aa:	431e      	orrs	r6, r3
 80090ac:	d06f      	beq.n	800918e <_strtod_l+0xb86>
 80090ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80090e8 <_strtod_l+0xae0>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 fd16 	bl	8000ae4 <__aeabi_dcmplt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f47f acd3 	bne.w	8008a64 <_strtod_l+0x45c>
 80090be:	a30c      	add	r3, pc, #48	@ (adr r3, 80090f0 <_strtod_l+0xae8>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090c8:	f7f7 fd2a 	bl	8000b20 <__aeabi_dcmpgt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d093      	beq.n	8008ff8 <_strtod_l+0x9f0>
 80090d0:	e4c8      	b.n	8008a64 <_strtod_l+0x45c>
 80090d2:	bf00      	nop
 80090d4:	f3af 8000 	nop.w
 80090d8:	00000000 	.word	0x00000000
 80090dc:	bff00000 	.word	0xbff00000
 80090e0:	00000000 	.word	0x00000000
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	94a03595 	.word	0x94a03595
 80090ec:	3fdfffff 	.word	0x3fdfffff
 80090f0:	35afe535 	.word	0x35afe535
 80090f4:	3fe00000 	.word	0x3fe00000
 80090f8:	000fffff 	.word	0x000fffff
 80090fc:	7ff00000 	.word	0x7ff00000
 8009100:	7fefffff 	.word	0x7fefffff
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	3fe00000 	.word	0x3fe00000
 800910c:	7fe00000 	.word	0x7fe00000
 8009110:	7c9fffff 	.word	0x7c9fffff
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	b323      	cbz	r3, 8009162 <_strtod_l+0xb5a>
 8009118:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800911c:	d821      	bhi.n	8009162 <_strtod_l+0xb5a>
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	a327      	add	r3, pc, #156	@ (adr r3, 80091c0 <_strtod_l+0xbb8>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 fce6 	bl	8000af8 <__aeabi_dcmple>
 800912c:	b1a0      	cbz	r0, 8009158 <_strtod_l+0xb50>
 800912e:	4639      	mov	r1, r7
 8009130:	4630      	mov	r0, r6
 8009132:	f7f7 fd3d 	bl	8000bb0 <__aeabi_d2uiz>
 8009136:	2801      	cmp	r0, #1
 8009138:	bf38      	it	cc
 800913a:	2001      	movcc	r0, #1
 800913c:	f7f7 f9e6 	bl	800050c <__aeabi_ui2d>
 8009140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009142:	4606      	mov	r6, r0
 8009144:	460f      	mov	r7, r1
 8009146:	b9fb      	cbnz	r3, 8009188 <_strtod_l+0xb80>
 8009148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800914c:	9014      	str	r0, [sp, #80]	@ 0x50
 800914e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009154:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800915a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800915e:	1b5b      	subs	r3, r3, r5
 8009160:	9311      	str	r3, [sp, #68]	@ 0x44
 8009162:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009166:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800916a:	f7ff f8ed 	bl	8008348 <__ulp>
 800916e:	4650      	mov	r0, sl
 8009170:	4659      	mov	r1, fp
 8009172:	ec53 2b10 	vmov	r2, r3, d0
 8009176:	f7f7 fa43 	bl	8000600 <__aeabi_dmul>
 800917a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800917e:	f7f7 f889 	bl	8000294 <__adddf3>
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	e770      	b.n	800906a <_strtod_l+0xa62>
 8009188:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800918c:	e7e0      	b.n	8009150 <_strtod_l+0xb48>
 800918e:	a30e      	add	r3, pc, #56	@ (adr r3, 80091c8 <_strtod_l+0xbc0>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	f7f7 fca6 	bl	8000ae4 <__aeabi_dcmplt>
 8009198:	e798      	b.n	80090cc <_strtod_l+0xac4>
 800919a:	2300      	movs	r3, #0
 800919c:	930e      	str	r3, [sp, #56]	@ 0x38
 800919e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	f7ff ba6d 	b.w	8008682 <_strtod_l+0x7a>
 80091a8:	2a65      	cmp	r2, #101	@ 0x65
 80091aa:	f43f ab67 	beq.w	800887c <_strtod_l+0x274>
 80091ae:	2a45      	cmp	r2, #69	@ 0x45
 80091b0:	f43f ab64 	beq.w	800887c <_strtod_l+0x274>
 80091b4:	2301      	movs	r3, #1
 80091b6:	f7ff bba0 	b.w	80088fa <_strtod_l+0x2f2>
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w
 80091c0:	ffc00000 	.word	0xffc00000
 80091c4:	41dfffff 	.word	0x41dfffff
 80091c8:	94a03595 	.word	0x94a03595
 80091cc:	3fcfffff 	.word	0x3fcfffff

080091d0 <_strtod_r>:
 80091d0:	4b01      	ldr	r3, [pc, #4]	@ (80091d8 <_strtod_r+0x8>)
 80091d2:	f7ff ba19 	b.w	8008608 <_strtod_l>
 80091d6:	bf00      	nop
 80091d8:	200000e8 	.word	0x200000e8

080091dc <_strtol_l.isra.0>:
 80091dc:	2b24      	cmp	r3, #36	@ 0x24
 80091de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e2:	4686      	mov	lr, r0
 80091e4:	4690      	mov	r8, r2
 80091e6:	d801      	bhi.n	80091ec <_strtol_l.isra.0+0x10>
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d106      	bne.n	80091fa <_strtol_l.isra.0+0x1e>
 80091ec:	f7fd fe40 	bl	8006e70 <__errno>
 80091f0:	2316      	movs	r3, #22
 80091f2:	6003      	str	r3, [r0, #0]
 80091f4:	2000      	movs	r0, #0
 80091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fa:	460d      	mov	r5, r1
 80091fc:	4833      	ldr	r0, [pc, #204]	@ (80092cc <_strtol_l.isra.0+0xf0>)
 80091fe:	462a      	mov	r2, r5
 8009200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009204:	5d06      	ldrb	r6, [r0, r4]
 8009206:	f016 0608 	ands.w	r6, r6, #8
 800920a:	d1f8      	bne.n	80091fe <_strtol_l.isra.0+0x22>
 800920c:	2c2d      	cmp	r4, #45	@ 0x2d
 800920e:	d110      	bne.n	8009232 <_strtol_l.isra.0+0x56>
 8009210:	782c      	ldrb	r4, [r5, #0]
 8009212:	2601      	movs	r6, #1
 8009214:	1c95      	adds	r5, r2, #2
 8009216:	f033 0210 	bics.w	r2, r3, #16
 800921a:	d115      	bne.n	8009248 <_strtol_l.isra.0+0x6c>
 800921c:	2c30      	cmp	r4, #48	@ 0x30
 800921e:	d10d      	bne.n	800923c <_strtol_l.isra.0+0x60>
 8009220:	782a      	ldrb	r2, [r5, #0]
 8009222:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009226:	2a58      	cmp	r2, #88	@ 0x58
 8009228:	d108      	bne.n	800923c <_strtol_l.isra.0+0x60>
 800922a:	786c      	ldrb	r4, [r5, #1]
 800922c:	3502      	adds	r5, #2
 800922e:	2310      	movs	r3, #16
 8009230:	e00a      	b.n	8009248 <_strtol_l.isra.0+0x6c>
 8009232:	2c2b      	cmp	r4, #43	@ 0x2b
 8009234:	bf04      	itt	eq
 8009236:	782c      	ldrbeq	r4, [r5, #0]
 8009238:	1c95      	addeq	r5, r2, #2
 800923a:	e7ec      	b.n	8009216 <_strtol_l.isra.0+0x3a>
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f6      	bne.n	800922e <_strtol_l.isra.0+0x52>
 8009240:	2c30      	cmp	r4, #48	@ 0x30
 8009242:	bf14      	ite	ne
 8009244:	230a      	movne	r3, #10
 8009246:	2308      	moveq	r3, #8
 8009248:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800924c:	2200      	movs	r2, #0
 800924e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009252:	4610      	mov	r0, r2
 8009254:	fbbc f9f3 	udiv	r9, ip, r3
 8009258:	fb03 ca19 	mls	sl, r3, r9, ip
 800925c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009260:	2f09      	cmp	r7, #9
 8009262:	d80f      	bhi.n	8009284 <_strtol_l.isra.0+0xa8>
 8009264:	463c      	mov	r4, r7
 8009266:	42a3      	cmp	r3, r4
 8009268:	dd1b      	ble.n	80092a2 <_strtol_l.isra.0+0xc6>
 800926a:	1c57      	adds	r7, r2, #1
 800926c:	d007      	beq.n	800927e <_strtol_l.isra.0+0xa2>
 800926e:	4581      	cmp	r9, r0
 8009270:	d314      	bcc.n	800929c <_strtol_l.isra.0+0xc0>
 8009272:	d101      	bne.n	8009278 <_strtol_l.isra.0+0x9c>
 8009274:	45a2      	cmp	sl, r4
 8009276:	db11      	blt.n	800929c <_strtol_l.isra.0+0xc0>
 8009278:	fb00 4003 	mla	r0, r0, r3, r4
 800927c:	2201      	movs	r2, #1
 800927e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009282:	e7eb      	b.n	800925c <_strtol_l.isra.0+0x80>
 8009284:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009288:	2f19      	cmp	r7, #25
 800928a:	d801      	bhi.n	8009290 <_strtol_l.isra.0+0xb4>
 800928c:	3c37      	subs	r4, #55	@ 0x37
 800928e:	e7ea      	b.n	8009266 <_strtol_l.isra.0+0x8a>
 8009290:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009294:	2f19      	cmp	r7, #25
 8009296:	d804      	bhi.n	80092a2 <_strtol_l.isra.0+0xc6>
 8009298:	3c57      	subs	r4, #87	@ 0x57
 800929a:	e7e4      	b.n	8009266 <_strtol_l.isra.0+0x8a>
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	e7ed      	b.n	800927e <_strtol_l.isra.0+0xa2>
 80092a2:	1c53      	adds	r3, r2, #1
 80092a4:	d108      	bne.n	80092b8 <_strtol_l.isra.0+0xdc>
 80092a6:	2322      	movs	r3, #34	@ 0x22
 80092a8:	4660      	mov	r0, ip
 80092aa:	f8ce 3000 	str.w	r3, [lr]
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d0a0      	beq.n	80091f6 <_strtol_l.isra.0+0x1a>
 80092b4:	1e69      	subs	r1, r5, #1
 80092b6:	e006      	b.n	80092c6 <_strtol_l.isra.0+0xea>
 80092b8:	b106      	cbz	r6, 80092bc <_strtol_l.isra.0+0xe0>
 80092ba:	4240      	negs	r0, r0
 80092bc:	f1b8 0f00 	cmp.w	r8, #0
 80092c0:	d099      	beq.n	80091f6 <_strtol_l.isra.0+0x1a>
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d1f6      	bne.n	80092b4 <_strtol_l.isra.0+0xd8>
 80092c6:	f8c8 1000 	str.w	r1, [r8]
 80092ca:	e794      	b.n	80091f6 <_strtol_l.isra.0+0x1a>
 80092cc:	0800acb9 	.word	0x0800acb9

080092d0 <_strtol_r>:
 80092d0:	f7ff bf84 	b.w	80091dc <_strtol_l.isra.0>

080092d4 <__ssputs_r>:
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d8:	461f      	mov	r7, r3
 80092da:	688e      	ldr	r6, [r1, #8]
 80092dc:	4682      	mov	sl, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	42be      	cmp	r6, r7
 80092e2:	4690      	mov	r8, r2
 80092e4:	680b      	ldr	r3, [r1, #0]
 80092e6:	d82d      	bhi.n	8009344 <__ssputs_r+0x70>
 80092e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092f0:	d026      	beq.n	8009340 <__ssputs_r+0x6c>
 80092f2:	6965      	ldr	r5, [r4, #20]
 80092f4:	6909      	ldr	r1, [r1, #16]
 80092f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092fa:	eba3 0901 	sub.w	r9, r3, r1
 80092fe:	1c7b      	adds	r3, r7, #1
 8009300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009304:	444b      	add	r3, r9
 8009306:	106d      	asrs	r5, r5, #1
 8009308:	429d      	cmp	r5, r3
 800930a:	bf38      	it	cc
 800930c:	461d      	movcc	r5, r3
 800930e:	0553      	lsls	r3, r2, #21
 8009310:	d527      	bpl.n	8009362 <__ssputs_r+0x8e>
 8009312:	4629      	mov	r1, r5
 8009314:	f7fc fd30 	bl	8005d78 <_malloc_r>
 8009318:	4606      	mov	r6, r0
 800931a:	b360      	cbz	r0, 8009376 <__ssputs_r+0xa2>
 800931c:	464a      	mov	r2, r9
 800931e:	6921      	ldr	r1, [r4, #16]
 8009320:	f7fd fde1 	bl	8006ee6 <memcpy>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800932a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	6126      	str	r6, [r4, #16]
 8009332:	444e      	add	r6, r9
 8009334:	6165      	str	r5, [r4, #20]
 8009336:	eba5 0509 	sub.w	r5, r5, r9
 800933a:	6026      	str	r6, [r4, #0]
 800933c:	463e      	mov	r6, r7
 800933e:	60a5      	str	r5, [r4, #8]
 8009340:	42be      	cmp	r6, r7
 8009342:	d900      	bls.n	8009346 <__ssputs_r+0x72>
 8009344:	463e      	mov	r6, r7
 8009346:	4632      	mov	r2, r6
 8009348:	4641      	mov	r1, r8
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	f000 f9c6 	bl	80096dc <memmove>
 8009350:	68a3      	ldr	r3, [r4, #8]
 8009352:	2000      	movs	r0, #0
 8009354:	1b9b      	subs	r3, r3, r6
 8009356:	60a3      	str	r3, [r4, #8]
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	4433      	add	r3, r6
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009362:	462a      	mov	r2, r5
 8009364:	f000 fd69 	bl	8009e3a <_realloc_r>
 8009368:	4606      	mov	r6, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d1e0      	bne.n	8009330 <__ssputs_r+0x5c>
 800936e:	6921      	ldr	r1, [r4, #16]
 8009370:	4650      	mov	r0, sl
 8009372:	f7fe fc2b 	bl	8007bcc <_free_r>
 8009376:	230c      	movs	r3, #12
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	f8ca 3000 	str.w	r3, [sl]
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009386:	81a3      	strh	r3, [r4, #12]
 8009388:	e7e9      	b.n	800935e <__ssputs_r+0x8a>
	...

0800938c <_svfiprintf_r>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	4698      	mov	r8, r3
 8009392:	898b      	ldrh	r3, [r1, #12]
 8009394:	b09d      	sub	sp, #116	@ 0x74
 8009396:	4607      	mov	r7, r0
 8009398:	061b      	lsls	r3, r3, #24
 800939a:	460d      	mov	r5, r1
 800939c:	4614      	mov	r4, r2
 800939e:	d510      	bpl.n	80093c2 <_svfiprintf_r+0x36>
 80093a0:	690b      	ldr	r3, [r1, #16]
 80093a2:	b973      	cbnz	r3, 80093c2 <_svfiprintf_r+0x36>
 80093a4:	2140      	movs	r1, #64	@ 0x40
 80093a6:	f7fc fce7 	bl	8005d78 <_malloc_r>
 80093aa:	6028      	str	r0, [r5, #0]
 80093ac:	6128      	str	r0, [r5, #16]
 80093ae:	b930      	cbnz	r0, 80093be <_svfiprintf_r+0x32>
 80093b0:	230c      	movs	r3, #12
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b01d      	add	sp, #116	@ 0x74
 80093ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	2340      	movs	r3, #64	@ 0x40
 80093c0:	616b      	str	r3, [r5, #20]
 80093c2:	2300      	movs	r3, #0
 80093c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80093c8:	f04f 0901 	mov.w	r9, #1
 80093cc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009570 <_svfiprintf_r+0x1e4>
 80093d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d2:	2320      	movs	r3, #32
 80093d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093d8:	2330      	movs	r3, #48	@ 0x30
 80093da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093de:	4623      	mov	r3, r4
 80093e0:	469a      	mov	sl, r3
 80093e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e6:	b10a      	cbz	r2, 80093ec <_svfiprintf_r+0x60>
 80093e8:	2a25      	cmp	r2, #37	@ 0x25
 80093ea:	d1f9      	bne.n	80093e0 <_svfiprintf_r+0x54>
 80093ec:	ebba 0b04 	subs.w	fp, sl, r4
 80093f0:	d00b      	beq.n	800940a <_svfiprintf_r+0x7e>
 80093f2:	465b      	mov	r3, fp
 80093f4:	4622      	mov	r2, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff ff6b 	bl	80092d4 <__ssputs_r>
 80093fe:	3001      	adds	r0, #1
 8009400:	f000 80a7 	beq.w	8009552 <_svfiprintf_r+0x1c6>
 8009404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009406:	445a      	add	r2, fp
 8009408:	9209      	str	r2, [sp, #36]	@ 0x24
 800940a:	f89a 3000 	ldrb.w	r3, [sl]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 809f 	beq.w	8009552 <_svfiprintf_r+0x1c6>
 8009414:	2300      	movs	r3, #0
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	f10a 0a01 	add.w	sl, sl, #1
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	9307      	str	r3, [sp, #28]
 8009422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009426:	931a      	str	r3, [sp, #104]	@ 0x68
 8009428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942c:	4654      	mov	r4, sl
 800942e:	2205      	movs	r2, #5
 8009430:	484f      	ldr	r0, [pc, #316]	@ (8009570 <_svfiprintf_r+0x1e4>)
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	f7fd fd48 	bl	8006eca <memchr>
 800943a:	9a04      	ldr	r2, [sp, #16]
 800943c:	b9d8      	cbnz	r0, 8009476 <_svfiprintf_r+0xea>
 800943e:	06d0      	lsls	r0, r2, #27
 8009440:	bf44      	itt	mi
 8009442:	2320      	movmi	r3, #32
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009448:	0711      	lsls	r1, r2, #28
 800944a:	bf44      	itt	mi
 800944c:	232b      	movmi	r3, #43	@ 0x2b
 800944e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009452:	f89a 3000 	ldrb.w	r3, [sl]
 8009456:	2b2a      	cmp	r3, #42	@ 0x2a
 8009458:	d015      	beq.n	8009486 <_svfiprintf_r+0xfa>
 800945a:	9a07      	ldr	r2, [sp, #28]
 800945c:	4654      	mov	r4, sl
 800945e:	2000      	movs	r0, #0
 8009460:	f04f 0c0a 	mov.w	ip, #10
 8009464:	4621      	mov	r1, r4
 8009466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946a:	3b30      	subs	r3, #48	@ 0x30
 800946c:	2b09      	cmp	r3, #9
 800946e:	d94b      	bls.n	8009508 <_svfiprintf_r+0x17c>
 8009470:	b1b0      	cbz	r0, 80094a0 <_svfiprintf_r+0x114>
 8009472:	9207      	str	r2, [sp, #28]
 8009474:	e014      	b.n	80094a0 <_svfiprintf_r+0x114>
 8009476:	eba0 0308 	sub.w	r3, r0, r8
 800947a:	46a2      	mov	sl, r4
 800947c:	fa09 f303 	lsl.w	r3, r9, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	e7d2      	b.n	800942c <_svfiprintf_r+0xa0>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	1d19      	adds	r1, r3, #4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	9103      	str	r1, [sp, #12]
 8009490:	bfbb      	ittet	lt
 8009492:	425b      	neglt	r3, r3
 8009494:	f042 0202 	orrlt.w	r2, r2, #2
 8009498:	9307      	strge	r3, [sp, #28]
 800949a:	9307      	strlt	r3, [sp, #28]
 800949c:	bfb8      	it	lt
 800949e:	9204      	strlt	r2, [sp, #16]
 80094a0:	7823      	ldrb	r3, [r4, #0]
 80094a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80094a4:	d10a      	bne.n	80094bc <_svfiprintf_r+0x130>
 80094a6:	7863      	ldrb	r3, [r4, #1]
 80094a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80094aa:	d132      	bne.n	8009512 <_svfiprintf_r+0x186>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	3402      	adds	r4, #2
 80094b0:	1d1a      	adds	r2, r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094b8:	9203      	str	r2, [sp, #12]
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009580 <_svfiprintf_r+0x1f4>
 80094c0:	2203      	movs	r2, #3
 80094c2:	7821      	ldrb	r1, [r4, #0]
 80094c4:	4650      	mov	r0, sl
 80094c6:	f7fd fd00 	bl	8006eca <memchr>
 80094ca:	b138      	cbz	r0, 80094dc <_svfiprintf_r+0x150>
 80094cc:	eba0 000a 	sub.w	r0, r0, sl
 80094d0:	2240      	movs	r2, #64	@ 0x40
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	3401      	adds	r4, #1
 80094d6:	4082      	lsls	r2, r0
 80094d8:	4313      	orrs	r3, r2
 80094da:	9304      	str	r3, [sp, #16]
 80094dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e0:	2206      	movs	r2, #6
 80094e2:	4824      	ldr	r0, [pc, #144]	@ (8009574 <_svfiprintf_r+0x1e8>)
 80094e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094e8:	f7fd fcef 	bl	8006eca <memchr>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d036      	beq.n	800955e <_svfiprintf_r+0x1d2>
 80094f0:	4b21      	ldr	r3, [pc, #132]	@ (8009578 <_svfiprintf_r+0x1ec>)
 80094f2:	bb1b      	cbnz	r3, 800953c <_svfiprintf_r+0x1b0>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	3307      	adds	r3, #7
 80094f8:	f023 0307 	bic.w	r3, r3, #7
 80094fc:	3308      	adds	r3, #8
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009502:	4433      	add	r3, r6
 8009504:	9309      	str	r3, [sp, #36]	@ 0x24
 8009506:	e76a      	b.n	80093de <_svfiprintf_r+0x52>
 8009508:	fb0c 3202 	mla	r2, ip, r2, r3
 800950c:	460c      	mov	r4, r1
 800950e:	2001      	movs	r0, #1
 8009510:	e7a8      	b.n	8009464 <_svfiprintf_r+0xd8>
 8009512:	2300      	movs	r3, #0
 8009514:	3401      	adds	r4, #1
 8009516:	f04f 0c0a 	mov.w	ip, #10
 800951a:	4619      	mov	r1, r3
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	4620      	mov	r0, r4
 8009520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009524:	3a30      	subs	r2, #48	@ 0x30
 8009526:	2a09      	cmp	r2, #9
 8009528:	d903      	bls.n	8009532 <_svfiprintf_r+0x1a6>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0c6      	beq.n	80094bc <_svfiprintf_r+0x130>
 800952e:	9105      	str	r1, [sp, #20]
 8009530:	e7c4      	b.n	80094bc <_svfiprintf_r+0x130>
 8009532:	fb0c 2101 	mla	r1, ip, r1, r2
 8009536:	4604      	mov	r4, r0
 8009538:	2301      	movs	r3, #1
 800953a:	e7f0      	b.n	800951e <_svfiprintf_r+0x192>
 800953c:	ab03      	add	r3, sp, #12
 800953e:	462a      	mov	r2, r5
 8009540:	a904      	add	r1, sp, #16
 8009542:	4638      	mov	r0, r7
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <_svfiprintf_r+0x1f0>)
 8009548:	f7fc fd40 	bl	8005fcc <_printf_float>
 800954c:	1c42      	adds	r2, r0, #1
 800954e:	4606      	mov	r6, r0
 8009550:	d1d6      	bne.n	8009500 <_svfiprintf_r+0x174>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	065b      	lsls	r3, r3, #25
 8009556:	f53f af2d 	bmi.w	80093b4 <_svfiprintf_r+0x28>
 800955a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800955c:	e72c      	b.n	80093b8 <_svfiprintf_r+0x2c>
 800955e:	ab03      	add	r3, sp, #12
 8009560:	462a      	mov	r2, r5
 8009562:	a904      	add	r1, sp, #16
 8009564:	4638      	mov	r0, r7
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	4b04      	ldr	r3, [pc, #16]	@ (800957c <_svfiprintf_r+0x1f0>)
 800956a:	f7fc ffcb 	bl	8006504 <_printf_i>
 800956e:	e7ed      	b.n	800954c <_svfiprintf_r+0x1c0>
 8009570:	0800aab1 	.word	0x0800aab1
 8009574:	0800aabb 	.word	0x0800aabb
 8009578:	08005fcd 	.word	0x08005fcd
 800957c:	080092d5 	.word	0x080092d5
 8009580:	0800aab7 	.word	0x0800aab7

08009584 <__sflush_r>:
 8009584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	0716      	lsls	r6, r2, #28
 800958e:	4605      	mov	r5, r0
 8009590:	460c      	mov	r4, r1
 8009592:	d454      	bmi.n	800963e <__sflush_r+0xba>
 8009594:	684b      	ldr	r3, [r1, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	dc02      	bgt.n	80095a0 <__sflush_r+0x1c>
 800959a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd48      	ble.n	8009632 <__sflush_r+0xae>
 80095a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d045      	beq.n	8009632 <__sflush_r+0xae>
 80095a6:	2300      	movs	r3, #0
 80095a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095ac:	682f      	ldr	r7, [r5, #0]
 80095ae:	6a21      	ldr	r1, [r4, #32]
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	d030      	beq.n	8009616 <__sflush_r+0x92>
 80095b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	0759      	lsls	r1, r3, #29
 80095ba:	d505      	bpl.n	80095c8 <__sflush_r+0x44>
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	1ad2      	subs	r2, r2, r3
 80095c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095c2:	b10b      	cbz	r3, 80095c8 <__sflush_r+0x44>
 80095c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095c6:	1ad2      	subs	r2, r2, r3
 80095c8:	2300      	movs	r3, #0
 80095ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095cc:	6a21      	ldr	r1, [r4, #32]
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b0      	blx	r6
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	d106      	bne.n	80095e6 <__sflush_r+0x62>
 80095d8:	6829      	ldr	r1, [r5, #0]
 80095da:	291d      	cmp	r1, #29
 80095dc:	d82b      	bhi.n	8009636 <__sflush_r+0xb2>
 80095de:	4a2a      	ldr	r2, [pc, #168]	@ (8009688 <__sflush_r+0x104>)
 80095e0:	40ca      	lsrs	r2, r1
 80095e2:	07d6      	lsls	r6, r2, #31
 80095e4:	d527      	bpl.n	8009636 <__sflush_r+0xb2>
 80095e6:	2200      	movs	r2, #0
 80095e8:	04d9      	lsls	r1, r3, #19
 80095ea:	6062      	str	r2, [r4, #4]
 80095ec:	6922      	ldr	r2, [r4, #16]
 80095ee:	6022      	str	r2, [r4, #0]
 80095f0:	d504      	bpl.n	80095fc <__sflush_r+0x78>
 80095f2:	1c42      	adds	r2, r0, #1
 80095f4:	d101      	bne.n	80095fa <__sflush_r+0x76>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b903      	cbnz	r3, 80095fc <__sflush_r+0x78>
 80095fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80095fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095fe:	602f      	str	r7, [r5, #0]
 8009600:	b1b9      	cbz	r1, 8009632 <__sflush_r+0xae>
 8009602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009606:	4299      	cmp	r1, r3
 8009608:	d002      	beq.n	8009610 <__sflush_r+0x8c>
 800960a:	4628      	mov	r0, r5
 800960c:	f7fe fade 	bl	8007bcc <_free_r>
 8009610:	2300      	movs	r3, #0
 8009612:	6363      	str	r3, [r4, #52]	@ 0x34
 8009614:	e00d      	b.n	8009632 <__sflush_r+0xae>
 8009616:	2301      	movs	r3, #1
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	4602      	mov	r2, r0
 800961e:	1c50      	adds	r0, r2, #1
 8009620:	d1c9      	bne.n	80095b6 <__sflush_r+0x32>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0c6      	beq.n	80095b6 <__sflush_r+0x32>
 8009628:	2b1d      	cmp	r3, #29
 800962a:	d001      	beq.n	8009630 <__sflush_r+0xac>
 800962c:	2b16      	cmp	r3, #22
 800962e:	d11d      	bne.n	800966c <__sflush_r+0xe8>
 8009630:	602f      	str	r7, [r5, #0]
 8009632:	2000      	movs	r0, #0
 8009634:	e021      	b.n	800967a <__sflush_r+0xf6>
 8009636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963a:	b21b      	sxth	r3, r3
 800963c:	e01a      	b.n	8009674 <__sflush_r+0xf0>
 800963e:	690f      	ldr	r7, [r1, #16]
 8009640:	2f00      	cmp	r7, #0
 8009642:	d0f6      	beq.n	8009632 <__sflush_r+0xae>
 8009644:	0793      	lsls	r3, r2, #30
 8009646:	680e      	ldr	r6, [r1, #0]
 8009648:	600f      	str	r7, [r1, #0]
 800964a:	bf0c      	ite	eq
 800964c:	694b      	ldreq	r3, [r1, #20]
 800964e:	2300      	movne	r3, #0
 8009650:	eba6 0807 	sub.w	r8, r6, r7
 8009654:	608b      	str	r3, [r1, #8]
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	ddea      	ble.n	8009632 <__sflush_r+0xae>
 800965c:	4643      	mov	r3, r8
 800965e:	463a      	mov	r2, r7
 8009660:	6a21      	ldr	r1, [r4, #32]
 8009662:	4628      	mov	r0, r5
 8009664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009666:	47b0      	blx	r6
 8009668:	2800      	cmp	r0, #0
 800966a:	dc08      	bgt.n	800967e <__sflush_r+0xfa>
 800966c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967e:	4407      	add	r7, r0
 8009680:	eba8 0800 	sub.w	r8, r8, r0
 8009684:	e7e7      	b.n	8009656 <__sflush_r+0xd2>
 8009686:	bf00      	nop
 8009688:	20400001 	.word	0x20400001

0800968c <_fflush_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	690b      	ldr	r3, [r1, #16]
 8009690:	4605      	mov	r5, r0
 8009692:	460c      	mov	r4, r1
 8009694:	b913      	cbnz	r3, 800969c <_fflush_r+0x10>
 8009696:	2500      	movs	r5, #0
 8009698:	4628      	mov	r0, r5
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	b118      	cbz	r0, 80096a6 <_fflush_r+0x1a>
 800969e:	6a03      	ldr	r3, [r0, #32]
 80096a0:	b90b      	cbnz	r3, 80096a6 <_fflush_r+0x1a>
 80096a2:	f7fd fae7 	bl	8006c74 <__sinit>
 80096a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0f3      	beq.n	8009696 <_fflush_r+0xa>
 80096ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096b0:	07d0      	lsls	r0, r2, #31
 80096b2:	d404      	bmi.n	80096be <_fflush_r+0x32>
 80096b4:	0599      	lsls	r1, r3, #22
 80096b6:	d402      	bmi.n	80096be <_fflush_r+0x32>
 80096b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ba:	f7fd fc04 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 80096be:	4628      	mov	r0, r5
 80096c0:	4621      	mov	r1, r4
 80096c2:	f7ff ff5f 	bl	8009584 <__sflush_r>
 80096c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096c8:	4605      	mov	r5, r0
 80096ca:	07da      	lsls	r2, r3, #31
 80096cc:	d4e4      	bmi.n	8009698 <_fflush_r+0xc>
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	059b      	lsls	r3, r3, #22
 80096d2:	d4e1      	bmi.n	8009698 <_fflush_r+0xc>
 80096d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d6:	f7fd fbf7 	bl	8006ec8 <__retarget_lock_release_recursive>
 80096da:	e7dd      	b.n	8009698 <_fflush_r+0xc>

080096dc <memmove>:
 80096dc:	4288      	cmp	r0, r1
 80096de:	b510      	push	{r4, lr}
 80096e0:	eb01 0402 	add.w	r4, r1, r2
 80096e4:	d902      	bls.n	80096ec <memmove+0x10>
 80096e6:	4284      	cmp	r4, r0
 80096e8:	4623      	mov	r3, r4
 80096ea:	d807      	bhi.n	80096fc <memmove+0x20>
 80096ec:	1e43      	subs	r3, r0, #1
 80096ee:	42a1      	cmp	r1, r4
 80096f0:	d008      	beq.n	8009704 <memmove+0x28>
 80096f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fa:	e7f8      	b.n	80096ee <memmove+0x12>
 80096fc:	4402      	add	r2, r0
 80096fe:	4601      	mov	r1, r0
 8009700:	428a      	cmp	r2, r1
 8009702:	d100      	bne.n	8009706 <memmove+0x2a>
 8009704:	bd10      	pop	{r4, pc}
 8009706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970e:	e7f7      	b.n	8009700 <memmove+0x24>

08009710 <strncmp>:
 8009710:	b510      	push	{r4, lr}
 8009712:	b16a      	cbz	r2, 8009730 <strncmp+0x20>
 8009714:	3901      	subs	r1, #1
 8009716:	1884      	adds	r4, r0, r2
 8009718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009720:	429a      	cmp	r2, r3
 8009722:	d103      	bne.n	800972c <strncmp+0x1c>
 8009724:	42a0      	cmp	r0, r4
 8009726:	d001      	beq.n	800972c <strncmp+0x1c>
 8009728:	2a00      	cmp	r2, #0
 800972a:	d1f5      	bne.n	8009718 <strncmp+0x8>
 800972c:	1ad0      	subs	r0, r2, r3
 800972e:	bd10      	pop	{r4, pc}
 8009730:	4610      	mov	r0, r2
 8009732:	e7fc      	b.n	800972e <strncmp+0x1e>
 8009734:	0000      	movs	r0, r0
	...

08009738 <nan>:
 8009738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009740 <nan+0x8>
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	00000000 	.word	0x00000000
 8009744:	7ff80000 	.word	0x7ff80000

08009748 <__assert_func>:
 8009748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800974a:	4614      	mov	r4, r2
 800974c:	461a      	mov	r2, r3
 800974e:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <__assert_func+0x2c>)
 8009750:	4605      	mov	r5, r0
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68d8      	ldr	r0, [r3, #12]
 8009756:	b14c      	cbz	r4, 800976c <__assert_func+0x24>
 8009758:	4b07      	ldr	r3, [pc, #28]	@ (8009778 <__assert_func+0x30>)
 800975a:	9100      	str	r1, [sp, #0]
 800975c:	4907      	ldr	r1, [pc, #28]	@ (800977c <__assert_func+0x34>)
 800975e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009762:	462b      	mov	r3, r5
 8009764:	f000 fba4 	bl	8009eb0 <fiprintf>
 8009768:	f000 fbb4 	bl	8009ed4 <abort>
 800976c:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <__assert_func+0x38>)
 800976e:	461c      	mov	r4, r3
 8009770:	e7f3      	b.n	800975a <__assert_func+0x12>
 8009772:	bf00      	nop
 8009774:	20000098 	.word	0x20000098
 8009778:	0800aaca 	.word	0x0800aaca
 800977c:	0800aad7 	.word	0x0800aad7
 8009780:	0800ab05 	.word	0x0800ab05

08009784 <_calloc_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	fba1 5402 	umull	r5, r4, r1, r2
 800978a:	b934      	cbnz	r4, 800979a <_calloc_r+0x16>
 800978c:	4629      	mov	r1, r5
 800978e:	f7fc faf3 	bl	8005d78 <_malloc_r>
 8009792:	4606      	mov	r6, r0
 8009794:	b928      	cbnz	r0, 80097a2 <_calloc_r+0x1e>
 8009796:	4630      	mov	r0, r6
 8009798:	bd70      	pop	{r4, r5, r6, pc}
 800979a:	220c      	movs	r2, #12
 800979c:	2600      	movs	r6, #0
 800979e:	6002      	str	r2, [r0, #0]
 80097a0:	e7f9      	b.n	8009796 <_calloc_r+0x12>
 80097a2:	462a      	mov	r2, r5
 80097a4:	4621      	mov	r1, r4
 80097a6:	f7fd fb00 	bl	8006daa <memset>
 80097aa:	e7f4      	b.n	8009796 <_calloc_r+0x12>

080097ac <rshift>:
 80097ac:	6903      	ldr	r3, [r0, #16]
 80097ae:	114a      	asrs	r2, r1, #5
 80097b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097b8:	f100 0414 	add.w	r4, r0, #20
 80097bc:	dd45      	ble.n	800984a <rshift+0x9e>
 80097be:	f011 011f 	ands.w	r1, r1, #31
 80097c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097ca:	d10c      	bne.n	80097e6 <rshift+0x3a>
 80097cc:	f100 0710 	add.w	r7, r0, #16
 80097d0:	4629      	mov	r1, r5
 80097d2:	42b1      	cmp	r1, r6
 80097d4:	d334      	bcc.n	8009840 <rshift+0x94>
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	1eea      	subs	r2, r5, #3
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4296      	cmp	r6, r2
 80097de:	bf38      	it	cc
 80097e0:	2300      	movcc	r3, #0
 80097e2:	4423      	add	r3, r4
 80097e4:	e015      	b.n	8009812 <rshift+0x66>
 80097e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097ea:	f1c1 0820 	rsb	r8, r1, #32
 80097ee:	f105 0e04 	add.w	lr, r5, #4
 80097f2:	46a1      	mov	r9, r4
 80097f4:	40cf      	lsrs	r7, r1
 80097f6:	4576      	cmp	r6, lr
 80097f8:	46f4      	mov	ip, lr
 80097fa:	d815      	bhi.n	8009828 <rshift+0x7c>
 80097fc:	1a9a      	subs	r2, r3, r2
 80097fe:	3501      	adds	r5, #1
 8009800:	0092      	lsls	r2, r2, #2
 8009802:	3a04      	subs	r2, #4
 8009804:	42ae      	cmp	r6, r5
 8009806:	bf38      	it	cc
 8009808:	2200      	movcc	r2, #0
 800980a:	18a3      	adds	r3, r4, r2
 800980c:	50a7      	str	r7, [r4, r2]
 800980e:	b107      	cbz	r7, 8009812 <rshift+0x66>
 8009810:	3304      	adds	r3, #4
 8009812:	1b1a      	subs	r2, r3, r4
 8009814:	42a3      	cmp	r3, r4
 8009816:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800981a:	bf08      	it	eq
 800981c:	2300      	moveq	r3, #0
 800981e:	6102      	str	r2, [r0, #16]
 8009820:	bf08      	it	eq
 8009822:	6143      	streq	r3, [r0, #20]
 8009824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009828:	f8dc c000 	ldr.w	ip, [ip]
 800982c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009830:	ea4c 0707 	orr.w	r7, ip, r7
 8009834:	f849 7b04 	str.w	r7, [r9], #4
 8009838:	f85e 7b04 	ldr.w	r7, [lr], #4
 800983c:	40cf      	lsrs	r7, r1
 800983e:	e7da      	b.n	80097f6 <rshift+0x4a>
 8009840:	f851 cb04 	ldr.w	ip, [r1], #4
 8009844:	f847 cf04 	str.w	ip, [r7, #4]!
 8009848:	e7c3      	b.n	80097d2 <rshift+0x26>
 800984a:	4623      	mov	r3, r4
 800984c:	e7e1      	b.n	8009812 <rshift+0x66>

0800984e <__hexdig_fun>:
 800984e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009852:	2b09      	cmp	r3, #9
 8009854:	d802      	bhi.n	800985c <__hexdig_fun+0xe>
 8009856:	3820      	subs	r0, #32
 8009858:	b2c0      	uxtb	r0, r0
 800985a:	4770      	bx	lr
 800985c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009860:	2b05      	cmp	r3, #5
 8009862:	d801      	bhi.n	8009868 <__hexdig_fun+0x1a>
 8009864:	3847      	subs	r0, #71	@ 0x47
 8009866:	e7f7      	b.n	8009858 <__hexdig_fun+0xa>
 8009868:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800986c:	2b05      	cmp	r3, #5
 800986e:	d801      	bhi.n	8009874 <__hexdig_fun+0x26>
 8009870:	3827      	subs	r0, #39	@ 0x27
 8009872:	e7f1      	b.n	8009858 <__hexdig_fun+0xa>
 8009874:	2000      	movs	r0, #0
 8009876:	4770      	bx	lr

08009878 <__gethex>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	b085      	sub	sp, #20
 800987e:	468a      	mov	sl, r1
 8009880:	4690      	mov	r8, r2
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	680b      	ldr	r3, [r1, #0]
 8009886:	9001      	str	r0, [sp, #4]
 8009888:	1c9c      	adds	r4, r3, #2
 800988a:	46a1      	mov	r9, r4
 800988c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009890:	2830      	cmp	r0, #48	@ 0x30
 8009892:	d0fa      	beq.n	800988a <__gethex+0x12>
 8009894:	eba9 0303 	sub.w	r3, r9, r3
 8009898:	f1a3 0b02 	sub.w	fp, r3, #2
 800989c:	f7ff ffd7 	bl	800984e <__hexdig_fun>
 80098a0:	4605      	mov	r5, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d166      	bne.n	8009974 <__gethex+0xfc>
 80098a6:	2201      	movs	r2, #1
 80098a8:	499e      	ldr	r1, [pc, #632]	@ (8009b24 <__gethex+0x2ac>)
 80098aa:	4648      	mov	r0, r9
 80098ac:	f7ff ff30 	bl	8009710 <strncmp>
 80098b0:	4607      	mov	r7, r0
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d165      	bne.n	8009982 <__gethex+0x10a>
 80098b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098ba:	4626      	mov	r6, r4
 80098bc:	f7ff ffc7 	bl	800984e <__hexdig_fun>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d060      	beq.n	8009986 <__gethex+0x10e>
 80098c4:	4623      	mov	r3, r4
 80098c6:	7818      	ldrb	r0, [r3, #0]
 80098c8:	4699      	mov	r9, r3
 80098ca:	3301      	adds	r3, #1
 80098cc:	2830      	cmp	r0, #48	@ 0x30
 80098ce:	d0fa      	beq.n	80098c6 <__gethex+0x4e>
 80098d0:	f7ff ffbd 	bl	800984e <__hexdig_fun>
 80098d4:	fab0 f580 	clz	r5, r0
 80098d8:	f04f 0b01 	mov.w	fp, #1
 80098dc:	096d      	lsrs	r5, r5, #5
 80098de:	464a      	mov	r2, r9
 80098e0:	4616      	mov	r6, r2
 80098e2:	3201      	adds	r2, #1
 80098e4:	7830      	ldrb	r0, [r6, #0]
 80098e6:	f7ff ffb2 	bl	800984e <__hexdig_fun>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d1f8      	bne.n	80098e0 <__gethex+0x68>
 80098ee:	2201      	movs	r2, #1
 80098f0:	498c      	ldr	r1, [pc, #560]	@ (8009b24 <__gethex+0x2ac>)
 80098f2:	4630      	mov	r0, r6
 80098f4:	f7ff ff0c 	bl	8009710 <strncmp>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d13e      	bne.n	800997a <__gethex+0x102>
 80098fc:	b944      	cbnz	r4, 8009910 <__gethex+0x98>
 80098fe:	1c74      	adds	r4, r6, #1
 8009900:	4622      	mov	r2, r4
 8009902:	4616      	mov	r6, r2
 8009904:	3201      	adds	r2, #1
 8009906:	7830      	ldrb	r0, [r6, #0]
 8009908:	f7ff ffa1 	bl	800984e <__hexdig_fun>
 800990c:	2800      	cmp	r0, #0
 800990e:	d1f8      	bne.n	8009902 <__gethex+0x8a>
 8009910:	1ba4      	subs	r4, r4, r6
 8009912:	00a7      	lsls	r7, r4, #2
 8009914:	7833      	ldrb	r3, [r6, #0]
 8009916:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800991a:	2b50      	cmp	r3, #80	@ 0x50
 800991c:	d13d      	bne.n	800999a <__gethex+0x122>
 800991e:	7873      	ldrb	r3, [r6, #1]
 8009920:	2b2b      	cmp	r3, #43	@ 0x2b
 8009922:	d032      	beq.n	800998a <__gethex+0x112>
 8009924:	2b2d      	cmp	r3, #45	@ 0x2d
 8009926:	d033      	beq.n	8009990 <__gethex+0x118>
 8009928:	1c71      	adds	r1, r6, #1
 800992a:	2400      	movs	r4, #0
 800992c:	7808      	ldrb	r0, [r1, #0]
 800992e:	f7ff ff8e 	bl	800984e <__hexdig_fun>
 8009932:	1e43      	subs	r3, r0, #1
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b18      	cmp	r3, #24
 8009938:	d82f      	bhi.n	800999a <__gethex+0x122>
 800993a:	f1a0 0210 	sub.w	r2, r0, #16
 800993e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009942:	f7ff ff84 	bl	800984e <__hexdig_fun>
 8009946:	f100 3cff 	add.w	ip, r0, #4294967295
 800994a:	230a      	movs	r3, #10
 800994c:	fa5f fc8c 	uxtb.w	ip, ip
 8009950:	f1bc 0f18 	cmp.w	ip, #24
 8009954:	d91e      	bls.n	8009994 <__gethex+0x11c>
 8009956:	b104      	cbz	r4, 800995a <__gethex+0xe2>
 8009958:	4252      	negs	r2, r2
 800995a:	4417      	add	r7, r2
 800995c:	f8ca 1000 	str.w	r1, [sl]
 8009960:	b1ed      	cbz	r5, 800999e <__gethex+0x126>
 8009962:	f1bb 0f00 	cmp.w	fp, #0
 8009966:	bf0c      	ite	eq
 8009968:	2506      	moveq	r5, #6
 800996a:	2500      	movne	r5, #0
 800996c:	4628      	mov	r0, r5
 800996e:	b005      	add	sp, #20
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	2500      	movs	r5, #0
 8009976:	462c      	mov	r4, r5
 8009978:	e7b1      	b.n	80098de <__gethex+0x66>
 800997a:	2c00      	cmp	r4, #0
 800997c:	d1c8      	bne.n	8009910 <__gethex+0x98>
 800997e:	4627      	mov	r7, r4
 8009980:	e7c8      	b.n	8009914 <__gethex+0x9c>
 8009982:	464e      	mov	r6, r9
 8009984:	462f      	mov	r7, r5
 8009986:	2501      	movs	r5, #1
 8009988:	e7c4      	b.n	8009914 <__gethex+0x9c>
 800998a:	2400      	movs	r4, #0
 800998c:	1cb1      	adds	r1, r6, #2
 800998e:	e7cd      	b.n	800992c <__gethex+0xb4>
 8009990:	2401      	movs	r4, #1
 8009992:	e7fb      	b.n	800998c <__gethex+0x114>
 8009994:	fb03 0002 	mla	r0, r3, r2, r0
 8009998:	e7cf      	b.n	800993a <__gethex+0xc2>
 800999a:	4631      	mov	r1, r6
 800999c:	e7de      	b.n	800995c <__gethex+0xe4>
 800999e:	eba6 0309 	sub.w	r3, r6, r9
 80099a2:	4629      	mov	r1, r5
 80099a4:	3b01      	subs	r3, #1
 80099a6:	2b07      	cmp	r3, #7
 80099a8:	dc0a      	bgt.n	80099c0 <__gethex+0x148>
 80099aa:	9801      	ldr	r0, [sp, #4]
 80099ac:	f7fe f958 	bl	8007c60 <_Balloc>
 80099b0:	4604      	mov	r4, r0
 80099b2:	b940      	cbnz	r0, 80099c6 <__gethex+0x14e>
 80099b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b28 <__gethex+0x2b0>)
 80099b6:	4602      	mov	r2, r0
 80099b8:	21e4      	movs	r1, #228	@ 0xe4
 80099ba:	485c      	ldr	r0, [pc, #368]	@ (8009b2c <__gethex+0x2b4>)
 80099bc:	f7ff fec4 	bl	8009748 <__assert_func>
 80099c0:	3101      	adds	r1, #1
 80099c2:	105b      	asrs	r3, r3, #1
 80099c4:	e7ef      	b.n	80099a6 <__gethex+0x12e>
 80099c6:	f100 0a14 	add.w	sl, r0, #20
 80099ca:	2300      	movs	r3, #0
 80099cc:	4655      	mov	r5, sl
 80099ce:	469b      	mov	fp, r3
 80099d0:	45b1      	cmp	r9, r6
 80099d2:	d337      	bcc.n	8009a44 <__gethex+0x1cc>
 80099d4:	f845 bb04 	str.w	fp, [r5], #4
 80099d8:	eba5 050a 	sub.w	r5, r5, sl
 80099dc:	4658      	mov	r0, fp
 80099de:	10ad      	asrs	r5, r5, #2
 80099e0:	6125      	str	r5, [r4, #16]
 80099e2:	016d      	lsls	r5, r5, #5
 80099e4:	f7fe fa30 	bl	8007e48 <__hi0bits>
 80099e8:	f8d8 6000 	ldr.w	r6, [r8]
 80099ec:	1a2d      	subs	r5, r5, r0
 80099ee:	42b5      	cmp	r5, r6
 80099f0:	dd54      	ble.n	8009a9c <__gethex+0x224>
 80099f2:	1bad      	subs	r5, r5, r6
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7fe fdc7 	bl	800858a <__any_on>
 80099fc:	4681      	mov	r9, r0
 80099fe:	b178      	cbz	r0, 8009a20 <__gethex+0x1a8>
 8009a00:	1e6b      	subs	r3, r5, #1
 8009a02:	f04f 0901 	mov.w	r9, #1
 8009a06:	1159      	asrs	r1, r3, #5
 8009a08:	f003 021f 	and.w	r2, r3, #31
 8009a0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a10:	fa09 f202 	lsl.w	r2, r9, r2
 8009a14:	420a      	tst	r2, r1
 8009a16:	d003      	beq.n	8009a20 <__gethex+0x1a8>
 8009a18:	454b      	cmp	r3, r9
 8009a1a:	dc36      	bgt.n	8009a8a <__gethex+0x212>
 8009a1c:	f04f 0902 	mov.w	r9, #2
 8009a20:	442f      	add	r7, r5
 8009a22:	4629      	mov	r1, r5
 8009a24:	4620      	mov	r0, r4
 8009a26:	f7ff fec1 	bl	80097ac <rshift>
 8009a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	da42      	bge.n	8009ab8 <__gethex+0x240>
 8009a32:	4621      	mov	r1, r4
 8009a34:	9801      	ldr	r0, [sp, #4]
 8009a36:	f7fe f953 	bl	8007ce0 <_Bfree>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a3e:	25a3      	movs	r5, #163	@ 0xa3
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	e793      	b.n	800996c <__gethex+0xf4>
 8009a44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a48:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a4a:	d012      	beq.n	8009a72 <__gethex+0x1fa>
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d104      	bne.n	8009a5a <__gethex+0x1e2>
 8009a50:	f845 bb04 	str.w	fp, [r5], #4
 8009a54:	f04f 0b00 	mov.w	fp, #0
 8009a58:	465b      	mov	r3, fp
 8009a5a:	7830      	ldrb	r0, [r6, #0]
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	f7ff fef6 	bl	800984e <__hexdig_fun>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	f000 000f 	and.w	r0, r0, #15
 8009a68:	4098      	lsls	r0, r3
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a70:	e7ae      	b.n	80099d0 <__gethex+0x158>
 8009a72:	45b1      	cmp	r9, r6
 8009a74:	d8ea      	bhi.n	8009a4c <__gethex+0x1d4>
 8009a76:	2201      	movs	r2, #1
 8009a78:	492a      	ldr	r1, [pc, #168]	@ (8009b24 <__gethex+0x2ac>)
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	f7ff fe47 	bl	8009710 <strncmp>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1e1      	bne.n	8009a4c <__gethex+0x1d4>
 8009a88:	e7a2      	b.n	80099d0 <__gethex+0x158>
 8009a8a:	1ea9      	subs	r1, r5, #2
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7fe fd7c 	bl	800858a <__any_on>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0c2      	beq.n	8009a1c <__gethex+0x1a4>
 8009a96:	f04f 0903 	mov.w	r9, #3
 8009a9a:	e7c1      	b.n	8009a20 <__gethex+0x1a8>
 8009a9c:	da09      	bge.n	8009ab2 <__gethex+0x23a>
 8009a9e:	1b75      	subs	r5, r6, r5
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	9801      	ldr	r0, [sp, #4]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	1b7f      	subs	r7, r7, r5
 8009aa8:	f7fe fb2e 	bl	8008108 <__lshift>
 8009aac:	4604      	mov	r4, r0
 8009aae:	f100 0a14 	add.w	sl, r0, #20
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	e7b8      	b.n	8009a2a <__gethex+0x1b2>
 8009ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009abc:	42bd      	cmp	r5, r7
 8009abe:	dd6f      	ble.n	8009ba0 <__gethex+0x328>
 8009ac0:	1bed      	subs	r5, r5, r7
 8009ac2:	42ae      	cmp	r6, r5
 8009ac4:	dc34      	bgt.n	8009b30 <__gethex+0x2b8>
 8009ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d022      	beq.n	8009b14 <__gethex+0x29c>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d024      	beq.n	8009b1c <__gethex+0x2a4>
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d115      	bne.n	8009b02 <__gethex+0x28a>
 8009ad6:	42ae      	cmp	r6, r5
 8009ad8:	d113      	bne.n	8009b02 <__gethex+0x28a>
 8009ada:	2e01      	cmp	r6, #1
 8009adc:	d10b      	bne.n	8009af6 <__gethex+0x27e>
 8009ade:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ae2:	2562      	movs	r5, #98	@ 0x62
 8009ae4:	9a02      	ldr	r2, [sp, #8]
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	2301      	movs	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	f8ca 3000 	str.w	r3, [sl]
 8009af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af2:	601c      	str	r4, [r3, #0]
 8009af4:	e73a      	b.n	800996c <__gethex+0xf4>
 8009af6:	1e71      	subs	r1, r6, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7fe fd46 	bl	800858a <__any_on>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d1ed      	bne.n	8009ade <__gethex+0x266>
 8009b02:	4621      	mov	r1, r4
 8009b04:	9801      	ldr	r0, [sp, #4]
 8009b06:	f7fe f8eb 	bl	8007ce0 <_Bfree>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b0e:	2550      	movs	r5, #80	@ 0x50
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e72b      	b.n	800996c <__gethex+0xf4>
 8009b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f3      	bne.n	8009b02 <__gethex+0x28a>
 8009b1a:	e7e0      	b.n	8009ade <__gethex+0x266>
 8009b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1dd      	bne.n	8009ade <__gethex+0x266>
 8009b22:	e7ee      	b.n	8009b02 <__gethex+0x28a>
 8009b24:	0800aaaf 	.word	0x0800aaaf
 8009b28:	0800aa45 	.word	0x0800aa45
 8009b2c:	0800ab06 	.word	0x0800ab06
 8009b30:	1e6f      	subs	r7, r5, #1
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	d130      	bne.n	8009b9a <__gethex+0x322>
 8009b38:	b127      	cbz	r7, 8009b44 <__gethex+0x2cc>
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fe fd24 	bl	800858a <__any_on>
 8009b42:	4681      	mov	r9, r0
 8009b44:	117a      	asrs	r2, r7, #5
 8009b46:	2301      	movs	r3, #1
 8009b48:	f007 071f 	and.w	r7, r7, #31
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b52:	4620      	mov	r0, r4
 8009b54:	40bb      	lsls	r3, r7
 8009b56:	1b76      	subs	r6, r6, r5
 8009b58:	2502      	movs	r5, #2
 8009b5a:	4213      	tst	r3, r2
 8009b5c:	bf18      	it	ne
 8009b5e:	f049 0902 	orrne.w	r9, r9, #2
 8009b62:	f7ff fe23 	bl	80097ac <rshift>
 8009b66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d047      	beq.n	8009c00 <__gethex+0x388>
 8009b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d015      	beq.n	8009ba4 <__gethex+0x32c>
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d017      	beq.n	8009bac <__gethex+0x334>
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d109      	bne.n	8009b94 <__gethex+0x31c>
 8009b80:	f019 0f02 	tst.w	r9, #2
 8009b84:	d006      	beq.n	8009b94 <__gethex+0x31c>
 8009b86:	f8da 3000 	ldr.w	r3, [sl]
 8009b8a:	ea49 0903 	orr.w	r9, r9, r3
 8009b8e:	f019 0f01 	tst.w	r9, #1
 8009b92:	d10e      	bne.n	8009bb2 <__gethex+0x33a>
 8009b94:	f045 0510 	orr.w	r5, r5, #16
 8009b98:	e032      	b.n	8009c00 <__gethex+0x388>
 8009b9a:	f04f 0901 	mov.w	r9, #1
 8009b9e:	e7d1      	b.n	8009b44 <__gethex+0x2cc>
 8009ba0:	2501      	movs	r5, #1
 8009ba2:	e7e2      	b.n	8009b6a <__gethex+0x2f2>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba6:	f1c3 0301 	rsb	r3, r3, #1
 8009baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <__gethex+0x31c>
 8009bb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bb6:	f104 0314 	add.w	r3, r4, #20
 8009bba:	f04f 0c00 	mov.w	ip, #0
 8009bbe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bc2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009bd0:	d01b      	beq.n	8009c0a <__gethex+0x392>
 8009bd2:	3201      	adds	r2, #1
 8009bd4:	6002      	str	r2, [r0, #0]
 8009bd6:	2d02      	cmp	r5, #2
 8009bd8:	f104 0314 	add.w	r3, r4, #20
 8009bdc:	d13c      	bne.n	8009c58 <__gethex+0x3e0>
 8009bde:	f8d8 2000 	ldr.w	r2, [r8]
 8009be2:	3a01      	subs	r2, #1
 8009be4:	42b2      	cmp	r2, r6
 8009be6:	d109      	bne.n	8009bfc <__gethex+0x384>
 8009be8:	1171      	asrs	r1, r6, #5
 8009bea:	2201      	movs	r2, #1
 8009bec:	f006 061f 	and.w	r6, r6, #31
 8009bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8009bf8:	421e      	tst	r6, r3
 8009bfa:	d13a      	bne.n	8009c72 <__gethex+0x3fa>
 8009bfc:	f045 0520 	orr.w	r5, r5, #32
 8009c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c02:	601c      	str	r4, [r3, #0]
 8009c04:	9b02      	ldr	r3, [sp, #8]
 8009c06:	601f      	str	r7, [r3, #0]
 8009c08:	e6b0      	b.n	800996c <__gethex+0xf4>
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c10:	d8d9      	bhi.n	8009bc6 <__gethex+0x34e>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	459b      	cmp	fp, r3
 8009c16:	db17      	blt.n	8009c48 <__gethex+0x3d0>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	9801      	ldr	r0, [sp, #4]
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f7fe f81f 	bl	8007c60 <_Balloc>
 8009c22:	4681      	mov	r9, r0
 8009c24:	b918      	cbnz	r0, 8009c2e <__gethex+0x3b6>
 8009c26:	4b1a      	ldr	r3, [pc, #104]	@ (8009c90 <__gethex+0x418>)
 8009c28:	4602      	mov	r2, r0
 8009c2a:	2184      	movs	r1, #132	@ 0x84
 8009c2c:	e6c5      	b.n	80099ba <__gethex+0x142>
 8009c2e:	6922      	ldr	r2, [r4, #16]
 8009c30:	f104 010c 	add.w	r1, r4, #12
 8009c34:	300c      	adds	r0, #12
 8009c36:	3202      	adds	r2, #2
 8009c38:	0092      	lsls	r2, r2, #2
 8009c3a:	f7fd f954 	bl	8006ee6 <memcpy>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	464c      	mov	r4, r9
 8009c42:	9801      	ldr	r0, [sp, #4]
 8009c44:	f7fe f84c 	bl	8007ce0 <_Bfree>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c50:	6122      	str	r2, [r4, #16]
 8009c52:	2201      	movs	r2, #1
 8009c54:	615a      	str	r2, [r3, #20]
 8009c56:	e7be      	b.n	8009bd6 <__gethex+0x35e>
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	455a      	cmp	r2, fp
 8009c5c:	dd0b      	ble.n	8009c76 <__gethex+0x3fe>
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff fda3 	bl	80097ac <rshift>
 8009c66:	3701      	adds	r7, #1
 8009c68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c6c:	42bb      	cmp	r3, r7
 8009c6e:	f6ff aee0 	blt.w	8009a32 <__gethex+0x1ba>
 8009c72:	2501      	movs	r5, #1
 8009c74:	e7c2      	b.n	8009bfc <__gethex+0x384>
 8009c76:	f016 061f 	ands.w	r6, r6, #31
 8009c7a:	d0fa      	beq.n	8009c72 <__gethex+0x3fa>
 8009c7c:	4453      	add	r3, sl
 8009c7e:	f1c6 0620 	rsb	r6, r6, #32
 8009c82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c86:	f7fe f8df 	bl	8007e48 <__hi0bits>
 8009c8a:	42b0      	cmp	r0, r6
 8009c8c:	dbe7      	blt.n	8009c5e <__gethex+0x3e6>
 8009c8e:	e7f0      	b.n	8009c72 <__gethex+0x3fa>
 8009c90:	0800aa45 	.word	0x0800aa45

08009c94 <L_shift>:
 8009c94:	f1c2 0208 	rsb	r2, r2, #8
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	b570      	push	{r4, r5, r6, lr}
 8009c9c:	f1c2 0620 	rsb	r6, r2, #32
 8009ca0:	6843      	ldr	r3, [r0, #4]
 8009ca2:	6804      	ldr	r4, [r0, #0]
 8009ca4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ca8:	40d3      	lsrs	r3, r2
 8009caa:	432c      	orrs	r4, r5
 8009cac:	6004      	str	r4, [r0, #0]
 8009cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cb2:	4288      	cmp	r0, r1
 8009cb4:	d3f4      	bcc.n	8009ca0 <L_shift+0xc>
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}

08009cb8 <__match>:
 8009cb8:	6803      	ldr	r3, [r0, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc2:	b914      	cbnz	r4, 8009cca <__match+0x12>
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	bd30      	pop	{r4, r5, pc}
 8009cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009cd2:	2d19      	cmp	r5, #25
 8009cd4:	bf98      	it	ls
 8009cd6:	3220      	addls	r2, #32
 8009cd8:	42a2      	cmp	r2, r4
 8009cda:	d0f0      	beq.n	8009cbe <__match+0x6>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e7f3      	b.n	8009cc8 <__match+0x10>

08009ce0 <__hexnan>:
 8009ce0:	680b      	ldr	r3, [r1, #0]
 8009ce2:	6801      	ldr	r1, [r0, #0]
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	115e      	asrs	r6, r3, #5
 8009cea:	f013 031f 	ands.w	r3, r3, #31
 8009cee:	f04f 0500 	mov.w	r5, #0
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	4690      	mov	r8, r2
 8009cfc:	46ab      	mov	fp, r5
 8009cfe:	bf18      	it	ne
 8009d00:	3604      	addne	r6, #4
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	9502      	str	r5, [sp, #8]
 8009d06:	1f37      	subs	r7, r6, #4
 8009d08:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d0c:	46b9      	mov	r9, r7
 8009d0e:	463c      	mov	r4, r7
 8009d10:	1c4b      	adds	r3, r1, #1
 8009d12:	784a      	ldrb	r2, [r1, #1]
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	b342      	cbz	r2, 8009d6a <__hexnan+0x8a>
 8009d18:	4610      	mov	r0, r2
 8009d1a:	9105      	str	r1, [sp, #20]
 8009d1c:	9204      	str	r2, [sp, #16]
 8009d1e:	f7ff fd96 	bl	800984e <__hexdig_fun>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d151      	bne.n	8009dca <__hexnan+0xea>
 8009d26:	9a04      	ldr	r2, [sp, #16]
 8009d28:	9905      	ldr	r1, [sp, #20]
 8009d2a:	2a20      	cmp	r2, #32
 8009d2c:	d818      	bhi.n	8009d60 <__hexnan+0x80>
 8009d2e:	9b02      	ldr	r3, [sp, #8]
 8009d30:	459b      	cmp	fp, r3
 8009d32:	dd13      	ble.n	8009d5c <__hexnan+0x7c>
 8009d34:	454c      	cmp	r4, r9
 8009d36:	d206      	bcs.n	8009d46 <__hexnan+0x66>
 8009d38:	2d07      	cmp	r5, #7
 8009d3a:	dc04      	bgt.n	8009d46 <__hexnan+0x66>
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4620      	mov	r0, r4
 8009d42:	f7ff ffa7 	bl	8009c94 <L_shift>
 8009d46:	4544      	cmp	r4, r8
 8009d48:	d951      	bls.n	8009dee <__hexnan+0x10e>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f1a4 0904 	sub.w	r9, r4, #4
 8009d50:	f8cd b008 	str.w	fp, [sp, #8]
 8009d54:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d58:	461d      	mov	r5, r3
 8009d5a:	464c      	mov	r4, r9
 8009d5c:	9903      	ldr	r1, [sp, #12]
 8009d5e:	e7d7      	b.n	8009d10 <__hexnan+0x30>
 8009d60:	2a29      	cmp	r2, #41	@ 0x29
 8009d62:	d156      	bne.n	8009e12 <__hexnan+0x132>
 8009d64:	3102      	adds	r1, #2
 8009d66:	f8ca 1000 	str.w	r1, [sl]
 8009d6a:	f1bb 0f00 	cmp.w	fp, #0
 8009d6e:	d050      	beq.n	8009e12 <__hexnan+0x132>
 8009d70:	454c      	cmp	r4, r9
 8009d72:	d206      	bcs.n	8009d82 <__hexnan+0xa2>
 8009d74:	2d07      	cmp	r5, #7
 8009d76:	dc04      	bgt.n	8009d82 <__hexnan+0xa2>
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7ff ff89 	bl	8009c94 <L_shift>
 8009d82:	4544      	cmp	r4, r8
 8009d84:	d935      	bls.n	8009df2 <__hexnan+0x112>
 8009d86:	f1a8 0204 	sub.w	r2, r8, #4
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d90:	429f      	cmp	r7, r3
 8009d92:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d96:	d2f9      	bcs.n	8009d8c <__hexnan+0xac>
 8009d98:	1b3b      	subs	r3, r7, r4
 8009d9a:	3e03      	subs	r6, #3
 8009d9c:	3401      	adds	r4, #1
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	3304      	adds	r3, #4
 8009da6:	42b4      	cmp	r4, r6
 8009da8:	bf88      	it	hi
 8009daa:	2304      	movhi	r3, #4
 8009dac:	4443      	add	r3, r8
 8009dae:	f843 2b04 	str.w	r2, [r3], #4
 8009db2:	429f      	cmp	r7, r3
 8009db4:	d2fb      	bcs.n	8009dae <__hexnan+0xce>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	b91b      	cbnz	r3, 8009dc2 <__hexnan+0xe2>
 8009dba:	4547      	cmp	r7, r8
 8009dbc:	d127      	bne.n	8009e0e <__hexnan+0x12e>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	2005      	movs	r0, #5
 8009dc4:	b007      	add	sp, #28
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	3501      	adds	r5, #1
 8009dcc:	f10b 0b01 	add.w	fp, fp, #1
 8009dd0:	2d08      	cmp	r5, #8
 8009dd2:	dd05      	ble.n	8009de0 <__hexnan+0x100>
 8009dd4:	4544      	cmp	r4, r8
 8009dd6:	d9c1      	bls.n	8009d5c <__hexnan+0x7c>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	3c04      	subs	r4, #4
 8009ddc:	2501      	movs	r5, #1
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	f000 000f 	and.w	r0, r0, #15
 8009de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dea:	6020      	str	r0, [r4, #0]
 8009dec:	e7b6      	b.n	8009d5c <__hexnan+0x7c>
 8009dee:	2508      	movs	r5, #8
 8009df0:	e7b4      	b.n	8009d5c <__hexnan+0x7c>
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0de      	beq.n	8009db6 <__hexnan+0xd6>
 8009df8:	f1c3 0320 	rsb	r3, r3, #32
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	40da      	lsrs	r2, r3
 8009e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e06:	4013      	ands	r3, r2
 8009e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e0c:	e7d3      	b.n	8009db6 <__hexnan+0xd6>
 8009e0e:	3f04      	subs	r7, #4
 8009e10:	e7d1      	b.n	8009db6 <__hexnan+0xd6>
 8009e12:	2004      	movs	r0, #4
 8009e14:	e7d6      	b.n	8009dc4 <__hexnan+0xe4>

08009e16 <__ascii_mbtowc>:
 8009e16:	b082      	sub	sp, #8
 8009e18:	b901      	cbnz	r1, 8009e1c <__ascii_mbtowc+0x6>
 8009e1a:	a901      	add	r1, sp, #4
 8009e1c:	b142      	cbz	r2, 8009e30 <__ascii_mbtowc+0x1a>
 8009e1e:	b14b      	cbz	r3, 8009e34 <__ascii_mbtowc+0x1e>
 8009e20:	7813      	ldrb	r3, [r2, #0]
 8009e22:	600b      	str	r3, [r1, #0]
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	1e10      	subs	r0, r2, #0
 8009e28:	bf18      	it	ne
 8009e2a:	2001      	movne	r0, #1
 8009e2c:	b002      	add	sp, #8
 8009e2e:	4770      	bx	lr
 8009e30:	4610      	mov	r0, r2
 8009e32:	e7fb      	b.n	8009e2c <__ascii_mbtowc+0x16>
 8009e34:	f06f 0001 	mvn.w	r0, #1
 8009e38:	e7f8      	b.n	8009e2c <__ascii_mbtowc+0x16>

08009e3a <_realloc_r>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	4607      	mov	r7, r0
 8009e40:	4614      	mov	r4, r2
 8009e42:	460d      	mov	r5, r1
 8009e44:	b921      	cbnz	r1, 8009e50 <_realloc_r+0x16>
 8009e46:	4611      	mov	r1, r2
 8009e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	f7fb bf94 	b.w	8005d78 <_malloc_r>
 8009e50:	b92a      	cbnz	r2, 8009e5e <_realloc_r+0x24>
 8009e52:	4625      	mov	r5, r4
 8009e54:	f7fd feba 	bl	8007bcc <_free_r>
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5e:	f000 f840 	bl	8009ee2 <_malloc_usable_size_r>
 8009e62:	4284      	cmp	r4, r0
 8009e64:	4606      	mov	r6, r0
 8009e66:	d802      	bhi.n	8009e6e <_realloc_r+0x34>
 8009e68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e6c:	d8f4      	bhi.n	8009e58 <_realloc_r+0x1e>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7fb ff81 	bl	8005d78 <_malloc_r>
 8009e76:	4680      	mov	r8, r0
 8009e78:	b908      	cbnz	r0, 8009e7e <_realloc_r+0x44>
 8009e7a:	4645      	mov	r5, r8
 8009e7c:	e7ec      	b.n	8009e58 <_realloc_r+0x1e>
 8009e7e:	42b4      	cmp	r4, r6
 8009e80:	4622      	mov	r2, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	bf28      	it	cs
 8009e86:	4632      	movcs	r2, r6
 8009e88:	f7fd f82d 	bl	8006ee6 <memcpy>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7fd fe9c 	bl	8007bcc <_free_r>
 8009e94:	e7f1      	b.n	8009e7a <_realloc_r+0x40>

08009e96 <__ascii_wctomb>:
 8009e96:	4603      	mov	r3, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	b141      	cbz	r1, 8009eae <__ascii_wctomb+0x18>
 8009e9c:	2aff      	cmp	r2, #255	@ 0xff
 8009e9e:	d904      	bls.n	8009eaa <__ascii_wctomb+0x14>
 8009ea0:	228a      	movs	r2, #138	@ 0x8a
 8009ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	4770      	bx	lr
 8009eaa:	2001      	movs	r0, #1
 8009eac:	700a      	strb	r2, [r1, #0]
 8009eae:	4770      	bx	lr

08009eb0 <fiprintf>:
 8009eb0:	b40e      	push	{r1, r2, r3}
 8009eb2:	b503      	push	{r0, r1, lr}
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	4805      	ldr	r0, [pc, #20]	@ (8009ed0 <fiprintf+0x20>)
 8009eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	f000 f83f 	bl	8009f44 <_vfiprintf_r>
 8009ec6:	b002      	add	sp, #8
 8009ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ecc:	b003      	add	sp, #12
 8009ece:	4770      	bx	lr
 8009ed0:	20000098 	.word	0x20000098

08009ed4 <abort>:
 8009ed4:	2006      	movs	r0, #6
 8009ed6:	b508      	push	{r3, lr}
 8009ed8:	f000 fa08 	bl	800a2ec <raise>
 8009edc:	2001      	movs	r0, #1
 8009ede:	f7f8 f890 	bl	8002002 <_exit>

08009ee2 <_malloc_usable_size_r>:
 8009ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee6:	1f18      	subs	r0, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bfbc      	itt	lt
 8009eec:	580b      	ldrlt	r3, [r1, r0]
 8009eee:	18c0      	addlt	r0, r0, r3
 8009ef0:	4770      	bx	lr

08009ef2 <__sfputc_r>:
 8009ef2:	6893      	ldr	r3, [r2, #8]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	b410      	push	{r4}
 8009efa:	6093      	str	r3, [r2, #8]
 8009efc:	da08      	bge.n	8009f10 <__sfputc_r+0x1e>
 8009efe:	6994      	ldr	r4, [r2, #24]
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	db01      	blt.n	8009f08 <__sfputc_r+0x16>
 8009f04:	290a      	cmp	r1, #10
 8009f06:	d103      	bne.n	8009f10 <__sfputc_r+0x1e>
 8009f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f0c:	f000 b932 	b.w	800a174 <__swbuf_r>
 8009f10:	6813      	ldr	r3, [r2, #0]
 8009f12:	1c58      	adds	r0, r3, #1
 8009f14:	6010      	str	r0, [r2, #0]
 8009f16:	4608      	mov	r0, r1
 8009f18:	7019      	strb	r1, [r3, #0]
 8009f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <__sfputs_r>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	4614      	mov	r4, r2
 8009f28:	18d5      	adds	r5, r2, r3
 8009f2a:	42ac      	cmp	r4, r5
 8009f2c:	d101      	bne.n	8009f32 <__sfputs_r+0x12>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e007      	b.n	8009f42 <__sfputs_r+0x22>
 8009f32:	463a      	mov	r2, r7
 8009f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff ffda 	bl	8009ef2 <__sfputc_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d1f3      	bne.n	8009f2a <__sfputs_r+0xa>
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f44 <_vfiprintf_r>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	460d      	mov	r5, r1
 8009f4a:	b09d      	sub	sp, #116	@ 0x74
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	4698      	mov	r8, r3
 8009f50:	4606      	mov	r6, r0
 8009f52:	b118      	cbz	r0, 8009f5c <_vfiprintf_r+0x18>
 8009f54:	6a03      	ldr	r3, [r0, #32]
 8009f56:	b90b      	cbnz	r3, 8009f5c <_vfiprintf_r+0x18>
 8009f58:	f7fc fe8c 	bl	8006c74 <__sinit>
 8009f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f5e:	07d9      	lsls	r1, r3, #31
 8009f60:	d405      	bmi.n	8009f6e <_vfiprintf_r+0x2a>
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	059a      	lsls	r2, r3, #22
 8009f66:	d402      	bmi.n	8009f6e <_vfiprintf_r+0x2a>
 8009f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f6a:	f7fc ffac 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 8009f6e:	89ab      	ldrh	r3, [r5, #12]
 8009f70:	071b      	lsls	r3, r3, #28
 8009f72:	d501      	bpl.n	8009f78 <_vfiprintf_r+0x34>
 8009f74:	692b      	ldr	r3, [r5, #16]
 8009f76:	b99b      	cbnz	r3, 8009fa0 <_vfiprintf_r+0x5c>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 f938 	bl	800a1f0 <__swsetup_r>
 8009f80:	b170      	cbz	r0, 8009fa0 <_vfiprintf_r+0x5c>
 8009f82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f84:	07dc      	lsls	r4, r3, #31
 8009f86:	d504      	bpl.n	8009f92 <_vfiprintf_r+0x4e>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	b01d      	add	sp, #116	@ 0x74
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d4f7      	bmi.n	8009f88 <_vfiprintf_r+0x44>
 8009f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f9a:	f7fc ff95 	bl	8006ec8 <__retarget_lock_release_recursive>
 8009f9e:	e7f3      	b.n	8009f88 <_vfiprintf_r+0x44>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa6:	f04f 0901 	mov.w	r9, #1
 8009faa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a160 <_vfiprintf_r+0x21c>
 8009fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fb6:	2330      	movs	r3, #48	@ 0x30
 8009fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	469a      	mov	sl, r3
 8009fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc4:	b10a      	cbz	r2, 8009fca <_vfiprintf_r+0x86>
 8009fc6:	2a25      	cmp	r2, #37	@ 0x25
 8009fc8:	d1f9      	bne.n	8009fbe <_vfiprintf_r+0x7a>
 8009fca:	ebba 0b04 	subs.w	fp, sl, r4
 8009fce:	d00b      	beq.n	8009fe8 <_vfiprintf_r+0xa4>
 8009fd0:	465b      	mov	r3, fp
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ffa2 	bl	8009f20 <__sfputs_r>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f000 80a7 	beq.w	800a130 <_vfiprintf_r+0x1ec>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fe4:	445a      	add	r2, fp
 8009fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 809f 	beq.w	800a130 <_vfiprintf_r+0x1ec>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	f10a 0a01 	add.w	sl, sl, #1
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a004:	931a      	str	r3, [sp, #104]	@ 0x68
 800a006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a00a:	4654      	mov	r4, sl
 800a00c:	2205      	movs	r2, #5
 800a00e:	4854      	ldr	r0, [pc, #336]	@ (800a160 <_vfiprintf_r+0x21c>)
 800a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a014:	f7fc ff59 	bl	8006eca <memchr>
 800a018:	9a04      	ldr	r2, [sp, #16]
 800a01a:	b9d8      	cbnz	r0, 800a054 <_vfiprintf_r+0x110>
 800a01c:	06d1      	lsls	r1, r2, #27
 800a01e:	bf44      	itt	mi
 800a020:	2320      	movmi	r3, #32
 800a022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a026:	0713      	lsls	r3, r2, #28
 800a028:	bf44      	itt	mi
 800a02a:	232b      	movmi	r3, #43	@ 0x2b
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b2a      	cmp	r3, #42	@ 0x2a
 800a036:	d015      	beq.n	800a064 <_vfiprintf_r+0x120>
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	4654      	mov	r4, sl
 800a03c:	2000      	movs	r0, #0
 800a03e:	f04f 0c0a 	mov.w	ip, #10
 800a042:	4621      	mov	r1, r4
 800a044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a048:	3b30      	subs	r3, #48	@ 0x30
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d94b      	bls.n	800a0e6 <_vfiprintf_r+0x1a2>
 800a04e:	b1b0      	cbz	r0, 800a07e <_vfiprintf_r+0x13a>
 800a050:	9207      	str	r2, [sp, #28]
 800a052:	e014      	b.n	800a07e <_vfiprintf_r+0x13a>
 800a054:	eba0 0308 	sub.w	r3, r0, r8
 800a058:	46a2      	mov	sl, r4
 800a05a:	fa09 f303 	lsl.w	r3, r9, r3
 800a05e:	4313      	orrs	r3, r2
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	e7d2      	b.n	800a00a <_vfiprintf_r+0xc6>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	9103      	str	r1, [sp, #12]
 800a06e:	bfbb      	ittet	lt
 800a070:	425b      	neglt	r3, r3
 800a072:	f042 0202 	orrlt.w	r2, r2, #2
 800a076:	9307      	strge	r3, [sp, #28]
 800a078:	9307      	strlt	r3, [sp, #28]
 800a07a:	bfb8      	it	lt
 800a07c:	9204      	strlt	r2, [sp, #16]
 800a07e:	7823      	ldrb	r3, [r4, #0]
 800a080:	2b2e      	cmp	r3, #46	@ 0x2e
 800a082:	d10a      	bne.n	800a09a <_vfiprintf_r+0x156>
 800a084:	7863      	ldrb	r3, [r4, #1]
 800a086:	2b2a      	cmp	r3, #42	@ 0x2a
 800a088:	d132      	bne.n	800a0f0 <_vfiprintf_r+0x1ac>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3402      	adds	r4, #2
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a096:	9203      	str	r2, [sp, #12]
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a170 <_vfiprintf_r+0x22c>
 800a09e:	2203      	movs	r2, #3
 800a0a0:	7821      	ldrb	r1, [r4, #0]
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	f7fc ff11 	bl	8006eca <memchr>
 800a0a8:	b138      	cbz	r0, 800a0ba <_vfiprintf_r+0x176>
 800a0aa:	eba0 000a 	sub.w	r0, r0, sl
 800a0ae:	2240      	movs	r2, #64	@ 0x40
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	3401      	adds	r4, #1
 800a0b4:	4082      	lsls	r2, r0
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0be:	2206      	movs	r2, #6
 800a0c0:	4828      	ldr	r0, [pc, #160]	@ (800a164 <_vfiprintf_r+0x220>)
 800a0c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0c6:	f7fc ff00 	bl	8006eca <memchr>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d03f      	beq.n	800a14e <_vfiprintf_r+0x20a>
 800a0ce:	4b26      	ldr	r3, [pc, #152]	@ (800a168 <_vfiprintf_r+0x224>)
 800a0d0:	bb1b      	cbnz	r3, 800a11a <_vfiprintf_r+0x1d6>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	3307      	adds	r3, #7
 800a0d6:	f023 0307 	bic.w	r3, r3, #7
 800a0da:	3308      	adds	r3, #8
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	443b      	add	r3, r7
 800a0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e4:	e76a      	b.n	8009fbc <_vfiprintf_r+0x78>
 800a0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	e7a8      	b.n	800a042 <_vfiprintf_r+0xfe>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	f04f 0c0a 	mov.w	ip, #10
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a102:	3a30      	subs	r2, #48	@ 0x30
 800a104:	2a09      	cmp	r2, #9
 800a106:	d903      	bls.n	800a110 <_vfiprintf_r+0x1cc>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0c6      	beq.n	800a09a <_vfiprintf_r+0x156>
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	e7c4      	b.n	800a09a <_vfiprintf_r+0x156>
 800a110:	fb0c 2101 	mla	r1, ip, r1, r2
 800a114:	4604      	mov	r4, r0
 800a116:	2301      	movs	r3, #1
 800a118:	e7f0      	b.n	800a0fc <_vfiprintf_r+0x1b8>
 800a11a:	ab03      	add	r3, sp, #12
 800a11c:	462a      	mov	r2, r5
 800a11e:	a904      	add	r1, sp, #16
 800a120:	4630      	mov	r0, r6
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4b11      	ldr	r3, [pc, #68]	@ (800a16c <_vfiprintf_r+0x228>)
 800a126:	f7fb ff51 	bl	8005fcc <_printf_float>
 800a12a:	4607      	mov	r7, r0
 800a12c:	1c78      	adds	r0, r7, #1
 800a12e:	d1d6      	bne.n	800a0de <_vfiprintf_r+0x19a>
 800a130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a132:	07d9      	lsls	r1, r3, #31
 800a134:	d405      	bmi.n	800a142 <_vfiprintf_r+0x1fe>
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	059a      	lsls	r2, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_vfiprintf_r+0x1fe>
 800a13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a13e:	f7fc fec3 	bl	8006ec8 <__retarget_lock_release_recursive>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	065b      	lsls	r3, r3, #25
 800a146:	f53f af1f 	bmi.w	8009f88 <_vfiprintf_r+0x44>
 800a14a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a14c:	e71e      	b.n	8009f8c <_vfiprintf_r+0x48>
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	462a      	mov	r2, r5
 800a152:	a904      	add	r1, sp, #16
 800a154:	4630      	mov	r0, r6
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4b04      	ldr	r3, [pc, #16]	@ (800a16c <_vfiprintf_r+0x228>)
 800a15a:	f7fc f9d3 	bl	8006504 <_printf_i>
 800a15e:	e7e4      	b.n	800a12a <_vfiprintf_r+0x1e6>
 800a160:	0800aab1 	.word	0x0800aab1
 800a164:	0800aabb 	.word	0x0800aabb
 800a168:	08005fcd 	.word	0x08005fcd
 800a16c:	08009f21 	.word	0x08009f21
 800a170:	0800aab7 	.word	0x0800aab7

0800a174 <__swbuf_r>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	460e      	mov	r6, r1
 800a178:	4614      	mov	r4, r2
 800a17a:	4605      	mov	r5, r0
 800a17c:	b118      	cbz	r0, 800a186 <__swbuf_r+0x12>
 800a17e:	6a03      	ldr	r3, [r0, #32]
 800a180:	b90b      	cbnz	r3, 800a186 <__swbuf_r+0x12>
 800a182:	f7fc fd77 	bl	8006c74 <__sinit>
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	071a      	lsls	r2, r3, #28
 800a18e:	d501      	bpl.n	800a194 <__swbuf_r+0x20>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	b943      	cbnz	r3, 800a1a6 <__swbuf_r+0x32>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f82a 	bl	800a1f0 <__swsetup_r>
 800a19c:	b118      	cbz	r0, 800a1a6 <__swbuf_r+0x32>
 800a19e:	f04f 37ff 	mov.w	r7, #4294967295
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	b2f6      	uxtb	r6, r6
 800a1aa:	6922      	ldr	r2, [r4, #16]
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	1a98      	subs	r0, r3, r2
 800a1b0:	6963      	ldr	r3, [r4, #20]
 800a1b2:	4283      	cmp	r3, r0
 800a1b4:	dc05      	bgt.n	800a1c2 <__swbuf_r+0x4e>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f7ff fa67 	bl	800968c <_fflush_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1ed      	bne.n	800a19e <__swbuf_r+0x2a>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	60a3      	str	r3, [r4, #8]
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	701e      	strb	r6, [r3, #0]
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	6962      	ldr	r2, [r4, #20]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d004      	beq.n	800a1e2 <__swbuf_r+0x6e>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d5e1      	bpl.n	800a1a2 <__swbuf_r+0x2e>
 800a1de:	2e0a      	cmp	r6, #10
 800a1e0:	d1df      	bne.n	800a1a2 <__swbuf_r+0x2e>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff fa51 	bl	800968c <_fflush_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0d9      	beq.n	800a1a2 <__swbuf_r+0x2e>
 800a1ee:	e7d6      	b.n	800a19e <__swbuf_r+0x2a>

0800a1f0 <__swsetup_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4b29      	ldr	r3, [pc, #164]	@ (800a298 <__swsetup_r+0xa8>)
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	6818      	ldr	r0, [r3, #0]
 800a1fa:	b118      	cbz	r0, 800a204 <__swsetup_r+0x14>
 800a1fc:	6a03      	ldr	r3, [r0, #32]
 800a1fe:	b90b      	cbnz	r3, 800a204 <__swsetup_r+0x14>
 800a200:	f7fc fd38 	bl	8006c74 <__sinit>
 800a204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a208:	0719      	lsls	r1, r3, #28
 800a20a:	d422      	bmi.n	800a252 <__swsetup_r+0x62>
 800a20c:	06da      	lsls	r2, r3, #27
 800a20e:	d407      	bmi.n	800a220 <__swsetup_r+0x30>
 800a210:	2209      	movs	r2, #9
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	e033      	b.n	800a288 <__swsetup_r+0x98>
 800a220:	0758      	lsls	r0, r3, #29
 800a222:	d512      	bpl.n	800a24a <__swsetup_r+0x5a>
 800a224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a226:	b141      	cbz	r1, 800a23a <__swsetup_r+0x4a>
 800a228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a22c:	4299      	cmp	r1, r3
 800a22e:	d002      	beq.n	800a236 <__swsetup_r+0x46>
 800a230:	4628      	mov	r0, r5
 800a232:	f7fd fccb 	bl	8007bcc <_free_r>
 800a236:	2300      	movs	r3, #0
 800a238:	6363      	str	r3, [r4, #52]	@ 0x34
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	2300      	movs	r3, #0
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0308 	orr.w	r3, r3, #8
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	b94b      	cbnz	r3, 800a26a <__swsetup_r+0x7a>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a260:	d003      	beq.n	800a26a <__swsetup_r+0x7a>
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f000 f882 	bl	800a36e <__smakebuf_r>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	f013 0201 	ands.w	r2, r3, #1
 800a272:	d00a      	beq.n	800a28a <__swsetup_r+0x9a>
 800a274:	2200      	movs	r2, #0
 800a276:	60a2      	str	r2, [r4, #8]
 800a278:	6962      	ldr	r2, [r4, #20]
 800a27a:	4252      	negs	r2, r2
 800a27c:	61a2      	str	r2, [r4, #24]
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	b942      	cbnz	r2, 800a294 <__swsetup_r+0xa4>
 800a282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a286:	d1c5      	bne.n	800a214 <__swsetup_r+0x24>
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	0799      	lsls	r1, r3, #30
 800a28c:	bf58      	it	pl
 800a28e:	6962      	ldrpl	r2, [r4, #20]
 800a290:	60a2      	str	r2, [r4, #8]
 800a292:	e7f4      	b.n	800a27e <__swsetup_r+0x8e>
 800a294:	2000      	movs	r0, #0
 800a296:	e7f7      	b.n	800a288 <__swsetup_r+0x98>
 800a298:	20000098 	.word	0x20000098

0800a29c <_raise_r>:
 800a29c:	291f      	cmp	r1, #31
 800a29e:	b538      	push	{r3, r4, r5, lr}
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	d904      	bls.n	800a2b0 <_raise_r+0x14>
 800a2a6:	2316      	movs	r3, #22
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2b2:	b112      	cbz	r2, 800a2ba <_raise_r+0x1e>
 800a2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2b8:	b94b      	cbnz	r3, 800a2ce <_raise_r+0x32>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f830 	bl	800a320 <_getpid_r>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ca:	f000 b817 	b.w	800a2fc <_kill_r>
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d00a      	beq.n	800a2e8 <_raise_r+0x4c>
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	d103      	bne.n	800a2de <_raise_r+0x42>
 800a2d6:	2316      	movs	r3, #22
 800a2d8:	6003      	str	r3, [r0, #0]
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e7e7      	b.n	800a2ae <_raise_r+0x12>
 800a2de:	2100      	movs	r1, #0
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2e6:	4798      	blx	r3
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e7e0      	b.n	800a2ae <_raise_r+0x12>

0800a2ec <raise>:
 800a2ec:	4b02      	ldr	r3, [pc, #8]	@ (800a2f8 <raise+0xc>)
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f7ff bfd3 	b.w	800a29c <_raise_r>
 800a2f6:	bf00      	nop
 800a2f8:	20000098 	.word	0x20000098

0800a2fc <_kill_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	2300      	movs	r3, #0
 800a300:	4d06      	ldr	r5, [pc, #24]	@ (800a31c <_kill_r+0x20>)
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	4611      	mov	r1, r2
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f7f7 fe6a 	bl	8001fe2 <_kill>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d102      	bne.n	800a318 <_kill_r+0x1c>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	b103      	cbz	r3, 800a318 <_kill_r+0x1c>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	bf00      	nop
 800a31c:	20000924 	.word	0x20000924

0800a320 <_getpid_r>:
 800a320:	f7f7 be57 	b.w	8001fd2 <_getpid>

0800a324 <__swhatbuf_r>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	460c      	mov	r4, r1
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	b096      	sub	sp, #88	@ 0x58
 800a32e:	4615      	mov	r5, r2
 800a330:	2900      	cmp	r1, #0
 800a332:	461e      	mov	r6, r3
 800a334:	da0c      	bge.n	800a350 <__swhatbuf_r+0x2c>
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	2100      	movs	r1, #0
 800a33a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a33e:	bf14      	ite	ne
 800a340:	2340      	movne	r3, #64	@ 0x40
 800a342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a346:	2000      	movs	r0, #0
 800a348:	6031      	str	r1, [r6, #0]
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	b016      	add	sp, #88	@ 0x58
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	466a      	mov	r2, sp
 800a352:	f000 f849 	bl	800a3e8 <_fstat_r>
 800a356:	2800      	cmp	r0, #0
 800a358:	dbed      	blt.n	800a336 <__swhatbuf_r+0x12>
 800a35a:	9901      	ldr	r1, [sp, #4]
 800a35c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a364:	4259      	negs	r1, r3
 800a366:	4159      	adcs	r1, r3
 800a368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a36c:	e7eb      	b.n	800a346 <__swhatbuf_r+0x22>

0800a36e <__smakebuf_r>:
 800a36e:	898b      	ldrh	r3, [r1, #12]
 800a370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a372:	079d      	lsls	r5, r3, #30
 800a374:	4606      	mov	r6, r0
 800a376:	460c      	mov	r4, r1
 800a378:	d507      	bpl.n	800a38a <__smakebuf_r+0x1c>
 800a37a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	2301      	movs	r3, #1
 800a384:	6163      	str	r3, [r4, #20]
 800a386:	b003      	add	sp, #12
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38a:	ab01      	add	r3, sp, #4
 800a38c:	466a      	mov	r2, sp
 800a38e:	f7ff ffc9 	bl	800a324 <__swhatbuf_r>
 800a392:	9f00      	ldr	r7, [sp, #0]
 800a394:	4605      	mov	r5, r0
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7fb fced 	bl	8005d78 <_malloc_r>
 800a39e:	b948      	cbnz	r0, 800a3b4 <__smakebuf_r+0x46>
 800a3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d4ee      	bmi.n	800a386 <__smakebuf_r+0x18>
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	f043 0302 	orr.w	r3, r3, #2
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	e7e2      	b.n	800a37a <__smakebuf_r+0xc>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	6020      	str	r0, [r4, #0]
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3c4:	b15b      	cbz	r3, 800a3de <__smakebuf_r+0x70>
 800a3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f000 f81e 	bl	800a40c <_isatty_r>
 800a3d0:	b128      	cbz	r0, 800a3de <__smakebuf_r+0x70>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f023 0303 	bic.w	r3, r3, #3
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	81a3      	strh	r3, [r4, #12]
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	431d      	orrs	r5, r3
 800a3e2:	81a5      	strh	r5, [r4, #12]
 800a3e4:	e7cf      	b.n	800a386 <__smakebuf_r+0x18>
	...

0800a3e8 <_fstat_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4d06      	ldr	r5, [pc, #24]	@ (800a408 <_fstat_r+0x20>)
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	f7f7 fe54 	bl	80020a2 <_fstat>
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d102      	bne.n	800a404 <_fstat_r+0x1c>
 800a3fe:	682b      	ldr	r3, [r5, #0]
 800a400:	b103      	cbz	r3, 800a404 <_fstat_r+0x1c>
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	bf00      	nop
 800a408:	20000924 	.word	0x20000924

0800a40c <_isatty_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	2300      	movs	r3, #0
 800a410:	4d05      	ldr	r5, [pc, #20]	@ (800a428 <_isatty_r+0x1c>)
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f7 fe53 	bl	80020c2 <_isatty>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_isatty_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_isatty_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20000924 	.word	0x20000924

0800a42c <_init>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr

0800a438 <_fini>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	bf00      	nop
 800a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43e:	bc08      	pop	{r3}
 800a440:	469e      	mov	lr, r3
 800a442:	4770      	bx	lr
